

 [{'role': 'system', 'content': 'You are a software test expert. You are given an original and a patched version of a program. You generate a test input that distinguishes between the two versions. Your generated test fails on the original version and passes on the patched version.'}, {'role': 'user', 'content': '\n"The following is the original version of a program: \n```python\ndef original_func(*args):\n\tglobal_list = []\n\t\n\t\n\tdef solve():\n\t    (x, y, z) = map(int, args[0].strip().split())\n\t    (a, b, c) = map(int, args[1].strip().split())\n\t    ret = 0\n\t    if ((x * b) == (y * a)):\n\t        if ((y == 0) and (b == 0)):\n\t            if ((c * x) == (a * z)):\n\t                ret = (- 1)\n\t            else:\n\t                ret = 0\n\t        elif ((z * b) == (y * c)):\n\t            ret = (- 1)\n\t        else:\n\t            ret = 0\n\t    else:\n\t        ret = 1\n\t    if ((x == y) and (y == a) and (a == b) and (b == 0)):\n\t        if (z == c):\n\t            ret = (- 1)\n\t        else:\n\t            ret = 0\n\t    global_list.append(ret)\n\tsolve()\n\treturn global_list``` \nThe following is the patched version of the program: \n```python\ndef original_func(*args):\n\tglobal_list = []\n\t\n\t\n\tdef solve():\n\t    (x, y, z) = map(int, args[0].strip().split())\n\t    (a, b, c) = map(int, args[1].strip().split())\n\t    ret = 0\n\t    if ((x * b) == (y * a)):\n\t        if ((y == 0) and (b == 0)):\n\t            if ((c * x) == (a * z)):\n\t                ret = (- 1)\n\t            else:\n\t                ret = 0\n\t        elif ((z * b) == (y * c)):\n\t            ret = (- 1)\n\t        else:\n\t            ret = 0\n\t    else:\n\t        ret = 1\n\t    if ((x == y) and (y == a) and (a == b) and (b == 0)):\n\t        if (z == c):\n\t            ret = (- 1)\n\t        else:\n\t            ret = 0\n\t    global_list.append(ret)\n\tsolve()\n\treturn global_list```\nGenerate a test input in Python dict format as follows:\n```python {\'inputdata\': <inputdata>}```\nThe generated test input should be difference exposing, which means ```python original_func(inputdata)!= patched_func(inputdata)```. This means when the test input is given to the original and patched versions, they should produce different outputs. Your output should not contain any explanation or \'\\n\' character.\n\n\nThis is description of the patched program: The code defines a function called patched_func that takes a variable number of arguments. The function creates a global list called global_list and a nested function called solve. The solve function extracts values from the arguments, performs some calculations, and appends the result to the global_list. Finally, the solve function is called and the global_list is returned.\nThis is a sample test input for which both versions produce the same output: ```python {\'inputdata\': \'1 1 0\\r\\n2 2 0\'}```\nGenerate a difference exposing test input as described above.'}]

