# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_2339 as module_0
import builtins as module_1


#@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "x5#-Xf@i"
    var_0 = module_0.func(*str_0)
    assert var_0 == "NO"
    var_1 = module_1.object()
    var_2 = module_0.func(*var_0)
    assert var_2 == "NO"
    var_3 = module_0.func(*var_2)
    assert var_3 == "NO"
    var_4 = module_0.func(*var_0)
    assert var_4 == "NO"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
#def test_case_1():
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "x5#-Xf@i"
    var_0 = module_0.func(*str_0)
    assert var_0 == "NO"
    list_0 = [str_0, var_0, str_0]
    var_1 = module_0.func(*list_0)
    assert var_1 == "NO"
    var_2 = module_0.func(*var_0)
    assert var_2 == "NO"
    var_3 = module_0.func(*list_0)
    assert var_3 == "NO"
    var_4 = module_0.func(*list_0)
    assert var_4 == "NO"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
#    module_0.func(*list_0)


#@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "x5#-L(H@i"
    var_0 = module_0.func(*str_0)
    assert var_0 == "NO"
    bool_0 = False
    list_0 = [str_0, bool_0, str_0]
    var_1 = module_0.func(*list_0)
    assert var_1 == "YES"
    var_2 = module_0.func(*var_0)
    assert var_2 == "NO"
    var_3 = module_0.func(*list_0)
    assert var_3 == "YES"
#    module_0.func()
