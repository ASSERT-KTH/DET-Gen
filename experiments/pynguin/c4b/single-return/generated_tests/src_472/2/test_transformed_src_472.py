# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_472 as module_0
import builtins as module_1


#@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"|\x9a"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == 1
#    module_0.func()


#@pytest.mark.xfail(strict=True)
#def test_case_1():
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "|gdVayNl\t`<\twK/Y"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == 0
    str_1 = "Dj8D|#l&h)9t"
    var_1 = module_0.func(*str_1)
    assert var_1 == 0
#    module_0.func()


def test_case_3():
    str_0 = "&d*\x0c/]K<`B=pXZ"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == 0


#@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "KV"
    list_0 = [str_0, str_0, str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == 0
    bytes_0 = b"\xb6\x9a"
    list_1 = [bytes_0, bytes_0, bytes_0]
    var_1 = module_0.func(*list_1)
    assert var_1 == 1
    str_1 = "D=8&|#l&h)9t"
    var_2 = module_0.func(*str_1)
    assert var_2 == 0
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "dVVayNl\t<\twK/Y"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == 1
    bytes_0 = b"|\x9a"
    list_1 = [bytes_0, bytes_0, bytes_0]
    var_1 = module_0.func(*list_1)
    assert var_1 == 1
    var_2 = module_0.func(*str_0)
    assert var_2 == 0
    object_0 = module_1.object()
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "tVtjKK"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == 1
    bytes_0 = b"|\x9a"
    list_1 = [bytes_0, bytes_0, bytes_0]
    var_1 = module_0.func(*list_1)
    assert var_1 == 1
    str_1 = "D=8&|#l&h)9t"
    var_2 = module_0.func(*str_1)
    assert var_2 == 0
    object_0 = module_1.object()
#    module_0.func()
