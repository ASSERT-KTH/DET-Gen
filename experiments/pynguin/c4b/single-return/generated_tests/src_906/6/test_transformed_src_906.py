# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_906 as module_0
import builtins as module_1


def test_case_0():
    str_0 = '3?\\rg]:v":?Z'
    var_0 = module_0.func(*str_0)
    assert var_0 == ".3"


#@pytest.mark.xfail(strict=True)
#def test_case_1():
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "Vm_Tl8h\\$"
    var_0 = module_0.func(*str_0)
    assert var_0 == ".v"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "^soI"
    var_0 = module_0.func(*str_0)
    assert var_0 == ".^"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "WbUV]<|"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == ".w.b.v.].<.|"
#    module_1.object(**list_0)


#@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "9Y\x0c,H2=n[I5"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == ".9.\x0c.,.h.2.=.n.[.5"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "0lP .L@\tqI3 Mo>B|\x0b"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == ".0.l.p. ...l.@.\t.q.3. .m.>.b.|.\x0b"
#    module_1.object(**var_0)


#@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "jy\x0cnbdl-#_\x0cW2"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == ".j.\x0c.n.b.d.l.-.#._.\x0c.w.2"
    var_1 = module_1.object()
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'v}\x0bdtR"e#\r0Sbr8~v\r~$'
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == '.v.}.\x0b.d.t.r.".#.\r.0.s.b.r.8.~.v.\r.~.$'
    object_0 = module_1.object()
#    module_1.object(**var_0)


#@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "1x/CAXJ<~CF"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == ".1.x./.c.x.j.<.~.c.f"
    object_0 = module_0.func(*list_0)
    assert object_0 == ".1.x./.c.x.j.<.~.c.f"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "/}7KS$V<C&aU|2aDO0"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "./.}.7.k.s.$.v.<.c.&.|.2.d.0"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "X$~'z5`n/uh"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == ".x.$.~.'.z.5.`.n./.h"
    object_0 = module_1.object()
#    module_1.object(**var_0)


#@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "s:$C2K,xaj?:WK|OMh(E"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == ".s.:.$.c.2.k.,.x.j.?.:.w.k.|.m.h.("
    object_0 = module_1.object()
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "Sq\\N~(oXBkT[n\ni:h\tc"
    list_0 = [str_0, str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == ".s.q.\\.n.~.(.x.b.k.t.[.n.\n.:.h.\t.c"
    str_1 = "0lP.L@\tqI3 Mo>B#a"
    list_1 = [str_1, str_1]
    var_1 = module_0.func(*list_1)
    assert var_1 == ".0.l.p...l.@.\t.q.3. .m.>.b.#"
#    module_1.object(**var_1)
