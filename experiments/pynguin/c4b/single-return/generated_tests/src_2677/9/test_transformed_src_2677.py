# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_2677 as module_0
import builtins as module_1


#@pytest.mark.xfail(strict=True)
#def test_case_0():
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, list_0]
#    module_0.func(*list_1)


#@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, list_0]
#    module_0.func(*list_1)


def test_case_3():
    bool_0 = True
    str_0 = "vd>UH"
    list_0 = [str_0, bool_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "ccw"


def test_case_4():
    bool_0 = False
    str_0 = "vd>UH"
    list_0 = [str_0, bool_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "undefined"


#@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    str_0 = "}Q>UH"
    list_0 = [str_0, bool_0, bool_0, str_0, str_0]
#    module_0.func(*list_0)


#@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    str_0 = "hq^!/EcRb:P&&,l\r\n7"
    list_0 = [str_0, bool_0, bool_0, str_0, str_0]
#    module_0.func(*list_0)


def test_case_7():
    bool_0 = True
    str_0 = "<d>UH"
    list_0 = [str_0, bool_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "undefined"


#@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    str_0 = "<=<2\tX@2"
    list_0 = [str_0, bool_0, bool_0, str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "undefined"
    var_1 = module_1.object()
#    module_0.func(*var_1)


#@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    str_0 = "^=<2L12"
    list_0 = [str_0, bool_0, bool_0, str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "ccw"
    list_1 = [var_0, bool_0, var_0, var_0, var_0]
#    module_0.func(*list_1)
