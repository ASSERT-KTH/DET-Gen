# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_2677 as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xb7&\xb9\xd3\xb7\x1e"
    int_0 = -1119
    list_0 = [bytes_0, int_0, int_0, int_0]
    module_0.func(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xcb\x9aJ\xd7\xd7\x19"
    int_0 = -68
    list_0 = [bytes_0, int_0, int_0, int_0]
    module_0.func(*list_0)


def test_case_3():
    str_0 = "^Z>y T-j"
    bool_0 = False
    tuple_0 = (str_0, bool_0, str_0, bool_0)
    var_0 = module_0.func(*tuple_0)
    assert var_0 == "undefined"


def test_case_4():
    str_0 = "^Tvy T-j"
    bool_0 = True
    tuple_0 = (str_0, bool_0, str_0, bool_0)
    var_0 = module_0.func(*tuple_0)
    assert var_0 == "undefined"


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "<T\t:m%ODs?WQ9"
    bool_0 = True
    tuple_0 = (str_0, bool_0, str_0, bool_0)
    module_0.func(*tuple_0)


def test_case_6():
    str_0 = "^T>vy T-j"
    bool_0 = False
    list_0 = [str_0, bool_0, bool_0, str_0, bool_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "undefined"
    bool_1 = True
    tuple_0 = (str_0, bool_1, str_0, bool_1)
    var_1 = module_0.func(*tuple_0)
    assert var_1 == "cw"


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "^T^v\\ T-j"
    bool_0 = False
    list_0 = [str_0, bool_0, bool_0, str_0, bool_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "undefined"
    bool_1 = True
    tuple_0 = (str_0, bool_1, str_0, bool_1)
    var_1 = module_0.func(*tuple_0)
    assert var_1 == "undefined"
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = ">T^v\\GT-j"
    bool_0 = True
    tuple_0 = (str_0, bool_0, str_0, bool_0)
    var_0 = module_0.func(*tuple_0)
    assert var_0 == "ccw"
    str_1 = "2eLX u%F_dBZv`1rko"
    module_0.func(*str_1)
