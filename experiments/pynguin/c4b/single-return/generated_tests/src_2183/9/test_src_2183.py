# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_2183 as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.func(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.func()


def test_case_2():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "YES"


def test_case_3():
    str_0 = "6"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "NO"


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "3"
    str_1 = "4(`M,"
    list_0 = [str_0, str_1]
    module_0.func(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -1296
    list_0 = [int_0, int_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "YES"
    str_0 = "7"
    list_1 = [str_0, str_0]
    module_0.func(*list_1)


def test_case_6():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [bool_0, set_0, set_0, set_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "YES"
    str_0 = "1"
    var_1 = module_1.object()
    str_1 = "4(`M,"
    list_1 = [str_0, str_1]
    var_2 = module_0.func(*list_1)
    assert var_2 == "NO"
