# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_1168 as module_0
import builtins as module_1


#@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == 0
#    module_0.func()


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == 0


#@pytest.mark.xfail(strict=True)
#def test_case_2():
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 116
    list_0 = [int_0, int_0, int_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == 203
    object_0 = module_1.object()
    object_1 = module_1.object()
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0]
    var_1 = module_0.func(*list_1)
    assert var_1 == 0
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x9dt\xf6\xfeWo`\xcf\xd1\xbeH2\xc1"
    var_0 = module_0.func(*bytes_0)
    assert var_0 == 406
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 116
    list_0 = [int_0, int_0, int_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == 203
    var_1 = module_0.func(*list_0)
    assert var_1 == 203
    list_1 = [int_0, var_1, int_0, var_0, int_0, list_0]
    var_2 = module_0.func(*list_1)
    assert var_2 == 203
    var_3 = module_0.func(*list_0)
    assert var_3 == 203
    bool_0 = True
    list_2 = [bool_0, bool_0, var_2]
    var_4 = module_0.func(*list_2)
    assert var_4 == 0
#    module_1.object(*list_2)
