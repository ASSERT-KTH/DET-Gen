# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_2398 as module_0
import builtins as module_1


#@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "f\\Nu9r^*9\x0bQ"
    var_0 = module_0.func(*str_0)
    assert var_0 == ".f"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
#def test_case_1():
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "f\\Nu9r^*9\x0bQ"
    list_0 = [str_0, str_0, str_0, str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == ".f.\\.n.9.r.^.*.9.\x0b.q"
    var_1 = module_1.object()
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "?O Hl5fF5B3a95N2A"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == ".?. .h.l.5.f.f.5.b.3.9.5.n.2"
    str_1 = "f\\Nu9r^*9\x0bQ"
    var_1 = module_0.func(*str_1)
    assert var_1 == ".f"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "fyNu9r^*vtQ"
    var_0 = module_0.func(*str_0)
    assert var_0 == ".f"
    list_0 = [str_0, str_0, str_0, str_0]
    var_1 = module_0.func(*list_0)
    assert var_1 == ".f.n.9.r.^.*.v.t.q"
    var_2 = module_0.func(*list_0)
    assert var_2 == ".f.n.9.r.^.*.v.t.q"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "fiNuwr^G9\x0bQ"
    var_0 = module_0.func(*str_0)
    assert var_0 == ".f"
    list_0 = [str_0, str_0, str_0, str_0]
    var_1 = module_0.func(*var_0)
    assert var_1 == ".."
    var_2 = module_0.func(*list_0)
    assert var_2 == ".f.n.w.r.^.g.9.\x0b.q"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "o/_Y5D(ML{EpPHfY/UP"
    complex_0 = -1941.82497 - 453.8933j
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (complex_0, tuple_0, bool_0)
    list_0 = [str_0, tuple_1, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "./._.5.d.(.m.l.{.p.p.h.f./.p"
    tuple_2 = (var_0, tuple_1, var_0)
    list_1 = [str_0, tuple_2, list_0, list_0, bool_0]
    var_1 = module_0.func(*list_1)
    assert var_1 == "./._.5.d.(.m.l.{.p.p.h.f./.p"
#    module_0.func()
