# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_1824 as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "y0j}P5qu%eTv"
    module_0.func(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "NO"
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_2():
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    str_0 = ')K>G["oZ3bW'
    set_0 = {bool_0, bool_0, str_0, bool_0}
    bool_1 = False
    tuple_0 = (bool_0, bool_0, set_0, bool_1)
    list_0 = [tuple_0, bool_1, bool_0, set_0]
    module_0.func(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x18\xaa\x9a\xd2v\xa4lY4"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "YES"
    list_1 = []
    module_0.func(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    object_0 = module_1.object()
    bool_1 = True
    list_0 = [bool_0, bool_1, bool_1, bool_1, bool_1, bool_1, bool_1, bool_1]
    tuple_0 = (list_0, object_0, object_0)
    var_0 = module_0.func(*tuple_0)
    assert var_0 == "YES"
    module_0.func()
