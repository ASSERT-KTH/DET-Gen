# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_1824 as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 793
    set_0 = {int_0}
    tuple_0 = (int_0, int_0, set_0, int_0)
    list_0 = [tuple_0, int_0]
    module_0.func(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.func()


def test_case_2():
    str_0 = "6c"
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, str_0]
    var_0 = module_0.func(*list_1)
    assert var_0 == "NO"


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b" zNP\x9a\xf3\xb3\xbe\xab\xa5\x94W\x93\xad\x12\xd8\xb5\x0e\xfd\x99"
    list_0 = [bytes_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "YES"
    none_type_0 = None
    list_1 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_1, **list_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "6c"
    bool_0 = True
    bool_1 = True
    list_0 = [bool_1, bool_0, bool_1, bool_1, bool_0, bool_0, bool_0]
    list_1 = [list_0, str_0]
    var_0 = module_0.func(*list_1)
    assert var_0 == "YES"
    tuple_0 = (bool_0, bool_0)
    list_2 = [tuple_0, bool_0]
    var_1 = module_0.func(*list_2)
    assert var_1 == "NO"
    var_2 = module_0.func(*str_0)
    assert var_2 == "NO"
    var_3 = module_1.object()
    module_0.func()
