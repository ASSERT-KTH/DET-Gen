# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_1529 as module_0
import builtins as module_1


#@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '~p]08K=T7<H8"Ir{2`[^'
    var_0 = module_0.func(*str_0)
    assert var_0 == "~"
    var_1 = module_0.func(*str_0)
    assert var_1 == "~"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
#def test_case_1():
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
#    module_0.func(*list_1)


#@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "De"
    var_0 = module_0.func(*str_0)
    assert var_0 == "d"
    object_0 = module_1.object()
    list_0 = [str_0, var_0, var_0, var_0]
    var_1 = module_0.func(*list_0)
    assert var_1 == "De"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "jM"
    list_0 = [str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "Jm"
    var_1 = module_0.func(*str_0)
    assert var_1 == "J"
    none_type_0 = None
#    module_0.func(*none_type_0)


#@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "efN"
    list_0 = [str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "efN"
    list_1 = [list_0, list_0]
#    module_0.func(*list_1)


#@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "@>\t ST) ,"
    var_0 = module_0.func(*str_0)
    assert var_0 == "@"
    object_0 = module_1.object()
    list_0 = [str_0, var_0, var_0, var_0]
    var_1 = module_0.func(*list_0)
    assert var_1 == "@>\t st) ,"
#    module_0.func()
