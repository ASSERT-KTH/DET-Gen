# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_1438 as module_0
import builtins as module_1


#@pytest.mark.xfail(strict=True)
#def test_case_0():
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "x!&vA<"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "x!&vA<"
#    module_1.object(**var_0)


#@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ":x!&<"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == ":x!&<"
    var_1 = module_0.func(*list_0)
    assert var_1 == ":x!&<"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "x!&vA<"
    var_0 = module_0.func(*str_0)
    assert var_0 == "X"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ";:O}.N\\`/B}"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == ";:o}.n\\`/b}"
    var_1 = module_0.func(*var_0)
    assert var_1 == ";"
    var_2 = module_0.func(*var_1)
    assert var_2 == ";"
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "x!&A"
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "X!&A"
#    module_1.object(*var_0, **var_0)


#@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "I _tZk#\\fLNe\tz("
    list_0 = [str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "i _tZk#\\fLNe\tz("
    var_1 = module_0.func(*var_0)
    assert var_1 == "I"
    var_2 = module_0.func(*var_1)
    assert var_2 == "i"
#    module_0.func()
