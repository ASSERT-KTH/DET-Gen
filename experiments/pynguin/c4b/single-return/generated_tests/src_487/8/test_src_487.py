# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_487 as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xff\xe2\xed\xd0u\x87\x88"
    list_0 = [bytes_0, bytes_0]
    module_0.func(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.func(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "xTQc??e>#tp9k?ai6OS`"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "xTQc??e>#tp9k?ai6OS`"
    var_1 = module_0.func(*var_0)
    assert var_1 == "X"
    var_2 = module_0.func(*var_1)
    assert var_2 == "x"
    var_3 = module_0.func(*var_0)
    assert var_3 == "X"
    var_4 = module_0.func(*list_0)
    assert var_4 == "xTQc??e>#tp9k?ai6OS`"
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "-/<j$s~V"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "-/<j$s~V"
    var_1 = module_0.func(*list_0)
    assert var_1 == "-/<j$s~V"
    var_2 = module_0.func(*list_0)
    assert var_2 == "-/<j$s~V"
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "xTQc??e>#tp9k?ai6OS`"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "xTQc??e>#tp9k?ai6OS`"
    var_1 = module_0.func(*var_0)
    assert var_1 == "X"
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "xTQc??e>#tp9k?ai6OS`"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "xTQc??e>#tp9k?ai6OS`"
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "lG"
    list_0 = [str_0, str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    assert var_0 == "Lg"
    object_0 = module_1.object()
    var_1 = module_0.func(*var_0)
    assert var_1 == "l"
    module_0.func()
