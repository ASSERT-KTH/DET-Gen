# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_1676 as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [bool_0, tuple_0, bool_0, tuple_0]
    var_0 = module_0.func(*list_0)


#@pytest.mark.xfail(strict=True)
#def test_case_1():
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xe7\xf9M"
    float_0 = 346.3
    list_0 = [float_0, bytes_0]
    var_0 = module_0.func(*list_0)
#    module_0.func()


def test_case_3():
    bytes_0 = b""
    float_0 = -4059.0
    list_0 = [float_0, bytes_0]
    var_0 = module_0.func(*list_0)


def test_case_4():
    bytes_0 = b"\x00\x05"
    float_0 = -4027.9746175209825
    list_0 = [float_0, bytes_0]
    var_0 = module_0.func(*list_0)


#@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b""
    float_0 = 346.3
    list_0 = [float_0, bytes_0]
#    module_0.func(*list_0)


#@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x04"
    bool_0 = True
    list_0 = [bool_0, bytes_0]
    var_0 = module_0.func(*list_0)
#    module_0.func()


def test_case_7():
    bytes_0 = b"\x04"
    bool_0 = False
    list_0 = [bool_0, bytes_0]
    var_0 = module_0.func(*list_0)
    object_0 = module_1.object()


#@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 7
    list_0 = [int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0]
    list_1 = [int_0, list_0]
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    list_2 = [bool_0, tuple_0, tuple_0]
    var_0 = module_0.func(*list_1)
    var_1 = module_0.func(*list_2)
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 28
    list_0 = [int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0]
    list_1 = [int_0, list_0]
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    list_2 = [bool_0, tuple_0, tuple_0]
    var_0 = module_0.func(*list_1)
    var_1 = module_0.func(*list_2)
#    module_0.func()
