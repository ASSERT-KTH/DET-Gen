# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_1676 as module_0
import builtins as module_1


#@pytest.mark.xfail(strict=True)
#def test_case_0():
#    module_0.func()


#@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    list_0 = []
    list_1 = [bool_0, list_0, list_0]
#    module_0.func(*list_1)


def test_case_2():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [bool_0, list_0, bool_0, list_0]
    var_0 = module_0.func(*list_1)


def test_case_3():
    bool_0 = False
    list_0 = []
    list_1 = [bool_0, list_0, list_0]
    var_0 = module_0.func(*list_1)


#@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 2274.3
    dict_0 = {}
    list_0 = [float_0, dict_0, float_0, float_0]
#    module_0.func(*list_0)


#@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"P\x15x\xb2{"
    float_0 = -776.388489
    set_0 = {bytes_0, bytes_0, bytes_0, float_0}
    var_0 = module_0.func(*set_0)
    bool_0 = False
    tuple_0 = ()
    list_0 = [bool_0, tuple_0, bool_0, bool_0, tuple_0]
    var_1 = module_0.func(*list_0)
    object_0 = module_1.object()
    list_1 = []
#    module_0.func(*list_1)


def test_case_6():
    bool_0 = True
    bytes_0 = b"\x0c\x02"
    list_0 = [bool_0, bytes_0, bytes_0]
    var_0 = module_0.func(*list_0)


#@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    bytes_0 = b"\x07"
    set_0 = {bool_0, bytes_0, bytes_0, bytes_0, bytes_0, bool_0, bytes_0}
    var_0 = module_0.func(*set_0)
    object_0 = module_1.object()
#    module_1.object(*set_0)


def test_case_8():
    bool_0 = True
    bytes_0 = b"\x0e\x02"
    list_0 = [bool_0, bytes_0, bytes_0, bytes_0, bool_0, bytes_0, bytes_0]
    var_0 = module_0.func(*list_0)


#@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    bytes_0 = b"\x04"
    set_0 = {bool_0, bytes_0, bytes_0, bool_0, bytes_0}
    var_0 = module_0.func(*set_0)
    var_1 = module_1.object()
#    module_0.func()
