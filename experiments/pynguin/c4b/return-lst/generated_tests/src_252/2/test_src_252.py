# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_252 as module_0


def test_case_0():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    var_0 = module_0.func(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "I&c\x0cK{w"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "C@Y\nb\x0b8kezm"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    module_0.func(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "IO&B\x0cK{w"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.func(*list_0)
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_5():
    list_0 = []
    dict_0 = {}
    set_0 = set()
    bool_0 = False
    tuple_0 = (bool_0, set_0, bool_0)
    tuple_1 = (list_0, dict_0, tuple_0)
    var_0 = module_0.func(*tuple_1)
    str_0 = "(mt\x0cA"
    list_1 = [str_0, str_0, str_0, str_0]
    var_1 = module_0.func(*list_1)
    var_2 = module_0.func(*list_1)
    module_0.func(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    dict_0 = {}
    set_0 = set()
    bool_0 = False
    tuple_0 = (bool_0, set_0, bool_0)
    tuple_1 = (list_0, dict_0, tuple_0)
    var_0 = module_0.func(*tuple_1)
    str_0 = "VRGh<=\x0bCGc=Zb_E"
    list_1 = [str_0, str_0, str_0, str_0]
    var_1 = module_0.func(*list_1)
    var_2 = module_0.func(*list_1)
    module_0.func(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    dict_0 = {}
    int_0 = -473
    set_0 = set()
    bool_0 = False
    tuple_0 = (int_0, set_0, bool_0)
    tuple_1 = (list_0, dict_0, tuple_0)
    var_0 = module_0.func(*tuple_1)
    str_0 = "{G33MU4txQ<"
    list_1 = [str_0, str_0, str_0, str_0]
    var_1 = module_0.func(*list_1)
    module_0.func()
