╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/networkx/classes/digraph.py:899 │
│ in successors                                                                                    │
│                                                                                                  │
│    896 │   │   neighbors() and successors() are the same.                                        │
│    897 │   │   """                                                                               │
│    898 │   │   try:                                                                              │
│ ❱  899 │   │   │   return iter(self._succ[n])                                                    │
│    900 │   │   except KeyError as err:                                                           │
│    901 │   │   │   raise NetworkXError(f"The node {n} is not in the digraph.") from err          │
│    902                                                                                           │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
KeyError: ProgramGraphNode(index=3, basic_block=[<LOAD_FAST arg='gcd' location=InstrLocation(lineno=16, end_lineno=None, col_offset=None, end_col_offset=None)>, <LOAD_FAST arg='a' 
location=InstrLocation(lineno=16, end_lineno=None, col_offset=None, end_col_offset=None)>, <LOAD_FAST arg='n' location=InstrLocation(lineno=16, end_lineno=None, col_offset=None, end_col_offset=None)>, 
<CALL_FUNCTION arg=2 location=InstrLocation(lineno=16, end_lineno=None, col_offset=None, end_col_offset=None)>, <STORE_FAST arg='simon' location=InstrLocation(lineno=16, end_lineno=None, col_offset=None, 
end_col_offset=None)>, <LOAD_FAST arg='simon' location=InstrLocation(lineno=17, end_lineno=None, col_offset=None, end_col_offset=None)>, <LOAD_CONST arg=None location=InstrLocation(lineno=17, end_lineno=None, 
col_offset=None, end_col_offset=None)>, <IS_OP arg=1 location=InstrLocation(lineno=17, end_lineno=None, col_offset=None, end_col_offset=None)>, <POP_JUMP_IF_FALSE arg=[<LOAD_FAST arg='ret_values' 
location=InstrLocation(lineno=21, end_lineno=None, col_offset=None, end_col_offset=None)>, <LOAD_METHOD arg='append' location=InstrLocation(lineno=21, end_lineno=None, col_offset=None, end_col_offset=None)>, 
<LOAD_CONST arg='1' location=InstrLocation(lineno=21, end_lineno=None, col_offset=None, end_col_offset=None)>, <CALL_METHOD arg=1 location=InstrLocation(lineno=21, end_lineno=None, col_offset=None, 
end_col_offset=None)>, <POP_TOP location=InstrLocation(lineno=21, end_lineno=None, col_offset=None, end_col_offset=None)>, <LOAD_GLOBAL arg='exit' location=InstrLocation(lineno=22, end_lineno=None, 
col_offset=None, end_col_offset=None)>, <CALL_FUNCTION arg=0 location=InstrLocation(lineno=22, end_lineno=None, col_offset=None, end_col_offset=None)>, <POP_TOP location=InstrLocation(lineno=22, end_lineno=None,
col_offset=None, end_col_offset=None)>, <JUMP_FORWARD arg=[<JUMP_ABSOLUTE arg=[<LOAD_FAST arg='turn' location=InstrLocation(lineno=15, end_lineno=None, col_offset=None, end_col_offset=None)>, <LOAD_CONST arg='s'
location=InstrLocation(lineno=15, end_lineno=None, col_offset=None, end_col_offset=None)>, <COMPARE_OP arg=<Compare.EQ: 2> location=InstrLocation(lineno=15, end_lineno=None, col_offset=None, 
end_col_offset=None)>, <POP_JUMP_IF_FALSE arg=[<LOAD_FAST arg='gcd' location=InstrLocation(lineno=24, end_lineno=None, col_offset=None, end_col_offset=None)>, <LOAD_FAST arg='b' location=InstrLocation(lineno=24,
end_lineno=None, col_offset=None, end_col_offset=None)>, <LOAD_FAST arg='n' location=InstrLocation(lineno=24, end_lineno=None, col_offset=None, end_col_offset=None)>, <CALL_FUNCTION arg=2 
location=InstrLocation(lineno=24, end_lineno=None, col_offset=None, end_col_offset=None)>, <STORE_FAST arg='anti_simon' location=InstrLocation(lineno=24, end_lineno=None, col_offset=None, end_col_offset=None)>, 
<LOAD_FAST arg='anti_simon' location=InstrLocation(lineno=25, end_lineno=None, col_offset=None, end_col_offset=None)>, <LOAD_CONST arg=None location=InstrLocation(lineno=25, end_lineno=None, col_offset=None, 
end_col_offset=None)>, <IS_OP arg=1 location=InstrLocation(lineno=25, end_lineno=None, col_offset=None, end_col_offset=None)>, <POP_JUMP_IF_FALSE arg=[<LOAD_FAST arg='ret_values' 
location=InstrLocation(lineno=29, end_lineno=None, col_offset=None, end_col_offset=None)>, <LOAD_METHOD arg='append' location=InstrLocation(lineno=29, end_lineno=None, col_offset=None, end_col_offset=None)>, 
<LOAD_CONST arg='0' location=InstrLocation(lineno=29, end_lineno=None, col_offset=None, end_col_offset=None)>, <CALL_METHOD arg=1 location=InstrLocation(lineno=29, end_lineno=None, col_offset=None, 
end_col_offset=None)>, <POP_TOP location=InstrLocation(lineno=29, end_lineno=None, col_offset=None, end_col_offset=None)>, <LOAD_GLOBAL arg='exit' location=InstrLocation(lineno=30, end_lineno=None, 
col_offset=None, end_col_offset=None)>, <CALL_FUNCTION arg=0 location=InstrLocation(lineno=30, end_lineno=None, col_offset=None, end_col_offset=None)>, <POP_TOP location=InstrLocation(lineno=30, end_lineno=None,
col_offset=None, end_col_offset=None)>] location=InstrLocation(lineno=25, end_lineno=None, col_offset=None, end_col_offset=None)>] location=InstrLocation(lineno=15, end_lineno=None, col_offset=None, 
end_col_offset=None)>] location=InstrLocation(lineno=14, end_lineno=None, col_offset=None, end_col_offset=None)>] location=InstrLocation(lineno=22, end_lineno=None, col_offset=None, end_col_offset=None)>] 
location=InstrLocation(lineno=17, end_lineno=None, col_offset=None, end_col_offset=None)>])

The above exception was the direct cause of the following exception:

╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/khashayar/projs/det-gen/.venv/bin/pynguin:8 in <module>                                    │
│                                                                                                  │
│   5 from pynguin.cli import main                                                                 │
│   6 if __name__ == '__main__':                                                                   │
│   7 │   sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])                         │
│ ❱ 8 │   sys.exit(main())                                                                         │
│   9                                                                                              │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/cli.py:196 in main      │
│                                                                                                  │
│   193 │   set_configuration(parsed.config)                                                       │
│   194 │   if console is not None:                                                                │
│   195 │   │   with console.status("Running Pynguin..."):                                         │
│ ❱ 196 │   │   │   return run_pynguin().value                                                     │
│   197 │   else:                                                                                  │
│   198 │   │   return run_pynguin().value                                                         │
│   199                                                                                            │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/generator.py:108 in     │
│ run_pynguin                                                                                      │
│                                                                                                  │
│   105 │   """                                                                                    │
│   106 │   try:                                                                                   │
│   107 │   │   _LOGGER.info("Start Pynguin Test Generation…")                                     │
│ ❱ 108 │   │   return _run()                                                                      │
│   109 │   finally:                                                                               │
│   110 │   │   _LOGGER.info("Stop Pynguin Test Generation…")                                      │
│   111                                                                                            │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/generator.py:506 in     │
│ _run                                                                                             │
│                                                                                                  │
│   503                                                                                            │
│   504                                                                                            │
│   505 def _run() -> ReturnCode:                                                                  │
│ ❱ 506 │   if (setup_result := _setup_and_check()) is None:                                       │
│   507 │   │   return ReturnCode.SETUP_FAILED                                                     │
│   508 │   executor, test_cluster, constant_provider = setup_result                               │
│   509 │   # traces slices for test cases after execution                                         │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/generator.py:251 in     │
│ _setup_and_check                                                                                 │
│                                                                                                  │
│   248 │   │   set(config.configuration.statistics_output.coverage_metrics),                      │
│   249 │   │   dynamic_constant_provider,                                                         │
│   250 │   )                                                                                      │
│ ❱ 251 │   if not _load_sut(tracer):                                                              │
│   252 │   │   return None                                                                        │
│   253 │   if not _setup_report_dir():                                                            │
│   254 │   │   return None                                                                        │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/generator.py:164 in     │
│ _load_sut                                                                                        │
│                                                                                                  │
│   161 │   try:                                                                                   │
│   162 │   │   # We need to set the current thread ident so the import trace is recorded.         │
│   163 │   │   tracer.current_thread_identifier = threading.current_thread().ident                │
│ ❱ 164 │   │   importlib.import_module(config.configuration.module_name)                          │
│   165 │   except ImportError as ex:                                                              │
│   166 │   │   # A module could not be imported because some dependencies                         │
│   167 │   │   # are missing or it is malformed                                                   │
│                                                                                                  │
│ /usr/lib/python3.10/importlib/__init__.py:126 in import_module                                   │
│                                                                                                  │
│   123 │   │   │   if character != '.':                                                           │
│   124 │   │   │   │   break                                                                      │
│   125 │   │   │   level += 1                                                                     │
│ ❱ 126 │   return _bootstrap._gcd_import(name[level:], package, level)                            │
│   127                                                                                            │
│   128                                                                                            │
│   129 _RELOADING = {}                                                                            │
│ in _gcd_import:1050                                                                              │
│ in _find_and_load:1027                                                                           │
│ in _find_and_load_unlocked:1006                                                                  │
│ in _load_unlocked:688                                                                            │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/instrumentation/machine │
│ ry.py:59 in exec_module                                                                          │
│                                                                                                  │
│    56 │                                                                                          │
│    57 │   def exec_module(self, module):  # noqa: D102                                           │
│    58 │   │   self._tracer.reset()                                                               │
│ ❱  59 │   │   super().exec_module(module)                                                        │
│    60 │   │   self._tracer.store_import_trace()                                                  │
│    61 │                                                                                          │
│    62 │   def get_code(self, fullname) -> CodeType:                                              │
│ in exec_module:879                                                                               │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/instrumentation/machine │
│ ry.py:75 in get_code                                                                             │
│                                                                                                  │
│    72 │   │   """                                                                                │
│    73 │   │   to_instrument = cast(CodeType, super().get_code(fullname))                         │
│    74 │   │   assert to_instrument is not None, "Failed to get code object of module."           │
│ ❱  75 │   │   return self._transformer.instrument_module(to_instrument)                          │
│    76                                                                                            │
│    77                                                                                            │
│    78 def build_transformer(                                                                     │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/instrumentation/instrum │
│ entation.py:240 in instrument_module                                                             │
│                                                                                                  │
│    237 │   │   │   │   # Abort instrumentation, since we have already                            │
│    238 │   │   │   │   # instrumented this code object.                                          │
│    239 │   │   │   │   raise AssertionError("Tried to instrument already instrumented module.")  │
│ ❱  240 │   │   return self._instrument_code_recursive(module_code)                               │
│    241 │                                                                                         │
│    242 │   def _instrument_code_recursive(                                                       │
│    243 │   │   self,                                                                             │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/instrumentation/instrum │
│ entation.py:279 in _instrument_code_recursive                                                    │
│                                                                                                  │
│    276 │   │   for adapter in self._instrumentation_adapters:                                    │
│    277 │   │   │   adapter.visit_entry_node(real_entry_node.basic_block, code_object_id)         │
│    278 │   │   self._instrument_cfg(cfg, code_object_id)                                         │
│ ❱  279 │   │   return self._instrument_inner_code_objects(                                       │
│    280 │   │   │   cfg.bytecode_cfg().to_code(), code_object_id                                  │
│    281 │   │   )                                                                                 │
│    282                                                                                           │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/instrumentation/instrum │
│ entation.py:300 in _instrument_inner_code_objects                                                │
│                                                                                                  │
│    297 │   │   │   if isinstance(const, CodeType):                                               │
│    298 │   │   │   │   # The const is an inner code object                                       │
│    299 │   │   │   │   new_consts.append(                                                        │
│ ❱  300 │   │   │   │   │   self._instrument_code_recursive(                                      │
│    301 │   │   │   │   │   │   const, parent_code_object_id=parent_code_object_id                │
│    302 │   │   │   │   │   )                                                                     │
│    303 │   │   │   │   )                                                                         │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/instrumentation/instrum │
│ entation.py:259 in _instrument_code_recursive                                                    │
│                                                                                                  │
│    256 │   │   self._logger.debug("Instrumenting Code Object for %s", code.co_name)              │
│    257 │   │   cfg = CFG.from_bytecode(Bytecode.from_code(code))                                 │
│    258 │   │   original_cfg = CFG.from_bytecode(Bytecode.from_code(code))                        │
│ ❱  259 │   │   cdg = ControlDependenceGraph.compute(cfg)                                         │
│    260 │   │   code_object_id = self._tracer.register_code_object(                               │
│    261 │   │   │   CodeObjectMetaData(                                                           │
│    262 │   │   │   │   code_object=code,                                                         │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/analyses/controlflow.py │
│ :745 in compute                                                                                  │
│                                                                                                  │
│   742 │   │   edges: set[ControlDependenceGraph._Edge] = set()                                   │
│   743 │   │   for source in nodes:                                                               │
│   744 │   │   │   for target in augmented_cfg.get_successors(source):                            │
│ ❱ 745 │   │   │   │   if source not in post_dominator_tree.get_transitive_successors(target):    │
│   746 │   │   │   │   │   # Store branching data from edge, i.e., which outcome of the           │
│   747 │   │   │   │   │   # branching node leads to this node.                                   │
│   748 │   │   │   │   │   data = frozenset(                                                      │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/analyses/controlflow.py │
│ :273 in get_transitive_successors                                                                │
│                                                                                                  │
│   270 │   │   Returns:                                                                           │
│   271 │   │   │   The transitive closure of the node                                             │
│   272 │   │   """                                                                                │
│ ❱ 273 │   │   return self._get_transitive_successors(node, set())                                │
│   274 │                                                                                          │
│   275 │   def _get_transitive_successors(self, node: N, done: set[N]) -> set[N]:                 │
│   276 │   │   successors: set[N] = set()                                                         │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/analyses/controlflow.py │
│ :277 in _get_transitive_successors                                                               │
│                                                                                                  │
│   274 │                                                                                          │
│   275 │   def _get_transitive_successors(self, node: N, done: set[N]) -> set[N]:                 │
│   276 │   │   successors: set[N] = set()                                                         │
│ ❱ 277 │   │   for successor_node in self.get_successors(node):                                   │
│   278 │   │   │   if successor_node not in done:                                                 │
│   279 │   │   │   │   successors.add(successor_node)                                             │
│   280 │   │   │   │   done.add(successor_node)                                                   │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/pynguin/analyses/controlflow.py │
│ :217 in get_successors                                                                           │
│                                                                                                  │
│   214 │   │   │   A set of direct successors of the node                                         │
│   215 │   │   """                                                                                │
│   216 │   │   successors: set[N] = set()                                                         │
│ ❱ 217 │   │   for successor in self._graph.successors(node):                                     │
│   218 │   │   │   successors.add(successor)                                                      │
│   219 │   │   return successors                                                                  │
│   220                                                                                            │
│                                                                                                  │
│ /home/khashayar/projs/det-gen/.venv/lib/python3.10/site-packages/networkx/classes/digraph.py:901 │
│ in successors                                                                                    │
│                                                                                                  │
│    898 │   │   try:                                                                              │
│    899 │   │   │   return iter(self._succ[n])                                                    │
│    900 │   │   except KeyError as err:                                                           │
│ ❱  901 │   │   │   raise NetworkXError(f"The node {n} is not in the digraph.") from err          │
│    902 │                                                                                         │
│    903 │   # digraph definitions                                                                 │
│    904 │   neighbors = successors                                                                │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
NetworkXError: The node ProgramGraphNode(3)
LOAD_FAST 'gcd'
LOAD_FAST 'a'
LOAD_FAST 'n'
CALL_FUNCTION 2
STORE_FAST 'simon'
LOAD_FAST 'simon'
LOAD_CONST None
IS_OP 1
POP_JUMP_IF_FALSE ProgramGraphNode is not in the digraph.
