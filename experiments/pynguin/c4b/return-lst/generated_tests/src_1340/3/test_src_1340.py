# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src_1340 as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\x0e\x8dO"
    var_0 = module_0.func(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.func()


def test_case_2():
    bytes_0 = b"\x1d\x8eD\x9c\xe0n\x95\xbf\xdc\t\x0b|\xe9\x8f\xa8\xa9"
    var_0 = module_0.func(*bytes_0)


def test_case_3():
    bytes_0 = b"\x10\xa4\x8aq\xd3\xe2(T\xf9\xa0"
    var_0 = module_0.func(*bytes_0)
    bytes_1 = b"\x13"
    var_1 = module_0.func(*bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x10\xa4\x8aq\xd3\xe2(T\xf9\xa0"
    var_0 = module_0.func(*bytes_0)
    bool_0 = False
    list_0 = [bool_0, var_0, bool_0]
    var_1 = module_0.func(*list_0)
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x12\xf0Z\x13\xe5\xb4\xd4\xe5\xca\xae\x1eJ"
    var_0 = module_0.func(*bytes_0)
    module_1.object(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x1ad\xe6"
    var_0 = module_0.func(*bytes_0)
    module_0.func()


def test_case_7():
    bytes_0 = b"\x10\xa4\x8aq\xd3\xe2(T\xf9\xa0"
    var_0 = module_0.func(*bytes_0)


def test_case_8():
    bytes_0 = b"\x1c\xcd\xec"
    var_0 = module_0.func(*bytes_0)
    var_1 = module_1.object()
    object_0 = module_1.object()


def test_case_9():
    bytes_0 = b"\x19$\x0e\xd6\xf9\x8d"
    var_0 = module_0.func(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x14\x15|\x86\x97\x99\x98\xd0a\xf5"
    var_0 = module_0.func(*bytes_0)
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 30
    list_0 = [int_0, int_0]
    var_0 = module_0.func(*list_0)
    module_0.func()


def test_case_12():
    bytes_0 = b"\x15\xa4\x8aq\xd3W\xf9T\x8f\xa0"
    var_0 = module_0.func(*bytes_0)


def test_case_13():
    bytes_0 = b" \x8e0\x1fm\xb0\xab\re\xcc+\xb5\x10\x89O{\x9d%"
    var_0 = module_0.func(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b"\r\x19$\x0e\xd6\xf9\x8d"
    var_0 = module_0.func(*bytes_0)
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b"\x1b\xba\xc1\xcd\xe3N\xa3\xebU \x01\xe5\xe8\xfc\xff\x19\x95d"
    var_0 = module_0.func(*bytes_0)
    var_1 = module_1.object()
    module_0.func()


def test_case_16():
    bytes_0 = b'"\x08\x1be\xa3\xfe\xb1ai\xac\xf8'
    var_0 = module_0.func(*bytes_0)


def test_case_17():
    var_0 = module_1.object()
    bytes_0 = b"\x0f\x1a\x1e\x99\xab\xc1k\xa8\xeef"
    var_1 = module_0.func(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b"\x18h|^\r\xa3\xfds\x075"
    var_0 = module_0.func(*bytes_0)
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_19():
    bytes_0 = b"!0\x1fm\xb0\xab\r\xcc+\xb5\x10\x89{\x9d"
    var_0 = module_0.func(*bytes_0)
    module_0.func()


@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b"\x1f\xa1\x99\x94\xce"
    var_0 = module_0.func(*bytes_0)
    var_1 = module_0.func(*var_0)
    module_0.func()


def test_case_21():
    bytes_0 = b"\x11\x0cY|;\x9f\x08l*\xc3\xf3}\xbb\x90C\x126\x82"
    var_0 = module_0.func(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b"\x16\x03\xbd"
    var_0 = module_0.func(*bytes_0)
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bytes_0 = b" \x8e0\x1f9\xb0\xab\re\xcc+\xb5\x10\x89O{\x9d"
    var_0 = module_0.func(*bytes_0)
    bytes_1 = b"\x17\x18h|^\r\xa3\xfds\x075"
    var_1 = module_0.func(*bytes_1)
    var_2 = module_1.object()
    list_0 = [var_1, var_2, var_1, var_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b" \x8e0\x1fm\xb0\xab\re\xcc+\xb5\x10\x89O{\x9d"
    var_0 = module_0.func(*bytes_0)
    bytes_1 = b"#h|^\r\xa3\xfds\x075"
    var_1 = module_0.func(*bytes_1)
    var_2 = module_0.func(*bytes_0)
    module_0.func()
