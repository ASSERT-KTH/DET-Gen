# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import is_valid_parenthesization as module_0
import builtins as module_1


def test_case_0():
    str_0 = 't"J&\r-kZS2\n{A\tg(\r['
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is False


def test_case_1():
    bytes_0 = b"\xa1\xad\xe9\xa1\xebD[\x0b]\xa8\xfb:\x7f:Rk\xfe\x9a\x89\xa2"
    bool_0 = False
    bytes_1 = b""
    var_0 = module_0.is_valid_parenthesization(bytes_1)
    assert var_0 is True
    int_0 = -2239
    tuple_0 = (bytes_0, bool_0, int_0)
    var_1 = module_0.is_valid_parenthesization(tuple_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "(y"
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is True
    bool_0 = True
    object_0 = module_1.object()
    var_1 = module_0.is_valid_parenthesization(str_0)
    assert var_1 is True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_2 = module_0.is_valid_parenthesization(dict_0)
    assert var_2 is False
    module_0.is_valid_parenthesization(bool_0)
