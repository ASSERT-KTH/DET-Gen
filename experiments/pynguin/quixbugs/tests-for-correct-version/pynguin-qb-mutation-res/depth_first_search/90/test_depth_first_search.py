# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bytes_0 = b";\x93\x8e\xc5y\xa0{\xf2\xfd\x98\x0e\xeae\x1fA{\x87"
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    node_0 = module_1.Node()
    int_0 = -2941
    var_0 = module_0.depth_first_search(node_0, int_0)
    assert var_0 is False
    var_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "^}"
    str_1 = "]tZ\x0bh]k8.,$umES\\9"
    module_0.depth_first_search(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(var_0, var_0)
    assert var_1 is True
    bytes_0 = b"\x0cM\xdb\xb4\x80M"
    node_0 = module_1.Node(
        successor=none_type_0, successors=bytes_0, incoming_nodes=bool_0
    )
    bool_1 = True
    module_0.depth_first_search(node_0, bool_1)
