# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "gxAT.W"
    node_0 = module_1.Node(successors=str_0)
    bool_0 = False
    module_0.depth_first_search(node_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    none_type_0 = None
    module_0.depth_first_search(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 1360.989
    var_0 = module_0.depth_first_search(float_0, float_0)
    assert var_0 is True
    var_1 = module_1.Node(successor=var_0, incoming_nodes=var_0)
    assert var_1.successor is True
    assert var_1.incoming_nodes is True
    var_2 = module_0.depth_first_search(var_1, var_0)
    var_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True
    node_0 = module_1.Node(successor=var_0)
    assert node_0.successor is True
    list_0 = [node_0, node_0, bool_0]
    node_1 = module_1.Node(node_0, var_0, list_0)
    assert node_1.successor is True
    var_1 = module_0.depth_first_search(node_1, bool_0)
    assert var_1 is True
    str_0 = "<:]"
    list_1 = [str_0, str_0]
    module_0.depth_first_search(str_0, list_1)
