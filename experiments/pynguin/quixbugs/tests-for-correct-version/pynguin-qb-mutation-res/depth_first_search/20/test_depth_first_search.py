# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xdaG\x07\x14R\x1b"
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_1 is True
    node_0 = module_1.Node()
    var_2 = module_0.depth_first_search(node_0, var_1)
    var_3 = module_0.depth_first_search(node_0, node_0)
    assert var_3 is True
    module_0.depth_first_search(bytes_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.depth_first_search(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xdaG\x07\x14R\x1b"
    none_type_0 = None
    node_0 = module_1.Node(
        successors=bytes_0, incoming_nodes=none_type_0, outgoing_nodes=none_type_0
    )
    node_1 = module_1.Node()
    var_0 = module_0.depth_first_search(node_1, node_0)
    assert var_0 is False
    str_0 = "|\t_kWc?X@k"
    var_1 = module_0.depth_first_search(node_1, str_0)
    assert var_1 is False
    module_0.depth_first_search(node_0, var_1)
