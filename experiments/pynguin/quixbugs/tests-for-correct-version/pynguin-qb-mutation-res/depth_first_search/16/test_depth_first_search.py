# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    int_0 = 465
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    module_0.depth_first_search(var_0, none_type_0)


def test_case_2():
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=none_type_0, outgoing_nodes=none_type_0)
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_1)
    assert var_0 is True
    none_type_2 = None
    var_1 = module_0.depth_first_search(bool_0, var_0)
    assert var_1 is True
    bytes_0 = b" $\x8ea)\xef\xad`m\xa1\x18"
    set_0 = {none_type_2, var_1}
    node_0 = module_1.Node(bytes_0, successors=set_0, predecessors=set_0)
    assert node_0.successors == {True, None}
    assert node_0.predecessors == {True, None}
    module_0.depth_first_search(node_0, bytes_0)
