# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'"\xf1\x8d![\t\x7f\x1dZ^\x85'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    node_0 = module_1.Node(successor=dict_0)
    none_type_0 = None
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False
    node_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 5104
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True
    module_0.depth_first_search(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_1 is True
    bytes_0 = b"\x9b4\xdbh\xf5\xb0\xb8\x94.\rf\x882\xbf7\xe87\x8e\xfa"
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0
    )
    module_0.depth_first_search(node_0, bytes_0)
