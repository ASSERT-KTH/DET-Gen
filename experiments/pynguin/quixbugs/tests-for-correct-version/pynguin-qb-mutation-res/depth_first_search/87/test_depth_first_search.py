# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 438
    list_0 = [int_0]
    module_0.depth_first_search(int_0, list_0)


def test_case_2():
    bool_0 = False
    node_0 = module_1.Node(incoming_nodes=bool_0)
    var_0 = module_0.depth_first_search(node_0, bool_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True
    dict_0 = {bool_0: var_0, var_0: bool_0}
    node_0 = module_1.Node(successors=dict_0, incoming_nodes=dict_0)
    assert node_0.successors == {True: True}
    assert node_0.incoming_nodes == {True: True}
    var_1 = module_0.depth_first_search(var_0, bool_0)
    assert var_1 is True
    var_2 = module_0.depth_first_search(node_0, bool_0)
    assert var_2 is True
    var_3 = module_0.depth_first_search(var_2, var_2)
    assert var_3 is True
    var_4 = module_0.depth_first_search(var_3, var_1)
    assert var_4 is True
    var_5 = module_0.depth_first_search(var_2, var_0)
    assert var_5 is True
    var_6 = module_0.depth_first_search(var_3, var_1)
    assert var_6 is True
    tuple_0 = (var_0, var_2, var_2, var_2)
    module_0.depth_first_search(tuple_0, var_3)
