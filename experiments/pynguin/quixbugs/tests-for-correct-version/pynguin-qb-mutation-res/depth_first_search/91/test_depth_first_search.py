# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xb1\xea\xe3\x9b!\xde.S\xff"
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    module_0.depth_first_search(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_1.Node(none_type_0, outgoing_nodes=tuple_0)
    var_1 = module_0.depth_first_search(var_0, tuple_0)
    assert var_1 is False
    set_0 = {var_1, var_1}
    module_0.depth_first_search(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "k^m\x0bWxKh/"
    node_0 = module_1.Node(successors=str_0, predecessors=str_0)
    module_0.depth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"S\t\xe86\xb0yT,"
    node_0 = module_1.Node(outgoing_nodes=bytes_0)
    tuple_0 = (node_0, node_0)
    node_1 = module_1.Node(successors=tuple_0, outgoing_nodes=tuple_0)
    var_0 = module_0.depth_first_search(node_1, bytes_0)
    assert var_0 is False
    str_0 = ""
    var_1 = module_0.depth_first_search(str_0, str_0)
    assert var_1 is True
    int_0 = 1204
    var_2 = module_0.depth_first_search(int_0, int_0)
    assert var_2 is True
    module_0.depth_first_search(int_0, var_2)
