# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x93\x10\xcc%G\xeb<\x95"
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, incoming_nodes=bytes_0
    )
    module_0.depth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=none_type_0)
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False
    var_1 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_1 is True
    var_2 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_2 is True
    complex_0 = -296 + 1047.8j
    var_3 = module_0.depth_first_search(complex_0, complex_0)
    assert var_3 is True
    var_3.successor()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1]
    module_0.depth_first_search(bool_0, list_0)
