# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    complex_0 = 1940.927 + 2122.58091j
    var_0 = module_0.depth_first_search(complex_0, complex_0)
    assert var_0 is True


def test_case_1():
    complex_0 = -1519.114 - 2758j
    node_0 = module_1.Node(complex_0)
    node_1 = module_1.Node(node_0, successors=complex_0, predecessors=complex_0)
    var_0 = module_0.depth_first_search(node_0, complex_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True
    set_0 = {bool_0, bool_0}
    var_1 = module_0.depth_first_search(var_0, var_0)
    assert var_1 is True
    bytes_0 = b"\xaa\n\x02\xbf\x9bg\xf2\xb7P\xda]QL"
    node_0 = module_1.Node(
        successors=set_0, incoming_nodes=bool_0, outgoing_nodes=bytes_0
    )
    var_2 = module_0.depth_first_search(node_0, bool_0)
    assert var_2 is True
    bytes_1 = b"\x97\x17\n)h\xd9T8\x99*&fw\xaf\xe6 \x19n1\x12"
    var_3 = module_0.depth_first_search(bytes_1, bytes_1)
    assert var_3 is True
    var_4 = module_0.depth_first_search(bytes_1, bytes_1)
    assert var_4 is True
    bytes_2 = b"\x8c-\xa3=\xf4\xe9]>$\x86EaX\xbaQ"
    module_0.depth_first_search(bytes_2, bytes_1)
