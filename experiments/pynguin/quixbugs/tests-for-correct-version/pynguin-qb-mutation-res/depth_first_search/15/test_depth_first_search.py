# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"xOj\x05\xb9=Qu\xf0'\xcf~\x9f~m\xdb"
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 178
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(int_0, int_0)
    assert var_1 is True
    var_2 = module_0.depth_first_search(int_0, int_0)
    assert var_2 is True
    bytes_0 = b"SI\x1e\xf0@D\xd0"
    module_0.depth_first_search(bytes_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"d\x07{\xe0\x03TT\x91\xbeFY\x12e\x8a"
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, outgoing_nodes=bytes_0
    )
    module_0.depth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b""
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, outgoing_nodes=bytes_0
    )
    var_1 = module_0.depth_first_search(node_0, bytes_0)
    var_2 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_2 is True
    var_2.successors()
