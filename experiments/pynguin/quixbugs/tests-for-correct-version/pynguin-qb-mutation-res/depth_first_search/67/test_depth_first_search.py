# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


def test_case_1():
    node_0 = module_1.Node()
    var_0 = module_0.depth_first_search(node_0, node_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(node_0, var_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True
    module_0.depth_first_search(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    node_0 = module_1.Node()
    none_type_0 = None
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False
    bool_0 = False
    set_0 = {bool_0, bool_0}
    var_1 = module_0.depth_first_search(set_0, set_0)
    assert var_1 is True
    node_1 = module_1.Node(var_1, successors=set_0, predecessors=none_type_0)
    assert node_1.value is True
    bool_1 = True
    module_0.depth_first_search(node_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    node_0 = module_1.Node()
    tuple_0 = (node_0, node_0)
    node_1 = module_1.Node(successors=tuple_0)
    none_type_0 = None
    var_0 = module_0.depth_first_search(node_1, none_type_0)
    assert var_0 is False
    object_0 = module_2.object()
    none_type_1 = None
    module_0.depth_first_search(object_0, none_type_1)
