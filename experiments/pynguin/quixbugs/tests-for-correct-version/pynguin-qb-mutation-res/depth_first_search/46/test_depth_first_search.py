# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


def test_case_1():
    bool_0 = True
    node_0 = module_1.Node(outgoing_nodes=bool_0)
    var_0 = module_0.depth_first_search(node_0, bool_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    var_0 = module_0.depth_first_search(tuple_0, tuple_0)
    assert var_0 is True
    bytes_0 = b">c\xc4d\xf4E-\xa3\xb8\x81\x1b\xa4|6\x1d\x84\xb4\x8c\xb2T"
    tuple_1 = (var_0, bytes_0, var_0, var_0)
    tuple_2 = (tuple_1, var_0)
    set_0 = {tuple_2, bytes_0, tuple_0}
    node_0 = module_1.Node(
        successors=set_0, predecessors=tuple_1, incoming_nodes=tuple_1
    )
    assert node_0.successors == {
        b">c\xc4d\xf4E-\xa3\xb8\x81\x1b\xa4|6\x1d\x84\xb4\x8c\xb2T",
        (),
        (
            (
                True,
                b">c\xc4d\xf4E-\xa3\xb8\x81\x1b\xa4|6\x1d\x84\xb4\x8c\xb2T",
                True,
                True,
            ),
            True,
        ),
    }
    assert node_0.predecessors == (
        True,
        b">c\xc4d\xf4E-\xa3\xb8\x81\x1b\xa4|6\x1d\x84\xb4\x8c\xb2T",
        True,
        True,
    )
    assert node_0.incoming_nodes == (
        True,
        b">c\xc4d\xf4E-\xa3\xb8\x81\x1b\xa4|6\x1d\x84\xb4\x8c\xb2T",
        True,
        True,
    )
    module_0.depth_first_search(node_0, tuple_2)
