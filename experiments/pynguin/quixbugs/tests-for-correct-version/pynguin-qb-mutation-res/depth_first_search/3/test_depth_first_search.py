# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x87\x10\xc7\x15ck\xaa\xcd\xd2\xa5"
    node_0 = module_1.Node(bytes_0, successors=bytes_0, outgoing_nodes=bytes_0)
    none_type_0 = None
    module_0.depth_first_search(node_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    none_type_0 = None
    module_0.depth_first_search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x87\x10\xc7\x15ck\xaa\xcd\xd2\xa5"
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    node_0 = module_1.Node(bytes_0, successors=bytes_0, outgoing_nodes=bytes_0)
    none_type_0 = None
    node_1 = module_1.Node(none_type_0)
    list_0 = [bytes_0]
    var_1 = module_0.depth_first_search(node_1, list_0)
    module_0.depth_first_search(bytes_0, node_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -710
    node_0 = module_1.Node(int_0, incoming_nodes=int_0)
    tuple_0 = (node_0, node_0, int_0, int_0)
    node_1 = module_1.Node(
        successors=tuple_0, incoming_nodes=tuple_0, outgoing_nodes=tuple_0
    )
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    set_0 = {node_0}
    module_0.depth_first_search(node_1, set_0)
