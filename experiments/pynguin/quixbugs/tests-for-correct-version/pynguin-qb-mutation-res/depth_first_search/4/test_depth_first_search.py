# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    str_0 = ";$^4DGO|Q;9.4\n4"
    module_0.depth_first_search(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    node_0 = module_1.Node(predecessors=bool_0)
    var_0 = module_0.depth_first_search(node_0, bool_0)
    assert var_0 is False
    var_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    object_0 = module_2.object()
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    tuple_0 = (object_0, var_0)
    set_0 = {tuple_0, none_type_0}
    node_0 = module_1.Node(successor=set_0, incoming_nodes=object_0)
    var_1 = module_1.Node(successors=tuple_0, incoming_nodes=var_0)
    assert var_1.incoming_nodes is True
    none_type_1 = None
    var_2 = module_0.depth_first_search(none_type_1, none_type_1)
    assert var_2 is True
    var_3 = module_0.depth_first_search(none_type_1, none_type_1)
    assert var_3 is True
    var_4 = module_0.depth_first_search(var_2, var_3)
    assert var_4 is True
    var_5 = module_0.depth_first_search(node_0, var_2)
    var_6 = module_0.depth_first_search(node_0, set_0)
    module_0.depth_first_search(var_1, var_2)
