# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = 876.0
    none_type_0 = None
    module_0.depth_first_search(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    node_0 = module_1.Node(successor=bool_0, predecessors=bool_0)
    var_0 = module_0.depth_first_search(node_0, bool_0)
    assert var_0 is False
    var_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x8c\xbd\xec\x9b\xe4\xd3\xe4gx\x9a\x19\xb3\x88\xe2\xd3"
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    none_type_0 = None
    var_1 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_1 is True
    var_2 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_2 is True
    var_3 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_3 is True
    dict_0 = {var_2: var_3, var_0: var_0}
    int_0 = 1602
    tuple_0 = (var_1, var_3, int_0)
    node_0 = module_1.Node(successor=dict_0, successors=tuple_0)
    assert node_0.successor == {True: True}
    assert node_0.successors == (True, True, 1602)
    module_0.depth_first_search(node_0, none_type_0)
