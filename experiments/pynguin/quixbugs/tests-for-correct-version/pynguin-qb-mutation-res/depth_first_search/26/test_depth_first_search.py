# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    set_0 = set()
    bool_1 = False
    tuple_0 = (bool_0, set_0, set_0, bool_1)
    node_0 = module_1.Node(successors=tuple_0, outgoing_nodes=set_0)
    module_0.depth_first_search(node_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    none_type_0 = None
    node_0 = module_1.Node(
        successors=tuple_0, predecessors=tuple_0, incoming_nodes=none_type_0
    )
    var_0 = module_0.depth_first_search(node_0, tuple_0)
    assert var_0 is False
    int_0 = 2661
    var_1 = module_0.depth_first_search(int_0, int_0)
    assert var_1 is True
    object_0 = module_2.object()
    module_0.depth_first_search(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -4882
    tuple_0 = (int_0,)
    module_0.depth_first_search(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    node_0 = module_1.Node()
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    list_0 = [node_0, node_0]
    none_type_1 = None
    node_1 = module_1.Node(
        successors=list_0, predecessors=node_0, outgoing_nodes=none_type_1
    )
    var_1 = module_0.depth_first_search(node_1, none_type_1)
    tuple_0 = ()
    var_2 = module_0.depth_first_search(tuple_0, tuple_0)
    assert var_2 is True
    var_3 = module_0.depth_first_search(var_2, var_2)
    assert var_3 is True
    none_type_2 = None
    bytes_0 = b"5\xf7"
    module_0.depth_first_search(none_type_2, bytes_0)
