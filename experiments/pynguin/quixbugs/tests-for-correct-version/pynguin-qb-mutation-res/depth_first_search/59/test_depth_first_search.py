# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = 1830.8 + 1337.65j
    none_type_0 = None
    module_0.depth_first_search(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"i*\xe0\xe7*\xd1\xd8'\xd0}\xfe"
    bool_0 = True
    node_0 = module_1.Node(bytes_0, successors=bytes_0)
    module_0.depth_first_search(node_0, bool_0)


def test_case_3():
    bytes_0 = b"i*\xe0\xe7*\xd1\xd8'\xd0}\xfe"
    var_0 = module_1.Node()
    node_0 = module_1.Node(bytes_0, successors=bytes_0)
    var_1 = module_0.depth_first_search(var_0, node_0)
    assert var_1 is False
    var_2 = module_2.object()


@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = 2950 + 5427.046562j
    node_0 = module_1.Node(complex_0, complex_0)
    list_0 = [node_0, node_0, node_0, complex_0]
    node_1 = module_1.Node(successors=list_0)
    module_0.depth_first_search(node_1, list_0)
