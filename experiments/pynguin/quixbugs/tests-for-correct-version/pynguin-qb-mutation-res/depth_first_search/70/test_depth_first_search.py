# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    int_0 = 1061
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = -2990.7
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.depth_first_search(float_0, list_0)


def test_case_2():
    float_0 = 422.77428
    node_0 = module_1.Node(incoming_nodes=float_0)
    var_0 = module_0.depth_first_search(node_0, float_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '.<I"q5mK"Q<AR=E(x'
    node_0 = module_1.Node(str_0, str_0, str_0)
    module_0.depth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 2511.0
    var_0 = module_0.depth_first_search(float_0, float_0)
    assert var_0 is True
    node_0 = module_1.Node(var_0)
    assert node_0.value is True
    list_0 = [node_0, node_0]
    var_1 = module_1.Node(
        successors=list_0, incoming_nodes=list_0, outgoing_nodes=var_0
    )
    assert var_1.outgoing_nodes is True
    var_2 = module_0.depth_first_search(node_0, var_1)
    var_3 = module_0.depth_first_search(var_0, var_0)
    assert var_3 is True
    var_4 = module_0.depth_first_search(node_0, float_0)
    var_5 = module_0.depth_first_search(var_1, list_0)
    var_6 = module_0.depth_first_search(var_2, var_4)
    assert var_6 is True
    var_0.predecessors()
