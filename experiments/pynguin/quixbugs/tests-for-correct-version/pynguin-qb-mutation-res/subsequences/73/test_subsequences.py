# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import subsequences as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    var_0 = module_0.subsequences(bool_0, bool_0, bool_0)
    none_type_0 = None
    module_0.subsequences(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"R7\xf9\x9cj]:\xf8\xaa"
    list_0 = [bytes_0, bytes_0, bytes_0]
    str_0 = ","
    module_0.subsequences(list_0, str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    int_0 = -2732
    var_0 = module_0.subsequences(int_0, bool_0, bool_0)
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.subsequences(set_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1835
    module_0.subsequences(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 462
    var_0 = module_0.subsequences(int_0, int_0, int_0)
    int_1 = -263
    bytes_0 = b"[3\xcd\xc7\x9eYI\xe9H\xa1Qn\xa1ny!\xa7\x94\xae"
    module_0.subsequences(int_1, bytes_0, int_0)
