# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\x80\xe3L\x1c^\x9c\xa0\xda\xb8\x08"
    module_0.find_first_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    var_0 = module_0.find_first_in_sorted(dict_0, dict_0)
    assert var_0 == -1
    var_1 = module_0.find_first_in_sorted(dict_0, dict_0)
    assert var_1 == -1
    module_0.find_first_in_sorted(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.find_first_in_sorted(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -1691.69
    tuple_0 = (float_0,)
    str_0 = '&.Xr"tS<@'
    tuple_1 = (tuple_0, str_0)
    var_0 = module_0.find_first_in_sorted(tuple_1, str_0)
    assert var_0 == 1
    none_type_0 = None
    bool_0 = True
    module_0.find_first_in_sorted(none_type_0, bool_0)


def test_case_4():
    bytes_0 = b"\xea\x94\xe7Jes\xb92"
    float_0 = 438.10407
    var_0 = module_0.find_first_in_sorted(bytes_0, float_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '&.Xr"tS<@'
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    var_1 = module_1.object()
    none_type_0 = None
    module_0.find_first_in_sorted(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = -431.7473
    tuple_0 = (float_0,)
    str_0 = '&.Xr"tS<@'
    tuple_1 = module_0.find_first_in_sorted(tuple_0, float_0)
    assert tuple_1 == 0
    module_0.find_first_in_sorted(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -3911
    list_0 = [int_0, int_0, int_0, int_0]
    var_0 = module_0.find_first_in_sorted(list_0, int_0)
    assert var_0 == 0
    float_0 = -431.7473
    tuple_0 = (float_0,)
    str_0 = '&.Xr"tS<@'
    tuple_1 = (tuple_0, str_0)
    var_1 = module_0.find_first_in_sorted(tuple_1, str_0)
    assert var_1 == 1
    bytes_0 = b"8\xcdk\xbd"
    module_0.find_first_in_sorted(bytes_0, tuple_0)
