# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    module_0.find_first_in_sorted(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b""
    var_0 = module_0.find_first_in_sorted(bytes_0, bytes_0)
    assert var_0 == -1
    module_0.find_first_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "!U;1U]M"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_0.find_first_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xc3\x08\xc1\xa1\xca"
    tuple_0 = (bytes_0,)
    var_0 = module_0.find_first_in_sorted(tuple_0, bytes_0)
    assert var_0 == 0
    module_0.find_first_in_sorted(tuple_0, tuple_0)


def test_case_5():
    str_0 = 'q@eT6;.=0ji"4l=NMe<'
    complex_0 = -193.9 - 464.5j
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (complex_0, tuple_0, bool_0, complex_0)
    tuple_2 = (str_0, tuple_1)
    list_0 = [tuple_2, str_0, tuple_2, complex_0]
    var_0 = module_0.find_first_in_sorted(list_0, tuple_2)
    assert var_0 == 2


@pytest.mark.xfail(strict=True)
def test_case_6():
    complex_0 = -865.161 + 84.985j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.find_first_in_sorted(list_0, complex_0)
