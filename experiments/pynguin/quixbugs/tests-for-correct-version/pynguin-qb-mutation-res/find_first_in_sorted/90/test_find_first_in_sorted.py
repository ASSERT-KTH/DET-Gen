# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xe1g\xcf\xc1\xc4v\x8d"
    module_0.find_first_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_0.find_first_in_sorted(tuple_0, none_type_0)
    assert var_0 == -1
    var_1 = module_0.find_first_in_sorted(tuple_0, tuple_0)
    assert var_1 == -1
    none_type_1 = None
    module_0.find_first_in_sorted(none_type_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "P"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == 0
    module_0.find_first_in_sorted(var_0, var_0)


def test_case_4():
    complex_0 = 155.96 - 652.65j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    list_0 = [dict_0]
    bool_0 = False
    list_1 = [list_0, bool_0, dict_0]
    var_0 = module_0.find_first_in_sorted(list_1, bool_0)
    assert var_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "y8yHn"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_0.find_first_in_sorted(var_0, var_0)


def test_case_6():
    str_0 = ":}C8P]FN;KQqS"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    str_1 = "y8yHn"
    var_1 = module_0.find_first_in_sorted(str_1, str_1)
    assert var_1 == -1
    var_2 = module_0.find_first_in_sorted(str_1, str_0)
    assert var_2 == -1


@pytest.mark.xfail(strict=True)
def test_case_7():
    complex_0 = -666.5541 - 1317.4j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    list_0 = [dict_0]
    bool_0 = True
    list_1 = [list_0, bool_0, bool_0, dict_0, bool_0]
    var_0 = module_0.find_first_in_sorted(list_1, bool_0)
    assert var_0 == 1
    module_0.find_first_in_sorted(bool_0, list_0)
