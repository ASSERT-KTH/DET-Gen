# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "jhc\t1)\t\x0c"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_0.find_first_in_sorted(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    object_0 = module_1.object()
    list_0 = []
    var_0 = module_0.find_first_in_sorted(list_0, list_0)
    assert var_0 == -1
    module_0.find_first_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.find_first_in_sorted(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    list_0 = [bool_0]
    var_0 = module_0.find_first_in_sorted(list_0, bool_0)
    assert var_0 == 0
    module_0.find_first_in_sorted(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "L##7oE('9vR3I:1Q"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.find_first_in_sorted(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    var_0 = module_0.find_first_in_sorted(list_0, bool_0)
    assert var_0 == 0
    bool_1 = True
    var_1 = module_0.find_first_in_sorted(list_0, bool_1)
    assert var_1 == -1
    module_0.find_first_in_sorted(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b""
    bool_0 = True
    var_0 = module_0.find_first_in_sorted(bytes_0, bool_0)
    assert var_0 == -1
    float_0 = -4244.0
    float_1 = -1451.04
    bool_1 = True
    tuple_0 = (float_0, float_1, bool_1)
    var_1 = module_0.find_first_in_sorted(tuple_0, bool_1)
    assert var_1 == 2
    var_2 = module_0.find_first_in_sorted(bytes_0, bytes_0)
    assert var_2 == -1
    var_3 = module_0.find_first_in_sorted(bytes_0, bytes_0)
    assert var_3 == -1
    module_0.find_first_in_sorted(var_2, bytes_0)
