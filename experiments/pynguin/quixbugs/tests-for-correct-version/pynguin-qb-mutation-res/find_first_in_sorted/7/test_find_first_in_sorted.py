# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "Q8X\\6vzvU6-p%Fc"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    none_type_0 = None
    module_0.find_first_in_sorted(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    var_0 = module_0.find_first_in_sorted(dict_0, dict_0)
    assert var_0 == -1
    str_0 = "8fbv\x0cD?j%;KU`.m"
    var_1 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_1 == -1
    tuple_0 = (str_0,)
    var_2 = module_0.find_first_in_sorted(tuple_0, str_0)
    assert var_2 == 0
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ",n\x0btw1_\rvzG>-?_"
    tuple_0 = (str_0,)
    var_0 = module_0.find_first_in_sorted(tuple_0, str_0)
    assert var_0 == 0
    bool_0 = True
    module_0.find_first_in_sorted(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.find_first_in_sorted(bytes_0, list_0)
    assert var_0 == -1
    var_1 = module_0.find_first_in_sorted(list_0, bytes_0)
    assert var_1 == 0
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "8fbv\x0cD?j%;KU`.m"
    tuple_0 = (str_0,)
    var_0 = module_0.find_first_in_sorted(tuple_0, str_0)
    assert var_0 == 0
    list_0 = [str_0, var_0]
    var_1 = module_0.find_first_in_sorted(list_0, var_0)
    assert var_1 == 1
    none_type_0 = None
    object_0 = module_1.object()
    module_0.find_first_in_sorted(none_type_0, none_type_0)
