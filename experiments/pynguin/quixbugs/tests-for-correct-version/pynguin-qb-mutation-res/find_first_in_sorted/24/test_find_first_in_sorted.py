# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"A\xd0~\xea"
    module_0.find_first_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    var_0 = module_0.find_first_in_sorted(list_0, list_0)
    assert var_0 == -1
    module_0.find_first_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.find_first_in_sorted(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "y"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == 0
    module_0.find_first_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xb0\x89l\xf3"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.find_first_in_sorted(list_0, bytes_0)
    assert var_0 == 0
    module_0.find_first_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    str_0 = "H~{A<r"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    none_type_1 = None
    module_0.find_first_in_sorted(none_type_0, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    bytes_0 = b">\xc4Y\x80\xcb8\xc7"
    complex_0 = -2061.276 + 457.8j
    tuple_0 = (bytes_0, complex_0, bytes_0, bool_0)
    var_0 = module_0.find_first_in_sorted(tuple_0, bytes_0)
    assert var_0 == 2
    none_type_0 = None
    module_0.find_first_in_sorted(bool_0, none_type_0)
