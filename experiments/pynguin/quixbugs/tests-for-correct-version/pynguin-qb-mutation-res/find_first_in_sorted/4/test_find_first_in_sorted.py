# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import find_first_in_sorted as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    object_0 = module_0.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_1.find_first_in_sorted(dict_0, object_0)


def test_case_1():
    set_0 = set()
    var_0 = module_1.find_first_in_sorted(set_0, set_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 1322
    module_1.find_first_in_sorted(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "6uhg@j"
    var_0 = module_1.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    var_1 = module_1.find_first_in_sorted(str_0, str_0)
    assert var_1 == -1
    module_1.find_first_in_sorted(var_1, var_1)


def test_case_4():
    str_0 = "_yrWb9\\SB=I"
    tuple_0 = (str_0,)
    var_0 = module_1.find_first_in_sorted(tuple_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_5():
    complex_0 = -3236.84 - 1167.7147j
    bool_0 = True
    bytes_0 = b"G1\x02{\xc7"
    tuple_0 = (complex_0, bool_0, bytes_0)
    var_0 = module_1.find_first_in_sorted(tuple_0, bool_0)
    assert var_0 == 1
    module_1.find_first_in_sorted(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x85<e3\xe8>\xcc\xb8\xa2\rU\x00yY\xea\xdf\xd9\xfa\xfa"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_1.find_first_in_sorted(list_0, bytes_0)
    assert var_0 == 0
    module_1.find_first_in_sorted(var_0, var_0)
