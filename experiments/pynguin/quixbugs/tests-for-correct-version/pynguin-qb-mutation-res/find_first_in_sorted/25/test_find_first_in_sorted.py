# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '~1@2{]"2;Y,[gfnER7'
    none_type_0 = None
    module_0.find_first_in_sorted(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    var_0 = module_0.find_first_in_sorted(list_0, list_0)
    assert var_0 == -1
    str_0 = ":OY"
    var_1 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_1 == -1
    var_2 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_2 == -1
    module_0.find_first_in_sorted(str_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 834
    module_0.find_first_in_sorted(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "O\\"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    var_1 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_1 == -1
    var_2 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_2 == -1
    module_0.find_first_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "{"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == 0
    var_1 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_1 == 0
    module_1.object(*var_1, **var_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'5\xfa"\x87\x08\xcf\xd7\x81\xcbhD\x9bU\xe1\xf0\xcf\x8e\xed'
    str_0 = "$%\x0cK"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    tuple_0 = (str_0, bytes_0, bytes_0)
    var_1 = module_0.find_first_in_sorted(tuple_0, bytes_0)
    assert var_1 == 1
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = 2941.8284
    list_0 = [float_0, float_0, float_0]
    var_0 = module_0.find_first_in_sorted(list_0, float_0)
    assert var_0 == 0
    var_1 = module_0.find_first_in_sorted(list_0, float_0)
    assert var_1 == 0
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)
