# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xffn\x17\xeb\xff\x10\n;\xec\x89\xb3\x1fA6\xee"
    none_type_0 = None
    module_0.find_first_in_sorted(bytes_0, none_type_0)


def test_case_1():
    str_0 = "7m$(ptzh"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    set_0 = set()
    var_1 = module_0.find_first_in_sorted(set_0, set_0)
    assert var_1 == -1


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.find_first_in_sorted(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xeb\xc1\x97>@\xb2W\xa6\x8a\x0b"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0]
    var_0 = module_0.find_first_in_sorted(list_1, list_0)
    assert var_0 == 0
    bool_0 = False
    module_0.find_first_in_sorted(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0]
    var_0 = module_0.find_first_in_sorted(list_1, bool_0)
    assert var_0 == 1
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "Zu['.8On"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    var_1 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_1 == -1
    module_0.find_first_in_sorted(var_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    dict_1 = {bool_0: dict_0, bool_0: bool_0, bool_0: dict_0}
    list_0 = [dict_0, dict_1]
    var_0 = module_0.find_first_in_sorted(list_0, dict_1)
    assert var_0 == 1
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1]
    var_1 = module_0.find_first_in_sorted(list_1, bool_1)
    assert var_1 == 0
    bool_2 = True
    module_0.find_first_in_sorted(bool_2, bool_2)
