# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xca%\xed"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.find_first_in_sorted(list_0, bytes_0)
    assert var_0 == 0


def test_case_1():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_0.find_first_in_sorted(dict_0, none_type_0)
    assert var_0 == -1
    var_1 = module_0.find_first_in_sorted(dict_0, dict_0)
    assert var_1 == -1


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b".r\xe7j\x16\x88\xa6l\xda\xbc/\xe0\xbe\xfb{"
    module_0.find_first_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    tuple_0 = (bool_0,)
    bool_1 = False
    var_0 = module_0.find_first_in_sorted(tuple_0, bool_1)
    assert var_0 == -1
    bool_2 = False
    module_0.find_first_in_sorted(bool_2, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "<kK?\x0cx`\x0b6ct#:Gj"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    none_type_0 = None
    module_0.find_first_in_sorted(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    var_0 = module_0.find_first_in_sorted(tuple_0, bool_0)
    assert var_0 == 0
    var_1 = module_0.find_first_in_sorted(tuple_0, var_0)
    assert var_1 == -1
    tuple_1 = (tuple_0, bool_0)
    bool_1 = True
    var_2 = module_0.find_first_in_sorted(tuple_1, bool_1)
    assert var_2 == 1
    object_0 = module_1.object()
    module_0.find_first_in_sorted(object_0, var_1)
