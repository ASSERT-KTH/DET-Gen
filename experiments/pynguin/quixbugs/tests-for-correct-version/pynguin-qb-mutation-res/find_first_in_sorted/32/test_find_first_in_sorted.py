# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0
import builtins as module_1


def test_case_0():
    str_0 = "ho/ekEh)iT"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.find_first_in_sorted(tuple_0, tuple_0)
    assert var_0 == -1
    object_0 = module_1.object()
    var_1 = module_0.find_first_in_sorted(tuple_0, tuple_0)
    assert var_1 == -1
    module_0.find_first_in_sorted(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\r_f\x06"
    bool_0 = False
    bool_1 = True
    tuple_0 = (bytes_0, bytes_0, bool_0, bool_1)
    var_0 = module_0.find_first_in_sorted(tuple_0, bool_1)
    assert var_0 == 3
    none_type_0 = None
    bool_2 = True
    module_0.find_first_in_sorted(none_type_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    var_0 = module_0.find_first_in_sorted(tuple_0, bool_0)
    assert var_0 == 0
    float_0 = -3374.1553
    complex_0 = 1859.9079 + 1355.62812j
    tuple_1 = (float_0, complex_0)
    module_0.find_first_in_sorted(tuple_1, tuple_1)
