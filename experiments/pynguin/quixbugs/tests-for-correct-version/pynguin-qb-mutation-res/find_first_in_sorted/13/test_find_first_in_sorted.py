# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '6`"yd'
    none_type_0 = None
    module_0.find_first_in_sorted(str_0, none_type_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_0.find_first_in_sorted(tuple_0, tuple_0)
    assert var_0 == -1
    var_1 = module_0.find_first_in_sorted(tuple_0, tuple_0)
    assert var_1 == -1


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.find_first_in_sorted(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "*z!@"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_1 = module_0.find_first_in_sorted(dict_0, bool_0)
    assert var_1 == 0
    module_1.object(*var_1, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "*z!@"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    dict_0 = {var_0: var_0, str_0: var_0, var_0: var_0}
    list_0 = [dict_0, var_0, dict_0]
    var_1 = module_0.find_first_in_sorted(list_0, var_0)
    assert var_1 == 1
    bool_0 = False
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_2 = module_0.find_first_in_sorted(dict_1, bool_0)
    assert var_2 == 0
    module_1.object(*var_2, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ";\x0bmj"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_0.find_first_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    complex_0 = -2291.521175 + 1235.7157j
    list_0 = [complex_0, complex_0]
    module_0.find_first_in_sorted(list_0, complex_0)
