# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import possible_change as module_0


def test_case_0():
    bool_0 = False
    var_0 = module_0.possible_change(bool_0, bool_0)
    assert var_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x18`\x94L"
    module_0.possible_change(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -305
    set_0 = {int_0}
    var_0 = module_0.possible_change(set_0, int_0)
    assert var_0 == 0
    bool_0 = False
    var_1 = module_0.possible_change(bool_0, var_0)
    assert var_1 == 1
    bytes_0 = b"#\x9b@K\xfa\x8d\xcc\xc4\x96\x8c\x00\xc6\xbf\x82\xf5P\xf8\x9a"
    var_2 = module_0.possible_change(int_0, var_0)
    assert var_2 == 1
    module_0.possible_change(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.possible_change(bool_0, bool_0)
    assert var_0 == 1
    var_1 = module_0.possible_change(var_0, bool_0)
    assert var_1 == 1
    module_0.possible_change(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.possible_change(dict_0, bool_0)
    assert var_0 == 1
    int_0 = 364
    none_type_0 = None
    var_1 = module_0.possible_change(none_type_0, int_0)
    assert var_1 == 0
    var_2 = module_0.possible_change(none_type_0, var_1)
    assert var_2 == 1
    none_type_1 = None
    var_3 = module_0.possible_change(none_type_1, int_0)
    assert var_3 == 0
    var_4 = module_0.possible_change(var_1, int_0)
    assert var_4 == 0
    module_0.possible_change(int_0, int_0)
