# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import possible_change as module_0


def test_case_0():
    bool_0 = False
    var_0 = module_0.possible_change(bool_0, bool_0)
    assert var_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.possible_change(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    var_0 = module_0.possible_change(set_0, bool_0)
    assert var_0 == 1
    int_0 = -1747
    int_1 = -1948
    var_1 = module_0.possible_change(int_1, int_0)
    assert var_1 == 0
    var_2 = module_0.possible_change(var_1, int_0)
    assert var_2 == 0
    var_3 = module_0.possible_change(int_1, int_1)
    assert var_3 == 0
    var_4 = module_0.possible_change(int_1, int_1)
    assert var_4 == 0
    var_5 = module_0.possible_change(var_3, var_1)
    assert var_5 == 1
    var_6 = module_0.possible_change(int_0, var_3)
    assert var_6 == 1
    var_7 = module_0.possible_change(int_0, int_0)
    assert var_7 == 0
    var_8 = module_0.possible_change(var_6, int_0)
    assert var_8 == 0
    bool_1 = False
    var_9 = module_0.possible_change(var_8, bool_1)
    assert var_9 == 1
    var_10 = module_0.possible_change(var_1, bool_1)
    assert var_10 == 1
    var_11 = module_0.possible_change(var_7, int_0)
    var_12 = module_0.possible_change(int_0, var_3)
    assert var_12 == 1
    var_13 = module_0.possible_change(var_1, var_12)
    assert var_13 == 0
    var_14 = module_0.possible_change(var_6, var_3)
    assert var_14 == 1
    var_15 = module_0.possible_change(var_7, int_0)
    var_16 = module_0.possible_change(var_7, var_7)
    assert var_16 == 1
    var_17 = module_0.possible_change(var_6, var_15)
    assert var_17 == 1
    module_0.possible_change(int_0, var_12)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.possible_change(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    bool_1 = True
    var_0 = module_0.possible_change(bool_1, bool_0)
    assert var_0 == 1
    var_1 = module_0.possible_change(bool_1, bool_0)
    assert var_1 == 1
    var_2 = module_0.possible_change(bool_1, bool_0)
    assert var_2 == 1
    bool_2 = False
    set_0 = {bool_0, bool_0, bool_2, bool_0}
    var_3 = module_0.possible_change(bool_2, bool_0)
    assert var_3 == 1
    var_4 = module_0.possible_change(set_0, bool_0)
    assert var_4 == 1
    dict_0 = {bool_0: bool_2}
    tuple_0 = (bool_0, set_0, dict_0)
    var_5 = module_0.possible_change(bool_0, var_4)
    assert var_5 == 0
    module_0.possible_change(bool_0, tuple_0)
