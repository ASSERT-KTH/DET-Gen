# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import possible_change as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    var_0 = module_0.possible_change(bool_0, bool_0)
    assert var_0 == 1
    int_0 = 4144
    module_0.possible_change(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "{+}*L@ r4\n:8"
    module_0.possible_change(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    int_0 = -332
    str_0 = "6H"
    var_0 = module_0.possible_change(str_0, int_0)
    assert var_0 == 0
    var_1 = module_0.possible_change(none_type_0, int_0)
    assert var_1 == 0
    module_0.possible_change(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -678.14904
    int_0 = 618
    module_0.possible_change(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 1644.0
    bytes_0 = b"\x96\xf8J\xb4L"
    bytes_1 = b"h\xb4\xe1\x96\xe9"
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (float_0, bytes_0, bytes_1, tuple_0)
    none_type_0 = None
    var_0 = module_0.possible_change(none_type_0, bool_0)
    assert var_0 == 0
    none_type_1 = None
    module_0.possible_change(none_type_1, tuple_1)
