# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import possible_change as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -106
    var_0 = module_0.possible_change(int_0, int_0)
    assert var_0 == 0
    var_1 = module_0.possible_change(int_0, int_0)
    assert var_1 == 0
    var_2 = module_0.possible_change(int_0, int_0)
    assert var_2 == 0
    var_3 = module_1.object()
    var_4 = module_0.possible_change(int_0, int_0)
    assert var_4 == 0
    var_5 = module_1.object()
    var_6 = module_0.possible_change(var_5, var_0)
    assert var_6 == 1
    none_type_0 = None
    module_0.possible_change(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.possible_change(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -653
    var_0 = module_0.possible_change(int_0, int_0)
    assert var_0 == 0
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 3350
    module_0.possible_change(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -106
    var_0 = module_0.possible_change(int_0, int_0)
    assert var_0 == 0
    var_1 = module_0.possible_change(int_0, int_0)
    assert var_1 == 0
    var_2 = module_0.possible_change(var_1, var_1)
    assert var_2 == 1
    var_3 = module_0.possible_change(var_1, var_2)
    assert var_3 == 0
    var_4 = module_0.possible_change(var_3, var_1)
    assert var_4 == 1
    var_5 = module_0.possible_change(var_2, var_0)
    assert var_5 == 1
    module_0.possible_change(var_2, var_4)
