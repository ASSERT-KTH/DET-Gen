# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import possible_change as module_0


def test_case_0():
    bool_0 = False
    var_0 = module_0.possible_change(bool_0, bool_0)
    assert var_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = 664.955174 + 3504.7616j
    module_0.possible_change(complex_0, complex_0)


def test_case_2():
    float_0 = -1960.325
    var_0 = module_0.possible_change(float_0, float_0)
    assert var_0 == 0
    var_1 = module_0.possible_change(float_0, float_0)
    assert var_1 == 0
    var_2 = module_0.possible_change(var_1, float_0)
    assert var_2 == 0
    var_3 = module_0.possible_change(float_0, float_0)
    assert var_3 == 0
    var_4 = module_0.possible_change(float_0, var_1)
    assert var_4 == 1


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.possible_change(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.possible_change(none_type_0, bool_0)
    assert var_0 == 1
    var_1 = module_0.possible_change(bool_0, bool_0)
    assert var_1 == 1
    bool_1 = True
    var_2 = module_0.possible_change(bool_0, bool_1)
    assert var_2 == 0
    var_3 = module_0.possible_change(var_1, bool_0)
    assert var_3 == 1
    module_0.possible_change(var_1, var_1)
