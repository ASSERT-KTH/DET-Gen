# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bitcount as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    var_0 = module_0.bitcount(bool_0)
    assert var_0 == 0
    bytes_0 = b"\x0f\xf3\xdf*\xc9\xc61\r\xa4\xe7`\x8d\x802\xac\x1d,\x96\xff"
    bool_1 = False
    var_1 = module_0.bitcount(bool_1)
    assert var_1 == 0
    module_0.bitcount(bytes_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.bitcount(bool_0)
    assert var_0 == 0
    var_1 = module_0.bitcount(var_0)
    assert var_1 == 0
    var_2 = module_0.bitcount(var_0)
    assert var_2 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.bitcount(none_type_0)
    assert var_0 == 0
    var_1 = module_0.bitcount(none_type_0)
    assert var_1 == 0
    int_0 = -1412
    module_0.bitcount(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    bool_1 = True
    var_0 = module_0.bitcount(bool_1)
    assert var_0 == 1
    var_1 = module_0.bitcount(bool_0)
    assert var_1 == 1
    var_2 = module_0.bitcount(bool_0)
    assert var_2 == 1
    bytes_0 = b"\x87(6\x8e\x0c\xccb\xa8\n"
    set_0 = {bool_0, var_1, bytes_0, var_2}
    module_0.bitcount(set_0)
