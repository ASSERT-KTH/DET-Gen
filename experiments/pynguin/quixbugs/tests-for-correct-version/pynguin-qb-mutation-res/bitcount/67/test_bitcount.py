# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bitcount as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\x96\xb2\x9b\x86\xfe>\x99\xd5\xe9\\\xb5\x16L\xf6\x87\x82\xa9\xbfL\xa1"
    module_0.bitcount(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xde\xcf\xfb~\x03`u\x95\x8d\xe0\xc7\xce\xe6\xe2t\xa7$\xd4( "
    none_type_0 = None
    var_0 = module_0.bitcount(none_type_0)
    assert var_0 == 0
    module_0.bitcount(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.bitcount(none_type_0)
    assert var_0 == 0
    int_0 = -1338
    module_0.bitcount(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.bitcount(none_type_0)
    assert var_0 == 0
    var_1 = module_0.bitcount(none_type_0)
    assert var_1 == 0
    var_2 = module_0.bitcount(none_type_0)
    assert var_2 == 0
    var_3 = module_0.bitcount(none_type_0)
    assert var_3 == 0
    bool_0 = True
    var_4 = module_0.bitcount(none_type_0)
    assert var_4 == 0
    var_5 = module_0.bitcount(bool_0)
    assert var_5 == 1
    none_type_1 = None
    var_6 = module_0.bitcount(var_3)
    assert var_6 == 0
    var_7 = module_0.bitcount(var_5)
    assert var_7 == 1
    var_8 = module_0.bitcount(none_type_1)
    assert var_8 == 0
    var_9 = module_0.bitcount(var_8)
    assert var_9 == 0
    var_10 = module_0.bitcount(bool_0)
    assert var_10 == 1
    var_11 = module_0.bitcount(bool_0)
    assert var_11 == 1
    var_12 = module_0.bitcount(var_5)
    assert var_12 == 1
    set_0 = {none_type_0}
    module_0.bitcount(set_0)
