# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import bitcount as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    object_0 = module_0.object()
    module_1.bitcount(object_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_1.bitcount(tuple_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    var_0 = module_1.bitcount(list_0)
    assert var_0 == 0
    var_1 = module_1.bitcount(list_0)
    assert var_1 == 0
    none_type_0 = None
    var_2 = module_1.bitcount(none_type_0)
    assert var_2 == 0
    var_3 = module_1.bitcount(list_0)
    assert var_3 == 0
    none_type_1 = None
    var_4 = module_1.bitcount(none_type_1)
    assert var_4 == 0
    var_5 = module_1.bitcount(var_3)
    assert var_5 == 0
    var_6 = module_1.bitcount(var_3)
    assert var_6 == 0
    var_7 = module_1.bitcount(none_type_1)
    assert var_7 == 0
    var_8 = module_1.bitcount(var_7)
    assert var_8 == 0
    var_9 = module_1.bitcount(list_0)
    assert var_9 == 0
    int_0 = -2899
    var_10 = module_1.bitcount(var_0)
    assert var_10 == 0
    module_1.bitcount(int_0)


def test_case_3():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.bitcount(none_type_0)
    assert var_0 == 0
    var_1 = module_1.bitcount(bool_0)
    assert var_1 == 1
    bool_1 = True
    var_2 = module_1.bitcount(bool_1)
    assert var_2 == 1
    var_3 = module_1.bitcount(bool_1)
    assert var_3 == 1
    var_4 = module_1.bitcount(var_2)
    assert var_4 == 1
    var_5 = module_1.bitcount(bool_1)
    assert var_5 == 1
    var_6 = module_1.bitcount(bool_1)
    assert var_6 == 1
    var_7 = module_1.bitcount(bool_0)
    assert var_7 == 1
    var_8 = module_1.bitcount(var_5)
    assert var_8 == 1
    var_9 = module_1.bitcount(var_5)
    assert var_9 == 1
