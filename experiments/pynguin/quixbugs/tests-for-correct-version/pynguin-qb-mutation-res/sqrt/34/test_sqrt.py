# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sqrt as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    var_0 = module_0.sqrt(bool_0, bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    bool_1 = False
    var_1 = module_0.sqrt(bool_1, bool_1)
    var_2 = module_0.sqrt(var_0, var_0)
    var_3 = module_0.sqrt(var_2, var_2)
    var_4 = module_0.sqrt(var_1, var_0)
    var_5 = module_0.sqrt(var_4, var_0)
    bool_2 = False
    var_6 = module_0.sqrt(bool_2, var_5)
    var_7 = module_0.sqrt(var_1, bool_0)
    int_0 = -195
    module_0.sqrt(var_4, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    var_0 = module_0.sqrt(bool_0, bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    bool_1 = False
    var_1 = module_0.sqrt(bool_1, bool_1)
    var_2 = module_0.sqrt(var_0, var_0)
    str_0 = "pK~!x`6GH"
    module_0.sqrt(str_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    none_type_0 = None
    module_0.sqrt(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.sqrt(bool_0, bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    int_0 = 336
    var_1 = module_0.sqrt(int_0, int_0)
    assert var_1 == pytest.approx(19.46544206742175, abs=0.01, rel=0.01)
    module_1.object(**bool_0)
