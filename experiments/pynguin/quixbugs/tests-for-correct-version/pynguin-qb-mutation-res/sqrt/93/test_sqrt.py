# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sqrt as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 417
    var_0 = module_0.sqrt(int_0, int_0)
    assert var_0 == pytest.approx(22.260230410552648, abs=0.01, rel=0.01)
    var_1 = module_0.sqrt(var_0, var_0)
    assert var_1 == pytest.approx(6.565057602638162, abs=0.01, rel=0.01)
    var_2 = module_0.sqrt(int_0, int_0)
    assert var_2 == pytest.approx(22.260230410552648, abs=0.01, rel=0.01)
    var_3 = module_0.sqrt(var_0, var_0)
    assert var_3 == pytest.approx(6.565057602638162, abs=0.01, rel=0.01)
    var_4 = module_0.sqrt(int_0, var_0)
    assert var_4 == pytest.approx(20.496595073389408, abs=0.01, rel=0.01)
    list_0 = [var_4]
    var_5 = module_0.sqrt(var_0, var_4)
    assert var_5 == pytest.approx(4.977885625119637, abs=0.01, rel=0.01)
    module_0.sqrt(list_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    var_0 = module_0.sqrt(bool_0, bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    bool_1 = True
    var_1 = module_0.sqrt(bool_1, bool_1)
    assert var_1 == pytest.approx(0.5, abs=0.01, rel=0.01)
    var_2 = module_0.sqrt(bool_1, bool_1)
    assert var_2 == pytest.approx(0.5, abs=0.01, rel=0.01)
    bytes_0 = b"\xb6\xe4\xa3\xa9\x8d\x9c\x1cE\x18\x95\xc0\xdcC\xdbR\xee\x898\x12"
    none_type_0 = None
    module_0.sqrt(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xe6\x08\xa9 3G\xa5*\xbcpu\xb3\xf2\x9c\x80"
    none_type_0 = None
    module_0.sqrt(bytes_0, none_type_0)
