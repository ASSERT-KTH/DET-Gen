# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sqrt as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 345
    var_0 = module_0.sqrt(int_0, int_0)
    assert var_0 == pytest.approx(19.780804344427636, abs=0.01, rel=0.01)
    bool_0 = True
    var_1 = module_0.sqrt(bool_0, bool_0)
    assert var_1 == pytest.approx(0.5, abs=0.01, rel=0.01)
    var_2 = module_0.sqrt(var_0, var_1)
    assert var_2 == pytest.approx(4.451399082158494, abs=0.01, rel=0.01)
    none_type_0 = None
    module_0.sqrt(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    var_0 = module_0.sqrt(bool_0, bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    bool_1 = True
    var_1 = module_0.sqrt(bool_1, bool_1)
    assert var_1 == pytest.approx(0.5, abs=0.01, rel=0.01)
    var_2 = module_0.sqrt(var_1, bool_1)
    assert var_2 == pytest.approx(0.25, abs=0.01, rel=0.01)
    object_0 = module_1.object()
    var_3 = module_0.sqrt(var_1, bool_1)
    assert var_3 == pytest.approx(0.25, abs=0.01, rel=0.01)
    float_0 = -2409.22294
    dict_0 = {
        object_0: float_0,
        float_0: object_0,
        float_0: object_0,
        float_0: object_0,
    }
    var_4 = module_0.sqrt(bool_0, var_1)
    module_0.sqrt(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xe8\x05\xe2\xcfG\x7f\xab\x1b\x8e\x8ey"
    module_0.sqrt(bytes_0, bytes_0)
