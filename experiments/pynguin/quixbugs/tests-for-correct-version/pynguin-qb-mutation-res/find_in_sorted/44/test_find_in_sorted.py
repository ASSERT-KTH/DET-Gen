# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    tuple_0 = ()
    bytes_0 = b"\x91\rO\xd5\xae\xd6\xe4\xe6L\x1cJ\xfd\xb2l\x89\xeep\xa5\x15"
    var_0 = module_0.find_in_sorted(tuple_0, bytes_0)
    assert var_0 == -1
    str_0 = "54("
    var_1 = module_0.find_in_sorted(str_0, str_0)
    assert var_1 == -1
    int_0 = 153
    module_0.find_in_sorted(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    list_0 = [bool_0]
    module_0.find_in_sorted(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    object_0 = module_1.object()
    module_0.find_in_sorted(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    bytes_0 = b"k\xd2\x9a\xcf\x08\x9a\xfbW\xff\xea"
    var_0 = module_0.find_in_sorted(bytes_0, bool_0)
    assert var_0 == -1
    module_0.find_in_sorted(bool_0, bool_0)


def test_case_4():
    bool_0 = False
    str_0 = "~ruM"
    tuple_0 = (bool_0, str_0)
    var_0 = module_0.find_in_sorted(tuple_0, str_0)
    assert var_0 == 1
    int_0 = -4148
    list_0 = [int_0, int_0]
    var_1 = module_0.find_in_sorted(list_0, int_0)
    assert var_1 == 1
