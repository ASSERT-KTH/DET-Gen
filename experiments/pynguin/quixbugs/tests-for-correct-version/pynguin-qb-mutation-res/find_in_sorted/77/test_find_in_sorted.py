# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import find_in_sorted as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    set_0 = set()
    object_0 = module_0.object(*set_0)
    var_0 = module_1.find_in_sorted(set_0, set_0)
    assert var_0 == -1
    bytes_0 = b"]\xc1>\x12m\x15\xe6\x8c\x12\xc4(\xae\x83\xff\xad\x1d1{F9"
    tuple_0 = (var_0, var_0, var_0, bytes_0)
    module_1.find_in_sorted(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    object_0 = module_0.object()
    dict_0 = {object_0: object_0}
    module_1.find_in_sorted(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "JS2kLjW\x0bcQ$"
    str_1 = "a]"
    var_0 = module_1.find_in_sorted(str_0, str_1)
    assert var_0 == -1
    module_1.find_in_sorted(var_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "JS2kLjW\x0bcQ$"
    str_1 = "a]"
    var_0 = module_1.find_in_sorted(str_0, str_1)
    assert var_0 == -1
    var_1 = module_1.find_in_sorted(str_0, str_0)
    assert var_1 == -1
    str_2 = "Y`|~>hp>g&zE%UNEyo"
    var_2 = module_1.find_in_sorted(str_1, str_2)
    assert var_2 == -1
    set_0 = {var_0, var_2, var_0, var_1}
    list_0 = [str_1, var_1, set_0]
    var_3 = module_1.find_in_sorted(list_0, var_2)
    assert var_3 == 1
    bytes_0 = b"\xee\xc1L\xef\xbb\x15\x05a["
    var_4 = module_1.find_in_sorted(bytes_0, var_3)
    assert var_4 == -1
    module_1.find_in_sorted(var_2, str_0)
