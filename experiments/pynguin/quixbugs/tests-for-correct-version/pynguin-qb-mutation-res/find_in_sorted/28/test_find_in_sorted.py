# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "w)\\@ga"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_0.find_in_sorted(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0, bool_0}
    module_0.find_in_sorted(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_0 = 104 - 4212.87353j
    none_type_0 = None
    module_0.find_in_sorted(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "+GyVt}S7("
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_0.find_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "Q)x_P|{\rF\tg1"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    list_0 = [str_0, str_0]
    var_1 = module_0.find_in_sorted(list_0, str_0)
    assert var_1 == 1
    var_2 = module_0.find_in_sorted(str_0, str_0)
    assert var_2 == -1
    module_0.find_in_sorted(var_2, str_0)
