# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0
import builtins as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.find_in_sorted(dict_0, dict_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"U\xda\xd8U\x12b\xb3\xa9\xd3\xa8' \xc4\xea\xdb"
    module_0.find_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    tuple_0 = (bool_0,)
    int_0 = -801
    var_0 = module_0.find_in_sorted(tuple_0, int_0)
    assert var_0 == -1
    bytes_0 = b"%"
    module_0.find_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    tuple_0 = (bool_0,)
    int_0 = -801
    var_0 = module_0.find_in_sorted(tuple_0, int_0)
    assert var_0 == -1
    var_1 = module_0.find_in_sorted(tuple_0, bool_0)
    assert var_1 == 0
    module_0.find_in_sorted(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    tuple_0 = (bool_0,)
    int_0 = -801
    var_0 = module_0.find_in_sorted(tuple_0, int_0)
    assert var_0 == -1
    var_1 = module_0.find_in_sorted(tuple_0, bool_0)
    assert var_1 == 0
    str_0 = "pO"
    var_2 = module_1.object()
    var_3 = module_0.find_in_sorted(tuple_0, var_1)
    assert var_3 == 0
    var_4 = module_0.find_in_sorted(str_0, str_0)
    assert var_4 == -1
    module_1.object(*var_2)
