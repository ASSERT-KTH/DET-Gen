# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import find_in_sorted as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)
    none_type_0 = None
    var_0 = module_1.find_in_sorted(dict_0, none_type_0)
    assert var_0 == -1
    str_0 = "y6i+q3K"
    module_1.find_in_sorted(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xdfy"
    module_1.find_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_0 = 3399.79 - 1395.473j
    none_type_0 = None
    module_1.find_in_sorted(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "@5U+~mz-qwdr{"
    var_0 = module_1.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    bytes_0 = b"\xe7\xe3d\x84\r\xc9\xe3\xaf\x97\xb0)\xe8\x92SD|*S"
    module_0.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "%"
    var_0 = module_1.find_in_sorted(str_0, str_0)
    assert var_0 == 0
    bytes_0 = b"\xef\x8a!dLl\xe3\xecf\x9b("
    var_1 = module_1.find_in_sorted(str_0, str_0)
    assert var_1 == 0
    module_1.find_in_sorted(bytes_0, bytes_0)
