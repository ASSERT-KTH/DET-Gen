# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    dict_0 = {}
    var_0 = module_0.find_in_sorted(dict_0, dict_0)
    assert var_0 == -1
    module_0.find_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'r9Oj"/dt'
    none_type_0 = None
    module_0.find_in_sorted(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "<+ t}MRX>gxmn,zPH"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    bool_0 = True
    module_0.find_in_sorted(bool_0, bool_0)


def test_case_4():
    str_0 = "k0\tAtX-9\tD-S4/"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b")[\x1cT$\xdbPV\xc5=3g"
    list_0 = [bytes_0, bytes_0, bytes_0]
    str_0 = "yPn4dG"
    tuple_0 = (list_0, list_0, str_0)
    var_0 = module_0.find_in_sorted(tuple_0, list_0)
    assert var_0 == 1
    bool_0 = True
    module_0.find_in_sorted(str_0, bool_0)
