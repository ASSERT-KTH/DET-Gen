# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "4\"'08} JR8j80I]_3FT"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    var_1 = module_0.find_in_sorted(str_0, str_0)
    assert var_1 == -1
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = []
    module_0.find_in_sorted(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xfeq$\xfb\x1c\x15</\xdd\xd7\xb9\x14\xb9b\x87+\x1e"
    none_type_0 = None
    module_0.find_in_sorted(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xbc\xb4\xbd\xe4c\xa0`\xc4)"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bytes_1 = b"\xe5$J\xeb\xde3\xea\x1e\x0csl\x0e\xd8\x16T\xdd\xca"
    tuple_0 = (bytes_0, set_0, bytes_1)
    str_0 = "k\tt'KOv"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    tuple_1 = (tuple_0, bytes_0, var_0, var_0)
    var_1 = module_0.find_in_sorted(tuple_1, var_0)
    assert var_1 == 2
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, tuple_1)
