# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0
import builtins as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.find_in_sorted(list_0, list_0)
    assert var_0 == -1
    var_1 = module_0.find_in_sorted(list_0, list_0)
    assert var_1 == -1


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.find_in_sorted(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.find_in_sorted(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ";}ba\nHN1+R$A7=PQ8U"
    dict_0 = {}
    tuple_0 = (dict_0,)
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_0.find_in_sorted(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    bool_1 = True
    var_0 = module_0.find_in_sorted(dict_0, bool_1)
    assert var_0 == -1
    module_0.find_in_sorted(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "\x0cGJpwI? .8"
    set_0 = {str_0}
    list_0 = [set_0, str_0]
    var_0 = module_0.find_in_sorted(list_0, str_0)
    assert var_0 == 1
    object_0 = module_1.object()
    module_0.find_in_sorted(object_0, object_0)
