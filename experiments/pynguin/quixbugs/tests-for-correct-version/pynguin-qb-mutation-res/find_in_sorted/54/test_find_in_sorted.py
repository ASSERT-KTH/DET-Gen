# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    dict_0 = {}
    var_0 = module_0.find_in_sorted(dict_0, dict_0)
    assert var_0 == -1
    module_0.find_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.find_in_sorted(tuple_0, tuple_0)
    assert var_0 == -1
    bytes_0 = b"w\xacn\xe0\xb7\xbf\x91\xf2"
    module_0.find_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    object_0 = module_1.object()
    module_0.find_in_sorted(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    var_0 = module_0.find_in_sorted(set_0, set_0)
    assert var_0 == -1
    bytes_0 = b"\xc9"
    var_1 = module_0.find_in_sorted(bytes_0, var_0)
    assert var_1 == -1
    dict_0 = {var_0: var_0}
    module_0.find_in_sorted(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "QbD!D"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    var_1 = module_0.find_in_sorted(str_0, str_0)
    assert var_1 == -1
    module_0.find_in_sorted(var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "m\rh\\\rj,"
    list_0 = [str_0, str_0]
    var_0 = module_0.find_in_sorted(list_0, str_0)
    assert var_0 == 1
    module_0.find_in_sorted(var_0, var_0)
