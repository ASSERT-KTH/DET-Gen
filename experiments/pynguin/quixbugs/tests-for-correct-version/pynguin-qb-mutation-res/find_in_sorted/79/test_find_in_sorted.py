# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0
import builtins as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.find_in_sorted(dict_0, dict_0)
    assert var_0 == -1
    list_0 = []
    var_1 = module_0.find_in_sorted(list_0, list_0)
    assert var_1 == -1


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xd2N\x01"
    module_0.find_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 777
    module_0.find_in_sorted(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "dr-\n+@c&QG;>$4U"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_1.object(*var_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 1444
    list_0 = [int_0, int_0, int_0, int_0]
    var_0 = module_0.find_in_sorted(list_0, int_0)
    assert var_0 == 2
    str_0 = "dr-\n+@c&QG;>$4U"
    var_1 = module_0.find_in_sorted(str_0, str_0)
    assert var_1 == -1
    var_2 = module_0.find_in_sorted(list_0, var_1)
    assert var_2 == -1
    dict_0 = module_0.find_in_sorted(str_0, str_0)
    assert dict_0 == -1
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)
