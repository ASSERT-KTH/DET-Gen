# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    set_0 = set()
    var_0 = module_0.find_in_sorted(set_0, set_0)
    assert var_0 == -1
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "W 72{\x0cO^pZXvs/Ck>-+@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bytes_0 = b"\x1e\xa4\x9c\xf62\x92\\\xe1\xe8A\xb5\x1b\xcf"
    module_0.find_in_sorted(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.find_in_sorted(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "W%Pdeu`J"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    var_1 = module_0.find_in_sorted(str_0, str_0)
    assert var_1 == -1
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "D=$:)?.{I95W|"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    var_0 = module_0.find_in_sorted(tuple_0, bool_0)
    assert var_0 == 1
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)
