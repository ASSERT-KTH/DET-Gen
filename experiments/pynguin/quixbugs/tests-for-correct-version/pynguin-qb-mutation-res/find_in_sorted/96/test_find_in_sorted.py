# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0


def test_case_0():
    list_0 = []
    var_0 = module_0.find_in_sorted(list_0, list_0)
    assert var_0 == -1
    var_1 = module_0.find_in_sorted(list_0, var_0)
    assert var_1 == -1


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.find_in_sorted(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -2133
    module_0.find_in_sorted(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    str_0 = "G$QHw"
    bytes_0 = b"\xcf\xf9\xa3\xe3\xaa>\x9f\x85\x06"
    var_0 = module_0.find_in_sorted(bytes_0, bool_0)
    assert var_0 == -1
    module_0.find_in_sorted(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    list_1 = [list_0]
    var_0 = module_0.find_in_sorted(list_1, list_1)
    assert var_0 == -1
    bool_0 = False
    module_0.find_in_sorted(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "S"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == 0
    var_1 = module_0.find_in_sorted(str_0, str_0)
    assert var_1 == 0
    module_0.find_in_sorted(var_1, var_1)
