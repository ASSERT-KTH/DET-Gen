# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "C65v!VE5Gx!~,I\x0c(_oK"
    module_0.topological_ordering(str_0)


def test_case_2():
    node_0 = module_1.Node()
    list_0 = [node_0, node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


def test_case_3():
    dict_0 = {}
    dict_1 = {}
    none_type_0 = None
    dict_2 = {none_type_0: dict_0}
    node_0 = module_1.Node(dict_1, dict_1, none_type_0, dict_0, dict_2, dict_0)
    list_0 = [node_0, node_0]
    int_0 = -1006
    node_1 = module_1.Node(
        node_0, successors=int_0, predecessors=list_0, outgoing_nodes=list_0
    )
    dict_3 = {node_0: int_0, node_0: node_1, node_1: int_0}
    var_0 = module_0.topological_ordering(dict_3)


def test_case_4():
    dict_0 = {}
    node_0 = module_1.Node(
        dict_0, successors=dict_0, predecessors=dict_0, incoming_nodes=dict_0
    )
    list_0 = [node_0]
    int_0 = -984
    node_1 = module_1.Node(
        node_0, successors=int_0, predecessors=list_0, outgoing_nodes=list_0
    )
    dict_1 = {node_1: node_1}
    var_0 = module_0.topological_ordering(dict_1)


def test_case_5():
    dict_0 = {}
    node_0 = module_1.Node(
        dict_0,
        successors=dict_0,
        predecessors=dict_0,
        incoming_nodes=dict_0,
        outgoing_nodes=dict_0,
    )
    list_0 = [node_0]
    int_0 = -984
    node_1 = module_1.Node(
        node_0, successors=int_0, predecessors=list_0, outgoing_nodes=list_0
    )
    dict_1 = {node_0: int_0, node_0: node_1, node_1: int_0}
    var_0 = module_0.topological_ordering(dict_1)
