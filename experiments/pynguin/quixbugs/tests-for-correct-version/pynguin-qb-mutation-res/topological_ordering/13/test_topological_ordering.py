# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    bytes_0 = b""
    var_0 = module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -2014
    list_0 = [int_0, int_0, int_0]
    module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 1370.809407
    module_0.topological_ordering(float_0)


def test_case_3():
    node_0 = module_1.Node()
    set_0 = {node_0, node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 1190
    int_1 = 950
    bytes_0 = b""
    tuple_0 = (int_0, int_1, bytes_0)
    dict_0 = {tuple_0: int_0, int_0: int_1}
    node_0 = module_1.Node(incoming_nodes=dict_0)
    bool_0 = True
    dict_1 = {node_0: bool_0, int_0: node_0, int_1: tuple_0, bool_0: int_1}
    module_0.topological_ordering(dict_1)


def test_case_5():
    node_0 = module_1.Node()
    dict_0 = {
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
    }
    node_1 = module_1.Node(node_0, predecessors=dict_0, outgoing_nodes=dict_0)
    list_0 = [node_0, node_0, node_1]
    var_0 = module_0.topological_ordering(list_0)


def test_case_6():
    node_0 = module_1.Node()
    dict_0 = {
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
    }
    node_1 = module_1.Node(node_0, predecessors=dict_0, outgoing_nodes=dict_0)
    list_0 = [node_1]
    var_0 = module_0.topological_ordering(list_0)
