# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.topological_ordering(bool_0)


def test_case_3():
    node_0 = module_1.Node()
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    node_0 = module_1.Node()
    node_1 = module_1.Node(successor=node_0, predecessors=node_0, incoming_nodes=node_0)
    list_0 = [node_1, node_0]
    var_0 = module_0.topological_ordering(list_0)
    bytes_0 = b""
    var_1 = module_0.topological_ordering(bytes_0)
    var_1.successor()


def test_case_5():
    node_0 = module_1.Node()
    dict_0 = {node_0: node_0}
    node_1 = module_1.Node(outgoing_nodes=dict_0)
    dict_1 = {node_1: node_0}
    var_0 = module_0.topological_ordering(dict_1)


def test_case_6():
    node_0 = module_1.Node()
    dict_0 = {node_0: node_0}
    node_1 = module_1.Node(outgoing_nodes=dict_0)
    dict_1 = {node_0: dict_0, node_1: node_0}
    var_0 = module_0.topological_ordering(dict_1)
