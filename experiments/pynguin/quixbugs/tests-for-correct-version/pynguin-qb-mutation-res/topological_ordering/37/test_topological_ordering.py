# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1
import builtins as module_2


def test_case_0():
    node_0 = module_0.Node()
    dict_0 = {node_0: node_0, node_0: node_0, node_0: node_0}
    var_0 = module_1.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_1.topological_ordering(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"j\x9d\xc0"
    none_type_0 = None
    node_0 = module_0.Node(
        successors=none_type_0, predecessors=bytes_0, incoming_nodes=bytes_0
    )
    str_0 = "H"
    dict_0 = {node_0: str_0}
    var_0 = module_1.topological_ordering(dict_0)
    object_0 = module_2.object()
    var_0.successors()


def test_case_3():
    none_type_0 = None
    node_0 = module_0.Node(successors=none_type_0)
    list_0 = [node_0]
    node_1 = module_0.Node(successors=none_type_0, outgoing_nodes=list_0)
    dict_0 = {node_1: node_1}
    var_0 = module_1.topological_ordering(dict_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_0.Node(successors=none_type_0)
    list_0 = [node_0]
    node_1 = module_0.Node(successors=none_type_0, outgoing_nodes=list_0)
    dict_0 = {node_0: node_0, node_0: none_type_0, node_1: node_1}
    var_0 = module_1.topological_ordering(dict_0)
