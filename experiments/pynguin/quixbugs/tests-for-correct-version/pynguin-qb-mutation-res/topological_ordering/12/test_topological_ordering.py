# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '"3yhgSZ\x0b0)'
    module_0.topological_ordering(str_0)


def test_case_2():
    dict_0 = {}
    node_0 = module_1.Node(successors=dict_0, incoming_nodes=dict_0)
    tuple_0 = (node_0,)
    var_0 = module_0.topological_ordering(tuple_0)


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    dict_1 = {none_type_0: dict_0, none_type_0: none_type_0}
    node_0 = module_1.Node(
        successor=none_type_0, successors=none_type_0, incoming_nodes=dict_1
    )
    tuple_0 = (node_0,)
    node_1 = module_1.Node(outgoing_nodes=tuple_0)
    set_0 = {node_1, node_0, node_1, node_0, node_0, node_1, node_1, node_0}
    var_0 = module_0.topological_ordering(set_0)


def test_case_4():
    dict_0 = {}
    node_0 = module_1.Node(successors=dict_0, incoming_nodes=dict_0)
    tuple_0 = (node_0,)
    node_1 = module_1.Node(outgoing_nodes=tuple_0)
    set_0 = {node_1}
    var_0 = module_0.topological_ordering(set_0)


def test_case_5():
    dict_0 = {}
    node_0 = module_1.Node(successors=dict_0, incoming_nodes=dict_0)
    tuple_0 = (node_0,)
    node_1 = module_1.Node(outgoing_nodes=tuple_0)
    set_0 = {node_0, node_1}
    var_0 = module_0.topological_ordering(set_0)
