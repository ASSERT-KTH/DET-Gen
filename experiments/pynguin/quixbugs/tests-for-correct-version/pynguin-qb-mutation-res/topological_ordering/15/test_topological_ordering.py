# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "gE'dk+~ cHb|+([/\\t/"
    module_0.topological_ordering(str_0)


def test_case_2():
    node_0 = module_1.Node()
    dict_0 = {node_0: node_0, node_0: node_0, node_0: node_0, node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x80\xfe\xc9\xc1\x01\xe4\xa4HJ\x94\xfayD|p\x18$\xc6x"
    tuple_0 = (bytes_0,)
    node_0 = module_1.Node(
        successors=tuple_0, incoming_nodes=bytes_0, outgoing_nodes=tuple_0
    )
    list_0 = [node_0, tuple_0]
    module_0.topological_ordering(list_0)


def test_case_4():
    node_0 = module_1.Node()
    list_0 = [
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    ]
    set_0 = set()
    node_1 = module_1.Node(set_0, incoming_nodes=set_0, outgoing_nodes=list_0)
    list_1 = [node_1]
    var_0 = module_0.topological_ordering(list_1)
