# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    set_0 = {node_0, node_0}
    var_0 = module_1.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_1.topological_ordering(bool_0)


def test_case_2():
    node_0 = module_0.Node()
    set_0 = {node_0}
    none_type_0 = None
    node_1 = module_0.Node(none_type_0, incoming_nodes=node_0)
    tuple_0 = (node_1,)
    var_0 = module_1.topological_ordering(tuple_0)
    var_1 = module_1.topological_ordering(set_0)


def test_case_3():
    str_0 = ""
    node_0 = module_0.Node(successors=str_0, outgoing_nodes=str_0)
    dict_0 = {node_0: str_0}
    node_1 = module_0.Node(outgoing_nodes=dict_0)
    tuple_0 = (node_1,)
    var_0 = module_1.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "s<#m=f7h~)ao"
    node_0 = module_0.Node(
        successor=str_0, successors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    dict_0 = {node_0: str_0}
    node_1 = module_0.Node(outgoing_nodes=dict_0)
    tuple_0 = (node_1,)
    var_0 = module_1.topological_ordering(tuple_0)
    node_2 = module_0.Node()
    set_0 = {node_2, node_2}
    var_1 = module_1.topological_ordering(set_0)
    node_3 = module_0.Node(incoming_nodes=node_2)
    str_1 = "\\Z+K\nNH"
    module_1.topological_ordering(str_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ""
    node_0 = module_0.Node(successors=str_0, outgoing_nodes=str_0)
    dict_0 = {node_0: str_0}
    node_1 = module_0.Node(outgoing_nodes=dict_0)
    tuple_0 = (node_1,)
    var_0 = module_1.topological_ordering(tuple_0)
    var_1 = module_1.topological_ordering(var_0)
    node_1.predecessors()
