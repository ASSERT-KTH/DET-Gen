# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1
import builtins as module_2


def test_case_0():
    node_0 = module_0.Node()
    dict_0 = {node_0: node_0}
    var_0 = module_1.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "XgJ\tD14`k['BKG7XlSb"
    module_1.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_1.topological_ordering(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    var_0 = module_1.topological_ordering(dict_0)
    object_0 = module_2.object(**dict_0)
    node_0 = module_0.Node(
        successor=object_0,
        successors=dict_0,
        predecessors=dict_0,
        outgoing_nodes=object_0,
    )
    node_1 = module_0.Node(incoming_nodes=node_0)
    node_2 = module_0.Node(predecessors=node_1, outgoing_nodes=var_0)
    tuple_0 = (node_1, node_2, node_1, node_0)
    module_1.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    list_1 = [list_0, list_0]
    none_type_0 = None
    node_0 = module_0.Node(
        list_1, none_type_0, incoming_nodes=none_type_0, outgoing_nodes=list_1
    )
    set_0 = {node_0}
    module_1.topological_ordering(set_0)
