# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x00\xa9"
    module_0.topological_ordering(bytes_0)


def test_case_2():
    node_0 = module_1.Node()
    dict_0 = {node_0: node_0, node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    str_0 = "]OU0Ka~3oLs:J&3$"
    node_0 = module_1.Node(
        successor=none_type_0, predecessors=none_type_0, outgoing_nodes=str_0
    )
    dict_0 = {node_0: none_type_0, node_0: node_0}
    module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    set_0 = set()
    none_type_0 = None
    str_0 = "!Z]"
    node_0 = module_1.Node(
        successor=none_type_0, predecessors=set_0, outgoing_nodes=str_0
    )
    dict_0 = {node_0: none_type_0, node_0: node_0}
    set_1 = {str_0}
    bool_0 = True
    node_1 = module_1.Node(
        successor=set_1,
        successors=node_0,
        predecessors=none_type_0,
        incoming_nodes=bool_0,
    )
    list_0 = [node_1, dict_0, node_0]
    module_0.topological_ordering(list_0)


def test_case_5():
    node_0 = module_1.Node()
    list_0 = [
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    ]
    node_1 = module_1.Node(predecessors=node_0, outgoing_nodes=list_0)
    dict_0 = {node_1: node_1}
    var_0 = module_0.topological_ordering(dict_0)
