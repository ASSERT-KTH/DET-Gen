# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    str_0 = ""
    var_0 = module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ""
    var_0 = module_0.topological_ordering(str_0)
    str_1 = "N5r\t5\x0bp+I"
    module_0.topological_ordering(str_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.topological_ordering(bool_0)


def test_case_3():
    set_0 = set()
    node_0 = module_1.Node(outgoing_nodes=set_0)
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    node_0 = module_1.Node(outgoing_nodes=set_0)
    dict_0 = {node_0: node_0}
    module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    node_0 = module_1.Node(
        successor=set_0, incoming_nodes=set_0, outgoing_nodes=none_type_0
    )
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)
    bool_1 = False
    module_0.topological_ordering(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"}z\xec\x95D\x7fr\xbe\x06\xa3\x07\xbf|\x89\x85\x0c\xea"
    node_0 = module_1.Node(incoming_nodes=bytes_0)
    set_0 = {node_0, bytes_0}
    node_1 = module_1.Node(outgoing_nodes=set_0)
    set_1 = {node_1, node_1}
    module_0.topological_ordering(set_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b""
    node_0 = module_1.Node(incoming_nodes=bytes_0)
    set_0 = {node_0, bytes_0}
    node_1 = module_1.Node(outgoing_nodes=set_0)
    set_1 = {node_1, node_0}
    module_0.topological_ordering(set_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0)
    list_0 = [node_0, node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)
    var_1 = module_0.topological_ordering(list_0)
    bytes_0 = b""
    node_1 = module_1.Node(incoming_nodes=bytes_0)
    set_0 = {node_1, node_0}
    node_2 = module_1.Node(outgoing_nodes=set_0)
    set_1 = {node_2, node_1}
    var_2 = module_0.topological_ordering(set_1)
    bool_0 = True
    module_0.topological_ordering(bool_0)
