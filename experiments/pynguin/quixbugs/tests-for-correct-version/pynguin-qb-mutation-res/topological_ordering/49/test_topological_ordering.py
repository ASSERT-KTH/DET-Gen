# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x0eX\xd4"
    module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 3548.244065
    module_0.topological_ordering(float_0)


def test_case_3():
    node_0 = module_1.Node()
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "Re]9~A#N4MlO}M-Gw."
    node_0 = module_1.Node(predecessors=str_0, incoming_nodes=str_0)
    set_0 = {node_0}
    var_0 = module_0.topological_ordering(set_0)
    dict_0 = {}
    node_1 = module_1.Node(successors=dict_0, incoming_nodes=dict_0)
    list_0 = [node_1]
    var_1 = module_0.topological_ordering(list_0)
    var_2 = module_0.topological_ordering(dict_0)
    var_3 = module_0.topological_ordering(dict_0)
    var_4 = module_0.topological_ordering(dict_0)
    var_4.successor()


def test_case_5():
    node_0 = module_1.Node()
    set_0 = {node_0, node_0, node_0, node_0, node_0, node_0, node_0, node_0, node_0}
    node_1 = module_1.Node(successor=set_0, outgoing_nodes=set_0)
    set_1 = {node_1, node_1}
    var_0 = module_0.topological_ordering(set_1)


def test_case_6():
    node_0 = module_1.Node()
    set_0 = {node_0, node_0, node_0, node_0, node_0, node_0, node_0, node_0, node_0}
    node_1 = module_1.Node(successor=set_0, outgoing_nodes=set_0)
    set_1 = {node_0, node_0, node_1, node_0, node_1}
    var_0 = module_0.topological_ordering(set_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "Re]9~A#4MlO}MGw."
    node_0 = module_1.Node(predecessors=str_0, incoming_nodes=str_0)
    set_0 = {node_0}
    var_0 = module_0.topological_ordering(set_0)
    dict_0 = {}
    node_1 = module_1.Node(
        successors=dict_0, incoming_nodes=dict_0, outgoing_nodes=set_0
    )
    list_0 = [node_1]
    var_1 = module_0.topological_ordering(list_0)
    node_1.successor()
