# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    str_0 = ""
    node_0 = module_0.Node(str_0, outgoing_nodes=str_0)
    dict_0 = {node_0: node_0}
    var_0 = module_1.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"8\x1a\x81"
    module_1.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "."
    node_0 = module_0.Node(str_0, outgoing_nodes=str_0)
    dict_0 = {node_0: node_0}
    module_1.topological_ordering(dict_0)


def test_case_3():
    str_0 = ""
    node_0 = module_0.Node(str_0, outgoing_nodes=str_0)
    dict_0 = {node_0: node_0}
    node_1 = module_0.Node(successors=dict_0, outgoing_nodes=dict_0)
    list_0 = [node_1]
    var_0 = module_1.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ""
    node_0 = module_0.Node(str_0, outgoing_nodes=str_0)
    dict_0 = {node_0: node_0}
    var_0 = module_1.topological_ordering(dict_0)
    node_1 = module_0.Node(successors=dict_0, outgoing_nodes=var_0)
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_1]
    var_1 = module_1.topological_ordering(list_0)
    var_2 = module_1.topological_ordering(var_1)
    node_1.successors()


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "sF\r1n85x{_Q\x0bKg.XK"
    none_type_0 = None
    node_0 = module_0.Node(
        none_type_0, str_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    dict_0 = {node_0: node_0}
    var_0 = module_1.topological_ordering(dict_0)
    node_1 = module_0.Node(successors=dict_0, outgoing_nodes=dict_0)
    list_0 = [node_1]
    var_1 = module_1.topological_ordering(list_0)
    node_0.successor()
