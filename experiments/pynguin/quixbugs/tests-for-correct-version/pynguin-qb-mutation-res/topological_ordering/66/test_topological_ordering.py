# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    bytes_0 = b""
    var_0 = module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"U(Q\xc5Q\x1a\xbf#{"
    module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


def test_case_3():
    node_0 = module_1.Node()
    set_0 = {node_0, node_0, node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "@+,xRR{!/Gtdk+j0FD<]"
    node_0 = module_1.Node(str_0, predecessors=str_0, outgoing_nodes=str_0)
    set_0 = {node_0, node_0}
    module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    bytes_0 = b"F=.\xa2*\xefE\x81eN\x97x\x06\x87"
    node_0 = module_1.Node(predecessors=bytes_0)
    bool_0 = True
    tuple_1 = (tuple_0, node_0, bool_0, node_0)
    node_1 = module_1.Node(incoming_nodes=tuple_1, outgoing_nodes=tuple_0)
    complex_0 = -10.8 + 2348j
    tuple_2 = (node_0, complex_0)
    tuple_3 = (node_1, bool_0, tuple_2)
    module_0.topological_ordering(tuple_3)


def test_case_6():
    node_0 = module_1.Node()
    set_0 = {node_0}
    node_1 = module_1.Node(outgoing_nodes=set_0)
    tuple_0 = (node_1,)
    var_0 = module_0.topological_ordering(tuple_0)


def test_case_7():
    node_0 = module_1.Node()
    set_0 = {node_0}
    node_1 = module_1.Node(outgoing_nodes=set_0)
    tuple_0 = (node_0, node_1)
    var_0 = module_0.topological_ordering(tuple_0)
