# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    set_0 = set()
    node_0 = module_0.Node(successor=set_0, successors=set_0, incoming_nodes=set_0)
    tuple_0 = (node_0,)
    var_0 = module_1.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    var_0 = module_1.topological_ordering(set_0)
    var_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x00\x08pC@/\x8e\x93\xe1h\x9a9(d\x9b\x83\xdd\xfd%\xbf"
    module_1.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    none_type_0 = None
    set_1 = {none_type_0}
    node_0 = module_0.Node(
        successor=none_type_0,
        successors=set_1,
        predecessors=set_0,
        incoming_nodes=set_0,
        outgoing_nodes=set_1,
    )
    tuple_0 = (node_0,)
    module_1.topological_ordering(tuple_0)


def test_case_4():
    none_type_0 = None
    set_0 = {none_type_0}
    node_0 = module_0.Node(
        successor=none_type_0,
        successors=set_0,
        predecessors=set_0,
        incoming_nodes=set_0,
        outgoing_nodes=set_0,
    )
    tuple_0 = (node_0,)
    var_0 = module_1.topological_ordering(tuple_0)


def test_case_5():
    set_0 = set()
    node_0 = module_0.Node(successor=set_0, successors=set_0, incoming_nodes=set_0)
    tuple_0 = (node_0,)
    node_1 = module_0.Node(predecessors=node_0, outgoing_nodes=tuple_0)
    list_0 = [node_1]
    var_0 = module_1.topological_ordering(list_0)


def test_case_6():
    set_0 = set()
    node_0 = module_0.Node(successor=set_0, successors=set_0, incoming_nodes=set_0)
    tuple_0 = (node_0,)
    node_1 = module_0.Node(predecessors=node_0, outgoing_nodes=tuple_0)
    list_0 = [node_1, node_0, node_0]
    var_0 = module_1.topological_ordering(list_0)
