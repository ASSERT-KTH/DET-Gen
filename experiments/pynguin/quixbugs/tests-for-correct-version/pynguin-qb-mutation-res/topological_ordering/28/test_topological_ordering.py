# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "\r"
    module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


def test_case_3():
    tuple_0 = ()
    node_0 = module_1.Node(predecessors=tuple_0)
    set_0 = {node_0, node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 361.982178
    none_type_0 = None
    node_0 = module_1.Node(
        float_0, none_type_0, incoming_nodes=float_0, outgoing_nodes=none_type_0
    )
    tuple_0 = (node_0,)
    var_0 = module_0.topological_ordering(tuple_0)
    module_0.topological_ordering(node_0)


def test_case_5():
    list_0 = []
    node_0 = module_1.Node(
        list_0, successors=list_0, predecessors=list_0, outgoing_nodes=list_0
    )
    list_1 = [node_0]
    node_1 = module_1.Node(successor=list_1, outgoing_nodes=list_1)
    dict_0 = {node_1: node_1, node_1: node_1, node_0: node_1}
    var_0 = module_0.topological_ordering(dict_0)


def test_case_6():
    list_0 = []
    node_0 = module_1.Node(
        list_0, successors=list_0, predecessors=list_0, outgoing_nodes=list_0
    )
    list_1 = [node_0]
    node_1 = module_1.Node(successor=list_1, outgoing_nodes=list_1)
    dict_0 = {node_1: node_1}
    var_0 = module_0.topological_ordering(dict_0)
