# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)
    var_1 = module_0.topological_ordering(var_0)


def test_case_1():
    bytes_0 = b""
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, outgoing_nodes=bytes_0
    )
    set_0 = {node_0}
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -1811
    module_0.topological_ordering(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x8cZ\xff\x908\xcf\x11\xdd\xa2\n\x99\xd6\xdck\xcdk\x92\xe5"
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, outgoing_nodes=bytes_0
    )
    set_0 = {node_0}
    module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    object_0 = module_2.object()
    complex_0 = -1991.1 - 2184.14j
    dict_0 = {object_0: object_0, object_0: complex_0}
    list_0 = [dict_0, object_0]
    node_0 = module_1.Node(list_0, dict_0, object_0, incoming_nodes=list_0)
    tuple_0 = (node_0, dict_0)
    module_0.topological_ordering(tuple_0)


def test_case_5():
    bool_0 = False
    node_0 = module_1.Node(bool_0, predecessors=bool_0)
    set_0 = {node_0}
    node_1 = module_1.Node(successor=set_0, successors=set_0, outgoing_nodes=set_0)
    set_1 = {node_1, node_1}
    var_0 = module_0.topological_ordering(set_1)


def test_case_6():
    bool_0 = False
    node_0 = module_1.Node(bool_0, predecessors=bool_0)
    set_0 = {node_0}
    node_1 = module_1.Node(successor=set_0, successors=set_0, outgoing_nodes=set_0)
    set_1 = {node_1, node_0, node_1, node_1}
    var_0 = module_0.topological_ordering(set_1)
