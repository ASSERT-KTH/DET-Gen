# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xe84\xd0\xc67\xa6\xd1\xe4\x0bV"
    module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.topological_ordering(bool_0)


def test_case_3():
    bytes_0 = b"\xcd\x81\xc0g_\xeb"
    node_0 = module_1.Node(incoming_nodes=bytes_0)
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)


def test_case_4():
    bytes_0 = b""
    node_0 = module_1.Node(incoming_nodes=bytes_0)
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)


def test_case_5():
    int_0 = -2782
    node_0 = module_1.Node(successor=int_0)
    dict_0 = {node_0: node_0}
    node_1 = module_1.Node(node_0, successors=dict_0, outgoing_nodes=dict_0)
    tuple_0 = (node_0, node_1, node_0, node_1)
    var_0 = module_0.topological_ordering(tuple_0)


def test_case_6():
    int_0 = -2801
    node_0 = module_1.Node(successor=int_0)
    dict_0 = {node_0: node_0}
    node_1 = module_1.Node(node_0, successors=dict_0, outgoing_nodes=dict_0)
    set_0 = {node_1}
    var_0 = module_0.topological_ordering(set_0)
