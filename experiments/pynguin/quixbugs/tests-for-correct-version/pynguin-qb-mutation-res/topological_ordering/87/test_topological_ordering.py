# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x86\x9f\xdc>\xa5\xcfA\xbb\xd9\xcb\x0b\xf1\xb8\x9f"
    module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


def test_case_3():
    node_0 = module_1.Node()
    dict_0 = {node_0: node_0, node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 2218.0
    none_type_0 = None
    node_0 = module_1.Node(
        successor=float_0,
        successors=none_type_0,
        incoming_nodes=float_0,
        outgoing_nodes=float_0,
    )
    list_0 = [node_0, none_type_0, none_type_0]
    module_0.topological_ordering(list_0)


def test_case_5():
    node_0 = module_1.Node()
    set_0 = {node_0, node_0, node_0, node_0, node_0, node_0, node_0}
    node_1 = module_1.Node(successor=set_0, outgoing_nodes=set_0)
    set_1 = {node_1, node_0}
    var_0 = module_0.topological_ordering(set_1)


def test_case_6():
    node_0 = module_1.Node()
    set_0 = {node_0, node_0, node_0, node_0, node_0, node_0, node_0, node_0, node_0}
    node_1 = module_1.Node(successor=set_0, outgoing_nodes=set_0)
    set_1 = {node_1}
    var_0 = module_0.topological_ordering(set_1)
