# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xb3\xc31\x08iD"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)
    var_1 = module_1.Node(successors=var_0, incoming_nodes=list_0)
    var_2 = module_1.Node(successor=var_0, successors=list_0, incoming_nodes=var_1)
    list_1 = [var_2]
    var_3 = module_0.topological_ordering(list_1)
    var_4 = module_0.topological_ordering(list_1)
    var_4.successors()


def test_case_4():
    node_0 = module_1.Node()
    list_0 = [node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


def test_case_5():
    int_0 = 2877
    node_0 = module_1.Node(int_0, int_0, int_0, int_0)
    set_0 = {node_0}
    node_1 = module_1.Node(set_0, node_0, predecessors=node_0, outgoing_nodes=set_0)
    list_0 = [node_1]
    var_0 = module_0.topological_ordering(list_0)


def test_case_6():
    int_0 = 2877
    node_0 = module_1.Node(int_0, int_0, int_0, int_0)
    set_0 = {node_0}
    node_1 = module_1.Node(set_0, node_0, predecessors=node_0, outgoing_nodes=set_0)
    list_0 = [node_1, node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)
