# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xf9\xe44\xa4\xf8O\x8c=\xca\xac"
    module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 439
    module_0.topological_ordering(int_0)


def test_case_2():
    tuple_0 = ()
    var_0 = module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -3085
    node_0 = module_1.Node(predecessors=int_0, incoming_nodes=int_0)
    bool_0 = True
    tuple_0 = (node_0, bool_0, node_0, int_0)
    module_0.topological_ordering(tuple_0)


def test_case_4():
    node_0 = module_1.Node()
    set_0 = {node_0, node_0, node_0, node_0, node_0, node_0, node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


def test_case_5():
    node_0 = module_1.Node()
    set_0 = {node_0, node_0, node_0}
    node_1 = module_1.Node(successors=node_0, predecessors=node_0, outgoing_nodes=set_0)
    dict_0 = {node_1: set_0, node_0: node_1, node_1: set_0}
    var_0 = module_0.topological_ordering(dict_0)


def test_case_6():
    node_0 = module_1.Node()
    set_0 = {node_0, node_0, node_0, node_0, node_0, node_0, node_0}
    node_1 = module_1.Node(successors=set_0, predecessors=set_0, outgoing_nodes=set_0)
    dict_0 = {node_1: set_0}
    var_0 = module_0.topological_ordering(dict_0)
