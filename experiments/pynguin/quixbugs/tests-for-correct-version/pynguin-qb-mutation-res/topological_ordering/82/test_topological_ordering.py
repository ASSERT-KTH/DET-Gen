# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    str_0 = ""
    var_0 = module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 1057
    module_0.topological_ordering(int_0)


def test_case_3():
    dict_0 = {}
    node_0 = module_1.Node(dict_0, successors=dict_0, outgoing_nodes=dict_0)
    list_0 = [node_0, node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    bool_1 = True
    node_0 = module_1.Node(successors=bool_0, incoming_nodes=bool_1)
    list_0 = [node_0, bool_0]
    module_0.topological_ordering(list_0)


def test_case_5():
    dict_0 = {}
    node_0 = module_1.Node(dict_0, successors=dict_0, outgoing_nodes=dict_0)
    list_0 = [node_0, node_0, node_0, node_0]
    node_1 = module_1.Node(outgoing_nodes=list_0)
    list_1 = [node_1]
    var_0 = module_0.topological_ordering(list_1)


def test_case_6():
    dict_0 = {}
    none_type_0 = None
    dict_1 = {none_type_0: none_type_0}
    var_0 = module_0.topological_ordering(dict_0)
    node_0 = module_1.Node(none_type_0, dict_0, dict_0, none_type_0, dict_1, dict_0)
    list_0 = [node_0, node_0, node_0]
    node_1 = module_1.Node(outgoing_nodes=list_0)
    list_1 = [node_1, node_1, node_1, node_1, node_1]
    var_1 = module_0.topological_ordering(list_1)
