# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    tuple_0 = (node_0,)
    var_0 = module_1.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_1.topological_ordering(bool_0)


def test_case_2():
    node_0 = module_0.Node()
    set_0 = {node_0, node_0, node_0}
    node_1 = module_0.Node(outgoing_nodes=set_0)
    tuple_0 = (node_1,)
    var_0 = module_1.topological_ordering(tuple_0)


def test_case_3():
    node_0 = module_0.Node()
    set_0 = {node_0, node_0, node_0}
    node_1 = module_0.Node(outgoing_nodes=set_0)
    tuple_0 = (node_1,)
    var_0 = module_1.topological_ordering(tuple_0)
    var_1 = module_1.topological_ordering(var_0)
    var_2 = module_1.topological_ordering(var_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    node_0 = module_0.Node()
    tuple_0 = (node_0,)
    set_0 = {tuple_0, node_0, node_0}
    none_type_0 = None
    node_1 = module_0.Node(
        successors=tuple_0, incoming_nodes=set_0, outgoing_nodes=none_type_0
    )
    tuple_1 = (node_1,)
    var_0 = module_1.topological_ordering(tuple_0)
    var_1 = module_1.topological_ordering(tuple_1)
    node_0.predecessors()
