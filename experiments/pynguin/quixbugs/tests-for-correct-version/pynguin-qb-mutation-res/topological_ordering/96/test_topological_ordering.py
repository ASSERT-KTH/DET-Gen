# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    bytes_0 = b""
    var_0 = module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x1b\x1a"
    module_0.topological_ordering(bytes_0)


def test_case_2():
    node_0 = module_1.Node()
    set_0 = {node_0}
    var_0 = module_0.topological_ordering(set_0)


def test_case_3():
    bytes_0 = b"\x8c\x08V'E"
    node_0 = module_1.Node(bytes_0, successors=bytes_0, incoming_nodes=bytes_0)
    tuple_0 = (node_0, node_0)
    var_0 = module_0.topological_ordering(tuple_0)
    var_1 = module_1.Node(successor=var_0, incoming_nodes=tuple_0)
    assert var_1.successor == []


def test_case_4():
    node_0 = module_1.Node()
    set_0 = {
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    }
    node_1 = module_1.Node(set_0, predecessors=node_0, outgoing_nodes=set_0)
    dict_0 = {node_1: set_0}
    var_0 = module_0.topological_ordering(dict_0)


def test_case_5():
    node_0 = module_1.Node()
    set_0 = {
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    }
    node_1 = module_1.Node(set_0, predecessors=node_0, outgoing_nodes=set_0)
    dict_0 = {node_0: set_0, node_1: set_0}
    var_0 = module_0.topological_ordering(dict_0)
