# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "?`*46B}m'g @8uS(<Sj2"
    module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


def test_case_3():
    node_0 = module_1.Node()
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -790
    set_0 = {int_0}
    node_0 = module_1.Node(successors=int_0, outgoing_nodes=set_0)
    list_0 = [node_0]
    module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -779
    none_type_0 = None
    node_0 = module_1.Node(
        successors=int_0, incoming_nodes=int_0, outgoing_nodes=none_type_0
    )
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)
    none_type_1 = None
    module_0.topological_ordering(none_type_1)


def test_case_6():
    node_0 = module_1.Node()
    dict_0 = {
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
    }
    node_1 = module_1.Node(outgoing_nodes=dict_0)
    list_0 = [node_0, node_1]
    var_0 = module_0.topological_ordering(list_0)


def test_case_7():
    node_0 = module_1.Node()
    dict_0 = {
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
    }
    node_1 = module_1.Node(outgoing_nodes=dict_0)
    list_0 = [node_1]
    var_0 = module_0.topological_ordering(list_0)
