# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xa2\x87\x1es\x0c\xa4"
    module_0.topological_ordering(bytes_0)


def test_case_2():
    dict_0 = {}
    node_0 = module_1.Node(incoming_nodes=dict_0, outgoing_nodes=dict_0)
    list_0 = [node_0, node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    bool_0 = True
    node_0 = module_1.Node(dict_0, dict_0, predecessors=dict_0, incoming_nodes=bool_0)
    tuple_0 = (node_0,)
    var_0 = module_0.topological_ordering(tuple_0)
    var_1 = module_0.topological_ordering(dict_0)
    var_1.predecessors()


def test_case_4():
    dict_0 = {}
    node_0 = module_1.Node(dict_0, incoming_nodes=dict_0, outgoing_nodes=dict_0)
    list_0 = [node_0, node_0]
    node_1 = module_1.Node(dict_0, dict_0, node_0, outgoing_nodes=list_0)
    tuple_0 = (node_1,)
    var_0 = module_0.topological_ordering(tuple_0)


def test_case_5():
    dict_0 = {}
    none_type_0 = None
    dict_1 = {none_type_0: none_type_0}
    none_type_1 = None
    node_0 = module_1.Node(
        none_type_0,
        predecessors=dict_0,
        incoming_nodes=dict_1,
        outgoing_nodes=none_type_1,
    )
    list_0 = [node_0, node_0]
    node_1 = module_1.Node(list_0, dict_0, node_0, outgoing_nodes=list_0)
    tuple_0 = (node_1,)
    var_0 = module_0.topological_ordering(tuple_0)
