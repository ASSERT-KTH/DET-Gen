# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


def test_case_1():
    node_0 = module_1.Node()
    dict_0 = {node_0: node_0, node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    node_0 = module_1.Node(tuple_0)
    dict_0 = {node_0: tuple_0, tuple_0: tuple_0}
    node_1 = module_1.Node(
        successor=tuple_0, predecessors=tuple_0, outgoing_nodes=dict_0
    )
    list_0 = [node_1]
    module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = 3085 - 89.1485j
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=complex_0, outgoing_nodes=none_type_0)
    tuple_0 = (node_0, complex_0)
    module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    str_0 = " Jg7\nC+>vI"
    var_0 = module_0.topological_ordering(tuple_0)
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, none_type_0, incoming_nodes=str_0)
    dict_0 = {node_0: tuple_0, tuple_0: tuple_0}
    node_1 = module_1.Node(successor=str_0, predecessors=str_0, outgoing_nodes=dict_0)
    var_1 = module_0.topological_ordering(tuple_0)
    list_0 = [node_1]
    module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    var_0 = module_0.topological_ordering(tuple_0)
    node_0 = module_1.Node(var_0)
    dict_0 = {node_0: tuple_0, tuple_0: tuple_0}
    node_1 = module_1.Node(successor=var_0, predecessors=var_0, outgoing_nodes=dict_0)
    list_0 = [node_0, node_1]
    module_0.topological_ordering(list_0)
