# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    list_0 = [node_0, node_0, node_0, node_0]
    var_0 = module_1.topological_ordering(list_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_1.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xd0\x07\xa7\x94"
    module_1.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    node_0 = module_0.Node()
    list_0 = [node_0, node_0, node_0, node_0]
    none_type_0 = None
    node_1 = module_0.Node(
        successors=node_0,
        predecessors=node_0,
        incoming_nodes=list_0,
        outgoing_nodes=none_type_0,
    )
    dict_0 = {node_0: list_0, node_0: node_0, node_0: node_0, node_1: none_type_0}
    var_0 = module_1.topological_ordering(dict_0)
    module_1.topological_ordering(node_1)


def test_case_4():
    node_0 = module_0.Node()
    list_0 = [node_0, node_0, node_0, node_0]
    none_type_0 = None
    node_1 = module_0.Node(
        successors=node_0,
        predecessors=node_0,
        incoming_nodes=none_type_0,
        outgoing_nodes=list_0,
    )
    dict_0 = {
        node_0: node_0,
        node_0: node_0,
        node_1: list_0,
        node_0: none_type_0,
        node_1: none_type_0,
    }
    var_0 = module_1.topological_ordering(dict_0)


def test_case_5():
    node_0 = module_0.Node()
    list_0 = [node_0, node_0]
    none_type_0 = None
    node_1 = module_0.Node(
        successors=node_0,
        predecessors=node_0,
        incoming_nodes=none_type_0,
        outgoing_nodes=list_0,
    )
    dict_0 = {node_1: none_type_0, node_1: node_1}
    var_0 = module_1.topological_ordering(dict_0)
