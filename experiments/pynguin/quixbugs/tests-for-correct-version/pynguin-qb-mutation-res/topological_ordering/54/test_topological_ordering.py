# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    bytes_0 = b""
    var_0 = module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.topological_ordering(bool_0)


def test_case_3():
    set_0 = set()
    node_0 = module_1.Node(set_0, incoming_nodes=set_0, outgoing_nodes=set_0)
    tuple_0 = (node_0, node_0, node_0)
    var_0 = module_0.topological_ordering(tuple_0)


def test_case_4():
    set_0 = set()
    node_0 = module_1.Node(set_0, incoming_nodes=set_0, outgoing_nodes=set_0)
    tuple_0 = (node_0, node_0, node_0)
    node_1 = module_1.Node(tuple_0, successors=node_0, outgoing_nodes=tuple_0)
    dict_0 = {node_1: tuple_0, node_0: set_0, node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


def test_case_5():
    set_0 = set()
    node_0 = module_1.Node(set_0, incoming_nodes=set_0, outgoing_nodes=set_0)
    tuple_0 = (node_0, node_0, node_0)
    node_1 = module_1.Node(tuple_0, successors=node_0, outgoing_nodes=tuple_0)
    dict_0 = {node_1: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)
    node_0 = module_1.Node(set_0, incoming_nodes=set_0, outgoing_nodes=set_0)
    tuple_0 = (node_0, node_0, node_0)
    none_type_0 = None
    node_1 = module_1.Node(
        tuple_0, successors=set_0, incoming_nodes=tuple_0, outgoing_nodes=none_type_0
    )
    dict_0 = {node_1: tuple_0, node_0: set_0, node_0: node_0}
    var_1 = module_0.topological_ordering(dict_0)
    var_2 = module_0.topological_ordering(var_1)
    var_3 = module_0.topological_ordering(var_0)
    module_0.topological_ordering(node_0)


def test_case_7():
    set_0 = set()
    none_type_0 = None
    set_1 = {none_type_0, none_type_0}
    none_type_1 = None
    node_0 = module_1.Node(
        none_type_0,
        predecessors=set_0,
        incoming_nodes=set_1,
        outgoing_nodes=none_type_1,
    )
    tuple_0 = (node_0, node_0, node_0)
    node_1 = module_1.Node(tuple_0, successors=node_0, outgoing_nodes=tuple_0)
    dict_0 = {node_1: node_0}
    var_0 = module_0.topological_ordering(dict_0)
