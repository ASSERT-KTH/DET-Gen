# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import builtins as module_1
import node as module_2


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 3885
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


def test_case_3():
    object_0 = module_1.object()
    node_0 = module_2.Node(successors=object_0, predecessors=object_0)
    dict_0 = {node_0: node_0, node_0: object_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    object_0 = module_1.object()
    node_0 = module_2.Node(
        successors=object_0, predecessors=object_0, incoming_nodes=object_0
    )
    dict_0 = {node_0: node_0, node_0: object_0}
    var_0 = module_0.topological_ordering(dict_0)
    var_0.predecessors()


def test_case_5():
    object_0 = module_1.object()
    node_0 = module_2.Node(successors=object_0, predecessors=object_0)
    dict_0 = {node_0: node_0, node_0: object_0}
    node_1 = module_2.Node(outgoing_nodes=dict_0)
    dict_1 = {node_1: node_1}
    var_0 = module_0.topological_ordering(dict_1)


def test_case_6():
    object_0 = module_1.object()
    node_0 = module_2.Node(successors=object_0, predecessors=object_0)
    dict_0 = {node_0: node_0, node_0: object_0}
    node_1 = module_2.Node(outgoing_nodes=dict_0)
    dict_1 = {node_1: node_1, node_0: node_1}
    var_0 = module_0.topological_ordering(dict_1)
