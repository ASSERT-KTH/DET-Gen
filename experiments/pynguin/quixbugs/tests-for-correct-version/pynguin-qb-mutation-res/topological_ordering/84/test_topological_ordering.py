# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    list_0 = []
    node_0 = module_0.Node(
        successor=list_0, incoming_nodes=list_0, outgoing_nodes=list_0
    )
    dict_0 = {node_0: list_0}
    var_0 = module_1.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_1.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_1.topological_ordering(bool_0)


def test_case_3():
    bool_0 = False
    node_0 = module_0.Node(successor=bool_0)
    dict_0 = {node_0: bool_0}
    node_1 = module_0.Node(successor=node_0, predecessors=dict_0, outgoing_nodes=dict_0)
    set_0 = {node_1}
    var_0 = module_1.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    node_0 = module_0.Node(successor=bool_0)
    dict_0 = {node_0: bool_0}
    node_1 = module_0.Node(successor=node_0, predecessors=dict_0, outgoing_nodes=dict_0)
    set_0 = {node_1}
    var_0 = module_1.topological_ordering(set_0)
    var_1 = module_1.topological_ordering(var_0)
    node_2 = module_0.Node(successor=var_0, incoming_nodes=var_0, outgoing_nodes=var_0)
    assert len(node_2.successor) == 2
    assert len(node_2.incoming_nodes) == 2
    assert len(node_2.outgoing_nodes) == 2
    dict_1 = {node_2: var_0}
    var_2 = module_1.topological_ordering(dict_1)
    node_2.successors()


def test_case_5():
    bool_0 = False
    node_0 = module_0.Node(successor=bool_0)
    dict_0 = {node_0: bool_0}
    node_1 = module_0.Node(successor=node_0, predecessors=dict_0, outgoing_nodes=dict_0)
    set_0 = {node_1, node_0}
    var_0 = module_1.topological_ordering(set_0)
