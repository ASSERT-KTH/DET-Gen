# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    bool_0 = False
    node_0 = module_0.Node(bool_0, successors=bool_0, incoming_nodes=bool_0)
    tuple_0 = (node_0, node_0)
    var_0 = module_1.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xd2\xb0\t\x17"
    module_1.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_1.topological_ordering(none_type_0)


def test_case_3():
    bytes_0 = b"\xfdin\xe0\x04\x0c`\xf4\x0c\xf9\xcd\x13A\x1a,\xcc\x12<1"
    node_0 = module_0.Node(bytes_0, successors=bytes_0, incoming_nodes=bytes_0)
    tuple_0 = (node_0, node_0)
    var_0 = module_1.topological_ordering(tuple_0)
    node_1 = module_0.Node(successors=bytes_0, outgoing_nodes=tuple_0)
    set_0 = {node_1}
    var_1 = module_1.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    node_0 = module_0.Node(bool_0, successors=bool_0, incoming_nodes=bool_0)
    tuple_0 = (node_0, node_0)
    node_1 = module_0.Node(
        tuple_0, successors=bool_0, predecessors=tuple_0, outgoing_nodes=tuple_0
    )
    set_0 = {node_1, node_0}
    module_1.topological_ordering(set_0)


def test_case_5():
    bytes_0 = b"\xfdin\xe0\x04\x0c`\xf4\x0c\xf9\xcd\x13A\x1a,\xcc\x12<1"
    node_0 = module_0.Node(bytes_0, successors=bytes_0, incoming_nodes=bytes_0)
    tuple_0 = (node_0, node_0)
    node_1 = module_0.Node(successors=bytes_0, outgoing_nodes=tuple_0)
    set_0 = {node_1}
    var_0 = module_1.topological_ordering(set_0)


def test_case_6():
    bytes_0 = b""
    node_0 = module_0.Node(bytes_0, successors=bytes_0, incoming_nodes=bytes_0)
    tuple_0 = (node_0, node_0)
    var_0 = module_1.topological_ordering(tuple_0)
    node_1 = module_0.Node(successors=bytes_0, outgoing_nodes=tuple_0)
    set_0 = {node_1}
    var_1 = module_1.topological_ordering(set_0)
    var_2 = module_1.topological_ordering(var_0)
