# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x06x\x13\x1b\xc3\x89\xc7\x05\x14a\xf7\x891\xbc)\x08\x06\xae\xaa\xcf"
    module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.topological_ordering(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, none_type_0, outgoing_nodes=none_type_0)
    dict_0 = {node_0: node_0}
    module_0.topological_ordering(dict_0)


def test_case_4():
    bytes_0 = b""
    node_0 = module_1.Node(outgoing_nodes=bytes_0)
    set_0 = {node_0}
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"_"
    node_0 = module_1.Node(outgoing_nodes=bytes_0)
    set_0 = {node_0}
    module_0.topological_ordering(set_0)


def test_case_6():
    tuple_0 = ()
    node_0 = module_1.Node(
        successors=tuple_0,
        predecessors=tuple_0,
        incoming_nodes=tuple_0,
        outgoing_nodes=tuple_0,
    )
    list_0 = [node_0]
    node_1 = module_1.Node(outgoing_nodes=list_0)
    list_1 = [node_1, node_0]
    var_0 = module_0.topological_ordering(list_1)


def test_case_7():
    tuple_0 = ()
    node_0 = module_1.Node(
        successors=tuple_0,
        predecessors=tuple_0,
        incoming_nodes=tuple_0,
        outgoing_nodes=tuple_0,
    )
    list_0 = [node_0]
    node_1 = module_1.Node(outgoing_nodes=list_0)
    list_1 = [node_1, node_1, node_1]
    var_0 = module_0.topological_ordering(list_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    tuple_0 = ()
    node_0 = module_1.Node(
        successors=tuple_0,
        predecessors=tuple_0,
        incoming_nodes=tuple_0,
        outgoing_nodes=tuple_0,
    )
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)
    node_1 = module_1.Node(incoming_nodes=var_0, outgoing_nodes=list_0)
    assert len(node_1.incoming_nodes) == 1
    list_1 = [node_1, node_0]
    var_1 = module_0.topological_ordering(list_1)
    var_2 = module_0.topological_ordering(var_1)
    var_0.predecessors()
