# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xac\xc4c\xec\x00\xe1#\xc8"
    module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 488
    module_0.topological_ordering(int_0)


def test_case_3():
    node_0 = module_1.Node()
    set_0 = {node_0, node_0, node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


def test_case_4():
    node_0 = module_1.Node()
    set_0 = {node_0, node_0, node_0, node_0}
    var_0 = module_1.Node(successor=node_0, outgoing_nodes=set_0)
    set_1 = {node_0, var_0}
    var_1 = module_0.topological_ordering(set_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -631
    node_0 = module_1.Node(int_0, incoming_nodes=int_0, outgoing_nodes=int_0)
    complex_0 = 647.34 + 151.63969j
    list_0 = []
    tuple_0 = (node_0, complex_0, list_0)
    module_0.topological_ordering(tuple_0)


def test_case_6():
    node_0 = module_1.Node()
    set_0 = {node_0, node_0, node_0, node_0}
    node_1 = module_1.Node(successor=node_0, outgoing_nodes=set_0)
    set_1 = {node_1}
    var_0 = module_0.topological_ordering(set_1)
