# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    dict_0 = {node_0: node_0}
    var_0 = module_1.topological_ordering(dict_0)


def test_case_1():
    dict_0 = {}
    var_0 = module_1.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x85\x04\x87\xde\xab{\xa9VZz&\xfd"
    module_1.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_1.topological_ordering(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xfcy"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    node_0 = module_0.Node(
        successors=tuple_0, predecessors=none_type_0, incoming_nodes=bytes_0
    )
    list_0 = [node_0]
    var_0 = module_1.topological_ordering(list_0)
    node_0.successor()


def test_case_5():
    node_0 = module_0.Node()
    dict_0 = {node_0: node_0, node_0: node_0, node_0: node_0}
    node_1 = module_0.Node(successor=dict_0, outgoing_nodes=dict_0)
    tuple_0 = (node_1,)
    var_0 = module_1.topological_ordering(tuple_0)


def test_case_6():
    node_0 = module_0.Node()
    dict_0 = {node_0: node_0, node_0: node_0, node_0: node_0, node_0: node_0}
    node_1 = module_0.Node(successor=dict_0, outgoing_nodes=dict_0)
    dict_1 = {node_0: dict_0, node_1: node_1, node_1: node_1}
    var_0 = module_1.topological_ordering(dict_1)
