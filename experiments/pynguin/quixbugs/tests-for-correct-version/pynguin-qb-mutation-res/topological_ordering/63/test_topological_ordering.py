# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"R\x12g"
    module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


def test_case_3():
    bytes_0 = b""
    node_0 = module_1.Node(predecessors=bytes_0)
    list_0 = [node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 837
    none_type_0 = None
    node_0 = module_1.Node(
        successors=int_0, incoming_nodes=int_0, outgoing_nodes=none_type_0
    )
    dict_0 = {node_0: int_0, int_0: none_type_0, int_0: none_type_0}
    module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"<\x9b\xc70\x17\xbf\r@+}K\xdd\xc1"
    node_0 = module_1.Node(
        bytes_0, successors=bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0
    )
    list_0 = [node_0, node_0, node_0, node_0]
    module_0.topological_ordering(list_0)


def test_case_6():
    bytes_0 = b"\xb8\x96\x06C\xb2\x8a\xd5\xfb"
    node_0 = module_1.Node(predecessors=bytes_0)
    list_0 = [node_0, node_0, node_0]
    var_0 = module_1.Node(list_0, outgoing_nodes=list_0)
    tuple_0 = (var_0, var_0)
    var_1 = module_0.topological_ordering(tuple_0)


def test_case_7():
    bytes_0 = b"\xb8\x96\x06C\xb2\x8a\xd5\xfb"
    none_type_0 = None
    node_0 = module_1.Node(predecessors=none_type_0, incoming_nodes=bytes_0)
    list_0 = [node_0, node_0, node_0]
    node_1 = module_1.Node(
        none_type_0,
        successors=list_0,
        incoming_nodes=none_type_0,
        outgoing_nodes=list_0,
    )
    tuple_0 = (node_1, node_1)
    var_0 = module_0.topological_ordering(tuple_0)
