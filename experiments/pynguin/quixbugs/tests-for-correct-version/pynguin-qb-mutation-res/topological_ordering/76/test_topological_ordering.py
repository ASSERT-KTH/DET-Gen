# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xe9Gd\xf3"
    module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -15
    module_0.topological_ordering(int_0)


def test_case_3():
    node_0 = module_1.Node()
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = -18.958147 + 222.6163j
    node_0 = module_1.Node(
        successor=complex_0, incoming_nodes=complex_0, outgoing_nodes=complex_0
    )
    tuple_0 = (node_0,)
    var_0 = module_0.topological_ordering(tuple_0)
    list_0 = []
    var_1 = module_0.topological_ordering(list_0)
    var_2 = module_0.topological_ordering(list_0)
    var_3 = module_0.topological_ordering(tuple_0)
    var_4 = module_0.topological_ordering(var_2)
    var_5 = module_0.topological_ordering(var_2)
    var_4.successor()


def test_case_5():
    node_0 = module_1.Node()
    set_0 = {
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    }
    node_1 = module_1.Node(predecessors=node_0, outgoing_nodes=set_0)
    set_1 = {node_1, node_1}
    var_0 = module_0.topological_ordering(set_1)


def test_case_6():
    node_0 = module_1.Node()
    set_0 = {
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    }
    node_1 = module_1.Node(predecessors=node_0, outgoing_nodes=set_0)
    set_1 = {node_0, node_1}
    var_0 = module_0.topological_ordering(set_1)
