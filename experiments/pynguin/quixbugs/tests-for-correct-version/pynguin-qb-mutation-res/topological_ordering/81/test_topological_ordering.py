# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    bytes_0 = b""
    var_0 = module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xa9Z"
    node_0 = module_1.Node(outgoing_nodes=bytes_0)
    list_0 = [node_0, node_0, node_0]
    module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


def test_case_3():
    bytes_0 = b""
    node_0 = module_1.Node(outgoing_nodes=bytes_0)
    list_0 = [node_0, node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


def test_case_4():
    bytes_0 = b"\x85W\xa4\x1ev \x9b\xdc\xc0O\xb0\x07l\xc9\x13\xd3$N\xb6"
    node_0 = module_1.Node(
        successor=bytes_0, predecessors=bytes_0, incoming_nodes=bytes_0
    )
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)


def test_case_5():
    bytes_0 = b""
    node_0 = module_1.Node(outgoing_nodes=bytes_0)
    list_0 = [node_0, node_0, node_0]
    node_1 = module_1.Node(
        bytes_0, successors=node_0, predecessors=node_0, outgoing_nodes=list_0
    )
    list_1 = [node_0, node_0, node_1]
    var_0 = module_0.topological_ordering(list_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b""
    node_0 = module_1.Node(outgoing_nodes=bytes_0)
    list_0 = [node_0, node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)
    node_1 = module_1.Node(successor=bytes_0, successors=list_0, outgoing_nodes=var_0)
    assert len(node_1.outgoing_nodes) == 3
    list_1 = [bytes_0, list_0]
    node_2 = module_1.Node(
        bytes_0, successors=node_1, predecessors=node_0, outgoing_nodes=list_1
    )
    list_2 = [node_1, node_1, node_2]
    module_0.topological_ordering(list_2)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"2"
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=bytes_0, outgoing_nodes=none_type_0)
    list_0 = [node_0, none_type_0, node_0, node_0]
    node_1 = module_1.Node(
        bytes_0, successors=node_0, predecessors=node_0, outgoing_nodes=list_0
    )
    list_1 = [node_0, node_0, node_1]
    module_0.topological_ordering(list_1)
