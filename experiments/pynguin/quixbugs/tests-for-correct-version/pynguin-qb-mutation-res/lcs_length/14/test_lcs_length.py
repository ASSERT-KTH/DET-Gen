# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import lcs_length as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"R\x86\xdb4\xb5` \x04\x1a\xaa"
    var_0 = module_0.lcs_length(bytes_0, bytes_0)
    assert var_0 == 10
    dict_0 = {}
    none_type_0 = None
    var_1 = module_0.lcs_length(dict_0, none_type_0)
    assert var_1 == 0
    module_0.lcs_length(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    var_0 = module_0.lcs_length(set_0, set_0)
    assert var_0 == 0
    module_0.lcs_length(var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x03\xa5\xebI-\x1aO\x03;\xe3\xeeM\xb5\x1a|\xd7\xd2\xfe\x19\xb3"
    none_type_0 = None
    module_0.lcs_length(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 1704.40139
    module_0.lcs_length(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    tuple_0 = (dict_0,)
    var_0 = module_0.lcs_length(tuple_0, dict_0)
    assert var_0 == 0
    bool_0 = False
    tuple_1 = (bool_0,)
    tuple_2 = (tuple_1,)
    var_1 = module_0.lcs_length(tuple_2, tuple_1)
    assert var_1 == 0
    bool_1 = False
    module_0.lcs_length(bool_1, bool_1)
