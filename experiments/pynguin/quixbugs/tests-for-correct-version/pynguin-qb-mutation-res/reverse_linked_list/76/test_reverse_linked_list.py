# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import reverse_linked_list as module_1
import builtins as module_2


def test_case_0():
    dict_0 = {}
    none_type_0 = None
    node_0 = module_0.Node(
        successor=dict_0, successors=dict_0, outgoing_nodes=none_type_0
    )
    var_0 = module_1.reverse_linked_list(node_0)
    assert node_0.successor is None
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == {}
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes is None


def test_case_1():
    none_type_0 = None
    var_0 = module_1.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "!};v;lqiQ'D#E\tj"
    bool_0 = False
    var_0 = module_1.reverse_linked_list(bool_0)
    node_0 = module_0.Node(predecessors=str_0)
    var_1 = module_1.reverse_linked_list(node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == "!};v;lqiQ'D#E\tj"
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    complex_0 = 2212.5802 + 902.22j
    node_1 = module_0.Node(successor=complex_0, successors=complex_0)
    object_0 = module_2.object()
    var_2 = module_2.object()
    module_1.reverse_linked_list(node_1)
