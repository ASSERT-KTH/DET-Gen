# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -2149
    module_0.reverse_linked_list(int_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    node_0 = module_1.Node(bool_0, successors=bool_0)
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is True
    assert var_0.successor is None
    assert var_0.successors is True
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    var_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    node_0 = module_1.Node(bool_0, successors=bool_0)
    set_0 = set()
    var_0 = module_0.reverse_linked_list(set_0)
    var_1 = module_0.reverse_linked_list(set_0)
    complex_0 = -1617.615 - 412.554j
    node_1 = module_1.Node(successors=complex_0, outgoing_nodes=var_1)
    var_2 = module_1.Node(successor=node_0, predecessors=bool_0, incoming_nodes=bool_0)
    var_3 = module_0.reverse_linked_list(set_0)
    var_4 = module_0.reverse_linked_list(var_2)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "node.Node"
    )
    assert var_2.successor is None
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "node.Node"
    assert var_4.value is True
    assert (
        f"{type(var_4.successor).__module__}.{type(var_4.successor).__qualname__}"
        == "node.Node"
    )
    assert var_4.successors is True
    assert var_4.predecessors == []
    assert var_4.incoming_nodes == []
    assert var_4.outgoing_nodes == []
    var_5 = module_0.reverse_linked_list(node_1)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "node.Node"
    assert var_5.value is None
    assert var_5.successor is None
    assert var_5.successors == (-1617.615 - 412.554j)
    assert var_5.predecessors == []
    assert var_5.incoming_nodes == []
    assert var_5.outgoing_nodes is None
    module_0.reverse_linked_list(bool_0)
