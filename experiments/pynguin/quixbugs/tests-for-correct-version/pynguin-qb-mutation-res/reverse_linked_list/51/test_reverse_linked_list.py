# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.reverse_linked_list(list_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    var_0 = module_0.reverse_linked_list(set_0)
    var_1 = module_0.reverse_linked_list(set_0)
    node_0 = module_1.Node(set_0, set_0, set_0)
    var_2 = module_0.reverse_linked_list(node_0)
    assert node_0.successor is None
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value == {*()}
    assert var_2.successor is None
    assert var_2.successors == {*()}
    assert var_2.predecessors == []
    assert var_2.incoming_nodes == []
    assert var_2.outgoing_nodes == []
    var_3 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "node.Node"
    assert var_3.value == {*()}
    assert var_3.successor is None
    assert var_3.successors == {*()}
    assert var_3.predecessors == []
    assert var_3.incoming_nodes == []
    assert var_3.outgoing_nodes == []
    var_4 = module_0.reverse_linked_list(set_0)
    var_5 = module_0.reverse_linked_list(var_1)
    var_6 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "node.Node"
    assert var_6.value == {*()}
    assert var_6.successor is None
    assert var_6.successors == {*()}
    assert var_6.predecessors == []
    assert var_6.incoming_nodes == []
    assert var_6.outgoing_nodes == []
    var_3.successor()


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    set_1 = set()
    str_0 = "L^t?up\x0b{?Fz\t2xWqv LA"
    node_0 = module_1.Node(
        successor=str_0, successors=set_0, predecessors=set_0, incoming_nodes=set_1
    )
    var_0 = module_0.reverse_linked_list(set_1)
    module_0.reverse_linked_list(node_0)
