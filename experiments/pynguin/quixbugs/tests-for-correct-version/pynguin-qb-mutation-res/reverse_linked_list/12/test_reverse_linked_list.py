# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 3140
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    module_0.reverse_linked_list(int_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "w#lI"
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    list_0 = [str_0, str_0, str_0, str_0]
    node_0 = module_1.Node(successor=list_0)
    tuple_0 = (node_0,)
    none_type_1 = None
    var_1 = module_0.reverse_linked_list(none_type_1)
    node_1 = module_1.Node(
        successors=none_type_1, predecessors=none_type_1, incoming_nodes=node_0
    )
    node_2 = module_1.Node(
        successor=tuple_0, successors=node_1, outgoing_nodes=none_type_1
    )
    module_0.reverse_linked_list(node_2)


def test_case_3():
    str_0 = "w#lI"
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    list_0 = [str_0, str_0, str_0, str_0]
    node_0 = module_1.Node(successor=list_0)
    tuple_0 = (node_0,)
    var_1 = module_0.reverse_linked_list(var_0)
    node_1 = module_1.Node(incoming_nodes=tuple_0, outgoing_nodes=node_0)
    node_2 = module_1.Node(successors=var_1)
    var_2 = module_0.reverse_linked_list(node_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value is None
    assert var_2.successor is None
    assert var_2.successors == []
    assert var_2.predecessors == []
    assert (
        f"{type(var_2.incoming_nodes).__module__}.{type(var_2.incoming_nodes).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_2.incoming_nodes) == 1
    assert (
        f"{type(var_2.outgoing_nodes).__module__}.{type(var_2.outgoing_nodes).__qualname__}"
        == "node.Node"
    )
