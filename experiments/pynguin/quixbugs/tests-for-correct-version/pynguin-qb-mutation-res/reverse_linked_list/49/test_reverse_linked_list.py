# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import reverse_linked_list as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -1839
    set_0 = {int_0, int_0, int_0, int_0}
    node_0 = module_0.Node(successors=set_0, predecessors=set_0, outgoing_nodes=set_0)
    dict_0 = {node_0: node_0}
    module_1.reverse_linked_list(dict_0)


def test_case_1():
    bool_0 = False
    var_0 = module_1.reverse_linked_list(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    none_type_0 = None
    var_0 = module_1.reverse_linked_list(none_type_0)
    node_0 = module_0.Node(incoming_nodes=set_0)
    var_1 = module_1.reverse_linked_list(node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == {*()}
    assert var_1.outgoing_nodes == []
    var_2 = module_1.reverse_linked_list(var_0)
    bytes_0 = b"l\x95"
    var_3 = module_1.reverse_linked_list(node_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "node.Node"
    assert var_3.value is None
    assert var_3.successor is None
    assert var_3.successors == []
    assert var_3.predecessors == []
    assert var_3.incoming_nodes == {*()}
    assert var_3.outgoing_nodes == []
    var_4 = module_1.reverse_linked_list(var_2)
    var_5 = module_1.reverse_linked_list(var_2)
    var_6 = module_1.reverse_linked_list(var_4)
    module_1.reverse_linked_list(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 568.15
    node_0 = module_0.Node(float_0, float_0)
    module_1.reverse_linked_list(node_0)
