# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -971
    module_0.reverse_linked_list(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"sl"
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    var_1 = module_0.reverse_linked_list(var_0)
    var_2 = module_0.reverse_linked_list(var_0)
    module_0.reverse_linked_list(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    var_0 = module_0.reverse_linked_list(set_0)
    var_1 = module_0.reverse_linked_list(var_0)
    node_0 = module_1.Node(outgoing_nodes=var_0)
    var_2 = module_0.reverse_linked_list(var_0)
    var_3 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "node.Node"
    assert var_3.value is None
    assert var_3.successor is None
    assert var_3.successors == []
    assert var_3.predecessors == []
    assert var_3.incoming_nodes == []
    assert var_3.outgoing_nodes is None
    var_4 = module_0.reverse_linked_list(var_2)
    bytes_0 = b"@\xdb\xaaQ'\xf3\x0b"
    module_0.reverse_linked_list(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -438.2406
    node_0 = module_1.Node(
        successor=float_0, successors=float_0, outgoing_nodes=float_0
    )
    module_0.reverse_linked_list(node_0)
