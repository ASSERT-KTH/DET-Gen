# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = -140.8 - 2215.07037j
    dict_0 = {complex_0: complex_0}
    list_0 = [dict_0]
    module_0.reverse_linked_list(list_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_0.reverse_linked_list(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    node_0 = module_1.Node(bool_0, bool_0, outgoing_nodes=bool_0)
    module_0.reverse_linked_list(node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(successors=none_type_0, incoming_nodes=none_type_0)
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors is None
    assert var_0.predecessors == []
    assert var_0.incoming_nodes is None
    assert var_0.outgoing_nodes == []
    none_type_1 = None
    var_1 = module_0.reverse_linked_list(none_type_1)
    var_2 = module_0.reverse_linked_list(none_type_1)
    var_3 = module_0.reverse_linked_list(var_2)
    var_4 = module_0.reverse_linked_list(var_3)
    bytes_0 = b"u\xa4\xb0;\xe2\xfc\xe1\x03\xfda>\x91\x04\xac\xb6l\x81\xce\x00"
    module_0.reverse_linked_list(bytes_0)
