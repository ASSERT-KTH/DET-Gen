# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -1555
    set_0 = {int_0}
    module_0.reverse_linked_list(set_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)
    bytes_0 = b"Z\x8f\xa4\xba\xd8\xc6\x81f\xdaSO\xad\xc2\xde"
    var_1 = module_0.reverse_linked_list(bool_0)
    node_0 = module_1.Node(
        bytes_0, successors=bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0
    )
    node_1 = module_1.Node(successor=node_0, successors=node_0, predecessors=node_0)
    var_2 = module_0.reverse_linked_list(node_1)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value == b"Z\x8f\xa4\xba\xd8\xc6\x81f\xdaSO\xad\xc2\xde"
    assert (
        f"{type(var_2.successor).__module__}.{type(var_2.successor).__qualname__}"
        == "node.Node"
    )
    assert var_2.successors == b"Z\x8f\xa4\xba\xd8\xc6\x81f\xdaSO\xad\xc2\xde"
    assert var_2.predecessors == b"Z\x8f\xa4\xba\xd8\xc6\x81f\xdaSO\xad\xc2\xde"
    assert var_2.incoming_nodes == []
    assert var_2.outgoing_nodes == b"Z\x8f\xa4\xba\xd8\xc6\x81f\xdaSO\xad\xc2\xde"
    node_1.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(predecessors=none_type_0, incoming_nodes=none_type_0)
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors is None
    assert var_0.incoming_nodes is None
    assert var_0.outgoing_nodes == []
    int_0 = -47
    module_0.reverse_linked_list(int_0)
