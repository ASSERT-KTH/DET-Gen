# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 2922
    list_0 = [int_0, int_0]
    module_0.reverse_linked_list(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.reverse_linked_list(tuple_0)
    var_1 = module_0.reverse_linked_list(tuple_0)
    var_2 = module_0.reverse_linked_list(tuple_0)
    var_3 = module_0.reverse_linked_list(tuple_0)
    var_3.successors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    node_0 = module_1.Node(predecessors=set_0)
    node_1 = module_1.Node(successor=node_0)
    var_0 = module_0.reverse_linked_list(node_1)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert (
        f"{type(var_0.successor).__module__}.{type(var_0.successor).__qualname__}"
        == "node.Node"
    )
    assert var_0.successors == []
    assert var_0.predecessors == {*()}
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    var_0.successors()
