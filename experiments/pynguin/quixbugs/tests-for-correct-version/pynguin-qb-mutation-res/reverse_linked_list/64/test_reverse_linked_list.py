# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.reverse_linked_list(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)
    var_1 = module_0.reverse_linked_list(bool_0)
    var_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    var_0 = module_0.reverse_linked_list(dict_0)
    node_0 = module_1.Node(dict_0, incoming_nodes=dict_0)
    none_type_0 = None
    var_1 = module_0.reverse_linked_list(none_type_0)
    bytes_0 = b"g\xc41\xc9\xd1Y\xb3\xa8\xd0\xc8\xa1C\x17\x032\xa5"
    node_1 = module_1.Node(successor=bytes_0)
    var_2 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value == {}
    assert var_2.successor is None
    assert var_2.successors == []
    assert var_2.predecessors == []
    assert var_2.incoming_nodes == {}
    assert var_2.outgoing_nodes == []
    var_3 = module_0.reverse_linked_list(none_type_0)
    str_0 = "Bs1TG`*pTuvunRY~"
    module_0.reverse_linked_list(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    var_1 = module_0.reverse_linked_list(none_type_0)
    var_2 = module_0.reverse_linked_list(var_0)
    bytes_0 = b"g\xc41\xc9\xd1Y\xb3\xa8\xd0\xc8\xa1C\x17\x032\xa5"
    node_0 = module_1.Node(successor=bytes_0)
    node_1 = module_1.Node(successor=node_0, successors=var_0, outgoing_nodes=var_0)
    module_0.reverse_linked_list(node_1)
