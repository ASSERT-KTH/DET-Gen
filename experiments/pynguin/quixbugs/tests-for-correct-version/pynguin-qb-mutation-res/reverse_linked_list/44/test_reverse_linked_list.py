# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'x"QNpf\\>2uAZILU'
    module_0.reverse_linked_list(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'x"QNpf\\>2uAZILU'
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    module_0.reverse_linked_list(str_0)


def test_case_2():
    str_0 = "'@9Rv<1?/wXNoNvF~"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    node_0 = module_1.Node(
        dict_0, none_type_0, dict_0, dict_0, outgoing_nodes=none_type_0
    )
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == {"'@9Rv<1?/wXNoNvF~": "'@9Rv<1?/wXNoNvF~"}
    assert var_0.successor is None
    assert var_0.successors == {"'@9Rv<1?/wXNoNvF~": "'@9Rv<1?/wXNoNvF~"}
    assert var_0.predecessors == {"'@9Rv<1?/wXNoNvF~": "'@9Rv<1?/wXNoNvF~"}
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes is None


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_1.Node(bool_0, list_0, incoming_nodes=list_0)
    module_0.reverse_linked_list(node_0)
