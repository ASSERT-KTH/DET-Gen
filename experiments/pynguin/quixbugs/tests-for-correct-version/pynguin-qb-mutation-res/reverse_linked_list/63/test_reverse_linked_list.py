# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.reverse_linked_list(bool_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)
    node_0 = module_1.Node(var_0, incoming_nodes=var_0, outgoing_nodes=var_0)
    var_1 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes is None
    assert var_1.outgoing_nodes is None
    tuple_0 = (var_0, node_0, var_1, var_1)
    node_1 = module_1.Node(var_1, tuple_0, var_1, outgoing_nodes=var_0)
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "node.Node"
    )
    node_1.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    bool_1 = False
    var_0 = module_0.reverse_linked_list(bool_1)
    node_0 = module_1.Node(bool_0, incoming_nodes=bool_0, outgoing_nodes=bool_0)
    list_0 = [node_0, bool_0]
    var_1 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is True
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes is True
    assert var_1.outgoing_nodes is True
    node_1 = module_1.Node(bool_0, list_0, var_0, incoming_nodes=var_0)
    var_2 = module_0.reverse_linked_list(var_0)
    module_0.reverse_linked_list(node_1)
