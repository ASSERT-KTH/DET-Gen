# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = 440.6061 + 440.30714j
    module_0.reverse_linked_list(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    var_0.predecessors()


def test_case_2():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, none_type_0)
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -2202.6768217410386
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0, predecessors=float_0)
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == pytest.approx(-2202.6768217410386, abs=0.01, rel=0.01)
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    var_1 = module_0.reverse_linked_list(none_type_0)
    var_2 = module_1.Node(successor=float_0, incoming_nodes=var_0)
    assert (
        f"{type(var_2.incoming_nodes).__module__}.{type(var_2.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    var_3 = module_0.reverse_linked_list(none_type_0)
    var_4 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "node.Node"
    assert var_4.value is None
    assert var_4.successor is None
    assert var_4.successors == []
    assert var_4.predecessors == pytest.approx(-2202.6768217410386, abs=0.01, rel=0.01)
    assert var_4.incoming_nodes == []
    assert var_4.outgoing_nodes == []
    module_0.reverse_linked_list(var_2)
