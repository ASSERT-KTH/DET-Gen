# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\x11\xe7\x06+\xbf("
    module_0.reverse_linked_list(bytes_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_0.reverse_linked_list(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    var_0 = module_0.reverse_linked_list(set_0)
    var_1 = module_0.reverse_linked_list(var_0)
    none_type_0 = None
    var_2 = module_0.reverse_linked_list(none_type_0)
    var_3 = module_1.Node(var_1, set_0, outgoing_nodes=var_0)
    var_4 = module_0.reverse_linked_list(var_3)
    assert var_3.successor is None
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "node.Node"
    assert var_4.value is None
    assert var_4.successor is None
    assert var_4.successors == []
    assert var_4.predecessors == []
    assert var_4.incoming_nodes == []
    assert var_4.outgoing_nodes is None
    var_5 = module_0.reverse_linked_list(var_3)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "node.Node"
    assert var_5.value is None
    assert var_5.successor is None
    assert var_5.successors == []
    assert var_5.predecessors == []
    assert var_5.incoming_nodes == []
    assert var_5.outgoing_nodes is None
    str_0 = "POzA21t,Y`"
    module_0.reverse_linked_list(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    complex_0 = -609.882997 - 1006.9j
    bool_0 = True
    node_0 = module_1.Node(successor=complex_0, predecessors=bool_0)
    module_0.reverse_linked_list(node_0)
