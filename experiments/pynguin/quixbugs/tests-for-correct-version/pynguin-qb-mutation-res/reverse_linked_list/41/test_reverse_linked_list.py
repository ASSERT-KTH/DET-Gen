# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import reverse_linked_list as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xf8\x9e\x8e\x82\xb4"
    node_0 = module_0.Node(
        successor=bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0
    )
    list_0 = [node_0, node_0, bytes_0]
    module_1.reverse_linked_list(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    var_0 = module_1.reverse_linked_list(bool_0)
    none_type_0 = None
    var_1 = module_1.reverse_linked_list(var_0)
    var_2 = module_1.reverse_linked_list(none_type_0)
    var_2.successor()


@pytest.mark.xfail(strict=True)
def test_case_2():
    node_0 = module_0.Node()
    var_0 = module_1.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    var_1 = module_1.reverse_linked_list(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    var_1.successors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    node_0 = module_0.Node()
    var_0 = module_1.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    none_type_0 = None
    node_1 = module_0.Node(
        node_0,
        node_0,
        predecessors=var_0,
        incoming_nodes=var_0,
        outgoing_nodes=none_type_0,
    )
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    var_1 = module_1.reverse_linked_list(node_1)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(var_0.successor).__module__}.{type(var_0.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert (
        f"{type(var_1.successor).__module__}.{type(var_1.successor).__qualname__}"
        == "node.Node"
    )
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    var_2 = module_1.reverse_linked_list(var_0)
    assert var_0.successor is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert var_1.successor is None
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert (
        f"{type(var_2.value).__module__}.{type(var_2.value).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(var_2.successor).__module__}.{type(var_2.successor).__qualname__}"
        == "node.Node"
    )
    assert var_2.successors == []
    assert (
        f"{type(var_2.predecessors).__module__}.{type(var_2.predecessors).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(var_2.incoming_nodes).__module__}.{type(var_2.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert var_2.outgoing_nodes is None
    node_0.predecessors()
