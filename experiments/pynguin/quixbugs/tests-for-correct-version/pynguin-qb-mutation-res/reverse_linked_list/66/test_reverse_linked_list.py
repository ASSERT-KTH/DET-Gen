# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xb2l6\xc0\n\xe5}\r\x88p\x98\xa1\x9d\xa2h\xc7U\xd0"
    module_0.reverse_linked_list(bytes_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    node_0 = module_1.Node()
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    node_1 = module_1.Node(var_0, var_0, incoming_nodes=node_0)
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    node_2 = module_1.Node(node_1, var_0, predecessors=node_1)
    assert (
        f"{type(node_2.successor).__module__}.{type(node_2.successor).__qualname__}"
        == "node.Node"
    )
    node_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    node_0 = module_1.Node()
    node_1 = module_1.Node(node_0, node_0)
    var_0 = module_0.reverse_linked_list(node_1)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert (
        f"{type(var_0.successor).__module__}.{type(var_0.successor).__qualname__}"
        == "node.Node"
    )
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    var_1 = module_0.reverse_linked_list(node_0)
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert var_0.successor is None
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(var_1.successor).__module__}.{type(var_1.successor).__qualname__}"
        == "node.Node"
    )
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    var_1.successor()
