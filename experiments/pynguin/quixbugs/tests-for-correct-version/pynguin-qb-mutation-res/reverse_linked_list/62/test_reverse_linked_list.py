# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.reverse_linked_list(bool_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    node_0 = module_1.Node(predecessors=bool_0, incoming_nodes=bool_0)
    tuple_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(tuple_0).__module__}.{type(tuple_0).__qualname__}" == "node.Node"
    assert tuple_0.value is None
    assert tuple_0.successor is None
    assert tuple_0.successors == []
    assert tuple_0.predecessors is False
    assert tuple_0.incoming_nodes is False
    assert tuple_0.outgoing_nodes == []
    node_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    node_0 = module_1.Node()
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    var_1 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    var_2 = module_0.reverse_linked_list(var_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value is None
    assert var_2.successor is None
    assert var_2.successors == []
    assert var_2.predecessors == []
    assert var_2.incoming_nodes == []
    assert var_2.outgoing_nodes == []
    bool_0 = False
    var_3 = module_0.reverse_linked_list(bool_0)
    var_4 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "node.Node"
    assert var_4.value is None
    assert var_4.successor is None
    assert var_4.successors == []
    assert var_4.predecessors == []
    assert var_4.incoming_nodes == []
    assert var_4.outgoing_nodes == []
    tuple_0 = (bool_0, bool_0, bool_0)
    var_5 = module_0.reverse_linked_list(var_2)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "node.Node"
    assert var_5.value is None
    assert var_5.successor is None
    assert var_5.successors == []
    assert var_5.predecessors == []
    assert var_5.incoming_nodes == []
    assert var_5.outgoing_nodes == []
    var_6 = module_0.reverse_linked_list(var_2)
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "node.Node"
    assert var_6.value is None
    assert var_6.successor is None
    assert var_6.successors == []
    assert var_6.predecessors == []
    assert var_6.incoming_nodes == []
    assert var_6.outgoing_nodes == []
    var_7 = module_1.Node(successor=tuple_0, outgoing_nodes=bool_0)
    module_0.reverse_linked_list(var_7)
