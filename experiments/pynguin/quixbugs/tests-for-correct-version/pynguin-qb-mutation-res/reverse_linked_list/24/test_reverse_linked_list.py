# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.reverse_linked_list(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    var_0 = module_0.reverse_linked_list(set_0)
    var_1 = module_0.reverse_linked_list(set_0)
    var_2 = module_0.reverse_linked_list(set_0)
    var_3 = module_0.reverse_linked_list(set_0)
    list_0 = [set_0, set_0]
    var_4 = module_0.reverse_linked_list(var_0)
    module_0.reverse_linked_list(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -636.0
    node_0 = module_1.Node(successor=float_0, successors=float_0)
    module_0.reverse_linked_list(node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)
    bool_1 = True
    bool_2 = False
    tuple_0 = (bool_1, bool_1, bool_1, bool_2)
    none_type_0 = None
    node_0 = module_1.Node(none_type_0)
    bool_3 = False
    dict_0 = {tuple_0: bool_1, node_0: bool_3}
    var_1 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    module_0.reverse_linked_list(dict_0)
