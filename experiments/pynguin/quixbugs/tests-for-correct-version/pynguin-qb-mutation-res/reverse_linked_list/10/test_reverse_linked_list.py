# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import reverse_linked_list as module_1


def test_case_0():
    set_0 = set()
    node_0 = module_0.Node(outgoing_nodes=set_0)
    var_0 = module_1.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == {*()}


def test_case_1():
    none_type_0 = None
    var_0 = module_1.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_1.reverse_linked_list(none_type_0)
    none_type_1 = None
    var_1 = module_1.reverse_linked_list(none_type_1)
    node_0 = module_0.Node(
        successors=none_type_0, predecessors=none_type_1, incoming_nodes=none_type_1
    )
    var_2 = module_1.reverse_linked_list(var_1)
    var_3 = module_1.reverse_linked_list(none_type_1)
    var_4 = module_0.Node(var_1, node_0, var_0)
    var_5 = module_1.reverse_linked_list(var_4)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "node.Node"
    )
    assert var_4.successor is None
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "node.Node"
    assert var_5.value is None
    assert (
        f"{type(var_5.successor).__module__}.{type(var_5.successor).__qualname__}"
        == "node.Node"
    )
    assert var_5.successors is None
    assert var_5.predecessors is None
    assert var_5.incoming_nodes is None
    assert var_5.outgoing_nodes == []
    var_3.predecessors()
