# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -559
    module_0.reverse_linked_list(int_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    node_0 = module_1.Node(successor=dict_0, predecessors=dict_0, incoming_nodes=dict_0)
    var_0 = module_0.reverse_linked_list(node_0)
    assert node_0.successor is None
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == {}
    assert var_0.incoming_nodes == {}
    assert var_0.outgoing_nodes == []
    var_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    node_0 = module_1.Node(successor=dict_0, predecessors=dict_0, incoming_nodes=dict_0)
    var_0 = module_0.reverse_linked_list(node_0)
    assert node_0.successor is None
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == {}
    assert var_0.incoming_nodes == {}
    assert var_0.outgoing_nodes == []
    node_1 = module_1.Node(successor=node_0)
    none_type_0 = None
    var_1 = module_0.reverse_linked_list(none_type_0)
    var_2 = module_0.reverse_linked_list(node_1)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(var_0.successor).__module__}.{type(var_0.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value is None
    assert (
        f"{type(var_2.successor).__module__}.{type(var_2.successor).__qualname__}"
        == "node.Node"
    )
    assert var_2.successors == []
    assert var_2.predecessors == {}
    assert var_2.incoming_nodes == {}
    assert var_2.outgoing_nodes == []
    node_0.successors()
