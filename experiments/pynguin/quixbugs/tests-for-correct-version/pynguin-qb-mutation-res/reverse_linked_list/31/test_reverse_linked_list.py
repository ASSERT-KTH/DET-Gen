# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"-\xc2\x9c*\x15\xdb\x1b%\x14q\x02\xaf\xca"
    module_0.reverse_linked_list(bytes_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


def test_case_2():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)
    var_1 = module_0.reverse_linked_list(var_0)
    node_0 = module_1.Node(var_1)
    var_2 = module_0.reverse_linked_list(bool_0)
    var_3 = module_0.reverse_linked_list(bool_0)
    var_4 = module_0.reverse_linked_list(var_0)
    var_5 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "node.Node"
    assert var_5.value is None
    assert var_5.successor is None
    assert var_5.successors == []
    assert var_5.predecessors == []
    assert var_5.incoming_nodes == []
    assert var_5.outgoing_nodes == []
    var_6 = module_0.reverse_linked_list(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 1256
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    node_0 = module_1.Node(none_type_0)
    node_1 = module_1.Node(var_0, node_0, incoming_nodes=int_0)
    var_1 = module_0.reverse_linked_list(node_1)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert (
        f"{type(var_1.successor).__module__}.{type(var_1.successor).__qualname__}"
        == "node.Node"
    )
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    var_2 = module_0.reverse_linked_list(none_type_0)
    node_2 = module_1.Node(predecessors=var_2, outgoing_nodes=node_1)
    node_2.successor()
