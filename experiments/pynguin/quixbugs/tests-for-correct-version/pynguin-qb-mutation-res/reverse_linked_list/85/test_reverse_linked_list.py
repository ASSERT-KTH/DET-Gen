# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import reverse_linked_list as module_1


def test_case_0():
    set_0 = set()
    node_0 = module_0.Node(successors=set_0, incoming_nodes=set_0)
    var_0 = module_1.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == {*()}
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == {*()}
    assert var_0.outgoing_nodes == []


def test_case_1():
    set_0 = set()
    var_0 = module_1.reverse_linked_list(set_0)
    var_1 = module_1.reverse_linked_list(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    node_0 = module_0.Node(successor=set_0)
    node_1 = module_0.Node(node_0, set_0, set_0, set_0, outgoing_nodes=set_0)
    node_2 = module_0.Node(successor=node_1, outgoing_nodes=node_0)
    var_0 = module_1.reverse_linked_list(node_2)
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_2.successor is None
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(var_0.successor).__module__}.{type(var_0.successor).__qualname__}"
        == "node.Node"
    )
    assert var_0.successors == {*()}
    assert var_0.predecessors == {*()}
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == {*()}
    var_0.successors()
