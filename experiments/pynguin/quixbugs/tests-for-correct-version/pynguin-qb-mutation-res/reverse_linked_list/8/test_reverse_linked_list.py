# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import reverse_linked_list as module_1


def test_case_0():
    none_type_0 = None
    node_0 = module_0.Node(successor=none_type_0, predecessors=none_type_0)
    var_0 = module_1.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors is None
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []


def test_case_1():
    bool_0 = False
    var_0 = module_1.reverse_linked_list(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    var_0 = module_0.Node(
        tuple_0, successors=tuple_0, predecessors=tuple_0, outgoing_nodes=tuple_0
    )
    list_0 = [tuple_0]
    node_0 = module_0.Node(successor=var_0, incoming_nodes=list_0)
    var_1 = module_1.reverse_linked_list(node_0)
    assert (
        f"{type(var_0.successor).__module__}.{type(var_0.successor).__qualname__}"
        == "node.Node"
    )
    assert node_0.successor is None
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value == ()
    assert (
        f"{type(var_1.successor).__module__}.{type(var_1.successor).__qualname__}"
        == "node.Node"
    )
    assert var_1.successors == ()
    assert var_1.predecessors == ()
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == ()
    var_0.successors()
