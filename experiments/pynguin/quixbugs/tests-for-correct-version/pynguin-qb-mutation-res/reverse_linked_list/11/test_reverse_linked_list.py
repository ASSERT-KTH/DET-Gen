# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xa9H\xb7'\x85"
    module_0.reverse_linked_list(bytes_0)


def test_case_1():
    list_0 = []
    var_0 = module_0.reverse_linked_list(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xb7\x7f\xeaok\x94Y\x17c\x8b\x1a\x9bf\x1e\x8c\xda\x9f\x0e"
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    node_0 = module_1.Node(bytes_0, predecessors=bytes_0)
    var_1 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value == b"\xb7\x7f\xeaok\x94Y\x17c\x8b\x1a\x9bf\x1e\x8c\xda\x9f\x0e"
    assert var_1.successor is None
    assert var_1.successors == []
    assert (
        var_1.predecessors
        == b"\xb7\x7f\xeaok\x94Y\x17c\x8b\x1a\x9bf\x1e\x8c\xda\x9f\x0e"
    )
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    int_0 = 3604
    module_0.reverse_linked_list(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xb7\x7f\xeaok\x94Y\x17c\x8b\x1a\x9bf\x1e\x8c\xda\x9f\x0e"
    none_type_0 = None
    node_0 = module_1.Node(
        none_type_0, bytes_0, none_type_0, incoming_nodes=none_type_0
    )
    module_0.reverse_linked_list(node_0)
