# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xfd\xb6\xf2[|J2\x9a\x82\xdcb\xbb\xdc\xab\x97\xaf\x17\x81\x13;"
    module_0.reverse_linked_list(bytes_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "Qkau3>.RK%'*8ojB{QK}"
    bytes_0 = b"\xdbh\xefp\xaf\xf3\xf0;\xd8\x80\xad_\x13\x96\x16\x02\xac"
    bool_0 = False
    node_0 = module_1.Node(successor=str_0, predecessors=bytes_0, outgoing_nodes=bool_0)
    bool_1 = False
    var_0 = module_0.reverse_linked_list(bool_1)
    var_1 = module_0.reverse_linked_list(bool_1)
    var_2 = module_0.reverse_linked_list(bool_0)
    module_0.reverse_linked_list(node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)
    var_1 = module_0.reverse_linked_list(var_0)
    var_2 = module_0.reverse_linked_list(var_1)
    node_0 = module_1.Node(outgoing_nodes=var_0)
    var_3 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "node.Node"
    assert var_3.value is None
    assert var_3.successor is None
    assert var_3.successors == []
    assert var_3.predecessors == []
    assert var_3.incoming_nodes == []
    assert var_3.outgoing_nodes is None
    none_type_0 = None
    tuple_0 = (none_type_0, var_3, var_2, var_1)
    module_0.reverse_linked_list(tuple_0)
