# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import kth as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xc2\xb5\x01\xba\xa2\r!\xf0\xae\xdc\xc4\xbc)\xf3\xe7"
    complex_0 = -4696 - 1217j
    tuple_0 = (bytes_0, complex_0)
    module_0.kth(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    var_0 = module_0.kth(list_0, bool_0)
    assert var_0 is True
    var_1 = module_0.kth(list_0, var_0)
    module_0.kth(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.kth(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "m*K"
    module_0.kth(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ",<\"UGQQ?]9DZ';"
    none_type_0 = None
    module_0.kth(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    str_0 = "0[e9\\L\"*egz6'"
    str_1 = "YWQb+nV|iZv]xrM@<\\"
    var_0 = module_0.kth(str_1, bool_0)
    assert var_0 == "<"
    str_2 = "\r'QH\\+BB"
    module_0.kth(str_0, str_2)
