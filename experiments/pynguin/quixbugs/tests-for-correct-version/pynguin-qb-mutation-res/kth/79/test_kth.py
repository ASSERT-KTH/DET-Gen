# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import kth as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    tuple_0 = (bool_0,)
    var_0 = module_0.kth(tuple_0, bool_0)
    assert var_0 is False
    none_type_0 = None
    module_0.kth(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.kth(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    object_0 = module_1.object()
    module_0.kth(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xbd|\x80\xbe\xb2\xb5\xd5\xad"
    module_0.kth(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -934
    complex_0 = -1024.3 - 1574.73j
    tuple_0 = ()
    tuple_1 = (int_0, int_0, complex_0, tuple_0)
    module_0.kth(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    object_0 = module_1.object()
    none_type_0 = None
    bytes_0 = b"\xdeX\x8dasg\xe2P\xfc\xe7\xf0\xaf\xe7s\xacK"
    int_0 = -3215
    list_0 = [none_type_0, int_0, int_0, bytes_0]
    tuple_0 = (list_0, list_0)
    bool_0 = True
    var_0 = module_0.kth(tuple_0, bool_0)
    module_0.kth(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.kth(tuple_0, bool_0)
