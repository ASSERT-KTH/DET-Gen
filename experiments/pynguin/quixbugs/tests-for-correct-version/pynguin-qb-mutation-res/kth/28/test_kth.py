# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import kth as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -3104
    list_0 = [int_0, int_0, int_0]
    float_0 = 5109.600126759455
    module_0.kth(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.kth(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    int_0 = -2173
    tuple_0 = (bool_0, bool_0, int_0)
    module_0.kth(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x91\xd4\x06\x92{\x91\xd1\xe6\x8ar`\x06M\xbe}\x04\x98\x04\x90k"
    module_0.kth(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.kth(dict_0, bool_0)
    assert var_0 is False
    module_0.kth(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    bytes_0 = b"TQR\x9ak\x99"
    var_0 = module_0.kth(bytes_0, bool_0)
    assert var_0 == 81
    var_1 = module_0.kth(dict_0, bool_0)
    assert var_1 is False
    module_1.object(*bool_0)
