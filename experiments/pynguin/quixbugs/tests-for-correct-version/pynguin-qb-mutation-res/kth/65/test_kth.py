# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import kth as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "sjdLI-)-hFne.N`qM=68"
    module_0.kth(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.kth(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xa1\xb4\xe1\xdaey\xbe\xa4y\xb7\x93h\xc2\xc2j\xba\xd9%"
    module_0.kth(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.kth(list_0, bool_0)
    assert var_0 is True
    module_0.kth(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    int_0 = 2510
    var_0 = module_0.kth(list_0, bool_0)
    assert var_0 is True
    module_0.kth(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "|87&06v&~</7 ~S*tD"
    bool_0 = True
    var_0 = module_0.kth(str_0, bool_0)
    assert var_0 == "&"
    none_type_0 = None
    module_0.kth(none_type_0, none_type_0)
