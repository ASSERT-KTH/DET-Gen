# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import levenshtein as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "CUpr1Xy]#"
    var_0 = module_0.levenshtein(str_0, str_0)
    assert var_0 == 0
    bool_0 = True
    var_1 = module_0.levenshtein(str_0, str_0)
    assert var_1 == 0
    set_0 = {bool_0}
    module_0.levenshtein(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_0.levenshtein(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.levenshtein(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -114.1743
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [dict_0, dict_0]
    int_0 = -3983
    tuple_0 = (int_0,)
    list_1 = [list_0, tuple_0, int_0, tuple_0]
    list_2 = [list_1]
    module_0.levenshtein(list_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "I"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.levenshtein(str_0, str_0)
    assert var_0 == 0
    var_1 = module_0.levenshtein(list_0, str_0)
    assert var_1 == 3
    int_0 = -1410
    module_0.levenshtein(list_0, int_0)
