# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import levenshtein as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "n48"
    var_0 = module_0.levenshtein(str_0, str_0)
    assert var_0 == 0
    bool_0 = False
    none_type_0 = None
    module_0.levenshtein(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.levenshtein(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xb4\x15\x9a\xc1\xcb^\x95`\xc7*\xd2"
    module_0.levenshtein(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xaa\x8bF\x08_\xbc\xa2"
    list_0 = [bytes_0]
    module_0.levenshtein(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "2[M\x0c:l)|ttln:-4Y.Zf"
    str_1 = ""
    var_0 = module_0.levenshtein(str_0, str_1)
    assert var_0 == 19
    var_1 = module_0.levenshtein(str_0, str_0)
    assert var_1 == 0
    var_2 = module_1.object()
    set_0 = {var_1, var_2, str_0, str_0}
    module_0.levenshtein(set_0, var_2)
