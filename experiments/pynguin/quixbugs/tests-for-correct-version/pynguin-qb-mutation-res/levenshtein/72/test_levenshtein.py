# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import levenshtein as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = ""
    none_type_0 = None
    module_0.levenshtein(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = 3747.55
    module_0.levenshtein(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ""
    var_0 = module_0.levenshtein(str_0, str_0)
    assert var_0 == 0
    var_1 = module_0.levenshtein(str_0, str_0)
    module_0.levenshtein(var_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '2b>M1^I-\r "jIVq'
    var_0 = module_0.levenshtein(str_0, str_0)
    assert var_0 == 0
    var_1 = module_0.levenshtein(str_0, str_0)
    assert var_1 == 0
    var_2 = module_0.levenshtein(str_0, str_0)
    assert var_2 == 0
    module_0.levenshtein(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    dict_0 = {}
    tuple_0 = (bool_0, dict_0)
    list_0 = [tuple_0]
    module_0.levenshtein(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "j'Mf:3a3_"
    var_0 = module_0.levenshtein(str_0, str_0)
    assert var_0 == 0
    str_1 = "\r>>bYq"
    var_1 = module_0.levenshtein(str_1, str_0)
    assert var_1 == 9
    var_2 = module_0.levenshtein(str_1, str_1)
    assert var_2 == 0
    module_1.object(**var_2)
