# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\r\x11"
    node_0 = module_1.Node(successors=bytes_0, predecessors=bytes_0)
    module_0.breadth_first_search(node_0, bytes_0)


def test_case_2():
    node_0 = module_1.Node()
    bytes_0 = b"m\xf5L"
    var_0 = module_0.breadth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    var_1 = module_0.breadth_first_search(node_0, bytes_0)
    node_1 = module_1.Node(successor=bytes_0, successors=bytes_0, incoming_nodes=var_0)
    assert node_1.incoming_nodes is True


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x9c"
    node_0 = module_1.Node(
        bytes_0, successors=bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0
    )
    list_0 = [node_0, node_0, bytes_0]
    node_1 = module_1.Node(successor=bytes_0, successors=list_0)
    int_0 = -2403
    module_0.breadth_first_search(node_1, int_0)
