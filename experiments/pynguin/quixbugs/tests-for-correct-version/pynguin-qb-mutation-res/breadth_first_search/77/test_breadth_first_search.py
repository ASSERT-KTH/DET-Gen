# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xad\xc3'\x9c_\n\x86X_\t\x94u\x9e"
    bytes_1 = b"\xc4n\xa6\xb5\xd0|\xd0|r\x89\x01\xfblRg\xda\t\xd9}"
    module_0.breadth_first_search(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xc6\xaf\xde\xd1q\x1dM0\xbe\xa5\xfe"
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0)
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xc6\xaf\xde\xd1q\x1dM0\xbe\xa5\xfe"
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0)
    node_1 = module_1.Node(
        successor=bytes_0, incoming_nodes=node_0, outgoing_nodes=node_0
    )
    var_0 = module_0.breadth_first_search(node_1, node_0)
    assert var_0 is False
    module_0.breadth_first_search(node_0, var_0)
