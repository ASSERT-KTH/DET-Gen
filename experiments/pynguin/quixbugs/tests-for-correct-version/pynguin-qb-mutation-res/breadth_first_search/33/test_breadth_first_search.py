# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "3Zh{4"
    node_0 = module_1.Node(successors=str_0)
    module_0.breadth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    module_0.breadth_first_search(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, none_type_0)
    var_0 = module_0.breadth_first_search(node_0, none_type_0)
    assert var_0 is False
    int_0 = 2017
    none_type_1 = None
    module_0.breadth_first_search(int_0, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ","
    node_0 = module_1.Node(successors=str_0)
    list_0 = [node_0, node_0]
    float_0 = 1407.0
    node_1 = module_1.Node(
        successors=list_0, predecessors=node_0, outgoing_nodes=float_0
    )
    module_0.breadth_first_search(node_1, list_0)
