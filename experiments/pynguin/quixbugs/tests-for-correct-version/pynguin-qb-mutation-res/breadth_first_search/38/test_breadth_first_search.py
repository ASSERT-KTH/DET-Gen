# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"<\x02\xca\x96\x8f\xd4<M"
    var_0 = module_0.breadth_first_search(bytes_0, bytes_0)
    assert var_0 is True


def test_case_1():
    set_0 = set()
    node_0 = module_1.Node(successors=set_0)
    dict_0 = {node_0: set_0}
    node_1 = module_1.Node(
        node_0, successors=dict_0, predecessors=dict_0, outgoing_nodes=set_0
    )
    var_0 = module_0.breadth_first_search(node_1, dict_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 2028.12
    none_type_0 = None
    module_0.breadth_first_search(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"]d_u\x15\x9a\xee\x01\x9c\xd6Mp\r/\x8b"
    node_0 = module_1.Node(successors=bytes_0)
    set_0 = set()
    node_1 = module_1.Node(successors=set_0)
    var_0 = module_0.breadth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    dict_0 = {node_1: set_0, node_0: set_0, var_0: node_1}
    node_2 = module_1.Node(
        node_1, successors=dict_0, predecessors=node_1, outgoing_nodes=set_0
    )
    module_0.breadth_first_search(node_2, dict_0)
