# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True


def test_case_1():
    node_0 = module_1.Node()
    var_0 = module_0.breadth_first_search(node_0, node_0)
    assert var_0 is True
    var_1 = module_0.breadth_first_search(node_0, var_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    object_0 = module_2.object()
    module_0.breadth_first_search(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b")E|"
    node_0 = module_1.Node(bytes_0, successors=bytes_0)
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"Y"
    node_0 = module_1.Node(bytes_0, successors=bytes_0, incoming_nodes=bytes_0)
    var_0 = module_0.breadth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    list_0 = [node_0, node_0, bytes_0, node_0]
    node_1 = module_1.Node(successor=bytes_0, successors=list_0, predecessors=bytes_0)
    none_type_0 = None
    module_0.breadth_first_search(node_1, none_type_0)
