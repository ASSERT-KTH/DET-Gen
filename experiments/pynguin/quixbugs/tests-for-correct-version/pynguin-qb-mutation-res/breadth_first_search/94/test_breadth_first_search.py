# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import collections as module_1
import node as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    deque_0 = module_1.deque()
    module_0.breadth_first_search(bool_0, deque_0)


def test_case_2():
    deque_0 = module_1.deque()
    node_0 = module_2.Node(
        successor=deque_0, predecessors=deque_0, incoming_nodes=deque_0
    )
    var_0 = module_0.breadth_first_search(node_0, deque_0)
    assert var_0 is False


def test_case_3():
    none_type_0 = None
    tuple_0 = (none_type_0, none_type_0, none_type_0)
    node_0 = module_2.Node(tuple_0, successors=tuple_0)
    var_0 = module_0.breadth_first_search(node_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xb92KFa \xe8\xff\xc5:&D,"
    var_0 = module_2.Node(successors=bytes_0)
    tuple_0 = (var_0, var_0, var_0)
    node_0 = module_2.Node(tuple_0, successors=tuple_0)
    module_0.breadth_first_search(node_0, tuple_0)
