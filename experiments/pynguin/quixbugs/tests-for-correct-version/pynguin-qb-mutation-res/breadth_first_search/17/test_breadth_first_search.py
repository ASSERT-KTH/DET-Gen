# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xa8uY\x1e\x00(*B\xc3\x97\xcc\xec+\xfa"
    node_0 = module_1.Node(successors=bytes_0, incoming_nodes=bytes_0)
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    module_0.breadth_first_search(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 2554.794064788419
    var_0 = module_0.breadth_first_search(float_0, float_0)
    assert var_0 is True
    var_1 = module_0.breadth_first_search(float_0, float_0)
    assert var_1 is True
    node_0 = module_1.Node(var_1, float_0, incoming_nodes=var_1, outgoing_nodes=var_1)
    assert node_0.value is True
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes is True
    var_2 = module_0.breadth_first_search(node_0, var_1)
    list_0 = []
    var_3 = module_0.breadth_first_search(var_1, var_1)
    assert var_3 is True
    node_1 = module_1.Node(node_0, predecessors=var_0, incoming_nodes=list_0)
    assert node_1.predecessors is True
    var_0.predecessors()
