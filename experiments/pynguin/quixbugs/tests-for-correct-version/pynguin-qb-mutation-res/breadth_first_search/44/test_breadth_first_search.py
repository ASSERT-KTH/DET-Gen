# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '/2N,V~ ~f"~\x0c='
    none_type_0 = None
    module_0.breadth_first_search(str_0, none_type_0)


def test_case_2():
    none_type_0 = None
    node_0 = module_1.Node(outgoing_nodes=none_type_0)
    var_0 = module_0.breadth_first_search(node_0, none_type_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xd5J^n\xc6DC\x8bC9[o\xbb\xda\xa8\x92/\x19a"
    node_0 = module_1.Node(successors=bytes_0)
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "k"
    node_0 = module_1.Node(successor=str_0, successors=str_0, incoming_nodes=str_0)
    list_0 = [node_0, str_0]
    node_1 = module_1.Node(successor=list_0, successors=list_0)
    module_0.breadth_first_search(node_1, list_0)
