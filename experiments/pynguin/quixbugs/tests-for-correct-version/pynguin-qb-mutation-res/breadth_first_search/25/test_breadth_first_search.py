# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True


def test_case_1():
    bytes_0 = b'\x1f"\x02<~w;\nC\x02\xf9\x9e5\xbc\xc5\xd1\xc3\xf1\xbb\xaf'
    node_0 = module_1.Node(outgoing_nodes=bytes_0)
    var_0 = module_0.breadth_first_search(node_0, bytes_0)
    assert var_0 is False


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    node_0 = module_1.Node(successors=dict_0)
    var_0 = module_0.breadth_first_search(node_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    dict_0 = {
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
    }
    bytes_0 = b"\xb5\x13\xfc\xf1l\x88\xe8z\xff\xe0"
    node_0 = module_1.Node(
        successor=dict_0, successors=dict_0, predecessors=bool_0, outgoing_nodes=bytes_0
    )
    list_0 = [node_0, bool_0, bool_0, node_0]
    none_type_0 = None
    node_1 = module_1.Node(bool_0, node_0, list_0, none_type_0)
    module_0.breadth_first_search(node_1, none_type_0)
