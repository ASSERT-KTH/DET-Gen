# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    float_0 = -1507.80304
    var_0 = module_0.breadth_first_search(float_0, float_0)
    assert var_0 is True


def test_case_1():
    int_0 = 3975
    node_0 = module_1.Node(int_0, predecessors=int_0, outgoing_nodes=int_0)
    var_0 = module_0.breadth_first_search(node_0, int_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x83\xb1\xec"
    node_0 = module_1.Node(bytes_0, successors=bytes_0, incoming_nodes=bytes_0)
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"R"
    var_0 = module_0.breadth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    none_type_0 = None
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, incoming_nodes=none_type_0
    )
    bytes_1 = b"$$r\xfa\x14F\xf7N"
    tuple_0 = (node_0, node_0, bytes_1)
    node_1 = module_1.Node(bytes_0, tuple_0, tuple_0, bytes_0)
    module_0.breadth_first_search(node_1, bytes_0)
