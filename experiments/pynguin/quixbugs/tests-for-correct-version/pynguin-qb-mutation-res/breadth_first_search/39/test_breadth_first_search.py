# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.breadth_first_search(tuple_0, tuple_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    none_type_0 = None
    module_0.breadth_first_search(bool_0, none_type_0)


def test_case_2():
    bool_0 = False
    node_0 = module_1.Node(incoming_nodes=bool_0, outgoing_nodes=bool_0)
    var_0 = module_0.breadth_first_search(node_0, bool_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    bool_0 = False
    str_0 = "RUzldX?N0"
    tuple_0 = (bool_0, str_0, str_0, str_0)
    node_0 = module_1.Node(bool_0, list_0, tuple_0, str_0)
    module_0.breadth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    str_0 = "8\x0bH]Y7*wse}["
    node_0 = module_1.Node(successors=str_0)
    str_1 = "H"
    tuple_0 = (node_0, str_0, str_1, str_0)
    bool_0 = True
    tuple_1 = (list_0, tuple_0, str_0, bool_0)
    node_1 = module_1.Node(tuple_1, list_0, tuple_0, str_0)
    var_0 = module_0.breadth_first_search(node_1, str_0)
    assert var_0 is True
    node_2 = module_1.Node(successor=node_0, predecessors=var_0, outgoing_nodes=tuple_1)
    assert node_2.predecessors is True
    node_0.successor()
