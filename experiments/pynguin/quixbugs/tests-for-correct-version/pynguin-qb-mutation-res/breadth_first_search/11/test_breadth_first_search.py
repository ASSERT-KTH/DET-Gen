# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "n'j"
    none_type_0 = None
    module_0.breadth_first_search(str_0, none_type_0)


def test_case_2():
    bool_0 = True
    node_0 = module_1.Node()
    var_0 = module_0.breadth_first_search(node_0, bool_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xe4\xa7\xe6n"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    node_0 = module_1.Node(successors=list_0)
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xe4\xa7\xe6n"
    set_0 = module_0.breadth_first_search(bytes_0, bytes_0)
    assert set_0 is True
    list_0 = [set_0, set_0]
    node_0 = module_1.Node(successors=list_0)
    assert node_0.successors == [True, True]
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xe4\xa7\xe6n"
    var_0 = module_1.Node(successors=bytes_0, incoming_nodes=bytes_0)
    list_0 = [var_0, var_0]
    node_0 = module_1.Node(successors=list_0)
    module_0.breadth_first_search(node_0, bytes_0)
