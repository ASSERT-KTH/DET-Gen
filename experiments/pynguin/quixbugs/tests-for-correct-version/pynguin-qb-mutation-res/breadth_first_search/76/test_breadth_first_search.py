# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


def test_case_1():
    bytes_0 = b"\xc3"
    node_0 = module_1.Node(
        successor=bytes_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0
    )
    var_0 = module_0.breadth_first_search(node_0, bytes_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x9b\xa8\x8e\x82\x95\x1d\x96\xc4\xf2oB\x947k*\xa2g#"
    none_type_0 = None
    module_0.breadth_first_search(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "4m[("
    node_0 = module_1.Node(str_0, successors=str_0)
    module_0.breadth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "4m[("
    node_0 = module_1.Node(str_0, successors=str_0)
    list_0 = [node_0, node_0, node_0, str_0]
    node_1 = module_1.Node(successor=str_0, successors=list_0)
    bool_0 = False
    module_0.breadth_first_search(node_1, bool_0)
