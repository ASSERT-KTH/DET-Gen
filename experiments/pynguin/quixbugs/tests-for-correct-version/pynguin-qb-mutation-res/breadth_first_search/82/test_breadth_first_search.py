# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"Y~\xd3>\xfd\x82o\xc5\xcc"
    node_0 = module_1.Node(bytes_0, successors=bytes_0, incoming_nodes=bytes_0)
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 1637.797
    none_type_0 = None
    module_0.breadth_first_search(float_0, none_type_0)


def test_case_3():
    bytes_0 = b"Y~\xd3>\xfd\x82o\xc5\xcc"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    node_0 = module_1.Node(list_0)
    var_0 = module_0.breadth_first_search(node_0, list_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_1.Node(successor=bool_0, successors=list_0, incoming_nodes=bool_0)
    tuple_0 = (node_0, bool_0)
    none_type_0 = None
    node_1 = module_1.Node(list_0, list_0, tuple_0, incoming_nodes=none_type_0)
    module_0.breadth_first_search(node_1, list_0)
