# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import next_palindrome as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xec\x90<\xd5[h\x10\xf8\xb16\xf0\xf7\xfb\x92"
    module_0.next_palindrome(bytes_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_0.next_palindrome(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.next_palindrome(bool_0)


def test_case_3():
    tuple_0 = ()
    var_0 = module_0.next_palindrome(tuple_0)
    var_1 = module_0.next_palindrome(var_0)


def test_case_4():
    int_0 = 9
    list_0 = [int_0, int_0]
    var_0 = module_0.next_palindrome(list_0)


def test_case_5():
    int_0 = 9
    list_0 = [int_0, int_0, int_0, int_0]
    var_0 = module_0.next_palindrome(list_0)
    var_1 = module_0.next_palindrome(var_0)
    var_2 = module_0.next_palindrome(var_0)


def test_case_6():
    int_0 = 9
    list_0 = [int_0, int_0, int_0, int_0]
    var_0 = module_0.next_palindrome(list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 9
    list_0 = [int_0, int_0, int_0, int_0]
    var_0 = module_0.next_palindrome(list_0)
    bool_0 = True
    float_0 = -1731.42
    bool_1 = True
    dict_0 = {bool_0: var_0, bool_0: int_0, int_0: float_0, bool_1: int_0}
    var_1 = module_0.next_palindrome(dict_0)
    var_2 = module_0.next_palindrome(var_0)
    tuple_0 = ()
    var_3 = module_0.next_palindrome(tuple_0)
    var_4 = module_0.next_palindrome(tuple_0)
    module_0.next_palindrome(int_0)
