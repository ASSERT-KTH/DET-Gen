# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import is_valid_parenthesization as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xf8\xfc\xfecd\x07\x1e\xf1\x12?\x02\x95<"
    var_0 = module_0.is_valid_parenthesization(bytes_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    var_0 = module_0.is_valid_parenthesization(dict_0)
    assert var_0 is True
    var_1 = module_0.is_valid_parenthesization(dict_0)
    assert var_1 is True
    var_2 = module_0.is_valid_parenthesization(dict_0)
    assert var_2 is True
    module_0.is_valid_parenthesization(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.is_valid_parenthesization(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "("
    str_1 = "b_!4*,a\"HHnJq'uW"
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is False
    var_1 = module_0.is_valid_parenthesization(str_1)
    assert var_1 is False
    module_1.object(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "(L'y"
    str_1 = "b_!4],a\"HHnq'uW"
    var_0 = module_0.is_valid_parenthesization(str_1)
    assert var_0 is False
    var_1 = module_0.is_valid_parenthesization(str_0)
    assert var_1 is False
    module_0.is_valid_parenthesization(var_0)
