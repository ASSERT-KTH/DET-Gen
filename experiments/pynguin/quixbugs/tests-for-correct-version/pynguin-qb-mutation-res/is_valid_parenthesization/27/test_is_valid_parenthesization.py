# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import is_valid_parenthesization as module_0


def test_case_0():
    bytes_0 = b"\x9b\xc5\x06RE2"
    var_0 = module_0.is_valid_parenthesization(bytes_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    var_0 = module_0.is_valid_parenthesization(set_0)
    assert var_0 is True
    bool_0 = True
    module_0.is_valid_parenthesization(bool_0)


def test_case_2():
    float_0 = -962.619
    str_0 = "Q"
    tuple_0 = ()
    tuple_1 = (float_0, str_0, tuple_0)
    str_1 = " *TSgg\tpR\t)KLc3-"
    dict_0 = {tuple_1: tuple_1, float_0: str_1}
    var_0 = module_0.is_valid_parenthesization(dict_0)
    assert var_0 is False
    list_0 = []
    var_1 = module_0.is_valid_parenthesization(list_0)
    assert var_1 is True
    var_2 = module_0.is_valid_parenthesization(list_0)
    assert var_2 is True
    bytes_0 = b"k\x82\xaf@\xdf\xed\xdfWe\xfbQ\xd8\x8ag\x87\x14\xb0\xc7\xae\x90"
    var_3 = module_0.is_valid_parenthesization(bytes_0)
    assert var_3 is False
    var_4 = module_0.is_valid_parenthesization(dict_0)
    assert var_4 is False
    var_5 = module_0.is_valid_parenthesization(dict_0)
    assert var_5 is False
    str_2 = "(U1q8"
    var_6 = module_0.is_valid_parenthesization(str_2)
    assert var_6 is False
