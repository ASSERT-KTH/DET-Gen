# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import is_valid_parenthesization as module_0


def test_case_0():
    bool_0 = False
    list_0 = [bool_0]
    var_0 = module_0.is_valid_parenthesization(list_0)
    assert var_0 is False


def test_case_1():
    bytes_0 = b"@\x16\xac\x00\x03\xdb\x8a\x817\n\xd5\x8e\xbf\xc9\x1f@e\xf4\xd9"
    var_0 = module_0.is_valid_parenthesization(bytes_0)
    assert var_0 is False
    dict_0 = {}
    var_1 = module_0.is_valid_parenthesization(dict_0)
    assert var_1 is True
    tuple_0 = (dict_0,)
    var_2 = module_0.is_valid_parenthesization(tuple_0)
    assert var_2 is False
    var_3 = module_0.is_valid_parenthesization(bytes_0)
    assert var_3 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -709.0
    module_0.is_valid_parenthesization(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "(HNFg)u#Ksw-;\x0cb}P2u"
    set_0 = {str_0, str_0, str_0, str_0}
    var_0 = module_0.is_valid_parenthesization(set_0)
    assert var_0 is False
    bytes_0 = b""
    var_1 = module_0.is_valid_parenthesization(bytes_0)
    assert var_1 is True
    var_2 = module_0.is_valid_parenthesization(str_0)
    assert var_2 is False
    tuple_0 = (str_0, set_0)
    var_3 = module_0.is_valid_parenthesization(tuple_0)
    assert var_3 is False
    var_4 = module_0.is_valid_parenthesization(set_0)
    assert var_4 is False
    var_5 = module_0.is_valid_parenthesization(str_0)
    assert var_5 is False
    module_0.is_valid_parenthesization(var_2)
