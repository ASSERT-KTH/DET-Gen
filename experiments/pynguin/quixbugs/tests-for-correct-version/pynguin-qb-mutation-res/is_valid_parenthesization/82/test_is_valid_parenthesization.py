# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import is_valid_parenthesization as module_0


def test_case_0():
    bytes_0 = b"\x0bM"
    var_0 = module_0.is_valid_parenthesization(bytes_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ""
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is True
    none_type_0 = None
    module_0.is_valid_parenthesization(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -2635
    module_0.is_valid_parenthesization(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    str_0 = "Ks[1YZH>T"
    tuple_0 = (bool_0, dict_0, str_0)
    var_0 = module_0.is_valid_parenthesization(tuple_0)
    assert var_0 is False
    str_1 = "("
    var_1 = module_0.is_valid_parenthesization(str_1)
    assert var_1 is False
    none_type_0 = None
    module_0.is_valid_parenthesization(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    str_0 = "Ks[1YZH>T"
    tuple_0 = (bool_0, dict_0, str_0)
    var_0 = module_0.is_valid_parenthesization(tuple_0)
    assert var_0 is False
    str_1 = "(,"
    var_1 = module_0.is_valid_parenthesization(str_1)
    assert var_1 is True
    none_type_0 = None
    module_0.is_valid_parenthesization(none_type_0)
