# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import is_valid_parenthesization as module_0


def test_case_0():
    str_0 = "f3\t\n%hJ\rt0"
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    var_0 = module_0.is_valid_parenthesization(dict_0)
    assert var_0 is True
    int_0 = -628
    module_0.is_valid_parenthesization(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -210
    module_0.is_valid_parenthesization(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "\x0bs`\\r HiA~B:S"
    bytes_0 = b"\xda\xc1"
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is False
    var_1 = module_0.is_valid_parenthesization(bytes_0)
    assert var_1 is False
    str_1 = "("
    var_2 = module_0.is_valid_parenthesization(str_1)
    assert var_2 is False
    module_0.is_valid_parenthesization(var_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "\x0bs`\\r HiA~B:S"
    bytes_0 = b"[E+\xfd\x90\xfe\x15Z\x0b\x81[\xf0\x867"
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is False
    var_1 = module_0.is_valid_parenthesization(str_0)
    assert var_1 is False
    var_2 = module_0.is_valid_parenthesization(bytes_0)
    assert var_2 is False
    str_1 = "(f"
    var_3 = module_0.is_valid_parenthesization(str_1)
    assert var_3 is True
    module_0.is_valid_parenthesization(var_2)
