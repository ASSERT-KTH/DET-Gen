# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import is_valid_parenthesization as module_0


def test_case_0():
    int_0 = 730
    dict_0 = {int_0: int_0}
    var_0 = module_0.is_valid_parenthesization(dict_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.is_valid_parenthesization(tuple_0)
    assert var_0 is True
    int_0 = -975
    module_0.is_valid_parenthesization(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 30
    module_0.is_valid_parenthesization(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "R~L09,r\n"
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is False
    var_1 = module_0.is_valid_parenthesization(str_0)
    assert var_1 is False
    str_1 = ".5'7@m#5D&lk$,?TD%"
    str_2 = "(70\rg'JAA^D\r[\rV_="
    str_3 = ">Y\n#&1ju"
    dict_0 = {str_1: str_1, str_2: str_2, str_3: str_2}
    var_2 = module_0.is_valid_parenthesization(str_1)
    assert var_2 is False
    var_3 = module_0.is_valid_parenthesization(str_0)
    assert var_3 is False
    var_4 = module_0.is_valid_parenthesization(str_2)
    assert var_4 is False
    dict_1 = {}
    var_5 = module_0.is_valid_parenthesization(dict_1)
    assert var_5 is True
    var_6 = module_0.is_valid_parenthesization(dict_0)
    assert var_6 is False
    module_0.is_valid_parenthesization(var_6)
