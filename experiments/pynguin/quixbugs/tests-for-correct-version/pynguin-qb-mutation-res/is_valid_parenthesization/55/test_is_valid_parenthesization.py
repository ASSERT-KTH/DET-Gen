# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import is_valid_parenthesization as module_0


def test_case_0():
    str_0 = "FajK+N2OZ&"
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    var_0 = module_0.is_valid_parenthesization(list_0)
    assert var_0 is True
    bytes_0 = b"\xf4\x9a=\x87\xf5l\xb8\xa5\x99\xea\xb1\x01\xd8\x03C\xfd\xac\x8a"
    var_1 = module_0.is_valid_parenthesization(bytes_0)
    assert var_1 is False
    str_0 = "\t^RC'a-"
    var_2 = module_0.is_valid_parenthesization(str_0)
    assert var_2 is False
    bytes_1 = b"\xc2A8\x98\x06V}\x03\xfb\xda\x9a0\xe1\xe6\xed=S\x0ey\x95"
    var_3 = module_0.is_valid_parenthesization(bytes_1)
    assert var_3 is False
    var_4 = module_0.is_valid_parenthesization(bytes_1)
    assert var_4 is False
    module_0.is_valid_parenthesization(var_4)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -2622
    module_0.is_valid_parenthesization(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "(7B8{E"
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is False
    module_0.is_valid_parenthesization(var_0)
