# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import is_valid_parenthesization as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xd7\xaf\xffX$\xcd\xda\x9d\xa7\xc7\xb1X\x94$\x7f\xcfz`"
    var_0 = module_0.is_valid_parenthesization(bytes_0)
    assert var_0 is False


def test_case_1():
    list_0 = []
    var_0 = module_0.is_valid_parenthesization(list_0)
    assert var_0 is True
    var_1 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2():
    object_0 = module_1.object()
    module_0.is_valid_parenthesization(object_0)


def test_case_3():
    str_0 = "("
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x0b\x05\xa1\x94)\xc8?\x03\x83\xcd\x82to"
    var_0 = module_0.is_valid_parenthesization(bytes_0)
    assert var_0 is False
    str_0 = "(~^kK^:,/LG`"
    dict_0 = {str_0: str_0}
    var_1 = module_0.is_valid_parenthesization(str_0)
    assert var_1 is False
    module_1.object(**dict_0)
