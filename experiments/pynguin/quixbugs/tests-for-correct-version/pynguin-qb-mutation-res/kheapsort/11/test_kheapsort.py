# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import kheapsort as module_0
import builtins as module_1


def test_case_0():
    complex_0 = 3017 - 2149.18735j
    var_0 = module_0.kheapsort(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    object_0 = module_1.object()
    none_type_0 = None
    bool_1 = True
    var_0 = module_0.kheapsort(none_type_0, none_type_0)
    var_1 = module_0.kheapsort(list_0, bool_1)
    module_1.object(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    var_0 = module_0.kheapsort(bool_0, bool_0)
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    bool_1 = False
    var_1 = module_0.kheapsort(bool_0, bool_1)
    var_2 = module_0.kheapsort(bool_1, bool_0)
    var_3 = module_0.kheapsort(none_type_0, none_type_0)
    var_4 = module_0.kheapsort(list_0, bool_1)
    module_1.object(*var_4)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.kheapsort(bool_0, bool_0)
    var_1 = module_0.kheapsort(bool_0, var_0)
    list_0 = [bool_0, bool_0]
    bool_1 = False
    object_0 = module_1.object()
    none_type_0 = None
    var_2 = module_0.kheapsort(bool_0, bool_0)
    var_3 = module_0.kheapsort(bool_1, bool_0)
    var_4 = module_0.kheapsort(none_type_0, none_type_0)
    var_5 = module_0.kheapsort(list_0, none_type_0)
    module_1.object(*var_5)
