# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.shortest_paths(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -1986
    bytes_0 = b"\x10J/\x18\xfd\xa4\xee\x12\xf7L"
    tuple_0 = (int_0, bytes_0)
    bytes_1 = b""
    var_0 = module_0.shortest_paths(tuple_0, bytes_1)
    node_0 = module_1.Node(bytes_0, int_0, tuple_0)
    module_0.shortest_paths(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x10J/\x18\xfd\xa4\xee\x12\xf7L"
    tuple_0 = (bytes_0, bytes_0)
    bytes_1 = b""
    var_0 = module_0.shortest_paths(tuple_0, bytes_1)
    node_0 = module_1.Node(bytes_0, var_0, tuple_0)
    assert node_0.successor == {
        (b"\x10J/\x18\xfd\xa4\xee\x12\xf7L", b"\x10J/\x18\xfd\xa4\xee\x12\xf7L"): 0
    }
    var_1 = module_0.shortest_paths(tuple_0, var_0)
    str_0 = "Z`ND_'aW\x0c\t~O_VJ+6"
    module_0.shortest_paths(str_0, str_0)
