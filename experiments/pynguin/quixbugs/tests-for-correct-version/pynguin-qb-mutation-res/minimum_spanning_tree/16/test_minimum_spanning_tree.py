# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_spanning_tree as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = 2587.252 + 1649.59j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.minimum_spanning_tree(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b""
    var_0 = module_0.minimum_spanning_tree(bytes_0)
    var_1 = module_0.minimum_spanning_tree(bytes_0)
    bytes_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"|\xc1\x97\x83"
    module_0.minimum_spanning_tree(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(
        none_type_0,
        successors=none_type_0,
        predecessors=none_type_0,
        outgoing_nodes=none_type_0,
    )
    str_0 = "ZHFRH &H\x0b%honG\x0bNhW"
    tuple_0 = (node_0, str_0)
    bytes_0 = b"\xbc)\xc0A\xd4\x8a]\x0fB\x9eN"
    dict_0 = {tuple_0: bytes_0}
    var_0 = module_0.minimum_spanning_tree(dict_0)
    module_0.minimum_spanning_tree(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(
        none_type_0,
        successors=none_type_0,
        predecessors=none_type_0,
        outgoing_nodes=none_type_0,
    )
    tuple_0 = (node_0, node_0)
    bytes_0 = b"\xbc)\xc0A\xd4\x8a]\x0fB\x9eN"
    dict_0 = {tuple_0: bytes_0}
    var_0 = module_0.minimum_spanning_tree(dict_0)
    list_0 = []
    var_1 = module_0.minimum_spanning_tree(list_0)
    var_0.successor()
