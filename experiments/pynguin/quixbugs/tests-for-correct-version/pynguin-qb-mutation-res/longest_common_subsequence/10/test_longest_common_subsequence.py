# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 5738
    module_0.longest_common_subsequence(int_0, int_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    var_0 = module_0.longest_common_subsequence(set_0, set_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(set_0, set_0)
    assert var_1 == ""
    int_0 = 3990
    var_2 = module_0.longest_common_subsequence(int_0, set_0)
    assert var_2 == ""
    module_0.longest_common_subsequence(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ">Z0H6{q?>\x0cQ_f\r&z"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == ">Z0H6{q?>\x0cQ_f\r&z"
    complex_0 = -5132.810449 + 1724.124799j
    module_0.longest_common_subsequence(str_0, complex_0)


def test_case_4():
    tuple_0 = ()
    str_0 = "YS"
    bytes_0 = b"\xce\x9f\xc5\xc5\xf3g\xfcC\xd6\xd5O\xe4\xcc\xcc\x9b>D"
    dict_0 = {}
    tuple_1 = (tuple_0, str_0, bytes_0, dict_0)
    bytes_1 = b"|\xd3J\xcbl\xc85J\x94\xf5l\x15"
    float_0 = -1296.623
    tuple_2 = (tuple_1, bytes_1, float_0)
    var_0 = module_0.longest_common_subsequence(tuple_2, bytes_0)
    assert var_0 == ""
    str_1 = "&/Vr>\x0cR4g&sF3"
    str_2 = "\nKBf L"
    var_1 = module_0.longest_common_subsequence(str_2, bytes_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(str_1, str_1)
    assert var_2 == "&/Vr>\x0cR4g&sF3"
