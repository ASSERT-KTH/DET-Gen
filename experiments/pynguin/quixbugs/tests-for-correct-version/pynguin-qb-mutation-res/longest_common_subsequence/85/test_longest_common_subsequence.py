# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xea\x10\xa7\x9bB\xb0n X\xb5\xde\x0e\xce\x198"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -711
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(int_0, none_type_0)
    assert var_0 == ""
    complex_0 = 2988 + 699.61686j
    module_0.longest_common_subsequence(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    bool_0 = False
    var_1 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_1 == ""
    bytes_0 = b"\xe1@\xed"
    int_0 = -1857
    set_0 = set()
    tuple_0 = (bytes_0, int_0, set_0)
    var_2 = module_0.longest_common_subsequence(tuple_0, bytes_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(bytes_0, var_1)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(var_2, tuple_0)
    assert var_4 == ""
    bytes_1 = b"\xce\xf1V\xed\xbe\n\xdc\x9f\xca"
    module_0.longest_common_subsequence(bytes_1, bytes_1)
