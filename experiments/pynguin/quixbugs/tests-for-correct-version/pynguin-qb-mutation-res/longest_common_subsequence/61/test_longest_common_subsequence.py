# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.longest_common_subsequence(set_0, bool_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""


def test_case_2():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    str_0 = "p~'z e"
    var_2 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(none_type_0, str_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(var_2, var_0)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(none_type_0, str_0)
    assert var_5 == ""
    none_type_1 = None
    var_6 = module_0.longest_common_subsequence(var_5, var_3)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_7 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "2903=\\9G(.4P"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "2903=\\9G(.4P"
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == "2903=\\9G(.4P"
    object_0 = module_1.object()
    module_0.longest_common_subsequence(object_0, object_0)


def test_case_4():
    bytes_0 = b"\xcbX\x1b\xa3\x05\xb9(\x9an\xb0\x13|"
    set_0 = {bytes_0}
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, bytes_0)
    assert var_0 == ""
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    str_0 = "Yv55W\x0cfP:B9?XXMiW^\x0b"
    var_1 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_1 == ""
    bool_1 = False
    var_2 = module_0.longest_common_subsequence(bool_1, var_0)
    assert var_2 == ""
    tuple_1 = (set_0, bytes_0, tuple_0)
    var_3 = module_0.longest_common_subsequence(bytes_0, tuple_1)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_4 == ""
