# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    str_0 = "5Ao>XaZ,nzoeEsp<"
    tuple_0 = (bool_0, bool_0, str_0)
    var_0 = module_0.longest_common_subsequence(tuple_0, bool_0)
    assert var_0 == ""


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    var_2 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    list_0 = [var_0, var_1, var_2, var_0]
    var_3 = module_0.longest_common_subsequence(var_0, list_0)
    assert var_3 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 1197.4
    module_0.longest_common_subsequence(float_0, float_0)


def test_case_3():
    str_0 = "gMu_ZwNMmOqH2}_Xh:"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    var_2 = module_0.longest_common_subsequence(var_0, none_type_0)
    var_3 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_3 == "gMu_ZwNMmOqH2}_Xh:"


def test_case_4():
    object_0 = module_1.object()
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(object_0, none_type_0)
    assert var_0 == ""
    str_0 = "`TsnYwpKX.;B"
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == "`TsnYwpKX.;B"
    var_2 = module_0.longest_common_subsequence(var_0, var_1)
    var_3 = module_0.longest_common_subsequence(var_1, var_1)
    assert var_3 == "`TsnYwpKX.;B"
    var_4 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_4 == "`TsnYwpKX.;B"
    bytes_0 = b"\xf6\x86R\xac \x91\x14;\xd3E\x9a\xd46"
    none_type_1 = None
    var_5 = module_0.longest_common_subsequence(var_3, var_3)
    assert var_5 == "`TsnYwpKX.;B"
    var_6 = module_0.longest_common_subsequence(bytes_0, none_type_1)
    var_7 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_7 == "`TsnYwpKX.;B"
    list_0 = [str_0, none_type_1, var_6]
    var_8 = module_0.longest_common_subsequence(bytes_0, list_0)
    assert var_8 == ""
    var_9 = module_0.longest_common_subsequence(var_6, var_0)
    var_10 = module_0.longest_common_subsequence(var_1, list_0)
    assert var_10 == ""
    var_11 = module_0.longest_common_subsequence(bytes_0, none_type_1)
    var_12 = module_0.longest_common_subsequence(var_9, bytes_0)
    tuple_0 = (str_0, bytes_0)
    var_13 = module_0.longest_common_subsequence(tuple_0, bytes_0)
    str_1 = '!^iA|"'
    var_14 = module_0.longest_common_subsequence(str_1, str_1)
    var_15 = module_0.longest_common_subsequence(var_14, var_6)
    var_16 = module_0.longest_common_subsequence(bytes_0, var_6)
    var_17 = module_0.longest_common_subsequence(none_type_0, var_11)
    var_18 = module_0.longest_common_subsequence(str_1, var_13)
    var_19 = module_0.longest_common_subsequence(var_9, var_7)
    var_20 = module_0.longest_common_subsequence(var_14, bytes_0)
    var_21 = module_0.longest_common_subsequence(str_1, str_1)
    var_22 = module_0.longest_common_subsequence(var_14, none_type_0)
    var_23 = module_0.longest_common_subsequence(var_20, var_13)
    var_24 = module_0.longest_common_subsequence(var_21, var_18)
    var_25 = module_0.longest_common_subsequence(var_4, var_8)
    var_26 = module_0.longest_common_subsequence(var_3, var_20)
    var_27 = module_0.longest_common_subsequence(none_type_1, str_1)
    var_28 = module_0.longest_common_subsequence(var_21, var_23)
    var_29 = module_0.longest_common_subsequence(bytes_0, var_20)
    var_30 = module_0.longest_common_subsequence(var_9, var_28)
