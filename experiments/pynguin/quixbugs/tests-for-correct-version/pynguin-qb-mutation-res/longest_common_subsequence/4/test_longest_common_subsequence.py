# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"2\x9b{\xff\x1f\x10.n"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


def test_case_1():
    int_0 = 547
    set_0 = {int_0}
    bool_0 = False
    float_0 = -35.0
    tuple_0 = (bool_0, bool_0, float_0)
    list_0 = [int_0, set_0, tuple_0]
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(list_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_1 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    none_type_0 = None
    float_0 = -806.0
    var_0 = module_0.longest_common_subsequence(none_type_0, float_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_1 == ""
    str_0 = "Fo"
    none_type_1 = None
    var_2 = module_0.longest_common_subsequence(bool_0, str_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(none_type_1, bool_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(var_4, none_type_1)
    assert var_5 == ""
    bytes_0 = b"r\xec\xc1\xb4\xeb@\xbc\xde\x120\xa5\x94n=\x87^"
    tuple_0 = (var_1, var_4, var_1, bytes_0)
    var_6 = module_0.longest_common_subsequence(str_0, tuple_0)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_7 == "Fo"
    var_8 = module_0.longest_common_subsequence(var_7, var_7)
    assert var_8 == "Fo"
    var_9 = module_0.longest_common_subsequence(var_7, var_3)
    assert var_9 == ""
    bool_1 = True
    var_10 = module_0.longest_common_subsequence(none_type_1, bool_0)
    assert var_10 == ""
    var_11 = module_0.longest_common_subsequence(var_9, var_8)
    assert var_11 == ""
    var_12 = module_0.longest_common_subsequence(var_4, var_8)
    assert var_12 == ""
    module_0.longest_common_subsequence(var_7, bool_1)
