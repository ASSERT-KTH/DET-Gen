# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xfc\xe5{<\x81;\xb5i\xc1\xbb"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""


def test_case_2():
    complex_0 = 1976.3 + 833.635314j
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(complex_0, none_type_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""
    tuple_0 = ()
    var_1 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(tuple_0, tuple_0)
    assert var_2 == ""
    bytes_0 = b"\xeb>\xe8B\xbdN\x82\x07"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_3 = module_0.longest_common_subsequence(list_0, bytes_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(var_2, bool_0)
    assert var_4 == ""
    none_type_0 = None
    var_5 = module_0.longest_common_subsequence(none_type_0, bytes_0)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(list_0, bytes_0)
    assert var_6 == ""
    int_0 = -595
    list_1 = [var_5, var_5]
    module_0.longest_common_subsequence(int_0, list_1)
