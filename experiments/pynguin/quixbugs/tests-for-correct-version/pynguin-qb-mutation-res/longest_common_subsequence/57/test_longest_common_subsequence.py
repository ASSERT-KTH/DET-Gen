# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


def test_case_0():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(dict_0, none_type_0)
    assert var_0 == ""


def test_case_1():
    bool_0 = False
    bytes_0 = b"^:\xde\xe8\xca\x15\xfb\xb9\x9a"
    var_0 = module_0.longest_common_subsequence(bool_0, bytes_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 444
    module_0.longest_common_subsequence(int_0, int_0)


def test_case_3():
    str_0 = "*HVX\x0c"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "*HVX\x0c"
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == "*HVX\x0c"
    none_type_0 = None
    var_2 = module_0.longest_common_subsequence(var_1, var_1)
    assert var_2 == "*HVX\x0c"
    var_3 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_3 == ""


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "M]/0Z"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "M]/0Z"
    str_1 = "GTaA^N\nR<D}keI"
    var_1 = module_0.longest_common_subsequence(var_0, str_1)
    assert var_1 == ""
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0, str_1: str_1}
    module_0.longest_common_subsequence(str_1, dict_0)
