# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


def test_case_0():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_0 == ""
    bool_1 = True
    var_1 = module_0.longest_common_subsequence(var_0, bool_1)
    assert var_1 == ""


def test_case_1():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.longest_common_subsequence(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xf5\xd6\xc1=\x98\xf2\x96\xce\xb40\xb6l<"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bytes_0, none_type_0)
    assert var_0 == ""
    int_0 = -1930
    tuple_0 = (int_0, int_0, var_0, bytes_0)
    var_1 = module_0.longest_common_subsequence(none_type_0, tuple_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(var_0, none_type_0)
    assert var_3 == ""
    module_0.longest_common_subsequence(bytes_0, bytes_0)


def test_case_4():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""
    none_type_0 = None
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(var_0, bool_0)
    assert var_3 == ""
    int_0 = -88
    var_4 = module_0.longest_common_subsequence(var_2, int_0)
    assert var_4 == ""
    none_type_1 = None
    var_5 = module_0.longest_common_subsequence(var_0, var_2)
    var_6 = module_0.longest_common_subsequence(none_type_0, var_2)
    var_7 = module_0.longest_common_subsequence(bool_0, none_type_1)
    var_8 = module_0.longest_common_subsequence(bool_0, bool_0)
    none_type_2 = None
    dict_0 = {}
    var_9 = module_0.longest_common_subsequence(dict_0, none_type_0)
    tuple_0 = ()
    bytes_0 = b'd\xffOT\xa2t"\x92{\xaf\xd0\x94\xa9\x17\xe674\xd9c\x86'
    var_10 = module_0.longest_common_subsequence(var_7, var_7)
    tuple_1 = (tuple_0, bytes_0)
    var_11 = module_0.longest_common_subsequence(tuple_1, none_type_2)
    assert var_11 == ""
    var_12 = module_0.longest_common_subsequence(none_type_2, none_type_2)
    var_13 = module_0.longest_common_subsequence(none_type_2, none_type_2)
    var_14 = module_0.longest_common_subsequence(none_type_2, none_type_2)
    var_15 = module_0.longest_common_subsequence(var_11, var_0)
    var_16 = module_0.longest_common_subsequence(none_type_2, none_type_2)
    list_0 = [var_8, var_16]
    var_17 = module_0.longest_common_subsequence(list_0, var_14)
    var_18 = module_0.longest_common_subsequence(bytes_0, var_1)
    var_19 = module_0.longest_common_subsequence(tuple_1, bytes_0)
    assert var_19 == ""
    var_20 = module_0.longest_common_subsequence(none_type_2, var_14)
    bool_1 = True
    var_21 = module_0.longest_common_subsequence(var_14, bool_1)
    set_0 = set()
    var_22 = module_0.longest_common_subsequence(set_0, set_0)
    var_23 = module_0.longest_common_subsequence(var_22, var_22)
    var_24 = module_0.longest_common_subsequence(none_type_2, var_22)
    var_25 = module_0.longest_common_subsequence(var_19, var_8)
    var_26 = module_0.longest_common_subsequence(var_22, var_22)
