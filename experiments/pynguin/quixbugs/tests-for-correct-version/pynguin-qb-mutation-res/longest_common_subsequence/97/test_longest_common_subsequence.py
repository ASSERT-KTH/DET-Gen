# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.longest_common_subsequence(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""
    none_type_0 = None
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""


def test_case_2():
    set_0 = set()
    list_0 = [set_0, set_0]
    var_0 = module_0.longest_common_subsequence(list_0, set_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xa5\x12D\xa1\x92T\xf3T\x94lr^3g\x11/\x97"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


def test_case_4():
    str_0 = "\rD47W"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.longest_common_subsequence(list_0, str_0)
    assert var_0 == ""
    float_0 = -229.0
    tuple_0 = (list_0, float_0)
    var_1 = module_0.longest_common_subsequence(tuple_0, str_0)
    assert var_1 == ""
    bool_0 = False
    var_2 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_2 == ""
    str_1 = "\rJ,)6e8\x0c;g&ifM`"
    var_3 = module_0.longest_common_subsequence(str_1, str_1)
    assert var_3 == "\rJ,)6e8\x0c;g&ifM`"
    var_4 = module_0.longest_common_subsequence(var_3, var_3)
    assert var_4 == "\rJ,)6e8\x0c;g&ifM`"
    none_type_0 = None
    var_5 = module_0.longest_common_subsequence(str_1, none_type_0)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(var_5, str_1)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(none_type_0, var_6)
    assert var_7 == ""
    var_8 = module_0.longest_common_subsequence(var_7, str_1)
    assert var_8 == ""
    var_9 = module_0.longest_common_subsequence(var_3, none_type_0)
    assert var_9 == ""
