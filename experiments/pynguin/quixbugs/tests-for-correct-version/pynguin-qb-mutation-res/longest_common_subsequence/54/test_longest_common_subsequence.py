# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.longest_common_subsequence(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_1 == ""
    module_0.longest_common_subsequence(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xa4\xf9\xd7\xe0U\xbd6\xeb\x08\xa2\xff"
    set_0 = set()
    var_0 = module_0.longest_common_subsequence(set_0, bytes_0)
    assert var_0 == ""
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "Rr3M rU!"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, str_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_1 == ""
    bool_0 = True
    var_2 = module_0.longest_common_subsequence(none_type_0, var_1)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(str_0, var_0)
    assert var_3 == ""
    tuple_0 = (str_0, var_1, var_1, bool_0)
    var_4 = module_0.longest_common_subsequence(tuple_0, str_0)
    assert var_4 == ""
    int_0 = -3367
    var_5 = module_0.longest_common_subsequence(var_1, int_0)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(var_4, var_4)
    none_type_1 = None
    var_7 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    set_0 = set()
    list_0 = [set_0]
    var_8 = module_0.longest_common_subsequence(var_2, none_type_0)
    module_0.longest_common_subsequence(list_0, list_0)
