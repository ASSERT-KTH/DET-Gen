# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -1639
    module_0.longest_common_subsequence(int_0, int_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""
    int_0 = 497
    var_1 = module_0.longest_common_subsequence(bool_0, int_0)
    assert var_1 == ""


def test_case_2():
    str_0 = "k\r]471^"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "k\r]471^"
    var_1 = module_0.longest_common_subsequence(str_0, var_0)
    assert var_1 == "k\r]471^"
    var_2 = module_0.longest_common_subsequence(str_0, var_0)
    assert var_2 == "k\r]471^"
    none_type_0 = None
    var_3 = module_0.longest_common_subsequence(var_2, none_type_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(str_0, var_0)
    assert var_4 == "k\r]471^"


def test_case_3():
    str_0 = '"j;8\tnl"pbC/8'
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == '"j;8\tnl"pbC/8'
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == '"j;8\tnl"pbC/8'
    var_2 = module_0.longest_common_subsequence(str_0, var_1)
    assert var_2 == '"j;8\tnl"pbC/8'


def test_case_4():
    bool_0 = True
    bool_1 = True
    int_0 = 807
    dict_0 = {int_0: bool_1, bool_1: bool_0}
    bytes_0 = b"\xf1\x05\x84\x92\xc6\xdc\xd6\x16\xa0\x7f\x11N"
    tuple_0 = (dict_0, bytes_0)
    list_0 = [int_0, bool_1, bool_1, bytes_0]
    tuple_1 = (bool_1, bool_0, tuple_0, list_0)
    list_1 = [bool_0, bool_0, tuple_1]
    var_0 = module_0.longest_common_subsequence(list_1, tuple_0)
    assert var_0 == ""
    none_type_0 = None
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
