# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    set_0 = {var_1, var_1}
    module_0.longest_common_subsequence(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 1290
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(int_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(int_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_2 == ""
    list_0 = [int_0, var_0, var_0]
    module_0.longest_common_subsequence(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    list_0 = []
    var_1 = module_0.longest_common_subsequence(list_0, list_0)
    assert var_1 == ""
    none_type_1 = None
    var_2 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_2 == ""
    bytes_0 = b":\xb1\x1a\xad\x11l"
    var_3 = module_0.longest_common_subsequence(none_type_1, var_1)
    assert var_3 == ""
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    tuple_0 = (var_0,)
    set_0 = {var_0}
    list_0 = [tuple_0, set_0, none_type_0]
    var_1 = module_0.longest_common_subsequence(list_0, tuple_0)
    assert var_1 == ""
    int_0 = 816
    none_type_1 = None
    var_2 = module_0.longest_common_subsequence(none_type_1, int_0)
    assert var_2 == ""
    dict_0 = {int_0: int_0}
    list_1 = [int_0, dict_0, dict_0]
    var_3 = module_0.longest_common_subsequence(int_0, var_2)
    assert var_3 == ""
    module_0.longest_common_subsequence(list_1, dict_0)
