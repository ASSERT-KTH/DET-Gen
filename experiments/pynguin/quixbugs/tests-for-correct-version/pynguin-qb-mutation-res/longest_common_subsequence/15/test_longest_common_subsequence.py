# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


def test_case_0():
    int_0 = 2361
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(int_0, none_type_0)
    assert var_0 == ""


def test_case_1():
    set_0 = set()
    var_0 = module_0.longest_common_subsequence(set_0, set_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    object_0 = module_1.object()
    set_0 = {object_0}
    list_0 = [set_0, object_0, set_0]
    module_0.longest_common_subsequence(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"X\xd0)\tU\x1e\xec.f\xf7\xb6+O\xd3\xfcW\x04\x88"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    module_0.longest_common_subsequence(bytes_0, bytes_0)


def test_case_4():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""
    bytes_0 = b"G&ED\x16m\xfb\x0f\xb04\x93M\x15\xdcW\xee`#\x9b"
    set_0 = {bytes_0}
    var_1 = module_0.longest_common_subsequence(bytes_0, var_0)
    assert var_1 == ""
    none_type_0 = None
    object_0 = module_1.object()
    var_2 = module_0.longest_common_subsequence(none_type_0, object_0)
    assert var_2 == ""
    str_0 = "P\x0ck*g'\rB@c.E"
    tuple_0 = (bytes_0, str_0, set_0, bytes_0)
    var_3 = module_0.longest_common_subsequence(bytes_0, tuple_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(bytes_0, none_type_0)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_6 == ""
