# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -1411
    module_0.longest_common_subsequence(int_0, int_0)


def test_case_1():
    str_0 = " i$E^fCS\\ F] g"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == " i$E^fCS\\ F] g"
    var_1 = module_0.longest_common_subsequence(var_0, str_0)
    assert var_1 == " i$E^fCS\\ F] g"
    var_2 = module_0.longest_common_subsequence(var_0, var_1)
    assert var_2 == " i$E^fCS\\ F] g"


def test_case_2():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    bool_0 = False
    bool_1 = True
    var_1 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(bool_0, bool_1)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(bool_1, var_0)
    assert var_3 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xe8\xbe\xeb\x84\x9c\xd8\xe6"
    list_0 = [bytes_0]
    var_0 = module_0.longest_common_subsequence(list_0, bytes_0)
    assert var_0 == ""
    bytes_1 = b"\x1f\xb8\xfe"
    module_0.longest_common_subsequence(bytes_1, bytes_1)
