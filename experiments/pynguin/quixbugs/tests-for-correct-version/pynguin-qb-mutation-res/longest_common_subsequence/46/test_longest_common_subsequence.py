# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -2623
    module_0.longest_common_subsequence(int_0, int_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""


def test_case_2():
    none_type_0 = None
    bytes_0 = b"G\xcd"
    var_0 = module_0.longest_common_subsequence(bytes_0, none_type_0)
    assert var_0 == ""
    object_0 = module_1.object()
    var_1 = module_0.longest_common_subsequence(none_type_0, object_0)
    assert var_1 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"y\xff\xb9 sG\xf3,U\xab\xc4\xdc\xd0\x87\xb6\xad&(J\xfc"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    var_0 = module_0.longest_common_subsequence(dict_0, dict_0)
    assert var_0 == ""
    dict_1 = {}
    var_1 = module_0.longest_common_subsequence(dict_1, dict_1)
    assert var_1 == ""
    bytes_0 = b"\xa3m \xf6&\n+"
    none_type_0 = None
    var_2 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_2 == ""
    bool_0 = False
    var_3 = module_0.longest_common_subsequence(bytes_0, bool_0)
    assert var_3 == ""
    bytes_1 = b'|\xacjwEH"\x87'
    set_0 = {bytes_1, bytes_1}
    tuple_0 = (bytes_1, set_0)
    var_4 = module_0.longest_common_subsequence(tuple_0, bytes_1)
    assert var_4 == ""
    object_0 = module_1.object()
    module_0.longest_common_subsequence(object_0, object_0)
