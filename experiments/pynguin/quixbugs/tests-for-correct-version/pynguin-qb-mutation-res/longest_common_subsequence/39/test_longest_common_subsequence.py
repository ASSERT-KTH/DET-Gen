# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -2870
    module_0.longest_common_subsequence(int_0, int_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_1 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -5703
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(int_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, var_0)
    assert var_1 == ""
    module_0.longest_common_subsequence(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""
    bytes_0 = b"q\xbb\x97\xf9\x02\x809\xda"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "/\x0bn0C)|n\nU\\\x0bB@r"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_0 == ""
    none_type_1 = None
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == "/\x0bn0C)|n\nU\\\x0bB@r"
    var_2 = module_0.longest_common_subsequence(none_type_1, str_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(str_0, none_type_1)
    assert var_3 == ""
    bytes_0 = b"\xe8\x06q\xa9"
    var_4 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_4 == "/\x0bn0C)|n\nU\\\x0bB@r"
    int_0 = 2278
    var_5 = module_0.longest_common_subsequence(var_3, int_0)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(var_5, none_type_0)
    var_7 = module_0.longest_common_subsequence(var_2, none_type_1)
    var_8 = module_0.longest_common_subsequence(str_0, bytes_0)
    assert var_8 == ""
    module_0.longest_common_subsequence(int_0, int_0)
