# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -1129.6
    list_0 = [float_0, float_0]
    module_0.longest_common_subsequence(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xa8"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_0 == ""
    module_0.longest_common_subsequence(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xec\xf9"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.longest_common_subsequence(list_0, bytes_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_1 == ""
    none_type_0 = None
    var_2 = module_0.longest_common_subsequence(list_0, var_1)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(var_1, var_1)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(list_0, none_type_0)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(var_4, list_0)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(bytes_0, var_0)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(var_4, none_type_0)
    assert var_7 == ""
    bool_0 = False
    set_0 = set()
    str_0 = 't-\\}"V~*afY'
    var_8 = module_0.longest_common_subsequence(bool_0, str_0)
    assert var_8 == ""
    var_9 = module_0.longest_common_subsequence(set_0, str_0)
    assert var_9 == ""
    var_10 = module_0.longest_common_subsequence(var_3, var_8)
    assert var_10 == ""
    var_11 = module_0.longest_common_subsequence(list_0, var_4)
    assert var_11 == ""
    int_0 = -1943
    module_0.longest_common_subsequence(bytes_0, int_0)
