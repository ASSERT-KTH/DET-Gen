# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.longest_common_subsequence(bool_0, bool_0)


def test_case_1():
    bytes_0 = b""
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bytes_0, none_type_0)
    assert var_0 == ""
    str_0 = "}aX\t\x0b0"
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == "}aX\t\x0b0"
    var_2 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_2 == "}aX\t\x0b0"


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(var_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_0, none_type_0)
    assert var_2 == ""
    int_0 = -1935
    module_0.longest_common_subsequence(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    var_0 = module_0.longest_common_subsequence(set_0, set_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(set_0, set_0)
    assert var_1 == ""
    str_0 = "H[\\off8_"
    tuple_0 = (str_0,)
    var_2 = module_0.longest_common_subsequence(var_1, var_1)
    assert var_2 == ""
    none_type_0 = None
    var_3 = module_0.longest_common_subsequence(tuple_0, none_type_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(var_1, tuple_0)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(var_1, none_type_0)
    assert var_5 == ""
    none_type_1 = None
    var_6 = module_0.longest_common_subsequence(var_1, none_type_0)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_7 == "H[\\off8_"
    var_8 = module_0.longest_common_subsequence(var_1, var_2)
    assert var_8 == ""
    var_9 = module_0.longest_common_subsequence(none_type_1, tuple_0)
    assert var_9 == ""
    var_10 = module_0.longest_common_subsequence(tuple_0, str_0)
    assert var_10 == ""
    var_11 = module_0.longest_common_subsequence(set_0, var_7)
    assert var_11 == ""
    var_12 = module_0.longest_common_subsequence(var_1, none_type_1)
    assert var_12 == ""
    var_13 = module_0.longest_common_subsequence(tuple_0, var_10)
    assert var_13 == ""
    var_14 = module_0.longest_common_subsequence(none_type_1, var_12)
    assert var_14 == ""
    dict_0 = {tuple_0: str_0, tuple_0: var_10, str_0: var_10}
    var_15 = module_0.longest_common_subsequence(var_8, var_10)
    assert var_15 == ""
    var_16 = module_0.longest_common_subsequence(var_11, var_12)
    assert var_16 == ""
    list_0 = [dict_0, str_0, dict_0]
    var_17 = module_0.longest_common_subsequence(var_1, none_type_0)
    assert var_17 == ""
    var_18 = module_0.longest_common_subsequence(var_4, list_0)
    assert var_18 == ""
    var_19 = module_0.longest_common_subsequence(none_type_0, list_0)
    assert var_19 == ""
    module_0.longest_common_subsequence(list_0, dict_0)
