# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import longest_common_subsequence as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    object_0 = module_0.object()
    module_1.longest_common_subsequence(object_0, object_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""


def test_case_2():
    bytes_0 = b"\x87\x00e\x08\x89\xe5"
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(bytes_0, none_type_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xf8|\t\xa3\xa6k\xfe_To\xd2\x90f\r\x1a"
    int_0 = 107
    dict_0 = {}
    list_0 = [bytes_0, bytes_0, int_0, dict_0]
    module_1.longest_common_subsequence(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xa0a\xb9\xb6\xb8Y\xd0\x83~\xd4\xdc\xed\xecQ|\xf5P\x8ai"
    set_0 = set()
    list_0 = [set_0, bytes_0, bytes_0, set_0]
    list_1 = [bytes_0, bytes_0, bytes_0, list_0]
    int_0 = -917
    tuple_0 = (bytes_0, list_1, int_0, int_0)
    module_1.longest_common_subsequence(tuple_0, list_1)
