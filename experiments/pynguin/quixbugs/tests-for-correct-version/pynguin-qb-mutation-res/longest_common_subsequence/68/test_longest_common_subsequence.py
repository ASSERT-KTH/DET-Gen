# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -1915.096
    module_0.longest_common_subsequence(float_0, float_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""


def test_case_2():
    set_0 = set()
    var_0 = module_0.longest_common_subsequence(set_0, set_0)
    assert var_0 == ""
    str_0 = "qc["
    none_type_0 = None
    var_1 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_1, var_1)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(var_2, set_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(var_2, var_2)
    assert var_4 == ""
    none_type_1 = None
    var_5 = module_0.longest_common_subsequence(str_0, var_2)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(var_1, none_type_0)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(var_1, var_1)
    assert var_7 == ""
    var_8 = module_0.longest_common_subsequence(none_type_0, var_1)
    assert var_8 == ""
    var_9 = module_0.longest_common_subsequence(var_1, none_type_1)
    assert var_9 == ""
    var_10 = module_0.longest_common_subsequence(var_6, var_1)
    assert var_10 == ""
    var_11 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_11 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x1f^\xe6\xea[\x1f2\x92\x80+\x10\xf1F\xeb\x17A^\xd4"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    str_0 = "voHWWm \n"
    var_2 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_2 == "voHWWm \n"
    var_3 = module_0.longest_common_subsequence(var_1, str_0)
    assert var_3 == ""
    str_1 = "LB{z"
    var_4 = module_0.longest_common_subsequence(var_2, str_1)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(var_2, var_2)
    assert var_5 == "voHWWm \n"
    var_6 = module_0.longest_common_subsequence(var_1, none_type_0)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(var_2, var_2)
    assert var_7 == "voHWWm \n"
    object_0 = module_1.object()
    var_8 = module_0.longest_common_subsequence(var_5, var_4)
    assert var_8 == ""
    module_0.longest_common_subsequence(object_0, object_0)
