# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_0 == ""


def test_case_1():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""
    bool_1 = False
    var_1 = module_0.longest_common_subsequence(bool_1, bool_1)
    assert var_1 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    dict_0 = {bool_1: bool_0, bool_0: bool_0, bool_0: bool_1, bool_2: bool_2}
    tuple_0 = (bool_0, dict_0)
    module_0.longest_common_subsequence(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xf6~\x8b"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bytes_0, none_type_0)
    assert var_0 == ""
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""
    str_0 = "p4^54_"
    bool_1 = True
    bool_2 = True
    bytes_0 = b"[w\x92\x8c\xc2\x18<\xec\x03"
    var_1 = module_0.longest_common_subsequence(bytes_0, str_0)
    assert var_1 == ""
    object_0 = module_1.object()
    dict_0 = {object_0: bool_0, bool_1: bool_1}
    module_0.longest_common_subsequence(dict_0, bool_2)
