# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xda\xae\x97\x12\xc0\x8c\xe9\x07\xd7\x0b`\x997_"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bytes_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(bytes_0, var_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_2 == ""


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, var_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_2 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    var_0 = module_0.longest_common_subsequence(set_0, set_0)
    assert var_0 == ""
    object_0 = module_1.object()
    bool_0 = True
    dict_0 = {object_0: bool_0, bool_0: bool_0, bool_0: object_0}
    module_0.longest_common_subsequence(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "h5P^~65Xx*w,4ssr+"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == "h5P^~65Xx*w,4ssr+"
    str_1 = "'.}?Gq"
    bytes_0 = b"&\xab!"
    list_0 = [bytes_0]
    var_2 = module_0.longest_common_subsequence(str_0, list_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(str_1, str_1)
    assert var_3 == "'.}?Gq"
    var_4 = module_0.longest_common_subsequence(str_1, str_1)
    assert var_4 == "'.}?Gq"
    var_5 = module_0.longest_common_subsequence(var_4, var_4)
    assert var_5 == "'.}?Gq"
    set_0 = {str_1, var_4, str_1}
    float_0 = 1623.12
    module_0.longest_common_subsequence(float_0, set_0)
