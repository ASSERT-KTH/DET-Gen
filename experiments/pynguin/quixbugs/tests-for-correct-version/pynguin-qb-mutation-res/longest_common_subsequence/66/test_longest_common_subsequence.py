# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


def test_case_0():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_0 == ""


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    float_0 = 1809.680483
    var_1 = module_0.longest_common_subsequence(var_0, float_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_1, var_0)
    dict_0 = {}
    var_3 = module_0.longest_common_subsequence(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.longest_common_subsequence(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"$\x15\xb3"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    int_0 = -1636
    tuple_0 = ()
    bool_0 = True
    bool_1 = True
    tuple_1 = (tuple_0, int_0, bool_0, bool_1)
    tuple_2 = (int_0, tuple_1, bool_1)
    module_0.longest_common_subsequence(tuple_2, tuple_1)
