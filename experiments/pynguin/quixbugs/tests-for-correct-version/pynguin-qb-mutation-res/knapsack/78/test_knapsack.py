# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import knapsack as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "Dp_W}3|Cb+Q-z\x0c+va(m\\"
    module_0.knapsack(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    bytes_0 = b"\xb2\x9a1M\x16\x0f\xf3MD\x8b\x12!\x0fp\xe9<#F\x00"
    module_0.knapsack(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    int_0 = 1992
    list_0 = [int_0, tuple_0]
    tuple_1 = (list_0,)
    var_0 = module_0.knapsack(bool_0, tuple_1)
    assert var_0 == 0
    none_type_0 = None
    module_0.knapsack(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    list_0 = [bool_0, tuple_0]
    tuple_1 = (list_0,)
    module_0.knapsack(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    int_0 = 1992
    list_0 = [int_0, tuple_0]
    tuple_1 = (list_0,)
    var_0 = module_0.knapsack(bool_0, tuple_1)
    assert var_0 == 0
    none_type_0 = None
    module_0.knapsack(bool_0, none_type_0)
