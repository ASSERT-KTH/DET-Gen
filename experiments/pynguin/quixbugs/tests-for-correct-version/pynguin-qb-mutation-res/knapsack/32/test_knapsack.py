# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import knapsack as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    module_0.knapsack(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    module_0.knapsack(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_0 = -1238.9 + 1090.1j
    module_0.knapsack(complex_0, complex_0)


def test_case_3():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    list_0 = [var_0, tuple_0]
    list_1 = [list_0]
    var_1 = module_0.knapsack(var_0, list_1)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    list_1 = [list_0, list_0]
    bool_0 = True
    module_0.knapsack(bool_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    list_0 = [var_0, tuple_0]
    list_1 = [list_0]
    bool_0 = True
    module_0.knapsack(bool_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 525
    list_0 = [int_0, int_0]
    str_0 = ",nr\x0bDHB><\rV\\X[Z-"
    tuple_0 = (list_0, str_0, int_0, list_0)
    module_0.knapsack(int_0, tuple_0)
