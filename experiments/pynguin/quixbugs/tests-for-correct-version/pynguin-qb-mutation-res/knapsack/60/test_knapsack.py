# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import knapsack as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xbb\xc8\x883\xb9\n\x1b\x1d\xea\x93\xb8"
    module_0.knapsack(bytes_0, bytes_0)


def test_case_1():
    str_0 = ""
    var_0 = module_0.knapsack(str_0, str_0)
    assert var_0 == 0
    var_1 = module_0.knapsack(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.knapsack(bool_0, bool_0)


def test_case_3():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    dict_0 = {var_0: var_0, var_0: var_0, tuple_0: var_0}
    tuple_1 = (dict_0,)
    var_1 = module_0.knapsack(var_0, tuple_1)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    dict_0 = {var_0: var_0, var_0: var_0, tuple_0: var_0}
    tuple_1 = (dict_0,)
    int_0 = 1467
    module_0.knapsack(int_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    object_0 = module_1.object()
    bool_0 = True
    int_0 = 560
    list_0 = []
    str_0 = "'Qz#uTo^==<i $?p\""
    dict_0 = {int_0: object_0, int_0: object_0, int_0: list_0, str_0: bool_0}
    tuple_0 = (dict_0,)
    var_0 = module_0.knapsack(bool_0, tuple_0)
    assert var_0 == 0
    module_0.knapsack(object_0, object_0)
