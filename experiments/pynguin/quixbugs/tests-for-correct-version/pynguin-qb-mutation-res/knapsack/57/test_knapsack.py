# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import knapsack as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "5X~X5(-(r&-D6,;1fgV"
    module_0.knapsack(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ""
    var_0 = module_0.knapsack(str_0, str_0)
    assert var_0 == 0
    str_1 = "5X~X5(-(r&-#D6,;1fgV"
    module_0.knapsack(var_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.knapsack(bool_0, bool_0)


def test_case_3():
    str_0 = ""
    var_0 = module_0.knapsack(str_0, str_0)
    assert var_0 == 0
    str_1 = "]/"
    list_0 = [str_1]
    var_1 = module_0.knapsack(var_0, list_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "]/"
    list_0 = [str_0]
    bool_0 = True
    module_0.knapsack(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0]
    module_0.knapsack(bool_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 784
    list_0 = [int_0, int_0]
    tuple_0 = (list_0,)
    var_0 = module_0.knapsack(int_0, tuple_0)
    assert var_0 == 784
    module_0.knapsack(int_0, int_0)
