# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import knapsack as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "+M(m?=_+A"
    module_0.knapsack(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    str_0 = "(| X]=dB\t<S"
    module_0.knapsack(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.knapsack(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    tuple_1 = (var_0, tuple_0)
    list_0 = [tuple_1, var_0, var_0, tuple_1]
    module_0.knapsack(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    tuple_1 = (var_0, tuple_0)
    list_0 = [tuple_1, var_0, var_0, tuple_1]
    int_0 = 1344
    module_0.knapsack(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    tuple_1 = (var_0, var_0)
    int_0 = 822
    set_0 = {int_0, tuple_1}
    tuple_2 = (set_0, var_0)
    module_0.knapsack(int_0, tuple_2)
