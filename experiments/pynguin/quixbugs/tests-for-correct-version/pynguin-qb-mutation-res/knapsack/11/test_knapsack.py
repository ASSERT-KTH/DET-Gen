# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import knapsack as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xf5\x84s\xcbm^-"
    list_0 = [bytes_0, bytes_0]
    module_0.knapsack(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    module_0.knapsack(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.knapsack(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    object_0 = module_1.object()
    dict_0 = {}
    var_0 = module_0.knapsack(object_0, dict_0)
    assert var_0 == 0
    tuple_0 = (var_0, var_0)
    bool_0 = True
    tuple_1 = (tuple_0, tuple_0, object_0, var_0)
    module_0.knapsack(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    object_0 = module_1.object()
    dict_0 = {}
    var_0 = module_0.knapsack(object_0, dict_0)
    assert var_0 == 0
    tuple_0 = (object_0, dict_0)
    tuple_1 = (tuple_0, var_0, var_0, var_0)
    module_0.knapsack(var_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    none_type_0 = None
    bytes_0 = b"\xd6\xc4"
    bool_1 = True
    tuple_0 = (bool_1, bool_0)
    tuple_1 = (bytes_0, tuple_0)
    var_0 = module_0.knapsack(bool_0, tuple_1)
    assert var_0 == 1
    module_0.knapsack(none_type_0, bool_0)
