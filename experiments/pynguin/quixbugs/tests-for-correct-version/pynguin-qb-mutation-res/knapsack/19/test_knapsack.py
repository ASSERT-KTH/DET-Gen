# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import knapsack as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "\n$"
    module_0.knapsack(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    module_0.knapsack(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -2357
    module_0.knapsack(int_0, int_0)


def test_case_3():
    int_0 = -2519
    tuple_0 = (int_0, int_0)
    tuple_1 = (tuple_0,)
    var_0 = module_0.knapsack(int_0, tuple_1)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 1677
    set_0 = {int_0, int_0, int_0, int_0, int_0, int_0}
    tuple_0 = (set_0, int_0)
    tuple_1 = (tuple_0,)
    module_0.knapsack(int_0, tuple_1)


def test_case_5():
    int_0 = -2590
    tuple_0 = (int_0, int_0)
    tuple_1 = (tuple_0,)
    var_0 = module_0.knapsack(int_0, tuple_1)
    assert var_0 == 0
    bool_0 = True
    var_1 = module_0.knapsack(bool_0, tuple_1)
    var_2 = module_0.knapsack(var_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 662
    tuple_0 = (int_0, int_0)
    tuple_1 = (tuple_0,)
    var_0 = module_0.knapsack(int_0, tuple_1)
    assert var_0 == 662
    object_0 = module_1.object()
    module_1.object(*var_0)
