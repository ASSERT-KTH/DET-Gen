# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import knapsack as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xf3\xad\xc4\xcdm"
    module_0.knapsack(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    object_0 = module_1.object(*list_0)
    var_0 = module_0.knapsack(object_0, list_0)
    assert var_0 == 0
    bytes_0 = b"\r\x89\x1d\xef\x82\x99\xc5\x1f\xdc\x9a\xba\xc1H\xa1\xc1\x19\xab"
    module_0.knapsack(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.knapsack(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 1388
    bytes_0 = b"\r\x89\x1d\xef\x82\x99\xc5\x1f\xdc\x9a\xba\xc1H\xa1\xc1\x19\xab"
    str_0 = "Z\"@'}("
    dict_0 = {bytes_0: bytes_0, str_0: bytes_0, str_0: str_0}
    tuple_0 = (dict_0, str_0)
    module_0.knapsack(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 1388
    str_0 = "Z\"@'}("
    dict_0 = {int_0: int_0, str_0: int_0, str_0: str_0}
    tuple_0 = (dict_0, str_0)
    module_0.knapsack(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -1550
    bytes_0 = b"\r\x89\x1d\xef\x82\x99\xc5E\x1f\xdc\x9a\xba\xc1H\xa1\xc1\x19\xab"
    str_0 = ",\t#(:* .P|@}v]aze"
    dict_0 = {bytes_0: bytes_0, str_0: bytes_0, str_0: str_0}
    tuple_0 = (dict_0, str_0)
    module_0.knapsack(int_0, tuple_0)
