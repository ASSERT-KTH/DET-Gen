# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import knapsack as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"y'\x9cD\xd2?\x83v\xe4C,J?\x0c\xd7H\x8a\x1d"
    module_0.knapsack(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "BM"
    list_0 = [str_0, str_0]
    int_0 = 2963
    bool_0 = False
    var_0 = module_0.knapsack(bool_0, list_0)
    assert var_0 == 0
    module_0.knapsack(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.knapsack(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "BM"
    list_0 = [str_0, str_0]
    int_0 = 2963
    module_0.knapsack(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 2931
    bool_0 = False
    set_0 = {int_0, bool_0, int_0}
    tuple_0 = (set_0,)
    var_0 = module_0.knapsack(int_0, tuple_0)
    assert var_0 == 2931
    module_0.knapsack(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 2928
    bool_0 = False
    set_0 = {int_0, bool_0, int_0}
    tuple_0 = (set_0,)
    var_0 = module_0.knapsack(int_0, tuple_0)
    assert var_0 == 0
    module_0.knapsack(var_0, bool_0)
