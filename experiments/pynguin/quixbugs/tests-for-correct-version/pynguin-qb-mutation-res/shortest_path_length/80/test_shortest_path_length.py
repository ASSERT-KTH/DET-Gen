# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


def test_case_1():
    bytes_0 = b",\x13"
    tuple_0 = (bytes_0,)
    var_0 = module_0.get(tuple_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xa5\x84\x0f\xc8\x8b; \x1di\xb8&\xca\xac\xa0\x0e"
    node_0 = module_1.Node(successors=bytes_0, incoming_nodes=bytes_0)
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


def test_case_3():
    var_0 = module_2.merge()
    node_0 = module_1.Node(successor=var_0, successors=var_0, incoming_nodes=var_0)
    var_1 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "W"
    tuple_0 = (str_0, str_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "W"
    set_0 = {str_0, str_0, str_0, str_0}
    tuple_0 = (set_0, str_0)
    bytes_0 = b"xbd\xc4\xd0\xbe\xb1myD\xf9\r\xe5\xcd\xf1\x82 5"
    tuple_1 = (tuple_0, str_0, set_0, bytes_0)
    module_0.insert_or_update(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b",p"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    tuple_0 = (bool_0,)
    bool_1 = False
    set_0 = {tuple_0, bool_1, bool_1}
    bool_2 = False
    list_0 = [set_0, bool_1, bool_2, set_0]
    var_0 = module_2.merge(*list_0, key=list_0)
    list_1 = [set_0, bool_2, set_0, var_0]
    var_1 = module_0.get(list_1, tuple_0)
    assert var_1 is False
    tuple_1 = ()
    module_0.insert_or_update(tuple_1, tuple_1)
