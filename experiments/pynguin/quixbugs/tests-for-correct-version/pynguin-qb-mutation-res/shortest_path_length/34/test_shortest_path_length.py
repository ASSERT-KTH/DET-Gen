# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x0e"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'"\xf2\x8d\xf6Q;\x7f\x80\x19'
    node_0 = module_1.Node(successors=bytes_0, incoming_nodes=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -667
    module_0.insert_or_update(int_0, int_0)


def test_case_4():
    list_0 = []
    node_0 = module_1.Node()
    var_0 = module_0.shortest_path_length(list_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    list_0 = []
    tuple_0 = (list_0, list_0)
    var_0 = module_0.insert_or_update(list_0, tuple_0)
    var_1 = module_0.insert_or_update(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = 1218.5
    tuple_0 = (float_0, float_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "7Tb}~N?y5fHh-~y #>"
    str_1 = "K7>f#@!)>cx-0a:\ti,"
    set_0 = {str_0, str_0, str_1}
    tuple_0 = (set_0, str_1)
    var_0 = module_0.get(tuple_0, str_0)
    assert var_0 == "K7>f#@!)>cx-0a:\ti,"
    bool_0 = False
    var_1 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_1 == 0
    module_0.insert_or_update(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    bytes_0 = b"G\xdf\xc7\xa8\xcax0\x8d\xb3\xe7"
    var_0 = module_0.get(list_0, bytes_0)
    assert var_0 == 0
    tuple_0 = (list_0, bytes_0)
    var_1 = module_0.insert_or_update(list_0, tuple_0)
    list_1 = [tuple_0, list_0, list_0, bytes_0, var_1]
    var_2 = module_0.get(list_0, var_1)
    assert var_2 == 0
    var_3 = module_0.insert_or_update(list_1, tuple_0)
    bytes_1 = b"\xd5\xf3"
    module_0.shortest_path_length(bytes_1, bytes_1, var_3)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    node_0 = module_1.Node(
        predecessors=var_0, incoming_nodes=none_type_0, outgoing_nodes=var_0
    )
    assert node_0.predecessors == 0
    assert node_0.outgoing_nodes == 0
    list_0 = [node_0, var_0, var_0, var_0]
    var_1 = module_0.shortest_path_length(list_0, node_0, none_type_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    tuple_0 = (var_0, none_type_0)
    list_1 = [tuple_0, var_0, var_0, var_0, node_0]
    var_2 = module_0.insert_or_update(list_1, tuple_0)
    bytes_0 = b"\xd5\xf3"
    node_1 = module_1.Node()
    bool_0 = False
    list_2 = [bool_0]
    tuple_1 = (var_2, var_1)
    node_2 = module_1.Node(successor=list_2, successors=tuple_1)
    module_0.insert_or_update(list_1, bytes_0)
