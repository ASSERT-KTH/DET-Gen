# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x7fT"
    none_type_0 = None
    module_0.get(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    bytes_0 = b"\xc8\xe8\x98\xb3\xf0by\xc4"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 2216.99
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    tuple_0 = (float_0, dict_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"P\x94\x98\xb3\xf0by\xc4"
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_5():
    none_type_0 = None
    node_0 = module_1.Node(outgoing_nodes=none_type_0)
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = 2216.99
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    node_0 = module_1.Node(dict_0, successors=dict_0)
    module_0.shortest_path_length(float_0, node_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "<)'eyl"
    list_0 = [str_0, str_0]
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    var_0 = module_0.get(list_1, none_type_0)
    assert var_0 == 0
    none_type_1 = None
    node_0 = module_1.Node(successor=none_type_1)
    node_1 = module_1.Node(outgoing_nodes=none_type_0)
    module_0.get(node_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "<)'eyl"
    list_0 = [str_0, str_0]
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    var_0 = module_0.get(list_1, str_0)
    assert var_0 == "<)'eyl"
    bool_0 = False
    node_0 = module_1.Node(predecessors=bool_0)
    module_0.shortest_path_length(none_type_0, list_1, list_0)


def test_case_9():
    str_0 = "<)'eyl"
    list_0 = [str_0, str_0]
    list_1 = [list_0, list_0, list_0]
    var_0 = module_0.insert_or_update(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "<)'eyl"
    list_0 = [str_0, str_0]
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0)
    bool_0 = True
    tuple_0 = (node_0, bool_0)
    module_0.insert_or_update(list_1, tuple_0)
