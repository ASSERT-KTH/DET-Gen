# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"\xc8\xf4f"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "On%'Q\x0cgNI>RLVa"
    module_0.get(str_0, str_0)


def test_case_2():
    node_0 = module_1.Node()
    str_0 = ""
    var_0 = module_0.get(str_0, str_0)
    assert var_0 == 0


def test_case_3():
    node_0 = module_1.Node()
    none_type_0 = None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "@UHZpNI:`2f+<{"
    list_0 = [str_0, str_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ""
    float_0 = -1199.0
    tuple_0 = (str_0, float_0)
    list_0 = [float_0, str_0]
    bool_0 = False
    tuple_1 = (list_0, bool_0)
    bytes_0 = b":\x91\x8aE@\xe20\x9fL\xa3\x03\xa5e\x12\xd2\x1a"
    tuple_2 = (tuple_0, tuple_1, bytes_0, tuple_0)
    module_0.insert_or_update(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0]
    module_0.get(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    set_0 = set()
    module_0.insert_or_update(set_0, tuple_0)


def test_case_8():
    str_0 = "Z`"
    float_0 = -1198.6653
    tuple_0 = (str_0, float_0)
    list_0 = [float_0, str_0]
    bool_0 = False
    tuple_1 = (list_0, bool_0)
    bytes_0 = b":\x91\x8aE@\xe20\x9fL\xa3\x03\xa5e\x12\xd2\x1a"
    tuple_2 = (tuple_0, tuple_1, bytes_0, tuple_0)
    bool_1 = False
    var_0 = module_0.get(tuple_2, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "Z`"
    float_0 = -1198.6653
    tuple_0 = (str_0, float_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "]yo73q2Z|V4AN\r)n6uUo"
    node_0 = module_1.Node(
        str_0, successors=str_0, predecessors=str_0, outgoing_nodes=str_0
    )
    module_0.shortest_path_length(node_0, node_0, str_0)
