# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = 1414.8664 - 704.93j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x17\xa6A\xda\xec\xf9\xecJ,\xe2\x0c\x1f\xde\xca.\xb5\xaf\xf5"
    node_0 = module_1.Node(successors=bytes_0, incoming_nodes=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.get(bool_0, bool_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0, outgoing_nodes=none_type_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    int_0 = -398
    node_0 = module_1.Node(outgoing_nodes=int_0)
    none_type_0 = None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {node_0: node_0, var_0: int_0}
    list_0 = [dict_0, var_0, node_0, int_0]
    var_1 = module_0.insert_or_update(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -354
    node_0 = module_1.Node(outgoing_nodes=int_0)
    dict_0 = {int_0: int_0, node_0: node_0, int_0: int_0}
    list_0 = [dict_0, node_0, node_0, int_0]
    module_0.get(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"R:"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -3062
    node_0 = module_1.Node(successor=int_0, incoming_nodes=int_0)
    node_1 = module_1.Node(outgoing_nodes=int_0)
    dict_0 = {node_1: int_0, int_0: int_0, node_1: node_1}
    list_0 = [dict_0, node_1, node_1, int_0]
    var_0 = module_0.shortest_path_length(node_0, node_1, node_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_1 = module_0.get(list_0, int_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == -3062
    module_0.insert_or_update(node_1, int_0)
