# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    str_0 = "z,^4wz,"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "z,^4wz,"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    list_1 = [list_0, list_0, list_0]
    var_1 = module_1.merge(*list_1)
    module_0.insert_or_update(var_1, var_1)


def test_case_3():
    int_0 = -566
    node_0 = module_2.Node(outgoing_nodes=int_0)
    var_0 = module_0.shortest_path_length(int_0, node_0, int_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "^>"
    set_0 = {str_0}
    float_0 = -2282.844248
    tuple_0 = (str_0, set_0, float_0)
    module_0.get(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "^>"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.insert_or_update(dict_0, list_0)


def test_case_7():
    int_0 = -685
    set_0 = {int_0, int_0}
    tuple_0 = (int_0, set_0)
    bool_0 = True
    list_0 = [tuple_0, set_0, bool_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "*(V{U_Z:^xukm\x0cP#7ms"
    bool_0 = True
    dict_0 = {str_0: bool_0, bool_0: str_0, bool_0: bool_0}
    bytes_0 = b"\xd4\xa4\x89\xa6\xdfe\xc0\xa5b+\xe1H\xe3N\xd5\xec"
    tuple_0 = (dict_0, bytes_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    complex_0 = 2485.602997 - 960.743j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    node_0 = module_2.Node(
        dict_0,
        successors=dict_0,
        predecessors=complex_0,
        incoming_nodes=complex_0,
        outgoing_nodes=complex_0,
    )
    module_0.shortest_path_length(node_0, node_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_1, none_type_0)
    assert var_0 == 0
    list_0 = [none_type_0, none_type_0]
    tuple_0 = (list_0, var_0, var_0, list_0)
    var_1 = module_0.get(tuple_0, none_type_0)
    node_0 = module_2.Node(var_0, successors=list_0, outgoing_nodes=none_type_0)
    assert node_0.value == 0
    module_0.shortest_path_length(list_0, node_0, list_0)
