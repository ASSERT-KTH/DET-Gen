# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    int_0 = 2952
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x8e\x9b"
    set_0 = {bytes_0, bytes_0, bytes_0}
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    bytes_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    var_0 = module_0.shortest_path_length(tuple_0, tuple_0, tuple_0)
    assert var_0 == 0
    var_1 = module_0.get(tuple_0, var_0)
    assert var_1 == 0
    float_0 = 1545.717723
    module_0.shortest_path_length(var_1, float_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 2952
    module_0.insert_or_update(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    float_0 = 1545.717723
    module_0.shortest_path_length(none_type_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x8e\x9b"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 1778
    list_0 = [int_0, int_0]
    bytes_0 = b"\x1a\xdf\x06\xd5"
    tuple_0 = (list_0, bytes_0)
    module_0.insert_or_update(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0]
    module_0.insert_or_update(list_1, list_1)


def test_case_8():
    float_0 = 1546.0
    node_0 = module_1.Node(float_0)
    var_0 = module_0.shortest_path_length(float_0, node_0, float_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0]
    var_0 = module_0.get(list_1, bool_0)
    assert var_0 is False
    none_type_0 = None
    var_1 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_1 == 0
    module_0.insert_or_update(none_type_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x8e\t"
    node_0 = module_1.Node(bytes_0, successors=bytes_0)
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)
