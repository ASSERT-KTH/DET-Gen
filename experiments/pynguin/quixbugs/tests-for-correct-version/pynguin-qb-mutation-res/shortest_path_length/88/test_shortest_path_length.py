# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import shortest_path_length as module_1


def test_case_0():
    node_0 = module_0.Node()
    var_0 = module_1.shortest_path_length(node_0, node_0, node_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    int_0 = -202
    tuple_1 = (tuple_0, bool_0, int_0, tuple_0)
    module_1.get(tuple_1, int_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_1.get(dict_0, dict_0)
    assert var_0 == 0
    node_0 = module_0.Node(var_0, var_0)
    assert node_0.value == 0
    assert node_0.successor == 0
    var_1 = module_1.shortest_path_length(var_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x9a"
    list_0 = [bytes_0, bytes_0]
    module_1.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    node_0 = module_0.Node()
    module_1.get(node_0, node_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = -511.9017
    tuple_0 = (float_0,)
    module_1.shortest_path_length(tuple_0, tuple_0, float_0)


def test_case_6():
    node_0 = module_0.Node()
    none_type_0 = None
    var_0 = module_1.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    int_0 = -202
    tuple_1 = (tuple_0, bool_0, int_0, tuple_0)
    module_1.insert_or_update(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x9a\xda"
    list_0 = [bytes_0, bytes_0]
    module_1.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    int_0 = 1
    tuple_1 = (tuple_0, bool_0, int_0, tuple_0)
    var_0 = module_1.get(tuple_1, int_0)
    assert var_0 is True
    str_0 = "H\r4q"
    module_1.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x18\xae\xfc\x19\\+{"
    node_0 = module_0.Node(bytes_0, bytes_0, bytes_0, bytes_0)
    module_1.shortest_path_length(node_0, node_0, bytes_0)
