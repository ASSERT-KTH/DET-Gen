# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x8dS\x12e\xb7"
    node_0 = module_1.Node(
        successors=bytes_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0
    )
    none_type_0 = None
    module_0.shortest_path_length(bytes_0, node_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    list_1 = [list_0, list_0]
    var_0 = module_0.insert_or_update(list_0, list_1)
    module_0.insert_or_update(list_1, list_1)


def test_case_4():
    bool_0 = False
    node_0 = module_1.Node(bool_0, predecessors=bool_0, incoming_nodes=bool_0)
    var_0 = module_0.shortest_path_length(bool_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    list_0 = []
    list_1 = [list_0, list_0]
    var_0 = module_0.insert_or_update(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    node_0 = module_1.Node(bool_0, predecessors=bool_0, incoming_nodes=bool_0)
    none_type_0 = None
    var_0 = module_0.shortest_path_length(bool_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {bool_0: var_0, var_0: var_0}
    tuple_0 = (dict_0, bool_0, bool_0)
    module_0.get(tuple_0, none_type_0)


def test_case_7():
    bool_0 = True
    node_0 = module_1.Node(bool_0, predecessors=bool_0, incoming_nodes=bool_0)
    var_0 = module_0.shortest_path_length(bool_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {bool_0: var_0, var_0: var_0}
    tuple_0 = (dict_0, bool_0, bool_0)
    var_1 = module_0.get(tuple_0, var_0)
    assert var_1 is True


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    node_0 = module_1.Node(bool_0, predecessors=bool_0, incoming_nodes=bool_0)
    var_0 = module_0.shortest_path_length(bool_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {bool_0: var_0, var_0: var_0}
    tuple_0 = (dict_0, bool_0, bool_0)
    module_0.insert_or_update(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0, predecessors=none_type_0)
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    tuple_0 = (node_0, list_0)
    bool_0 = True
    list_1 = [tuple_0, bool_0]
    module_0.insert_or_update(list_1, list_1)
