# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    int_0 = 2166
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    int_0 = -590
    dict_0 = {bool_0: bool_0, int_0: bool_0}
    module_0.get(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"@\x7fAsf\x9eI\xda3\xa3S\xe7\xb7U#"
    none_type_0 = None
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, outgoing_nodes=none_type_0
    )
    module_0.shortest_path_length(node_0, node_0, none_type_0)


def test_case_3():
    dict_0 = {}
    node_0 = module_1.Node(
        successors=dict_0, predecessors=dict_0, outgoing_nodes=dict_0
    )
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"@\x7fAsf\x9eI]\xda3S\xe7\xb7U#"
    bytes_1 = b"\xe2\x96\x86\xfa\x00\x91\x89\xe8|\xcct\xd43\x84\xf0\x16"
    set_0 = {bytes_0, bytes_0, bytes_1}
    module_0.insert_or_update(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"@\x7fAsf\x9eI]\xda3S\xe7\xb7U#"
    tuple_0 = (bytes_0, bytes_0)
    bool_0 = True
    dict_0 = {tuple_0: bool_0, tuple_0: bytes_0, tuple_0: tuple_0, bool_0: bool_0}
    module_0.get(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    node_0 = module_1.Node(predecessors=bool_0, outgoing_nodes=bool_0)
    var_0 = module_2.merge(key=node_0)
    var_1 = module_0.get(var_0, node_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(var_0, node_0, node_0)
    assert var_2 == 0
    var_3 = module_0.shortest_path_length(node_0, node_0, var_0)
    assert var_3 == pytest.approx(1e309, abs=0.01, rel=0.01)
    tuple_0 = (bool_0, var_0)
    var_4 = module_2.nlargest(bool_0, var_0)
    module_0.insert_or_update(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "4~"
    node_0 = module_1.Node()
    dict_0 = {str_0: str_0, node_0: node_0}
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"@\x7fAsf\x9eI]\xda3S\xe7\xb7U#"
    tuple_0 = (bytes_0, bytes_0)
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    dict_0 = {tuple_0: bool_0, tuple_0: bytes_0, tuple_0: tuple_0, bool_0: bool_0}
    var_1 = module_0.get(dict_0, bytes_0)
    assert var_1 == b"@\x7fAsf\x9eI]\xda3S\xe7\xb7U#"
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"@\x7fAsf\x9eI]\xda3S\xe7\xb7U#"
    tuple_0 = (bytes_0, bytes_0)
    dict_0 = {tuple_0: bytes_0, tuple_0: bytes_0, tuple_0: tuple_0, bytes_0: bytes_0}
    var_0 = module_0.get(dict_0, bytes_0)
    assert var_0 == b"@\x7fAsf\x9eI]\xda3S\xe7\xb7U#"
    var_1 = module_0.insert_or_update(dict_0, dict_0)
    bool_0 = False
    node_0 = module_1.Node(predecessors=bool_0, outgoing_nodes=bool_0)
    node_0.predecessors()
