# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"r9\xbe\xc5\x95\xac\x97\xc6Z\xd7"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "<"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


def test_case_3():
    int_0 = -3849
    node_0 = module_1.Node(int_0, predecessors=int_0, incoming_nodes=int_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, int_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ""
    var_0 = module_0.get(str_0, str_0)
    assert var_0 == 0
    bytes_0 = b"\\\x17\x94\xd1\x95\x8a\xf2*P\xd3I4\xa6;"
    var_1 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_1 == 0
    module_0.insert_or_update(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: bool_0, tuple_0: bool_0, bool_0: bool_0}
    module_0.get(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    bytes_0 = b""
    list_0 = [var_0, none_type_0]
    var_1 = module_0.get(bytes_0, list_0)
    assert var_1 == 0
    module_0.insert_or_update(bytes_0, list_0)


def test_case_7():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: bool_0, tuple_0: bool_0, bool_0: bool_0}
    var_0 = module_0.insert_or_update(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x8a\x1a\x98v=\xf3"
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, outgoing_nodes=bytes_0
    )
    none_type_0 = None
    module_0.shortest_path_length(node_0, node_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    var_0 = module_0.shortest_path_length(tuple_0, bool_0, bool_0)
    assert var_0 == 0
    dict_0 = {tuple_0: bool_0, tuple_0: bool_0, bool_0: bool_0}
    var_1 = module_0.insert_or_update(dict_0, tuple_0)
    var_2 = module_0.get(dict_0, bool_0)
    assert var_2 is False
    module_0.shortest_path_length(var_1, var_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\xc3\xcb"
    tuple_0 = (bytes_0, bytes_0)
    set_0 = {tuple_0, bytes_0, bytes_0, bytes_0}
    module_0.insert_or_update(set_0, set_0)
