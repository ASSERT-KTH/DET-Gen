# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "74*7B>)E\x0b.rV{9\x0c|u"
    none_type_0 = None
    module_0.get(str_0, none_type_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.insert_or_update(bool_0, bool_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, none_type_0, predecessors=none_type_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    complex_0 = 1591.97 - 2519.7435j
    node_0 = module_1.Node(complex_0, complex_0)
    set_0 = {node_0, complex_0, node_0, complex_0}
    tuple_0 = (set_0,)
    var_0 = module_0.get(tuple_0, node_0)
    assert var_0 == (1591.97 - 2519.7435j)
    var_1 = module_0.shortest_path_length(var_0, node_0, tuple_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_6():
    complex_0 = 1591.97 - 2519.7435j
    node_0 = module_1.Node(complex_0, complex_0)
    set_0 = {node_0, complex_0, node_0, complex_0}
    tuple_0 = (set_0,)
    var_0 = module_0.get(tuple_0, node_0)
    assert var_0 == (1591.97 - 2519.7435j)
    node_1 = module_1.Node(incoming_nodes=node_0)
    var_1 = module_0.shortest_path_length(complex_0, node_1, node_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "mT"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    complex_0 = 1591.97 - 2519.7435j
    node_0 = module_1.Node(complex_0, complex_0)
    set_0 = {node_0, complex_0, node_0, complex_0}
    tuple_0 = (set_0,)
    module_0.insert_or_update(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    complex_0 = 1199 - 2298.214j
    tuple_0 = (complex_0,)
    node_0 = module_1.Node(tuple_0, successors=tuple_0, predecessors=tuple_0)
    module_0.shortest_path_length(tuple_0, node_0, tuple_0)


def test_case_10():
    complex_0 = 1199 - 2298.214j
    node_0 = module_1.Node(complex_0, complex_0)
    set_0 = {node_0, complex_0, node_0, complex_0}
    tuple_0 = (set_0,)
    var_0 = module_0.shortest_path_length(node_0, set_0, set_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, node_0, tuple_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    list_0 = []
    var_2 = module_0.insert_or_update(list_0, set_0)
    dict_0 = {node_0: node_0, var_0: var_0, node_0: node_0}
    var_3 = module_0.shortest_path_length(dict_0, var_1, var_1)
    assert var_3 == 0


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "Wo"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.insert_or_update(tuple_0, tuple_0)
