# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "6D2_,Y0"
    module_0.get(str_0, str_0)


def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, list_0, list_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "tX"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = -4141.987793
    none_type_0 = None
    module_0.shortest_path_length(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    list_0 = []
    none_type_0 = None
    var_0 = module_0.get(list_0, none_type_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(none_type_0, var_0, var_0)
    assert var_1 == 0
    list_1 = [var_0, none_type_0]
    var_2 = module_0.insert_or_update(list_0, list_1)
    module_0.get(list_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "2G"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.insert_or_update(dict_0, str_0)
    node_0 = module_1.Node(successor=var_0, predecessors=var_0, outgoing_nodes=var_0)
    list_0 = []
    none_type_0 = None
    node_1 = module_1.Node(
        successor=none_type_0, successors=node_0, outgoing_nodes=node_0
    )
    int_0 = -443
    node_2 = module_1.Node(none_type_0, successors=int_0, outgoing_nodes=int_0)
    module_0.shortest_path_length(list_0, node_1, none_type_0)


def test_case_7():
    list_0 = []
    node_0 = module_1.Node()
    var_0 = module_0.shortest_path_length(list_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "X"
    node_0 = module_1.Node(successor=str_0, successors=str_0)
    module_0.shortest_path_length(str_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    none_type_0 = None
    node_0 = module_1.Node(
        successor=var_0, predecessors=none_type_0, outgoing_nodes=var_0
    )
    assert node_0.successor == 0
    assert node_0.outgoing_nodes == 0
    var_1 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    list_1 = [node_0, none_type_0]
    var_2 = module_0.insert_or_update(list_0, list_1)
    var_3 = module_0.get(list_0, var_1)
    assert var_3 == 0
    module_0.shortest_path_length(none_type_0, var_0, var_1)


def test_case_10():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.get(list_0, var_0)
    assert var_1 == 0
    node_0 = module_1.Node(successor=var_1, predecessors=var_0, outgoing_nodes=var_1)
    assert node_0.successor == 0
    assert node_0.predecessors == 0
    assert node_0.outgoing_nodes == 0
    var_2 = module_0.shortest_path_length(var_1, node_0, var_1)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    list_1 = [node_0, var_2]
    var_3 = module_0.insert_or_update(list_0, list_1)
    var_4 = module_0.get(list_0, var_2)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "node.Node"
    assert var_4.value is None
    assert var_4.successor == 0
    assert var_4.successors == []
    assert var_4.predecessors == 0
    assert var_4.incoming_nodes == []
    assert var_4.outgoing_nodes == 0
    var_5 = module_0.shortest_path_length(var_2, var_3, var_3)
    assert var_5 == 0


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "2G"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.insert_or_update(dict_0, str_0)
    module_0.insert_or_update(dict_0, dict_0)
