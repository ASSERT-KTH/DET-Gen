# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "A;-}2ho&q*K dkHl%"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    str_0 = "A;-}2ho&q*K dkHl%"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


def test_case_4():
    set_0 = set()
    node_0 = module_1.Node(predecessors=set_0, outgoing_nodes=set_0)
    var_0 = module_0.shortest_path_length(set_0, node_0, set_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"j\xbf5~"
    tuple_0 = ()
    dict_0 = {bytes_0: tuple_0, bytes_0: bytes_0, tuple_0: tuple_0}
    module_0.insert_or_update(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "\x0cqiw|?(6U^8&mP%s"
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.get(list_1, none_type_0)


def test_case_7():
    str_0 = "6KUa\tN_LxLDloj<L^Q"
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0]
    var_0 = module_0.insert_or_update(list_1, list_1)


def test_case_8():
    str_0 = "6KUa\tN_LxLDloj<L^Q"
    list_0 = []
    list_1 = [list_0, str_0]
    var_0 = module_0.insert_or_update(list_0, list_1)


def test_case_9():
    str_0 = "6sKUa\tN_LxLDloj<L^Q"
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0]
    var_0 = module_0.get(list_1, str_0)
    assert var_0 == "6sKUa\tN_LxLDloj<L^Q"
    var_1 = module_0.insert_or_update(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'g++<}"s@u'
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    list_0 = [var_0, var_0]
    list_1 = [list_0, str_0]
    var_1 = module_0.get(list_1, var_0)
    assert var_1 == 0
    module_0.insert_or_update(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\xe9KA"
    node_0 = module_1.Node(
        successor=bytes_0,
        successors=bytes_0,
        incoming_nodes=bytes_0,
        outgoing_nodes=bytes_0,
    )
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)
