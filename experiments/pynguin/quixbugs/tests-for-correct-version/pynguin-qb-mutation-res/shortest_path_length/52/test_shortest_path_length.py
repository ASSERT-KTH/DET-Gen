# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"\xd5Z"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


def test_case_1():
    bytes_0 = b"\xd5Z"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.get(dict_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -973
    module_0.get(int_0, int_0)


def test_case_3():
    dict_0 = {}
    node_0 = module_1.Node(successor=dict_0)
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xd5Z"
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_5():
    bytes_0 = b"\xd5Z"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0]
    module_0.insert_or_update(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    dict_0 = {}
    node_0 = module_1.Node(dict_0, dict_0)
    complex_0 = 1337.3400485914533 + 3252j
    list_0 = [node_0, complex_0, dict_0]
    node_1 = module_1.Node(node_0, successors=list_0)
    module_0.shortest_path_length(complex_0, node_1, dict_0)


def test_case_8():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    bytes_0 = b"\x14\xf7\xce\x96\xe7r\xbc\\\x96\x8f"
    bool_1 = False
    bytes_1 = b"K\xa7B\xba"
    tuple_0 = (list_0, bytes_0, bool_1, bytes_1)
    var_0 = module_0.get(tuple_0, dict_0)
