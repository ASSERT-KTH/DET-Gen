# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    str_0 = "%EC"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    int_0 = -1142
    tuple_1 = (list_0, int_0, int_0, tuple_0)
    module_0.get(tuple_1, tuple_1)


def test_case_2():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "Z\x0c"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "%EC"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    module_0.shortest_path_length(var_0, str_0, var_0)


def test_case_5():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    node_0 = module_1.Node(successor=list_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.insert_or_update(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    node_0 = module_1.Node(successor=list_0, successors=list_0, predecessors=bool_0)
    module_0.shortest_path_length(node_0, node_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    list_0 = [bool_0]
    node_0 = module_1.Node(successor=list_0)
    node_1 = module_1.Node(incoming_nodes=list_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, node_1)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    tuple_0 = ()
    list_1 = [tuple_0, tuple_0]
    var_1 = module_0.get(tuple_0, node_0)
    assert var_1 == 0
    tuple_1 = (list_1,)
    var_2 = module_0.get(tuple_1, tuple_0)
    module_2.nlargest(var_0, var_2)


def test_case_9():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    int_0 = -1142
    var_0 = module_2.nlargest(int_0, list_0)
    var_1 = module_0.insert_or_update(var_0, list_0)
    var_2 = module_0.insert_or_update(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    node_0 = module_1.Node(successor=list_0)
    node_1 = module_1.Node(incoming_nodes=list_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, node_1)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    tuple_0 = ()
    list_1 = [tuple_0, tuple_0]
    int_0 = -1142
    var_1 = module_0.get(tuple_0, node_0)
    assert var_1 == 0
    var_2 = module_2.nlargest(int_0, list_1)
    var_3 = module_0.insert_or_update(var_2, list_1)
    var_4 = module_0.insert_or_update(var_2, list_1)
    node_2 = module_1.Node(bool_0, successors=list_0, predecessors=var_2)
    assert node_2.predecessors == [[(), ()]]
    var_5 = module_0.shortest_path_length(var_1, list_1, list_1)
    assert var_5 == 0
    bool_1 = True
    tuple_1 = (bool_0, bool_1)
    module_0.insert_or_update(var_2, tuple_1)
