# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "@r\r6JzCT`'"
    module_0.get(str_0, str_0)


def test_case_2():
    bytes_0 = b""
    var_0 = module_0.get(bytes_0, bytes_0)
    assert var_0 == 0
    node_0 = module_1.Node(predecessors=bytes_0, outgoing_nodes=bytes_0)
    var_1 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x11\x03\xeen\x19>"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    module_0.shortest_path_length(var_0, bool_0, var_0)


def test_case_5():
    bytes_0 = b""
    node_0 = module_1.Node(predecessors=bytes_0, outgoing_nodes=bytes_0)
    var_0 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "k#"
    bytes_0 = b"\xe6\xf6p\xf7\xba\xac\xb4/\xc3\xee\x7f\x80"
    tuple_0 = (str_0, bytes_0, bytes_0)
    module_0.get(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0,)
    bool_1 = False
    var_0 = module_0.get(tuple_0, bool_1)
    assert var_0 is False
    tuple_1 = (var_0, var_0, var_0)
    module_0.get(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x11\x03\xeen\x19>"
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, incoming_nodes=bytes_0
    )
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"=\x06"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -555
    dict_0 = {}
    tuple_0 = (int_0, dict_0)
    var_0 = module_0.shortest_path_length(tuple_0, int_0, int_0)
    assert var_0 == 0
    float_0 = 704.6992
    list_0 = [tuple_0, float_0, tuple_0]
    var_1 = module_0.insert_or_update(list_0, tuple_0)
    bytes_0 = b"\x11\x03\xeen\x19>"
    none_type_0 = None
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, incoming_nodes=none_type_0
    )
    var_2 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_2 == 0
    none_type_1 = None
    module_0.shortest_path_length(node_0, node_0, none_type_1)
