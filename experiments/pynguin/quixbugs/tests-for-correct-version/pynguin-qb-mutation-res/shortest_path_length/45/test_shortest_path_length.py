# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bytes_0 = b"\x17\xa4\xa8\x18\xbe`\x8f\xc6Md\xf9\xff"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x17\xa4\xa8\x18\xbe\x8f\xc6Md\xf9\xff"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ""
    var_0 = module_0.get(str_0, str_0)
    assert var_0 == 0
    module_0.insert_or_update(var_0, str_0)


def test_case_3():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0, list_0, list_0]
    var_0 = module_0.insert_or_update(list_1, list_0)


def test_case_4():
    str_0 = "QvPXfDykHhIpkziY"
    node_0 = module_1.Node(incoming_nodes=str_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "zz"
    dict_0 = {str_0: str_0}
    var_0 = module_0.insert_or_update(dict_0, str_0)
    var_1 = module_2.merge(reverse=var_0)
    module_0.insert_or_update(var_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xb2F\xa4C%"
    str_0 = "hFh1Wyg"
    tuple_0 = (bytes_0, str_0)
    set_0 = {tuple_0, bytes_0, str_0, str_0}
    module_0.get(set_0, bytes_0)


def test_case_7():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0, list_0, list_0]
    var_0 = module_0.get(list_1, bool_0)
    assert var_0 is True
    var_1 = module_0.insert_or_update(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "B"
    node_0 = module_1.Node(
        successor=str_0, successors=str_0, predecessors=str_0, incoming_nodes=str_0
    )
    module_0.shortest_path_length(node_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    dict_0 = {}
    tuple_1 = (tuple_0, dict_0)
    module_0.insert_or_update(tuple_1, tuple_1)
