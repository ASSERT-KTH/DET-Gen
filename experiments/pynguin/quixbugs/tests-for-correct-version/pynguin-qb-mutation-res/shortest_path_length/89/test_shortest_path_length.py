# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2
import builtins as module_3


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.merge()
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0
    dict_0 = {var_0: var_0, var_1: var_0, var_1: var_1}
    module_0.get(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    module_0.shortest_path_length(var_0, var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_1.merge()
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0
    var_0.successors()


def test_case_4():
    var_0 = module_1.merge()
    node_0 = module_2.Node()
    var_1 = module_0.shortest_path_length(node_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    int_0 = 0
    tuple_0 = (int_0, int_0)
    dict_0 = {tuple_0: tuple_0, tuple_0: int_0}
    var_0 = module_0.insert_or_update(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xce\n"
    tuple_0 = (bytes_0,)
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    node_0 = module_2.Node(
        successors=bytes_0,
        predecessors=var_0,
        incoming_nodes=var_0,
        outgoing_nodes=bytes_0,
    )
    assert node_0.predecessors == 0
    assert node_0.incoming_nodes == 0
    module_0.shortest_path_length(tuple_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_1.merge()
    var_1 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0
    var_2 = module_0.get(var_0, var_0)
    assert var_2 == 0
    dict_0 = {var_0: var_2, var_1: var_0, var_1: var_2}
    object_0 = module_3.object()
    module_0.insert_or_update(var_0, dict_0)


def test_case_8():
    int_0 = 0
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    dict_0 = {tuple_0: tuple_0, tuple_0: int_0}
    var_0 = module_0.get(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\xce\n"
    node_0 = module_2.Node(
        successors=bytes_0,
        predecessors=bytes_0,
        incoming_nodes=bytes_0,
        outgoing_nodes=bytes_0,
    )
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\xce\n"
    tuple_0 = (bytes_0,)
    bytes_1 = b"\xb3\xce"
    module_0.insert_or_update(tuple_0, bytes_1)
