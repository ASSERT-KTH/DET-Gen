# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    module_0.get(list_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xb3\xb6\t\x11\x9b\xe2dD\x03h\xa2\xe34a\x12\xf8\n\x1e\xad"
    node_0 = module_1.Node(
        successors=bytes_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0
    )
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -849.5
    module_0.get(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 1375
    set_0 = {int_0}
    module_0.shortest_path_length(set_0, int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x92\xe8"
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_6():
    none_type_0 = None
    node_0 = module_1.Node()
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = ()
    bytes_0 = b"\\f"
    module_0.insert_or_update(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1]
    tuple_1 = (tuple_0, tuple_0, list_0, list_0)
    module_0.get(tuple_1, tuple_0)


def test_case_9():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1]
    tuple_1 = (tuple_0, tuple_0, list_0, list_0)
    var_0 = module_0.get(tuple_1, bool_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x08d"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = -2507
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, dict_0)
    tuple_1 = (tuple_0, tuple_0)
    module_0.insert_or_update(tuple_1, tuple_0)
