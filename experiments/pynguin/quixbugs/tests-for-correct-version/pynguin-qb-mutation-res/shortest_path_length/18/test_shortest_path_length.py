# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import builtins as module_1
import node as module_2


def test_case_0():
    str_0 = "D\x0c--uUhOXTl"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "D\x0c--uUhOXTl"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b""
    var_0 = module_0.get(bytes_0, bytes_0)
    assert var_0 == 0
    module_0.shortest_path_length(bytes_0, bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    object_0 = module_1.object()
    module_0.insert_or_update(object_0, object_0)


def test_case_4():
    set_0 = set()
    node_0 = module_2.Node(
        predecessors=set_0, incoming_nodes=set_0, outgoing_nodes=set_0
    )
    var_0 = module_0.shortest_path_length(node_0, node_0, set_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    set_0 = set()
    complex_0 = 487.279 + 717j
    tuple_0 = (set_0, complex_0)
    module_0.insert_or_update(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = 192.49
    list_0 = [float_0, float_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_7():
    str_0 = "`}g"
    list_0 = [str_0, str_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    var_0 = module_0.get(tuple_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"U\x9c&\xc9Iv\xc5!r\x18f\x89"
    node_0 = module_2.Node(
        successor=bytes_0,
        successors=bytes_0,
        incoming_nodes=bytes_0,
        outgoing_nodes=bytes_0,
    )
    float_0 = 1788.436625
    module_0.shortest_path_length(node_0, node_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = -5116
    tuple_0 = (int_0, int_0)
    list_0 = [tuple_0]
    var_0 = module_0.get(list_0, int_0)
    assert var_0 == -5116
    module_0.get(var_0, list_0)


def test_case_10():
    float_0 = 984.0
    list_0 = [float_0, float_0]
    list_1 = [list_0, float_0, list_0]
    var_0 = module_0.insert_or_update(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    float_0 = 984.0
    int_0 = -2128
    var_0 = module_0.shortest_path_length(float_0, int_0, int_0)
    assert var_0 == 0
    list_0 = [float_0, float_0]
    list_1 = [list_0, float_0, list_0]
    var_1 = module_0.insert_or_update(list_1, list_0)
    set_0 = set()
    node_0 = module_2.Node(set_0, successors=set_0)
    str_0 = "$ueU]f\x0c{\n9flD["
    node_1 = module_2.Node(str_0, successors=str_0, outgoing_nodes=node_0)
    var_2 = module_0.shortest_path_length(var_1, node_0, var_1)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    str_1 = "3K"
    module_0.insert_or_update(list_1, str_1)
