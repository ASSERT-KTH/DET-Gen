# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    float_0 = -3201.73135
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xc7\xb6\xd6\x1f>\x9b\x1e\xc31\xf8>G\xdbi\xad\xa3o\x0f\xc0\xc9"
    tuple_0 = (bytes_0,)
    module_0.get(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.get(bool_0, bool_0)


def test_case_3():
    node_0 = module_1.Node()
    none_type_0 = None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_4():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b".g"
    set_0 = {bytes_0, bytes_0, bytes_0}
    var_0 = module_0.get(set_0, bytes_0)
    assert var_0 == 0
    set_1 = {var_0, var_0, var_0, var_0}
    module_0.get(set_1, set_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    node_0 = module_1.Node()
    list_0 = [node_0, node_0]
    var_0 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    list_1 = [list_0, list_0]
    module_0.insert_or_update(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "w2]:QJOG\t"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    bool_1 = True
    dict_0 = {tuple_0: str_0, bool_1: str_0, tuple_0: str_0, bool_0: bool_0}
    list_0 = [dict_0, tuple_0]
    var_0 = module_0.get(list_0, bool_1)
    module_0.get(var_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    node_0 = module_1.Node()
    list_0 = [node_0, node_0]
    var_0 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    list_1 = [list_0, list_0]
    var_1 = module_0.insert_or_update(list_1, list_0)
    var_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"H\x06(\xe4\xc9\xc1\nG]\x03"
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, incoming_nodes=bytes_0
    )
    module_0.shortest_path_length(node_0, node_0, bytes_0)
