# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"S\x05\xf1l\x01[\xd8\\\xe3\xa5*\xbaA\xa1"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"M\x01\xce\xc9\xbe\x1c/h\xc3CkYo\x13\xf1K"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"t\x9a\x87_W\xd4\xfc\x89\r"
    node_0 = module_1.Node(bytes_0, bytes_0, bytes_0, outgoing_nodes=bytes_0)
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


def test_case_4():
    bytes_0 = b"\xabI"
    tuple_0 = (bytes_0, bytes_0)
    bytes_1 = b"\x16\x17\x9c"
    var_0 = module_0.get(tuple_0, bytes_1)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_6():
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0, predecessors=none_type_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "\x0bg"
    list_0 = [str_0, str_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_8():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    list_1 = [list_0]
    node_0 = module_1.Node(none_type_0, none_type_0, list_0, outgoing_nodes=list_1)
    var_0 = module_0.shortest_path_length(list_1, list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(list_1, list_0)


def test_case_9():
    str_0 = "g"
    node_0 = module_1.Node(str_0, successors=str_0)
    tuple_0 = (node_0,)
    tuple_1 = (str_0, tuple_0)
    list_0 = [tuple_1]
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    none_type_0 = None
    list_1 = [none_type_0]
    list_2 = []
    var_1 = module_0.shortest_path_length(list_2, none_type_0, none_type_0)
    assert var_1 == 0
    node_1 = module_1.Node(none_type_0, none_type_0, list_1, outgoing_nodes=list_2)
    node_2 = module_1.Node(none_type_0, list_1)
    var_2 = module_0.shortest_path_length(none_type_0, node_2, var_1)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_3 = module_0.get(list_0, tuple_0)
    assert var_3 == "g"
