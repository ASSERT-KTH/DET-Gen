# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"0HG\x0b\xf5\xbd$\x00\xca\x90`\x0cU\xb9h"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_1: bool_1, bool_1: bool_1}
    tuple_0 = (bool_0, dict_0, dict_0)
    module_0.get(tuple_0, bool_0)


def test_case_2():
    bytes_0 = b"\x06|\nY\xc1Q\xf7X\xa9\xf6"
    tuple_0 = (bytes_0, bytes_0)
    list_0 = [tuple_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)


def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0)
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x06|\nY\xc1Q\xf7X\xa9\xf6"
    tuple_0 = (bytes_0, bytes_0)
    node_0 = module_1.Node(
        successors=tuple_0,
        predecessors=bytes_0,
        incoming_nodes=bytes_0,
        outgoing_nodes=bytes_0,
    )
    module_0.shortest_path_length(tuple_0, node_0, tuple_0)


def test_case_5():
    bytes_0 = b"\x06|\nY\xc1Q\xf7X\xf6"
    tuple_0 = (bytes_0, bytes_0)
    list_0 = [tuple_0]
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


def test_case_6():
    bytes_0 = b"\x06|\nY\xc1Q\xf7X\xa9\xf6"
    none_type_0 = None
    var_0 = module_0.shortest_path_length(bytes_0, none_type_0, none_type_0)
    assert var_0 == 0
    tuple_0 = (bytes_0, bytes_0)
    list_0 = [tuple_0]
    var_1 = module_0.get(list_0, bytes_0)
    assert var_1 == b"\x06|\nY\xc1Q\xf7X\xa9\xf6"
    node_0 = module_1.Node(successor=none_type_0)
    var_2 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b'\x06|"Y\xd9X\xf7X}\xf6'
    none_type_0 = None
    var_0 = module_0.shortest_path_length(bytes_0, none_type_0, none_type_0)
    assert var_0 == 0
    tuple_0 = (bytes_0, bytes_0)
    list_0 = []
    node_0 = module_1.Node(
        successors=tuple_0,
        predecessors=bytes_0,
        incoming_nodes=bytes_0,
        outgoing_nodes=bytes_0,
    )
    var_1 = module_0.insert_or_update(list_0, tuple_0)
    module_0.shortest_path_length(none_type_0, node_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x06|\nY\xc1Q\xf7X\xa9\xf6"
    none_type_0 = None
    var_0 = module_0.shortest_path_length(bytes_0, none_type_0, none_type_0)
    assert var_0 == 0
    tuple_0 = (bytes_0, bytes_0)
    list_0 = [tuple_0]
    var_1 = module_0.get(list_0, list_0)
    assert var_1 == 0
    node_0 = module_1.Node(
        list_0,
        successors=tuple_0,
        predecessors=var_0,
        incoming_nodes=none_type_0,
        outgoing_nodes=bytes_0,
    )
    assert node_0.predecessors == 0
    tuple_1 = (var_0, var_1)
    module_0.insert_or_update(list_0, tuple_1)
