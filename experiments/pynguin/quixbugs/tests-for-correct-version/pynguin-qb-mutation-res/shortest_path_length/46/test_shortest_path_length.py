# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    str_0 = "(+Gbsx_+X&"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "W&gb\\aC"
    none_type_0 = None
    module_0.get(str_0, none_type_0)


def test_case_2():
    str_0 = "s`"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "nIJ`]!"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "Ep-;*MRlUIXD9"
    node_0 = module_1.Node(successors=str_0, outgoing_nodes=str_0)
    module_0.shortest_path_length(node_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "E)p(-;*MRlUIXD9"
    var_0 = module_2.merge(key=str_0)
    node_0 = module_1.Node(successors=var_0, outgoing_nodes=str_0)
    set_0 = {node_0, str_0, node_0}
    module_0.insert_or_update(var_0, set_0)


def test_case_6():
    str_0 = "Ep-;*MRlUIXD9"
    var_0 = module_2.merge(key=str_0)
    node_0 = module_1.Node(successors=var_0, outgoing_nodes=str_0)
    var_1 = module_0.shortest_path_length(node_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_7():
    str_0 = "s`"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.insert_or_update(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "s`"
    list_0 = [str_0, str_0, str_0]
    node_0 = module_1.Node(list_0, successors=str_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(str_0, var_0, var_0)
    assert var_1 == 0
    var_2 = module_2.merge(key=dict_0)
    var_3 = module_0.insert_or_update(dict_0, str_0)
    module_0.insert_or_update(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "@vu&r<3TB O`jxKY"
    bool_0 = True
    set_0 = {bool_0, str_0, bool_0}
    tuple_0 = (set_0,)
    var_0 = module_0.get(tuple_0, str_0)
    assert var_0 is True
    tuple_1 = (str_0, bool_0, bool_0, str_0)
    none_type_0 = None
    module_0.get(tuple_1, none_type_0)
