# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    str_0 = "r .=z3B'w[#8W=\nJZ5|"
    tuple_0 = (bool_0, str_0)
    module_0.get(tuple_0, tuple_0)


def test_case_2():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0


def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(
        successor=none_type_0,
        predecessors=none_type_0,
        incoming_nodes=none_type_0,
        outgoing_nodes=none_type_0,
    )
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [bool_0, bool_0]
    tuple_1 = (tuple_0, list_0)
    var_0 = module_0.get(tuple_1, bool_0)
    assert var_0 is False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_1 = module_0.shortest_path_length(dict_0, var_0, var_0)
    assert var_1 == 0
    module_0.insert_or_update(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "RB"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 1891
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    none_type_0 = None
    set_0 = {tuple_0, none_type_0, none_type_0}
    module_0.get(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = 279.17
    set_0 = {float_0}
    node_0 = module_1.Node(successor=set_0, successors=set_0, incoming_nodes=set_0)
    module_0.shortest_path_length(node_0, node_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 1750
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    list_0 = [bool_0, int_0]
    tuple_1 = (tuple_0, list_0)
    var_0 = module_0.get(tuple_1, bool_0)
    assert var_0 == 1750
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_1 = module_0.shortest_path_length(dict_0, var_0, var_0)
    assert var_1 == 0
    module_0.insert_or_update(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 1750
    bool_0 = True
    list_0 = [bool_0, int_0]
    tuple_0 = module_2.merge(key=list_0)
    var_0 = module_0.get(tuple_0, bool_0)
    assert var_0 == 0
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_1 = module_0.shortest_path_length(dict_0, var_0, var_0)
    assert var_1 == 0
    module_0.insert_or_update(tuple_0, list_0)
