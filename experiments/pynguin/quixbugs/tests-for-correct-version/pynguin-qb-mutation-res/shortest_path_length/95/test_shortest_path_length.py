# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    str_0 = ""
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "#Phsjr`eko"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'6\xb5\xb0\x13\x17"'
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0)
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ""
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: var_0,
        var_0: var_0,
    }
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ""
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    dict_0 = {var_0: var_0, str_0: str_0, str_0: str_0}
    module_0.insert_or_update(str_0, dict_0)


def test_case_6():
    str_0 = "si"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0


def test_case_7():
    bool_0 = True
    node_0 = module_1.Node(successor=bool_0, outgoing_nodes=bool_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    set_0 = {none_type_0, none_type_0, var_0, var_0, var_0}
    node_0 = module_1.Node(successor=none_type_0, successors=set_0)
    assert node_0.successors == {0, None}
    bool_0 = False
    bool_1 = False
    tuple_0 = (set_0, bool_0, set_0, bool_1)
    var_1 = module_0.get(tuple_0, none_type_0)
    assert var_1 == 0
    bool_2 = True
    module_0.insert_or_update(bool_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "^N"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: var_0,
        var_0: var_0,
    }
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    list_0 = []
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    tuple_1 = (tuple_0, list_0, list_0)
    module_0.insert_or_update(tuple_1, tuple_0)
