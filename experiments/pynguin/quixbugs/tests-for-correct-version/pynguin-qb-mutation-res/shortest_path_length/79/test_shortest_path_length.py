# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    int_0 = -2491
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xd3\xe3\x96\x7f\x05\xcf\xb7yp"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xb1\xe9\xbd\xe9\x10\x05\xe9\xd5&M\xe1"
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_3():
    bytes_0 = b""
    node_0 = module_1.Node(successors=bytes_0, predecessors=bytes_0)
    var_0 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xcf\xe5,>,"
    node_0 = module_1.Node(successors=bytes_0, predecessors=bytes_0)
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "=m"
    module_0.insert_or_update(str_0, str_0)


def test_case_6():
    bytes_0 = b"\xfb\xc4"
    node_0 = module_1.Node(successors=bytes_0, predecessors=bytes_0)
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)


def test_case_7():
    bytes_0 = b"\xfb\xc4"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    var_0 = module_0.get(list_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xfb\r"
    none_type_0 = None
    dict_0 = {}
    var_0 = module_0.get(dict_0, none_type_0)
    assert var_0 == 0
    var_1 = module_0.get(dict_0, var_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_2 == 0
    node_0 = module_1.Node(successors=bytes_0, predecessors=bytes_0)
    module_0.insert_or_update(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\xfb\r"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"8\x01"
    none_type_0 = None
    dict_0 = {bytes_0: none_type_0, bytes_0: none_type_0}
    bool_0 = True
    var_0 = module_0.get(dict_0, bool_0)
    assert var_0 == 56
    var_1 = module_0.get(dict_0, var_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_2 == 0
    node_0 = module_1.Node(successors=bytes_0, predecessors=bytes_0)
    var_3 = module_0.insert_or_update(dict_0, bytes_0)
    module_0.shortest_path_length(none_type_0, node_0, none_type_0)
