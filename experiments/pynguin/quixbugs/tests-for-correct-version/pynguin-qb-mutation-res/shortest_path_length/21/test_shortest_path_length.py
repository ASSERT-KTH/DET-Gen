# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -95
    list_0 = [int_0, int_0]
    module_0.get(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.get(bool_0, bool_0)


def test_case_3():
    tuple_0 = ()
    node_0 = module_1.Node(tuple_0, tuple_0, tuple_0, tuple_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, tuple_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"O\xb2\xe6m&b\x11\xb7\xb4\xff\x170\xf2\xe8\x94"
    node_0 = module_1.Node(successors=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "\r*"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "LfAG/<|I)("
    list_0 = [str_0, str_0]
    tuple_0 = (list_0,)
    var_0 = module_0.get(tuple_0, list_0)
    assert var_0 == 0
    tuple_1 = ()
    module_0.shortest_path_length(tuple_1, tuple_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "LfAG/<|I)("
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    list_0 = [str_0, str_0]
    tuple_0 = (list_0,)
    bool_0 = True
    bytes_0 = b"\x12\x1c|#\xcc2"
    var_1 = module_0.get(tuple_0, str_0)
    assert var_1 == "LfAG/<|I)("
    module_0.shortest_path_length(bytes_0, bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "LfAG/<|I)("
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    list_0 = [str_0, str_0]
    tuple_0 = (list_0,)
    module_0.insert_or_update(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "p*"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    list_0 = [str_0, str_0]
    tuple_0 = (list_0,)
    var_1 = module_0.get(tuple_0, list_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(list_0, var_1, var_0)
    assert var_2 == 0
    module_0.insert_or_update(list_0, list_0)
