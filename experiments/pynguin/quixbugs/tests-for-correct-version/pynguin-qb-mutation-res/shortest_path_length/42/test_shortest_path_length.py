# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


def test_case_1():
    bytes_0 = b";g"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


def test_case_3():
    set_0 = set()
    node_0 = module_1.Node(predecessors=set_0)
    var_0 = module_0.shortest_path_length(set_0, node_0, set_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_4():
    bytes_0 = b";g"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)


def test_case_5():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.insert_or_update(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\x1c\xbeS\xa7\xf5\xaa\x07\xc5\x81\x87\xa6e\xf2\xbf{@\xfa\xc9P"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    dict_0 = {tuple_0: bool_0, bytes_0: tuple_0, bytes_0: bytes_0, tuple_0: tuple_0}
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x06*>\xa4\xd3Mf_\x00\xeb\xd1\xbe\x1dqY"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    dict_0 = {tuple_0: bool_0, bytes_0: tuple_0, bytes_0: bytes_0, tuple_0: tuple_0}
    var_0 = module_0.get(dict_0, bool_0)
    assert var_0 == b"\x06*>\xa4\xd3Mf_\x00\xeb\xd1\xbe\x1dqY"
    var_1 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_1 == 0
    node_0 = module_1.Node(
        successors=dict_0,
        predecessors=bytes_0,
        incoming_nodes=bytes_0,
        outgoing_nodes=var_1,
    )
    assert node_0.outgoing_nodes == 0
    module_0.shortest_path_length(var_1, node_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x06*>\xa4\xd3Mf_\x00\xeb\xd1\xbe\x1dqY"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    node_0 = module_1.Node(
        successors=dict_0,
        predecessors=bytes_0,
        incoming_nodes=bytes_0,
        outgoing_nodes=bytes_0,
    )
    module_0.shortest_path_length(dict_0, node_0, dict_0)
