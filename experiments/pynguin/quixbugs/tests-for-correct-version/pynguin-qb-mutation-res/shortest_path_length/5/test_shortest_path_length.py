# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"d\x1f\xac\xa3\xe0J\xc8y"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"d\x1f\xac\xa3\xe0J\xc8y"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x0e"
    node_0 = module_1.Node(bytes_0, bytes_0, bytes_0)
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.get(bool_0, bool_0)


def test_case_4():
    bytes_0 = b""
    node_0 = module_1.Node(bytes_0, bytes_0, bytes_0)
    var_0 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"e\xab"
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_6():
    str_0 = "e"
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0, list_0, str_0]
    var_0 = module_0.get(list_1, str_0)
    assert var_0 == "e"


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "g\x0b\n]$B]."
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0, list_0, str_0]
    var_0 = module_0.insert_or_update(list_1, list_0)
    var_1 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0
    var_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    list_0 = [tuple_1]
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    module_0.shortest_path_length(var_0, var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x8f\x9d\xd6a\xd9\x12\x98\xa6\xf6XH\xf7\xf4\xdb\x97\xeaN\xea"
    tuple_0 = (bytes_0, bytes_0)
    dict_0 = {}
    module_0.insert_or_update(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\xeb\x07"
    tuple_0 = (bytes_0, bytes_0)
    dict_0 = {bytes_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    var_0 = module_0.insert_or_update(dict_0, tuple_0)
    bytes_1 = b"s\xf1\xeeR\x81a\t\x16"
    node_0 = module_1.Node(bytes_1, bytes_1, bytes_1)
    var_1 = module_0.shortest_path_length(node_0, bytes_1, bytes_1)
    assert var_1 == 0
    module_0.shortest_path_length(bytes_1, node_0, bytes_1)
