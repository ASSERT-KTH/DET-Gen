# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0,)
    var_0 = module_0.get(tuple_0, bool_0)
    assert var_0 is False
    module_0.shortest_path_length(var_0, bool_0, tuple_0)


def test_case_2():
    bytes_0 = b"j\xc6iH\x90\xa9\xb8V\n\xc9\x9bY\xdfJ\x1c"
    node_0 = module_1.Node(incoming_nodes=bytes_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x9c\xacr.0\x17\x1cr\\\xa2\x93\xb4\xc6t\x00"
    node_0 = module_1.Node(successors=bytes_0, incoming_nodes=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_2.merge()
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0
    set_0 = {var_1, var_0}
    module_0.insert_or_update(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    int_0 = -3157
    var_0 = module_0.shortest_path_length(list_0, int_0, int_0)
    assert var_0 == 0
    var_1 = module_2.merge()
    module_0.insert_or_update(var_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '"<'
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(list_0, str_0)
    bool_0 = False
    var_2 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_2 == 0
    var_3 = module_2.nlargest(var_2, str_0)
    module_0.shortest_path_length(var_3, var_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '"<'
    list_0 = [str_0, str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    list_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '"<'
    list_0 = [str_0, str_0]
    module_0.insert_or_update(list_0, list_0)
