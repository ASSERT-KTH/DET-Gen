# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bytes_0 = b"\xa8\xdcU\x7fo<\x0e\xfc\x81\xf52\x91"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xf0Cj\xb6\x15"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b" \xe2\x0e"
    node_0 = module_1.Node(bytes_0, bytes_0, bytes_0)
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = " >AN,zv\x0b`\t;"
    module_0.insert_or_update(str_0, str_0)


def test_case_4():
    dict_0 = {}
    node_0 = module_1.Node(incoming_nodes=dict_0)
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ' "Of"G^\n'
    var_0 = module_2.merge(*str_0, key=str_0)
    set_0 = {var_0, str_0, str_0, str_0}
    tuple_0 = (set_0, var_0)
    module_0.get(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xc1\x0e"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 1
    list_0 = [int_0, int_0]
    list_1 = [list_0, int_0]
    var_0 = module_0.get(list_1, int_0)
    assert var_0 == 1
    bytes_0 = b"\xa7\xe2\xc5c"
    node_0 = module_1.Node(bytes_0, bytes_0, bytes_0)
    none_type_0 = None
    module_0.shortest_path_length(node_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_2.merge()
    list_0 = [var_0, var_0]
    list_1 = [list_0, list_0]
    var_1 = module_0.insert_or_update(list_1, list_0)
    module_0.insert_or_update(list_1, list_1)


def test_case_9():
    var_0 = module_2.merge()
    list_0 = [var_0, var_0]
    list_1 = [list_0, list_0, list_0]
    var_1 = module_0.insert_or_update(list_1, list_0)
