# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.shortest_path_length(set_0, set_0, set_0)
    assert var_0 == 0


def test_case_1():
    bytes_0 = b"\xc9\xfd"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.get(list_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "YwM7?-cM\\62e;5r"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    module_0.shortest_path_length(str_0, var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "YwM7?cM\\62e;5r"
    var_0 = module_1.Node(successor=str_0, successors=str_0, outgoing_nodes=str_0)
    module_0.shortest_path_length(str_0, var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 509
    list_0 = [int_0, int_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_5():
    bool_0 = False
    node_0 = module_1.Node(outgoing_nodes=bool_0)
    var_0 = module_0.shortest_path_length(bool_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 3009
    tuple_0 = (int_0, int_0, int_0, int_0)
    tuple_1 = (int_0, tuple_0)
    list_0 = [tuple_1, int_0, tuple_0]
    var_0 = module_0.insert_or_update(list_0, tuple_1)
    module_0.get(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xc9\xfd"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.get(list_0, bytes_0)
    assert var_0 == 0
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bool_1 = True
    node_0 = module_1.Node(predecessors=var_0, outgoing_nodes=bool_1)
    assert node_0.predecessors == 0
    dict_0 = {var_0: bool_0, bool_1: bool_0, var_0: list_0}
    tuple_0 = (dict_0, bool_0, var_0)
    var_1 = module_0.get(tuple_0, bool_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(bool_0, node_0, tuple_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    node_1 = module_1.Node(var_2, successors=var_2)
    module_0.shortest_path_length(var_0, list_0, var_0)
