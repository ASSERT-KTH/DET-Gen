# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bytes_0 = b"$@_\xdb\xa8\x99\xd6\xa1"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"$@_\xdb\xa8\x99\xd6\xa1"
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0


def test_case_3():
    node_0 = module_1.Node()
    list_0 = []
    var_0 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xd7\x9d"
    set_0 = {bytes_0}
    module_0.insert_or_update(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'\xea\xe0\xb8"\x0bf?\x10'
    node_0 = module_1.Node(successors=bytes_0, predecessors=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x17\xfe\tW\xb3f\x81\xdc\x8d\xaa\xe7j\x13\x9d|\xbc\xe4\x8f'"
    tuple_0 = (bytes_0, bytes_0)
    var_0 = module_2.merge(key=tuple_0)
    module_0.insert_or_update(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 1048
    complex_0 = -386.191 - 1907.808j
    set_0 = {int_0, complex_0}
    bool_0 = False
    tuple_0 = (set_0, int_0, bool_0)
    none_type_0 = None
    module_0.get(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_1]
    list_1 = [list_0, list_0]
    var_0 = module_0.get(list_1, bool_0)
    assert var_0 is True
    bytes_0 = b"r9\xbc\x8bf\xfdH\xf5\x81d<\x8a\x96\xb6\r\xa3D\xfe"
    str_0 = '7i9\x0b{j=cr"4^7'
    set_0 = {bytes_0, str_0, bytes_0, str_0}
    node_0 = module_1.Node(set_0)
    var_1 = module_0.shortest_path_length(bytes_0, node_0, set_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    node_1 = module_1.Node(successors=bytes_0, outgoing_nodes=bytes_0)
    var_2 = module_0.shortest_path_length(node_1, node_1, node_1)
    assert var_2 == 0
    module_0.shortest_path_length(node_1, node_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_1]
    list_1 = [list_0, list_0]
    module_0.insert_or_update(list_1, list_1)
