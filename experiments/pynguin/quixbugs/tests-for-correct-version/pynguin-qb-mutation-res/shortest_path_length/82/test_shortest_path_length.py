# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    str_0 = "Bl"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


def test_case_1():
    complex_0 = 1730.9122 + 2622.04835j
    bool_0 = True
    set_0 = {complex_0, complex_0, bool_0}
    tuple_0 = (set_0,)
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0


def test_case_2():
    bool_0 = False
    node_0 = module_1.Node(incoming_nodes=bool_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "B;"
    module_0.insert_or_update(str_0, str_0)


def test_case_4():
    bytes_0 = b"\xff;"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xff;"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"u"
    node_0 = module_1.Node(successors=bytes_0, outgoing_nodes=bytes_0)
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


def test_case_7():
    complex_0 = 1730.9122 + 2622.04835j
    bool_0 = False
    set_0 = {complex_0, complex_0, bool_0}
    tuple_0 = (set_0,)
    var_0 = module_0.get(tuple_0, complex_0)
    assert var_0 is False
