# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    set_0 = {var_0, var_0, bool_0}
    list_0 = [set_0]
    var_1 = module_0.get(list_0, list_0)
    assert var_1 == 0
    module_0.insert_or_update(var_1, var_1)


def test_case_2():
    dict_0 = {}
    node_0 = module_1.Node(dict_0, dict_0, incoming_nodes=dict_0)
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_1 = module_0.get(dict_0, node_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "CX@\\=3"
    module_0.insert_or_update(str_0, str_0)


def test_case_4():
    dict_0 = {}
    node_0 = module_1.Node(dict_0, dict_0, incoming_nodes=dict_0)
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    set_0 = {bool_0, var_0, bool_0}
    list_0 = [set_0]
    var_1 = module_0.get(list_0, var_0)
    assert var_1 == 0
    module_0.insert_or_update(set_0, set_0)


def test_case_6():
    none_type_0 = None
    node_0 = module_1.Node(
        none_type_0, predecessors=none_type_0, incoming_nodes=none_type_0
    )
    set_0 = {node_0, none_type_0}
    list_0 = [set_0, none_type_0]
    var_0 = module_0.insert_or_update(list_0, list_0)
    module_0.insert_or_update(var_0, list_0)


def test_case_7():
    none_type_0 = None
    node_0 = module_1.Node(
        none_type_0, predecessors=none_type_0, incoming_nodes=none_type_0
    )
    set_0 = {node_0, none_type_0}
    list_0 = [set_0, none_type_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    node_0 = module_1.Node(
        none_type_0, predecessors=none_type_0, incoming_nodes=none_type_0
    )
    set_0 = {node_0, none_type_0}
    list_0 = [set_0, none_type_0]
    var_0 = module_2.merge(reverse=list_0)
    module_0.insert_or_update(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    set_0 = {bool_0, var_0, bool_0}
    list_0 = [set_0]
    bool_1 = True
    var_1 = module_0.get(list_0, bool_1)
    assert var_1 == 0
    module_0.insert_or_update(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b'we\xd9"\xf7\xbcx\xef\xc2'
    node_0 = module_1.Node(successors=bytes_0, predecessors=bytes_0)
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)
