# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


def test_case_1():
    str_0 = "d\x0b"
    set_0 = {str_0}
    var_0 = module_0.get(set_0, str_0)
    assert var_0 == 0


def test_case_2():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.get(bool_0, bool_0)


def test_case_4():
    dict_0 = {}
    node_0 = module_1.Node(
        successor=dict_0, incoming_nodes=dict_0, outgoing_nodes=dict_0
    )
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xc7\xb5"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "'3aY&"
    node_0 = module_1.Node(str_0, successors=str_0)
    module_0.shortest_path_length(str_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = ()
    bytes_0 = b"\xf5\xa5"
    module_0.insert_or_update(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "q1"
    list_0 = [str_0, str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "L1"
    list_0 = [str_0, str_0]
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(list_0, str_0)
    str_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    bytes_0 = b"\\\xfa\xb2\xc5\xa4\xa6\x84:QD\x1c8\x84"
    dict_0 = {bool_0: bytes_0}
    dict_1 = {bool_0: bytes_0, bytes_0: dict_0, bytes_0: dict_0}
    dict_2 = {}
    list_0 = [dict_1, dict_2, bool_0, dict_2]
    var_0 = module_0.get(list_0, bytes_0)
    assert var_0 is True
    dict_3 = {}
    none_type_0 = None
    var_1 = module_0.shortest_path_length(none_type_0, dict_3, dict_3)
    assert var_1 == 0
    node_0 = module_1.Node(
        successor=none_type_0, incoming_nodes=dict_3, outgoing_nodes=none_type_0
    )
    str_0 = "'3aY&"
    var_2 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    node_1 = module_1.Node(none_type_0, successors=str_0)
    var_1.predecessors()
