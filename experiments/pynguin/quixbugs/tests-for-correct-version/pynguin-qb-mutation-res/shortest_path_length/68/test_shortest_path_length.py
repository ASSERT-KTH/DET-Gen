# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, bool_0, bool_0)
    assert var_0 == 0
    list_0 = [var_0, var_0]
    tuple_0 = (list_0, var_0, var_0)
    var_1 = module_0.get(tuple_0, bool_0)
    assert var_1 == 0
    module_0.shortest_path_length(var_1, tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -2757
    bytes_0 = b",M\x0e"
    module_0.shortest_path_length(int_0, int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    module_1.nlargest(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = 1163.0
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, float_0, float_0)
    assert var_0 == 0
    list_0 = [var_0, var_0]
    bool_0 = True
    str_0 = "Z;n|r"
    tuple_0 = (list_0, bool_0, str_0)
    module_0.get(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    float_0 = 1163.0
    var_0 = module_0.shortest_path_length(set_0, float_0, float_0)
    assert var_0 == 0
    list_0 = [var_0, bool_0]
    tuple_0 = module_1.merge()
    module_0.insert_or_update(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = 1136.5335708418686
    list_0 = [float_0, float_0]
    tuple_0 = (list_0, list_0, list_0)
    module_0.insert_or_update(tuple_0, list_0)


def test_case_8():
    bool_0 = True
    node_0 = module_2.Node(bool_0, incoming_nodes=bool_0)
    var_0 = module_0.shortest_path_length(bool_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0, bool_0}
    node_0 = module_2.Node(bool_0, successors=set_0)
    module_0.shortest_path_length(bool_0, node_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "Fw"
    bytes_0 = b"\xdc\xd3Zn\x14\xb4\rQ\x02"
    set_0 = {str_0, str_0, bytes_0}
    module_0.insert_or_update(set_0, set_0)
