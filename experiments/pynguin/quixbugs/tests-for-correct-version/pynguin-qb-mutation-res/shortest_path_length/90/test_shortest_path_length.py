# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


def test_case_1():
    str_0 = "l`"
    set_0 = {str_0, str_0, str_0}
    var_0 = module_0.get(set_0, str_0)
    assert var_0 == 0


def test_case_2():
    var_0 = module_1.merge()
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "l`"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, dict_0]
    module_0.insert_or_update(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.shortest_path_length(bool_0, bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "\\v"
    set_0 = {str_0, str_0, str_0}
    module_0.insert_or_update(set_0, str_0)


def test_case_6():
    none_type_0 = None
    node_0 = module_2.Node(incoming_nodes=none_type_0)
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "\ro87["
    node_0 = module_2.Node(
        str_0, successors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    module_0.shortest_path_length(node_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    node_0 = module_2.Node(incoming_nodes=none_type_0)
    dict_0 = {none_type_0: node_0, none_type_0: none_type_0, node_0: node_0}
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    str_0 = "\ro87[S"
    list_0 = [dict_0, node_0, node_0]
    var_1 = module_0.get(list_0, node_0)
    node_1 = module_2.Node(
        str_0, successors=str_0, incoming_nodes=var_1, outgoing_nodes=str_0
    )
    assert node_1.incoming_nodes is None
    module_0.shortest_path_length(node_1, node_1, str_0)
