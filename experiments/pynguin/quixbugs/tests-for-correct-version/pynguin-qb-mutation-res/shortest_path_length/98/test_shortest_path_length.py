# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    int_0 = 287
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x086\t\xb9\x82\xb4\x7fSTe\xf5A\xd7\x85B\x87\xf1\xa4"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"J\xdd\x8c\xac\xcc\x9bn\xb1\xc9e\xe0\xbe"
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


def test_case_3():
    complex_0 = 3413.3 - 615.81708j
    node_0 = module_1.Node(predecessors=complex_0)
    var_0 = module_0.shortest_path_length(complex_0, node_0, complex_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    node_0 = module_1.Node(outgoing_nodes=dict_0)
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    set_0 = {node_0, var_0}
    list_0 = [set_0, set_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    str_0 = "nH$RZ^jRKq/'rTO\x0b@g"
    dict_0 = {bool_0: str_0, bool_0: bool_0, str_0: bool_0}
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    node_0 = module_1.Node(outgoing_nodes=dict_0)
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    set_0 = {var_0, node_0}
    list_0 = [set_0, var_0]
    var_1 = module_0.get(list_0, var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == {}
    var_2 = module_0.get(dict_0, dict_0)
    assert var_2 == 0
    tuple_0 = (var_2, set_0, set_0, var_2)
    module_0.shortest_path_length(tuple_0, dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    dict_0 = {}
    node_0 = module_1.Node(outgoing_nodes=dict_0)
    var_0 = module_0.get(dict_0, node_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(dict_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    set_0 = {var_0, var_1}
    list_0 = [set_0, set_0]
    var_2 = module_0.get(list_0, var_0)
    assert var_2 == 0
    module_0.insert_or_update(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    node_0 = module_1.Node(outgoing_nodes=dict_0)
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    set_0 = {var_0, node_0}
    list_0 = [set_0, var_0]
    var_1 = module_0.insert_or_update(list_0, list_0)
    bool_0 = False
    module_0.shortest_path_length(var_0, bool_0, dict_0)
