# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import heapq as module_0
import shortest_path_length as module_1
import node as module_2


def test_case_0():
    var_0 = module_0.merge()
    var_1 = module_1.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "\rLv!"
    module_1.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    bytes_0 = b"V9 Dq\x07\xd6\xe5\x83\x07\x83\xd3*"
    node_0 = module_2.Node(
        successor=none_type_0,
        successors=bytes_0,
        predecessors=none_type_0,
        outgoing_nodes=none_type_0,
    )
    module_1.shortest_path_length(none_type_0, node_0, bytes_0)


def test_case_3():
    bytes_0 = b"V9 Dq\x07\xd6\xe5\x83\x07\x83\xd3*"
    node_0 = module_2.Node(bytes_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0)
    var_0 = module_1.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "Ui"
    module_1.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    none_type_1 = None
    bytes_0 = b"9 Dq\x07\xbc\xe5\x83\x07\x83\xd3*"
    int_0 = -1832
    dict_0 = {none_type_1: none_type_1, int_0: none_type_1}
    tuple_0 = (dict_0,)
    var_0 = module_1.get(tuple_0, bytes_0)
    assert var_0 == 0
    node_0 = module_2.Node(
        successors=bytes_0, predecessors=none_type_1, outgoing_nodes=bytes_0
    )
    var_1 = module_1.shortest_path_length(node_0, bytes_0, bytes_0)
    assert var_1 == 0
    int_1 = 3504
    var_2 = module_1.shortest_path_length(int_1, var_0, var_0)
    assert var_2 == 0
    var_3 = module_1.shortest_path_length(none_type_0, tuple_0, tuple_0)
    assert var_3 == 0
    module_1.get(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    bytes_0 = b"9 Dq\x07\xd6\xe5\x83\x07\x83\xd3*"
    dict_0 = {none_type_0: none_type_0, bytes_0: none_type_0}
    tuple_0 = (dict_0,)
    var_0 = module_1.get(tuple_0, bytes_0)
    var_1 = module_1.shortest_path_length(var_0, bytes_0, bytes_0)
    assert var_1 == 0
    tuple_0.successor()


def test_case_7():
    str_0 = "Cz"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_1.insert_or_update(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "ur"
    dict_0 = {}
    none_type_0 = None
    var_0 = module_1.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    module_1.insert_or_update(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x04\xc4x|\xc8\x92\x0fJ"
    var_0 = module_1.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    str_0 = "7r"
    dict_0 = {str_0: str_0}
    var_1 = module_1.insert_or_update(dict_0, str_0)
    none_type_0 = None
    bytes_1 = b"9 Dq\x07\xd6\xe5\x83\x07\x83\xd3*"
    node_0 = module_2.Node(
        successors=bytes_1, predecessors=none_type_0, outgoing_nodes=bytes_1
    )
    var_2 = module_1.shortest_path_length(node_0, bytes_1, bytes_1)
    assert var_2 == 0
    module_1.insert_or_update(dict_0, dict_0)
