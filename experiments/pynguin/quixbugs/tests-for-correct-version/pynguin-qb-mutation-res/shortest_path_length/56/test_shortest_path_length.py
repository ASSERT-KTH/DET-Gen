# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    str_0 = "TT\nY\t"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xe6Z\x96_*\xdf\xc4\x15\x19\xe0\x94{"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 851.6
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0
    dict_0 = {var_0: var_0, var_0: float_0, float_0: var_0}
    list_0 = [dict_0, dict_0]
    var_1 = module_0.get(list_0, float_0)
    assert var_1 == 0
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "TY\t"
    node_0 = module_1.Node(successors=str_0, predecessors=str_0)
    module_0.shortest_path_length(node_0, node_0, str_0)


def test_case_5():
    var_0 = module_2.merge()
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = 851.6
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0
    dict_0 = {var_0: var_0, var_0: float_0, float_0: var_0}
    list_0 = [dict_0, dict_0, dict_0]
    var_1 = module_0.get(list_0, list_0)
    assert var_1 == 0
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = 871.2763680504639
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0
    dict_0 = {var_0: var_0, var_0: float_0, float_0: var_0}
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    float_0 = 851.6
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0
    dict_0 = {var_0: var_0, var_0: float_0, float_0: var_0}
    list_0 = [dict_0, dict_0, dict_0]
    var_1 = module_0.get(list_0, float_0)
    assert var_1 == 0
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = 851.6
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0
    dict_0 = {var_0: var_0, var_0: float_0, float_0: var_0}
    list_0 = [dict_0, dict_0, dict_0]
    var_1 = module_0.insert_or_update(list_0, dict_0)
    var_2 = module_0.get(list_0, var_1)
    assert var_2 == 0
    module_0.insert_or_update(list_0, list_0)


def test_case_10():
    str_0 = "TY\t"
    node_0 = module_1.Node(str_0)
    var_0 = module_0.shortest_path_length(str_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
