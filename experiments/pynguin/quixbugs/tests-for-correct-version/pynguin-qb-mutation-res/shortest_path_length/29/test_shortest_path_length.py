# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xd9\x8f\xb0\xdf\x1e\xb6\r\xed\xe0"
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_0.get(tuple_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "`R`?KQ@\n{bB|2(!_;"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.insert_or_update(tuple_0, tuple_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node()
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    list_0 = []
    var_0 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_0 == 0
    float_0 = 515.216
    dict_0 = {
        float_0: float_0,
        float_0: float_0,
        var_0: var_0,
        float_0: float_0,
        float_0: float_0,
    }
    var_1 = module_0.insert_or_update(list_0, dict_0)
    module_0.insert_or_update(dict_0, dict_0)


def test_case_6():
    str_0 = "|;)9"
    bytes_0 = b"\xda>=\xb0\x8fZ]\xd4\x90\xec\x9bt\xc5\xb1+\x04\xb2"
    tuple_0 = (str_0, bytes_0)
    set_0 = {tuple_0}
    none_type_0 = None
    var_0 = module_0.get(set_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, bool_0}
    tuple_1 = (tuple_0, set_0, bool_0)
    module_0.insert_or_update(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    node_0 = module_1.Node(predecessors=list_0, incoming_nodes=list_0)
    var_0 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.get(list_0, list_0)
    assert var_1 == 0
    float_0 = 515.216
    var_2 = module_0.shortest_path_length(list_0, node_0, var_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {
        float_0: float_0,
        float_0: float_0,
        var_1: var_1,
        float_0: float_0,
        float_0: float_0,
    }
    var_3 = module_0.insert_or_update(list_0, dict_0)
    assert len(node_0.predecessors) == 1
    assert len(node_0.incoming_nodes) == 1
    var_4 = module_0.get(list_0, var_3)
    assert var_4 == 0
    var_5 = module_0.get(list_0, var_4)
    assert var_5 == pytest.approx(515.216, abs=0.01, rel=0.01)
    var_1.successor()


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    node_0 = module_1.Node(predecessors=list_0, incoming_nodes=list_0)
    var_0 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_0 == 0
    float_0 = 515.216
    var_1 = module_0.shortest_path_length(list_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {
        float_0: float_0,
        float_0: float_0,
        node_0: node_0,
        float_0: float_0,
        float_0: float_0,
    }
    var_2 = module_0.insert_or_update(list_0, dict_0)
    assert len(node_0.predecessors) == 1
    assert len(node_0.incoming_nodes) == 1
    list_1 = [var_0, var_1]
    module_0.insert_or_update(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\xfe5|"
    node_0 = module_1.Node(successors=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)
