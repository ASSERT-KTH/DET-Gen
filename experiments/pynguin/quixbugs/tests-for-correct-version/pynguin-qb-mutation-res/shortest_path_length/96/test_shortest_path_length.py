# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2
import builtins as module_3


def test_case_0():
    float_0 = 3126.0
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    float_0 = 1248.13787
    set_0 = {bool_0, float_0, float_0, bool_0}
    list_0 = [set_0, float_0, bool_0]
    module_0.get(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    list_0 = [bool_0]
    node_0 = module_1.Node(bool_0, successors=list_0, predecessors=bool_0)
    module_0.shortest_path_length(list_0, node_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    str_0 = "vtZuc]l1JZX"
    dict_0 = {bool_0: str_0, str_0: bool_0, bool_0: bool_0}
    module_0.insert_or_update(dict_0, dict_0)


def test_case_4():
    int_0 = -1451
    node_0 = module_1.Node(int_0, incoming_nodes=int_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, int_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    list_0 = []
    var_0 = module_2.merge(*list_0, key=list_0)
    bytes_0 = b"\x8d^"
    dict_0 = {bytes_0: list_0}
    tuple_0 = (var_0, dict_0)
    module_0.insert_or_update(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(bool_0, list_0, list_0)
    assert var_1 == 0
    list_1 = [list_0]
    str_0 = "\\%\r\\\\"
    float_0 = 1338.239803155736
    var_2 = module_0.insert_or_update(list_1, list_0)
    node_0 = module_1.Node(list_1, successors=list_0, predecessors=float_0)
    assert node_0.value == [[False, False]]
    module_0.shortest_path_length(str_0, node_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0]
    set_0 = set()
    var_0 = module_0.get(list_1, bool_0)
    assert var_0 is False
    none_type_0 = None
    node_0 = module_1.Node(successor=set_0, predecessors=none_type_0)
    complex_0 = -3915.1401345788636 - 1220j
    var_1 = module_0.shortest_path_length(complex_0, complex_0, complex_0)
    assert var_1 == 0
    float_0 = 2938.8632130832484
    var_2 = module_0.shortest_path_length(var_1, node_0, float_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    object_0 = module_3.object()
    module_0.insert_or_update(var_1, node_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    bytes_0 = b"\x8d^"
    dict_0 = {bytes_0: list_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.insert_or_update(tuple_0, tuple_0)
