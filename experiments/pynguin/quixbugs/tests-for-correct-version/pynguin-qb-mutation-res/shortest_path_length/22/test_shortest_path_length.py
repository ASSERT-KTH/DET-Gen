# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '*zU,N"2'
    module_0.get(str_0, str_0)


def test_case_2():
    str_0 = ")!"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    var_0 = module_0.get(dict_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -4162
    module_0.get(int_0, int_0)


def test_case_4():
    dict_0 = {}
    node_0 = module_1.Node(successor=dict_0, successors=dict_0, predecessors=dict_0)
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x1a\xce"
    bytes_1 = b"*V\x1d!\x03\xe2\x94"
    module_0.insert_or_update(bytes_1, bytes_0)


def test_case_6():
    str_0 = ")!"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.get(dict_0, str_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(dict_0, var_0, var_0)
    assert var_1 == 0
    var_2 = module_0.insert_or_update(dict_0, str_0)
    none_type_0 = None
    var_3 = module_0.shortest_path_length(str_0, none_type_0, none_type_0)
    assert var_3 == 0
    node_0 = module_1.Node(var_3, str_0, incoming_nodes=var_0)
    assert node_0.value == 0
    assert node_0.incoming_nodes == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    list_0 = [dict_0, dict_0]
    module_0.insert_or_update(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    tuple_0 = (none_type_0, none_type_0, none_type_0)
    node_0 = module_1.Node(
        successor=none_type_0, successors=tuple_0, predecessors=none_type_0
    )
    module_0.shortest_path_length(node_0, node_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "z9"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.insert_or_update(dict_0, str_0)
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -942
    set_0 = {int_0, int_0, int_0}
    bytes_0 = b"\x9cL\x0bP\x88t\xcc"
    bool_0 = False
    tuple_0 = (bytes_0, int_0, bool_0)
    bool_1 = True
    dict_0 = {bytes_0: set_0, int_0: bool_1, bytes_0: set_0, int_0: bytes_0}
    tuple_1 = (dict_0, dict_0, dict_0)
    var_0 = module_0.get(tuple_1, int_0)
    assert var_0 == b"\x9cL\x0bP\x88t\xcc"
    int_1 = -450
    tuple_2 = (set_0, tuple_0, bool_1, int_1)
    module_0.insert_or_update(tuple_2, int_1)
