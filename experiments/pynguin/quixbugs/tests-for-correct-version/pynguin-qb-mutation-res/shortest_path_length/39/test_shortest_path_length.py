# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import builtins as module_2
import heapq as module_3


def test_case_0():
    complex_0 = -1977.6 - 1163j
    var_0 = module_0.shortest_path_length(complex_0, complex_0, complex_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "y0'1"
    module_0.get(str_0, str_0)


def test_case_2():
    bytes_0 = b"\xbe["
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


def test_case_4():
    dict_0 = {}
    node_0 = module_1.Node(successor=dict_0, predecessors=dict_0)
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_0.get(dict_0, none_type_0)
    assert var_0 == 0


def test_case_6():
    bytes_0 = b"\xbe["
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    dict_0 = {}
    node_0 = module_1.Node(successor=dict_0, predecessors=dict_0)
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    str_0 = "%5"
    module_0.insert_or_update(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    object_0 = module_2.object()
    list_0 = [object_0, object_0]
    list_1 = [list_0]
    var_0 = module_0.get(list_1, object_0)
    module_0.get(var_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    dict_0 = {}
    bytes_0 = b"?\r\x83\x9a\x85KP\x02\xf0\xee/\xc3I\x08]\x0fm"
    node_0 = module_1.Node(
        dict_0, successors=bytes_0, predecessors=dict_0, incoming_nodes=bytes_0
    )
    module_0.shortest_path_length(dict_0, node_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"MS"
    bytes_1 = b"\xdbi"
    list_0 = [bytes_0, bytes_1, bytes_1, bytes_1, bytes_1, bytes_1]
    var_0 = module_0.insert_or_update(list_0, bytes_1)
    var_1 = module_3.merge()
    node_0 = module_1.Node(list_0, outgoing_nodes=var_0)
    assert node_0.value == [b"MS", b"\xdbi", b"\xdbi", b"\xdbi", b"\xdbi", b"\xdbi"]
    var_2 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    module_0.shortest_path_length(var_2, var_0, var_1)
