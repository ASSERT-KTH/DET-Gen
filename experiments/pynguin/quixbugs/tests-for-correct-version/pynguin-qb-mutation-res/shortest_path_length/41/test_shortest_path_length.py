# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xe0\xfd"
    none_type_0 = None
    module_0.get(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"C\x1c\x12w\x16Y\xbc\x0b\xc0\x88\xb2\x8c}f\xfdB"
    node_0 = module_1.Node(successors=bytes_0)
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -561
    module_0.insert_or_update(int_0, int_0)


def test_case_4():
    bytes_0 = b"C\x1c\x12w\x16Y\xbc\x0b\xc0\x88\xb2\x8c}f\xfdB"
    node_0 = module_1.Node(
        predecessors=bytes_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0
    )
    var_0 = module_0.shortest_path_length(node_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "A-"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    var_0 = module_2.merge(*list_0, key=list_0, reverse=list_0)
    float_0 = 69.928
    list_1 = [float_0, float_0]
    var_1 = module_0.shortest_path_length(list_1, list_1, list_1)
    assert var_1 == 0
    module_0.insert_or_update(var_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xd0\xfc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)
    module_0.get(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    var_0 = module_2.merge(*list_0, key=list_0, reverse=list_0)
    set_0 = set()
    var_1 = module_0.get(var_0, set_0)
    assert var_1 == 0
    list_1 = [var_1, var_1]
    var_2 = module_0.shortest_path_length(list_1, list_1, list_1)
    assert var_2 == 0
    list_2 = [list_1, list_1, list_1]
    var_3 = module_0.get(list_2, var_2)
    assert var_3 == 0
    module_0.get(var_2, var_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"C\x1c\x12w\x16Y\xbc\x0b\xc0\x88\xb2\x8c}f\xfdB"
    none_type_0 = None
    var_0 = module_0.shortest_path_length(bytes_0, none_type_0, none_type_0)
    assert var_0 == 0
    bytes_1 = b"\xd0\xfc"
    dict_0 = {bytes_1: bytes_1, bytes_1: bytes_1, bytes_1: bytes_1, bytes_1: bytes_1}
    var_1 = module_0.insert_or_update(dict_0, bytes_1)
    list_0 = [dict_0, var_0]
    dict_1 = {var_1: list_0, var_0: var_0}
    module_0.insert_or_update(dict_0, dict_1)
