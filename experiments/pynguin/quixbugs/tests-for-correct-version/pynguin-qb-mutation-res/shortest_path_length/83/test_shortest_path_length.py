# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"L\xb0\x12\xa5g\xa4\xc7\x1dp-\x03\xa9\x08\xf1\x11\x0e\xf6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get(dict_0, bytes_0)


def test_case_2():
    list_0 = []
    none_type_0 = None
    var_0 = module_0.get(list_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.get(bool_0, bool_0)


def test_case_4():
    list_0 = []
    node_0 = module_1.Node(list_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "f9"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    var_0 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_0 == 0
    tuple_0 = (var_0, var_0)
    var_1 = module_0.insert_or_update(list_0, tuple_0)
    var_2 = module_0.insert_or_update(list_0, tuple_0)
    var_3 = module_0.get(list_0, var_1)
    assert var_3 == 0
    module_0.shortest_path_length(var_3, tuple_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    tuple_0 = (var_0, var_0)
    node_0 = module_1.Node(var_0, successors=tuple_0, predecessors=list_0)
    assert node_0.value == 0
    assert node_0.successors == (0, 0)
    module_0.shortest_path_length(node_0, node_0, tuple_0)


def test_case_8():
    list_0 = []
    tuple_0 = (list_0, list_0)
    var_0 = module_0.insert_or_update(list_0, tuple_0)
    var_1 = module_0.insert_or_update(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    tuple_0 = (list_0, list_0)
    var_0 = module_0.insert_or_update(list_0, tuple_0)
    var_1 = module_0.get(list_0, list_0)
    module_0.get(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    list_0 = []
    var_0 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_0 == 0
    tuple_0 = (var_0, var_0)
    var_1 = module_0.insert_or_update(list_0, tuple_0)
    tuple_1 = (var_0, var_0, var_1, var_1)
    tuple_2 = (list_0, tuple_1)
    module_0.insert_or_update(list_0, tuple_2)
