# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    module_0.insert_or_update(tuple_0, tuple_0)


def test_case_3():
    bytes_0 = b"\xdfAm\xfa 7\x07md\x9bc\x80\xca"
    node_0 = module_1.Node(predecessors=bytes_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_4():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_0.get(tuple_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_6():
    bytes_0 = b"\x0co1\x88\xc1\xaf\xd8\xec\xb5\xb2i\xec\xb7\xe1\x8e\x7f\xb8\x03*"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    var_1 = module_2.nsmallest(var_0, bytes_0)
    list_0 = [var_0, var_0]
    var_2 = module_0.insert_or_update(var_1, list_0)
    var_3 = module_0.insert_or_update(var_1, list_0)


def test_case_7():
    str_0 = "}{"
    tuple_0 = (str_0,)
    var_0 = module_0.get(tuple_0, str_0)
    assert var_0 == 0
    none_type_0 = None
    var_1 = module_0.get(tuple_0, none_type_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xdf\xfa]7\x07md\x9bc\x80\xca"
    node_0 = module_1.Node(bytes_0, successors=bytes_0, predecessors=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


def test_case_9():
    bytes_0 = b"\x0co1\x88\xc1\xaf\xca\xec\xb5\xb2i\xec\xb7\xe1\x8e\x7f\xb8\x03*"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    var_1 = module_2.nsmallest(var_0, bytes_0)
    node_0 = module_1.Node(successor=var_0)
    assert node_0.successor == 0
    var_2 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    list_0 = [var_0, node_0]
    var_3 = module_0.insert_or_update(var_1, list_0)
    var_4 = module_0.get(var_1, node_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x0co1\x88\xc1\xaf\xca\xec\xb5\xb2i\xec\xb7\xe1\x8e\x7f\xb8\x03*"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    var_1 = module_2.nsmallest(var_0, bytes_0)
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0)
    var_2 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    list_0 = [var_0, var_1]
    var_3 = module_0.insert_or_update(var_1, list_0)
    dict_0 = {var_2: var_2, node_0: bytes_0}
    module_0.insert_or_update(var_1, dict_0)
