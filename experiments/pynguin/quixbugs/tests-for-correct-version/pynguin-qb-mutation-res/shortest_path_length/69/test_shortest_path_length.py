# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"+\x02kG\xa2\x997\x01\t\n\xb7%\xc0k\xcf."
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"+\x02kG\xa2\x997\x01\t\n\xb7%\xc0k\xcf."
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"B\xc6"
    node_0 = module_1.Node(bytes_0, bytes_0, bytes_0, incoming_nodes=bytes_0)
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xb4\x04"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


def test_case_5():
    list_0 = []
    node_0 = module_1.Node(list_0, list_0, incoming_nodes=list_0)
    var_0 = module_0.shortest_path_length(list_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_6():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    list_0 = []
    tuple_0 = (var_0, list_0)
    var_1 = module_0.insert_or_update(list_0, tuple_0)
    var_2 = module_0.insert_or_update(list_0, tuple_0)
    node_0 = module_1.Node(set_0, list_0, incoming_nodes=var_2)
    assert len(node_0.successor) == 1


def test_case_7():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    list_0 = []
    bytes_0 = b"+\x02kG\xa2\x99L\x01\t\n\x17%\xc0k\xcf."
    tuple_0 = (var_0, list_0)
    var_1 = module_0.insert_or_update(list_0, tuple_0)
    node_0 = module_1.Node(set_0, list_0, incoming_nodes=bytes_0)
    var_2 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_3 = module_0.get(list_0, set_0)
    assert var_3 == 0


def test_case_8():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    list_0 = []
    bytes_0 = b"+\x02kG\xa2\x99L\x01\t\n\x17%\xc0k\xcf."
    tuple_0 = (var_0, list_0)
    var_1 = module_0.insert_or_update(list_0, tuple_0)
    node_0 = module_1.Node(set_0, list_0, incoming_nodes=bytes_0)
    var_2 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_3 = module_0.get(list_0, list_0)
    assert var_3 == 0


@pytest.mark.xfail(strict=True)
def test_case_9():
    set_0 = set()
    none_type_0 = None
    var_0 = module_0.get(set_0, none_type_0)
    assert var_0 == 0
    var_1 = module_0.get(set_0, set_0)
    assert var_1 == 0
    list_0 = []
    tuple_0 = (var_1, list_0)
    var_2 = module_0.insert_or_update(list_0, tuple_0)
    node_0 = module_1.Node(successors=tuple_0, incoming_nodes=tuple_0)
    node_1 = module_1.Node(set_0, list_0, incoming_nodes=var_1)
    assert node_1.incoming_nodes == 0
    var_3 = module_0.shortest_path_length(list_0, node_1, tuple_0)
    assert var_3 == pytest.approx(1e309, abs=0.01, rel=0.01)
    tuple_1 = (node_1, set_0)
    module_0.insert_or_update(list_0, tuple_1)
