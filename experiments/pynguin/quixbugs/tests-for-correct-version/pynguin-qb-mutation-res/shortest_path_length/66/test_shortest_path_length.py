# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    int_0 = 310
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xe0M\xee\xb9\xad/[\xcc\xc0\x1b"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "\nQkR'Xi_q@!KzISGuk`"
    node_0 = module_1.Node(successors=str_0, outgoing_nodes=str_0)
    module_0.shortest_path_length(node_0, node_0, str_0)


def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, none_type_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"z\xe3"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "pR"
    set_0 = {str_0}
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    module_0.insert_or_update(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    var_1 = module_2.merge()
    dict_0 = {var_1: none_type_0, none_type_0: var_1}
    module_0.insert_or_update(var_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "pR"
    set_0 = {str_0}
    module_0.insert_or_update(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: bool_0, bool_0: bool_0}
    var_0 = module_0.get(dict_0, bool_0)
    assert var_0 is True
    module_0.get(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "pR"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    dict_0 = {str_0: var_0, var_0: var_0}
    module_0.insert_or_update(dict_0, dict_0)
