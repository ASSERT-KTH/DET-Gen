# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'*\x94\xbf\xe9\xb6\x14\x14\x9boh\x01"\x8a\x1c'
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'*\x94\xbf\xe9\xb6I\x14\x14\x9boh\x01"\x8a\x1c'
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0
    )
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b'\xc8\xf7\x86"\\\x1d~\x9e \x07\xd8\xea\xb5\xfe\xf1p'
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    module_0.shortest_path_length(var_0, var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 1
    tuple_0 = (int_0, int_0)
    tuple_1 = (tuple_0, int_0)
    module_0.get(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x19\x95"
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_7():
    bytes_0 = b'*\x94\xbf\xe9[I\x14\x14\x9boh\x01"\x8a\x1c'
    node_0 = module_1.Node(predecessors=bytes_0, outgoing_nodes=bytes_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_8():
    int_0 = 1
    tuple_0 = (int_0, int_0)
    tuple_1 = (tuple_0, int_0)
    var_0 = module_0.get(tuple_1, int_0)
    assert var_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 1
    tuple_0 = (int_0, int_0)
    tuple_1 = (tuple_0, int_0)
    module_0.insert_or_update(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 1
    tuple_0 = (int_0, int_0)
    tuple_1 = (tuple_0, int_0)
    list_0 = [int_0, tuple_1]
    tuple_2 = (list_0,)
    module_0.insert_or_update(tuple_2, tuple_0)
