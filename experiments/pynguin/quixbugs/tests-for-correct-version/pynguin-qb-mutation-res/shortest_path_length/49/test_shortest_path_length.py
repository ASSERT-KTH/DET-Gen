# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'q1\x03\xc4\x11\x96\xa1v\x97"'
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    list_0 = []
    list_1 = [list_0, list_0]
    list_2 = [list_1]
    var_0 = module_0.insert_or_update(list_2, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 1566.3312
    module_0.insert_or_update(float_0, float_0)


def test_case_4():
    bool_0 = True
    node_0 = module_1.Node(predecessors=bool_0)
    var_0 = module_0.shortest_path_length(bool_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    bytes_0 = b"\x05\xc1\xf9\xd7\xd2\x81ln"
    node_0 = module_1.Node(
        successor=none_type_0,
        successors=bytes_0,
        predecessors=bytes_0,
        incoming_nodes=none_type_0,
        outgoing_nodes=none_type_0,
    )
    module_0.shortest_path_length(node_0, node_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    list_1 = [list_0, list_0]
    list_2 = [list_1]
    var_0 = module_0.get(list_2, list_0)
    module_0.insert_or_update(list_0, list_2)


@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    list_1 = [list_0, list_0]
    list_2 = [list_1, list_1]
    float_0 = -1606.76
    float_1 = 2153.76006
    var_0 = module_0.insert_or_update(list_2, list_2)
    module_0.get(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    list_1 = [list_0, list_0]
    list_2 = [list_1]
    float_0 = -1606.76
    var_0 = module_0.get(list_2, float_0)
    assert var_0 == 0
    module_0.insert_or_update(var_0, var_0)
