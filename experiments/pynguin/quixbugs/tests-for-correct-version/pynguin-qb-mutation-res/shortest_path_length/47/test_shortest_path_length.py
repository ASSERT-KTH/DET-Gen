# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    var_0 = module_0.shortest_path_length(dict_0, dict_0, dict_0)
    assert var_0 == 0
    bytes_0 = b"\xb9p \x1fJ\xebM"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.insert_or_update(bool_0, bool_0)


def test_case_3():
    bytes_0 = b"D2 '\xae\xe8.\xa6\xcdFX\xc2X\x96X"
    node_0 = module_1.Node(predecessors=bytes_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"D2 '\xae\xe8\xa6\xcdFX\xc2\xdcX\x96"
    node_0 = module_1.Node(successors=bytes_0, predecessors=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = 3158.2
    tuple_0 = (float_0, float_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    var_0 = module_0.shortest_path_length(dict_0, dict_0, dict_0)
    assert var_0 == 0
    var_1 = module_0.get(dict_0, var_0)
    assert var_1 == 0
    bytes_0 = b"}\x0cv\x11\xcfF|"
    tuple_0 = (var_1, bytes_0)
    module_0.insert_or_update(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    bytes_0 = b"\x0e\x1cPa\xb6Ya\xc2\xc5g"
    var_0 = module_0.shortest_path_length(bytes_0, bool_0, bool_0)
    assert var_0 == 0
    tuple_0 = (bool_0, var_0)
    dict_0 = {tuple_0: bool_0, bool_0: tuple_0, bool_0: tuple_0}
    tuple_1 = (dict_0,)
    module_0.insert_or_update(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    list_0 = [tuple_1, tuple_0]
    module_0.get(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    bytes_0 = b"\x0e\x1cPa\xb6Ya\xc2\xc5g"
    var_0 = module_0.shortest_path_length(bytes_0, bool_0, bool_0)
    assert var_0 == 0
    tuple_0 = (bool_0, var_0)
    dict_0 = {tuple_0: bool_0, bool_0: tuple_0, bool_0: tuple_0}
    tuple_1 = (dict_0,)
    module_0.insert_or_update(tuple_1, tuple_0)


def test_case_10():
    node_0 = module_1.Node()
    complex_0 = -1823.8987 + 3632.67j
    bool_0 = True
    tuple_0 = (complex_0, bool_0)
    list_0 = [tuple_0, complex_0]
    var_0 = module_0.get(list_0, bool_0)
    assert var_0 == (-1823.8987 + 3632.67j)
