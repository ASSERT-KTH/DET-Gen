# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"B4\xf4tFKh\x87\x0c\xdf"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xef\x98\xd0\xd4%X\xcf\xcc"
    none_type_0 = None
    module_0.shortest_path_length(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_1.Node(successors=list_0, predecessors=list_0)
    none_type_0 = None
    module_0.shortest_path_length(list_0, node_0, none_type_0)


def test_case_5():
    node_0 = module_1.Node()
    none_type_0 = None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xdf-"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)
    var_1 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0
    node_0 = module_1.Node(var_0, var_1)
    assert node_0.successor == 0
    module_0.get(dict_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xdf-"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)
    str_0 = "R67Y{qzOU("
    list_0 = []
    node_0 = module_1.Node(predecessors=str_0, incoming_nodes=list_0)
    var_1 = module_0.shortest_path_length(str_0, list_0, list_0)
    assert var_1 == 0
    node_1 = module_1.Node(str_0, var_1)
    assert node_1.successor == 0
    var_2 = module_0.insert_or_update(list_0, dict_0)
    module_0.get(node_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xdf-"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)
    list_0 = []
    var_1 = module_2.merge(key=dict_0)
    var_2 = module_0.shortest_path_length(var_0, list_0, list_0)
    assert var_2 == 0
    var_3 = module_0.get(var_1, list_0)
    assert var_3 == 0
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    set_0 = set()
    tuple_0 = (bool_0, set_0)
    list_0 = [tuple_0, set_0, tuple_0]
    var_0 = module_0.get(list_0, set_0)
    assert var_0 is False
    module_0.get(list_0, bool_0)
