# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    float_0 = -538.966
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x9b\xe8\xec\x9f"
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    bytes_0 = b""
    var_0 = module_0.get(bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    bytes_0 = b"\x05\x86\xef7>"
    module_0.shortest_path_length(none_type_0, none_type_0, bytes_0)


def test_case_4():
    list_0 = []
    node_0 = module_1.Node(successor=list_0, predecessors=list_0)
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {var_1: node_0, node_0: var_0}
    var_2 = module_0.insert_or_update(list_0, dict_0)
    assert len(node_0.successor) == 1
    assert len(node_0.predecessors) == 1


def test_case_5():
    bytes_0 = b"\xd2B"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)


def test_case_6():
    bytes_0 = b"\xd2B"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0
    set_0 = set()
    var_2 = module_0.get(set_0, set_0)
    assert var_2 == 0


def test_case_7():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, outgoing_nodes=none_type_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    list_1 = [list_0, list_0]
    var_0 = module_0.insert_or_update(list_0, list_1)
    node_0 = module_1.Node(successor=list_0, predecessors=list_0)
    var_1 = module_0.get(list_0, list_0)
    var_2 = module_0.shortest_path_length(list_0, node_0, list_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {node_0: node_0, node_0: node_0}
    module_0.insert_or_update(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    list_1 = [list_0, list_0]
    var_0 = module_0.insert_or_update(list_0, list_1)
    var_1 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_1 == 0
    node_0 = module_1.Node(successor=var_1, predecessors=var_1)
    assert node_0.successor == 0
    assert node_0.predecessors == 0
    var_2 = module_0.get(list_0, list_0)
    var_3 = module_0.shortest_path_length(var_1, node_0, var_1)
    assert var_3 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {var_1: node_0, node_0: var_1}
    module_0.insert_or_update(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    float_0 = -105.363
    tuple_0 = (float_0,)
    node_0 = module_1.Node(
        successor=tuple_0,
        successors=tuple_0,
        predecessors=tuple_0,
        incoming_nodes=float_0,
    )
    module_0.shortest_path_length(tuple_0, node_0, tuple_0)
