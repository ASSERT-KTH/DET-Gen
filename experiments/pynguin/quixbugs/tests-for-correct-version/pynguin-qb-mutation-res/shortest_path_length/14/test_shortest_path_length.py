# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    str_0 = "|:qkK;Ra\\D\r4l>m\ti+"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "|:qkK;Ra\\D\r4l>m\ti+"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"c\x85\xee\x1d\xd7\xfb\xf9g\xcd*"
    node_0 = module_1.Node(
        bytes_0, successors=bytes_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0
    )
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    none_type_0 = None
    module_0.shortest_path_length(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "&p"
    module_0.insert_or_update(str_0, str_0)


def test_case_6():
    set_0 = set()
    node_0 = module_1.Node()
    dict_0 = module_0.shortest_path_length(set_0, node_0, set_0)
    assert dict_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\\M\xc8\xae\x01T\xdb\x0ft\x90\x87\xc8\x0b\xcfV\xfef\x0c\x12"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    set_0 = {bytes_0, bytes_0, var_0, var_0}
    int_0 = 2759
    tuple_0 = (set_0, int_0)
    module_0.get(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\\\xc8\xae\x01T\xdb\x0ft\x90\x87\xc8\x0b\xcfV\xfef\x0c"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    set_0 = {bytes_0, bytes_0, var_0, var_0}
    tuple_0 = (set_0, var_0)
    module_0.insert_or_update(tuple_0, tuple_0)


def test_case_9():
    bytes_0 = b"\\M\xc8\xae\x01T\xdb\x0ft\x90\x87\xc8\x0b\xcfV\xfef\x0c\x12"
    var_0 = module_1.Node(successor=bytes_0)
    set_0 = {bytes_0, var_0, var_0, var_0}
    int_0 = 2759
    tuple_0 = (set_0, int_0)
    dict_0 = {}
    var_1 = module_0.get(dict_0, set_0)
    assert var_1 == 0
    module_0.get(tuple_0, var_0)
    tuple_1 = (var_0,)
    var_3 = module_0.shortest_path_length(var_2, tuple_1, var_2)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\\\xae\x01T\xdb\x0ft\x90\x87\x0b\xcf\xfef\x0c"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    set_0 = {bytes_0, bytes_0, var_0, bytes_0, var_0}
    tuple_0 = (set_0, var_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\\M\xc8\xae\x01T\xdb\x0ft\x90\x87\xc8\x0b\xcfV\xfef\x0c\x12"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    set_0 = {bytes_0, bytes_0, var_0, var_0}
    dict_0 = {}
    var_1 = module_0.get(dict_0, set_0)
    assert var_1 == 0
    module_0.insert_or_update(dict_0, set_0)
