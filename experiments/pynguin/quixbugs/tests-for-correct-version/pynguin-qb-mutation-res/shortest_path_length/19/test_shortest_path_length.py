# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = 3628.84552 - 1906j
    tuple_0 = (complex_0, complex_0, complex_0)
    module_0.get(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xe6u"
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, incoming_nodes=bytes_0
    )
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    module_0.shortest_path_length(bool_0, bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    bytes_0 = b"\x8d\xcc"
    module_0.insert_or_update(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"OU"
    tuple_0 = (bytes_0,)
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    dict_0 = {}
    var_1 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(var_1, dict_0, dict_0)
    assert var_2 == 0
    list_0 = [var_2, bytes_0, tuple_0, dict_0]
    module_0.insert_or_update(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xaaM"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    tuple_0 = (bytes_0,)
    var_1 = module_0.get(tuple_0, var_0)
    assert var_1 == 0
    module_0.insert_or_update(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"OU"
    dict_0 = {}
    var_0 = module_0.shortest_path_length(dict_0, dict_0, dict_0)
    assert var_0 == 0
    list_0 = [bytes_0, dict_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_10():
    bytes_0 = b""
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, incoming_nodes=bytes_0
    )
    var_0 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 2242
    list_0 = [int_0, int_0]
    list_1 = [list_0, int_0, int_0]
    var_0 = module_0.get(list_1, int_0)
    assert var_0 == 2242
    bytes_0 = b"u"
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, incoming_nodes=bytes_0
    )
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)
