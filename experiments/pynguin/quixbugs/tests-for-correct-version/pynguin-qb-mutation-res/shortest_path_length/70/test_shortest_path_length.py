# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"-n\xf3.&\x9cd\xe4?"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xa6`\x81\x02\x91}x\xb3\xbd"
    node_0 = module_1.Node(bytes_0, successors=bytes_0, outgoing_nodes=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    str_0 = "^g'+%\ry*Ld|L.HC"
    module_0.shortest_path_length(none_type_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xf1\x1c"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    list_0 = [var_0, set_0]
    module_0.insert_or_update(set_0, list_0)


def test_case_6():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, predecessors=none_type_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "^b|(OQm!;E>PUN$"
    float_0 = 1530.9
    dict_0 = {float_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    var_0 = module_2.merge(reverse=dict_0)
    node_0 = module_1.Node(successor=var_0, successors=var_0)
    var_1 = module_0.get(list_0, float_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(node_0, node_0, var_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    module_0.insert_or_update(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xdf\x8d"
    dict_0 = {bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "^b|(OQm!;E>PUN$"
    float_0 = 1530.9
    dict_0 = {str_0: float_0, float_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    node_0 = module_1.Node(successor=str_0, successors=str_0)
    var_0 = module_0.get(list_0, float_0)
    assert var_0 == "^b|(OQm!;E>PUN$"
    module_0.shortest_path_length(node_0, node_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "^b|(OQm!;E>PUN$"
    float_0 = 1530.9
    dict_0 = {str_0: float_0, float_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    var_0 = module_2.merge(reverse=dict_0)
    node_0 = module_1.Node(successor=var_0, successors=var_0)
    var_1 = module_0.shortest_path_length(node_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    bytes_0 = b"\xf1\x1c"
    module_0.insert_or_update(list_0, bytes_0)
