# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


def test_case_1():
    str_0 = "TL"
    tuple_0 = (str_0,)
    var_0 = module_0.get(tuple_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.get(bool_0, bool_0)


def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(
        none_type_0,
        none_type_0,
        predecessors=none_type_0,
        incoming_nodes=none_type_0,
        outgoing_nodes=none_type_0,
    )
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"b\xf9:\x99\xd0\x8fbA\xcbx\x1a\xd7\x08\x05\xf0P\xa8"
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0
    )
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


def test_case_5():
    int_0 = 3146
    bool_0 = True
    set_0 = {int_0, int_0, bool_0, int_0}
    list_0 = [set_0, set_0]
    var_0 = module_0.insert_or_update(list_0, set_0)
    object_0 = module_2.object()
    object_1 = module_2.object()


@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    list_0 = [var_0, var_0]
    var_1 = module_0.shortest_path_length(list_0, var_0, var_0)
    assert var_1 == 0
    module_0.insert_or_update(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "y9"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, set_0]
    module_0.insert_or_update(set_0, list_0)


def test_case_8():
    int_0 = -2299
    bytes_0 = b"O4\xa6\x1d\xd5$\x1d\x9d\xd9\x17\x80\xc6\x1c\xa92\xc0"
    tuple_0 = (int_0, int_0, bytes_0)
    bool_0 = False
    dict_0 = {tuple_0: tuple_0, tuple_0: bool_0, int_0: int_0}
    list_0 = [dict_0]
    var_0 = module_0.get(list_0, int_0)
