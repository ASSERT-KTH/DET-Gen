# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "Z=g"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "J/2?@/ [kqt/Q#"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    complex_0 = -1631.9325 - 1278.79j
    module_0.shortest_path_length(bool_0, complex_0, bool_0)


def test_case_4():
    bool_0 = False
    node_0 = module_1.Node(outgoing_nodes=bool_0)
    var_0 = module_0.shortest_path_length(bool_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    var_0 = module_2.merge()
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"]("
    set_0 = {bytes_0, bytes_0, bytes_0}
    var_0 = module_0.get(set_0, bytes_0)
    assert var_0 == 0
    node_0 = module_1.Node(outgoing_nodes=var_0)
    assert node_0.outgoing_nodes == 0
    list_0 = []
    var_1 = module_0.shortest_path_length(var_0, node_0, list_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    none_type_0 = None
    module_0.shortest_path_length(var_1, none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"]("
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"]("
    set_0 = {bytes_0, bytes_0, bytes_0}
    bool_0 = False
    var_0 = module_2.nlargest(bool_0, set_0)
    var_1 = module_0.insert_or_update(var_0, bytes_0)
    var_1.successor()


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"]("
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.insert_or_update(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"l\x0c"
    node_0 = module_1.Node(successors=bytes_0, outgoing_nodes=bytes_0)
    list_0 = []
    module_0.shortest_path_length(bytes_0, node_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"'\x06"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [bytes_0, set_0]
    module_0.insert_or_update(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0]
    var_0 = module_0.get(list_1, bool_0)
    assert var_0 is True
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.get(none_type_0, dict_0)
