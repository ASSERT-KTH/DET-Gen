# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    str_0 = "WlpI"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "WlpI"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    node_0 = module_1.Node(bool_0, successors=dict_0, predecessors=dict_0)
    module_0.shortest_path_length(node_0, node_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = -895.0
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0
    module_0.shortest_path_length(float_0, var_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "8U"
    module_0.insert_or_update(str_0, str_0)


def test_case_6():
    node_0 = module_1.Node()
    none_type_0 = None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_7():
    bytes_0 = b"\xef\x9d"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


def test_case_8():
    bytes_0 = b"\xef\x9d"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x8e\x10"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.shortest_path_length(bytes_0, list_0, list_0)
    assert var_0 == 0
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    bytes_0 = b"\x8e\x10"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, bool_0, bytes_0]
    var_0 = module_0.get(list_1, bytes_0)
    assert var_0 == b"\x8e\x10"
    node_0 = module_1.Node(successors=bytes_0)
    var_1 = module_0.get(list_0, bool_0)
    assert var_1 == 0
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)
