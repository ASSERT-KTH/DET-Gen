# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    float_0 = 527.3370057918257
    tuple_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert tuple_0 == 0


def test_case_1():
    str_0 = "c|"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.get(bool_0, bool_0)


def test_case_3():
    list_0 = []
    node_0 = module_1.Node(
        successor=list_0, incoming_nodes=list_0, outgoing_nodes=list_0
    )
    var_0 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xa41"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "@u"
    list_0 = [str_0, str_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "@S"
    list_0 = [str_0, str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(list_0, str_0)
    module_0.shortest_path_length(str_0, var_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "@S"
    node_0 = module_1.Node(str_0, str_0, str_0, incoming_nodes=str_0)
    module_0.shortest_path_length(str_0, node_0, str_0)


def test_case_8():
    bytes_0 = b""
    var_0 = module_0.get(bytes_0, bytes_0)
    assert var_0 == 0
    tuple_0 = (bytes_0, var_0)
    list_0 = [tuple_0, tuple_0, bytes_0]
    var_1 = module_0.get(list_0, var_0)
    assert var_1 == b""
