# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"\x87\xd2\xbe\x07\xe1\x8d.+4\x05"
    tuple_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert tuple_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xd2\xbe\x07\xe1\x8d\x8b\xfa+4\x05"
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "&~B"
    none_type_0 = None
    module_0.shortest_path_length(str_0, str_0, none_type_0)


def test_case_4():
    bool_0 = True
    node_0 = module_1.Node(bool_0, predecessors=bool_0, outgoing_nodes=bool_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -576
    set_0 = {int_0, int_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0, list_0]
    var_0 = module_0.get(list_1, int_0)
    assert var_0 == 0
    module_0.insert_or_update(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "(t"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 737
    set_0 = {int_0, int_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0, list_0]
    module_0.insert_or_update(list_1, list_1)


def test_case_8():
    int_0 = -619
    set_0 = {int_0, int_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0, list_0]
    var_0 = module_0.get(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "+R$Y wedCIP"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    list_0 = []
    tuple_1 = (tuple_0, list_0, bool_0)
    module_0.insert_or_update(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "+q\x0bD=sb)F+8I"
    node_0 = module_1.Node(str_0, str_0, str_0, outgoing_nodes=str_0)
    module_0.shortest_path_length(node_0, node_0, str_0)
