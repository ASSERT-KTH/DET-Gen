# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "Ol2?a("
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xcb\xac\xdd\x8eu\xb2\x11\xd7\x81Hx\xf2~"
    node_0 = module_1.Node(
        bytes_0,
        successors=bytes_0,
        predecessors=bytes_0,
        incoming_nodes=bytes_0,
        outgoing_nodes=bytes_0,
    )
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 2482
    module_0.insert_or_update(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    none_type_0 = None
    module_0.shortest_path_length(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "?s"
    list_0 = [str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    str_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "?s"
    list_0 = [str_0]
    var_0 = module_0.insert_or_update(list_0, str_0)
    dict_0 = {}
    var_1 = module_0.get(dict_0, dict_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(var_1, var_1, var_1)
    assert var_2 == 0
    module_0.insert_or_update(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "?s"
    list_0 = []
    var_0 = module_0.insert_or_update(list_0, str_0)
    var_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "?s"
    bool_0 = True
    set_0 = {bool_0, str_0, bool_0}
    int_0 = -655
    tuple_0 = (set_0, int_0)
    module_0.insert_or_update(tuple_0, tuple_0)


def test_case_9():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, outgoing_nodes=none_type_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "?s"
    bool_0 = True
    set_0 = {bool_0, str_0, bool_0}
    str_1 = "4VLk"
    bytes_0 = b"B"
    tuple_0 = (set_0, str_1, bytes_0)
    var_0 = module_0.get(tuple_0, str_0)
    assert var_0 is True
    int_0 = -655
    tuple_1 = (set_0, int_0)
    module_0.insert_or_update(tuple_1, tuple_1)
