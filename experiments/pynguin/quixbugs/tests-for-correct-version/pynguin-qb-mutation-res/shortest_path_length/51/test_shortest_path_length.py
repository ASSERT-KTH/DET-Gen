# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2
import builtins as module_3


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "O@[~d)V 0 ydMg89]"
    module_0.get(str_0, str_0)


def test_case_2():
    str_0 = "eO"
    list_0 = [str_0, str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    set_0 = set()
    none_type_0 = None
    module_0.shortest_path_length(set_0, set_0, none_type_0)


def test_case_5():
    str_0 = "eO"
    list_0 = [str_0, str_0]
    var_0 = module_0.insert_or_update(list_0, str_0)
    var_1 = module_1.merge(key=str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "eO"
    list_0 = []
    var_0 = module_0.insert_or_update(list_0, str_0)
    node_0 = module_2.Node(incoming_nodes=var_0)
    var_1 = module_0.shortest_path_length(list_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_2 = module_0.get(list_0, str_0)
    assert var_2 == 0
    object_0 = module_3.object()
    node_1 = module_2.Node(
        var_0, successors=str_0, incoming_nodes=node_0, outgoing_nodes=str_0
    )
    none_type_0 = None
    var_3 = module_0.shortest_path_length(node_1, var_0, none_type_0)
    assert var_3 == 0
    module_0.shortest_path_length(object_0, node_1, none_type_0)


def test_case_7():
    str_0 = "eO"
    node_0 = module_2.Node()
    var_0 = module_0.shortest_path_length(node_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    complex_0 = -1020.794348 - 1078.34j
    var_0 = module_0.shortest_path_length(complex_0, complex_0, complex_0)
    assert var_0 == 0
    str_0 = "eO"
    list_0 = [str_0, str_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = 483.194
    set_0 = {float_0, float_0, float_0, float_0}
    node_0 = module_2.Node(successor=float_0, successors=set_0)
    module_0.shortest_path_length(set_0, node_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "e{"
    bytes_0 = b"\xf5<^"
    tuple_0 = (str_0, bytes_0)
    list_0 = [tuple_0, tuple_0]
    var_0 = module_0.get(list_0, bytes_0)
    assert var_0 == "e{"
    float_0 = 4121.5
    var_1 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_1 == 0
    var_1.successor()
