# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    int_0 = -361
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"U\x8d\xae\xd1\x1f\x98"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=none_type_0, outgoing_nodes=none_type_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "/|ikc)6"
    node_0 = module_1.Node(successors=str_0, incoming_nodes=str_0)
    module_0.shortest_path_length(node_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"CK\xdd\x8e\xccr\xa9\xcag\x07*}"
    tuple_0 = (bytes_0, bytes_0)
    bool_0 = True
    set_0 = {bool_0, bytes_0, bool_0, bool_0}
    tuple_1 = (tuple_0, set_0)
    module_0.insert_or_update(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 449
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0)
    tuple_1 = (tuple_0, int_0)
    list_0 = [tuple_1]
    var_0 = module_0.get(list_0, bool_0)
    assert var_0 == 0
    int_1 = -3041
    none_type_0 = None
    module_0.insert_or_update(int_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    tuple_1 = (tuple_0, bool_0)
    list_0 = [tuple_1]
    var_0 = module_0.get(list_0, bool_0)
    int_0 = -3041
    none_type_0 = None
    module_0.insert_or_update(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "'f"
    set_0 = {str_0}
    module_0.insert_or_update(set_0, str_0)
