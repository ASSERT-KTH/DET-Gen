# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    int_0 = 2515
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"!\xb4\x92jho\x12"
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    var_0 = module_1.merge()
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 2500
    module_0.get(int_0, int_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_2.Node(predecessors=none_type_0)
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    str_0 = ")I=T-MiJP\r`q-:u\rK\x0b"
    node_0 = module_2.Node(successor=str_0, incoming_nodes=str_0)
    list_0 = []
    var_0 = module_0.shortest_path_length(list_0, node_0, node_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(str_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    set_0 = {node_0, str_0, str_0}
    tuple_0 = (set_0, node_0, var_0)
    var_2 = module_0.get(tuple_0, node_0)
    assert var_2 == ")I=T-MiJP\r`q-:u\rK\x0b"


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = ")I=T-MiJP\r`q-:u\rK\x0b"
    list_0 = [str_0, str_0]
    var_0 = module_1.merge()
    list_1 = [list_0, str_0]
    var_1 = module_0.shortest_path_length(list_1, var_0, var_0)
    assert var_1 == 0
    set_0 = {var_0, str_0, str_0}
    var_2 = module_0.get(var_0, var_0)
    assert var_2 == 0
    module_0.insert_or_update(list_1, set_0)
    none_type_0 = None
    var_3 = module_0.insert_or_update(var_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ")I=T-MiJP\r`q-:u\rK\x0b"
    list_0 = [str_0, str_0]
    node_0 = module_2.Node(successor=list_0, incoming_nodes=list_0)
    set_0 = {node_0, str_0, str_0}
    tuple_0 = (set_0, node_0, list_0)
    var_0 = module_0.get(tuple_0, node_0)
    assert var_0 == ")I=T-MiJP\r`q-:u\rK\x0b"
    dict_0 = {var_0: node_0}
    list_1 = [dict_0]
    none_type_0 = None
    module_0.get(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "^HN[PgyS"
    node_0 = module_2.Node(successors=str_0)
    module_0.shortest_path_length(str_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = ")I=T-MiJP\r`q-:u\rK\x0b"
    list_0 = [str_0, str_0]
    node_0 = module_2.Node(successor=list_0, incoming_nodes=list_0)
    set_0 = {node_0, str_0, str_0}
    tuple_0 = (set_0, node_0, list_0)
    var_0 = module_0.get(tuple_0, node_0)
    list_1 = [list_0, var_0, tuple_0, node_0, var_0]
    module_0.insert_or_update(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    var_0 = module_1.merge()
    list_0 = []
    var_1 = module_0.shortest_path_length(list_0, var_0, var_0)
    assert var_1 == 0
    set_0 = {var_0, var_1, var_1}
    var_2 = module_0.get(var_0, var_0)
    assert var_2 == 0
    var_3 = module_0.insert_or_update(list_0, set_0)
    module_0.shortest_path_length(set_0, set_0, list_0)
