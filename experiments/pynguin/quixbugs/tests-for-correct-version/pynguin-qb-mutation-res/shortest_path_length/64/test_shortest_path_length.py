# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


def test_case_1():
    bytes_0 = b"#\xf6"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.get(list_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"#\x8c"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


def test_case_4():
    int_0 = 2231
    node_0 = module_1.Node(successor=int_0)
    var_0 = module_0.shortest_path_length(int_0, node_0, int_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    bytes_0 = b"#\x8c"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    var_1 = module_0.get(list_0, bytes_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 2240
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0
    set_0 = {int_0, int_0, var_0}
    tuple_0 = (set_0, int_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 2231
    node_0 = module_1.Node(successor=int_0)
    var_0 = module_0.shortest_path_length(int_0, node_0, int_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_1 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_1 == 0
    set_0 = set()
    tuple_0 = (set_0, int_0)
    module_0.insert_or_update(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    tuple_1 = (tuple_0,)
    var_0 = module_0.get(tuple_1, bool_0)
    bytes_0 = b"l\x12"
    var_1 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_1 == 0
    list_1 = [bytes_0, bytes_0, bytes_0]
    var_2 = module_0.insert_or_update(list_1, bytes_0)
    var_3 = module_0.shortest_path_length(var_1, var_1, var_1)
    assert var_3 == 0
    module_0.get(bytes_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"l\x12"
    node_0 = module_1.Node(
        bytes_0, bytes_0, bytes_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0
    )
    module_0.shortest_path_length(node_0, node_0, bytes_0)
