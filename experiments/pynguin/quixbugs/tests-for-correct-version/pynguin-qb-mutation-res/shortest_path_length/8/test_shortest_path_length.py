# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"\xa5f\xb29[-r\xe7\xb6p]4\t}\xdd\x8dj\xcc\x1ah"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


def test_case_1():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"G["
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"|"
    node_0 = module_1.Node(successors=bytes_0, outgoing_nodes=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xa5f\xb29[-r\xe7\xb6p4\t}\xdd\x8d\xcc\x1ah"
    module_0.get(bytes_0, bytes_0)


def test_case_5():
    bytes_0 = b""
    node_0 = module_1.Node(successors=bytes_0, outgoing_nodes=bytes_0)
    var_0 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0, list_0]
    var_0 = module_0.get(list_1, list_0)
    assert var_0 == 0
    bool_1 = True
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0, outgoing_nodes=bool_1)
    module_0.shortest_path_length(bool_1, none_type_0, node_0)


def test_case_7():
    str_0 = "\nS"
    list_0 = [str_0]
    var_0 = module_0.insert_or_update(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    tuple_0 = (set_0, set_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    var_0 = module_0.get(list_0, set_0)
    var_1 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_1 == 0
    var_1.successors()


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "\nS"
    list_0 = [str_0, str_0]
    module_0.insert_or_update(list_0, list_0)
