# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xf0\xe4Q\x1b\xb5|m\xd9t\xe5\x96?*1\x90Z"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    var_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    bool_0 = False
    module_0.shortest_path_length(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "+("
    module_0.insert_or_update(str_0, str_0)


def test_case_6():
    str_0 = "cl%;l[1"
    node_0 = module_1.Node()
    var_0 = module_0.shortest_path_length(node_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_7():
    list_0 = []
    str_0 = "+("
    var_0 = module_0.insert_or_update(list_0, str_0)
    var_1 = module_0.get(list_0, str_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, tuple_0, bool_0, tuple_0}
    list_0 = [set_0]
    module_0.insert_or_update(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "++"
    node_0 = module_1.Node(successors=str_0, predecessors=str_0, outgoing_nodes=str_0)
    module_0.shortest_path_length(node_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    list_0 = []
    str_0 = "+("
    var_0 = module_0.insert_or_update(list_0, str_0)
    var_1 = module_0.insert_or_update(list_0, str_0)
    var_2 = module_0.get(list_0, var_1)
    assert var_2 == 0
    module_0.insert_or_update(var_1, var_2)


def test_case_11():
    int_0 = -2380
    tuple_0 = (int_0, int_0)
    list_0 = [tuple_0, tuple_0]
    var_0 = module_0.get(list_0, int_0)
    assert var_0 == -2380
