# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.get(set_0, tuple_0)


def test_case_2():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -3797
    tuple_0 = (int_0, int_0)
    tuple_1 = (tuple_0, int_0, tuple_0, tuple_0)
    module_0.insert_or_update(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    none_type_0 = None
    module_0.shortest_path_length(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -3797
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0
    tuple_0 = (int_0, int_0)
    set_0 = {tuple_0}
    var_1 = module_0.get(set_0, var_0)
    assert var_1 == 0
    bytes_0 = b"\x7f\xa9\x12.\xad\xf9\x0b\xde\xbbx\xc4\xfcM\x03\r"
    tuple_1 = (tuple_0, int_0, set_0, bytes_0)
    module_0.insert_or_update(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_1.merge()
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0
    str_0 = "*k"
    module_0.insert_or_update(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    dict_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert dict_0 == 0
    tuple_0 = (bool_0, dict_0)
    tuple_1 = (tuple_0, bool_0)
    var_0 = module_0.get(tuple_1, bool_0)
    assert var_0 is False
    bytes_0 = b"\xcd\xc21"
    bytes_1 = b"\xb8g\xcd)m\xe4\xe9\x95\x01\x0f\xc8g\x98$\x03tl"
    module_0.get(bytes_0, bytes_1)


def test_case_9():
    int_0 = -3780
    node_0 = module_2.Node(successor=int_0)
    var_0 = module_0.shortest_path_length(int_0, node_0, int_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 1462
    bytes_0 = b"\xf2\xa0"
    set_0 = {int_0, bytes_0}
    module_0.insert_or_update(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = -3780
    tuple_0 = (int_0, int_0)
    node_0 = module_2.Node(successors=tuple_0, outgoing_nodes=int_0)
    module_0.shortest_path_length(tuple_0, node_0, tuple_0)
