# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bytes_0 = b"\x85\xaaR"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "Q:g'7>j3"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    str_0 = "Q:g'7>j3"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "V*04!Mo;j*P_T:+dh"
    list_0 = [str_0, str_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(outgoing_nodes=none_type_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b""
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, set_0)
    bool_0 = True
    list_0 = [tuple_0, set_0, set_0, bool_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)
    var_1 = module_2.merge(key=var_0)
    var_2 = module_0.get(var_1, var_0)
    assert var_2 == 0
    var_3 = module_0.shortest_path_length(var_0, var_2, var_2)
    assert var_3 == 0
    module_0.get(var_3, var_3)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    var_1 = module_2.merge(key=none_type_0)
    node_0 = module_1.Node(outgoing_nodes=var_1)
    var_2 = module_2.merge(reverse=var_1)
    var_3 = module_0.get(var_2, node_0)
    assert var_3 == 0
    bytes_0 = b"\xa69\xa6\x82mqk"
    dict_0 = {node_0: none_type_0, node_0: var_0, var_3: bytes_0}
    module_0.insert_or_update(var_1, dict_0)


def test_case_7():
    bytes_0 = b"\xbe\x03"
    set_0 = {bytes_0, bytes_0}
    bool_0 = False
    var_0 = module_0.get(set_0, bool_0)
    assert var_0 == 0
    var_1 = module_0.get(set_0, var_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xbc\xfc"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, set_0)
    bool_0 = True
    list_0 = [tuple_0, set_0, set_0, bool_0]
    module_0.insert_or_update(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'DKiM"xHc"Fn'
    bytes_0 = b"6\x19tP"
    tuple_0 = (str_0, bytes_0)
    dict_0 = {tuple_0: str_0}
    var_0 = module_0.get(dict_0, bytes_0)
    assert var_0 == 'DKiM"xHc"Fn'
    bytes_1 = b""
    module_2.nlargest(bytes_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_1.Node(successor=bool_0, successors=list_0, outgoing_nodes=bool_0)
    module_0.shortest_path_length(bool_0, node_0, list_0)
