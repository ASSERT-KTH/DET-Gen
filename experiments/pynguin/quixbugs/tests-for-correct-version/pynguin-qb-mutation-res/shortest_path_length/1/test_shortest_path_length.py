# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    int_0 = 318
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x88A\t\x88\x7f\x8e"
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0


def test_case_3():
    int_0 = 318
    node_0 = module_1.Node(int_0, int_0, predecessors=int_0)
    var_0 = module_0.shortest_path_length(int_0, node_0, int_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xa4\x83"
    str_0 = "/HZ&f{[EjZ0\\Ml/0"
    module_0.insert_or_update(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"@h"
    bool_0 = False
    bool_1 = True
    dict_0 = {bytes_0: bytes_0, bool_0: bool_1}
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    bytes_0 = b"@h"
    list_0 = [bytes_0, bytes_0]
    var_1 = module_0.get(list_0, var_0)
    assert var_1 == 0
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    bytes_0 = b"@h"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    var_1 = module_0.shortest_path_length(var_0, var_0, none_type_0)
    assert var_1 == 0
    var_2 = module_0.get(list_0, var_1)
    assert var_2 == 0
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 919
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        int_0: none_type_0,
        int_0: int_0,
        none_type_0: none_type_0,
    }
    bytes_0 = b""
    bool_0 = False
    tuple_0 = (dict_0, bytes_0, bool_0, bool_0)
    tuple_1 = (dict_0, tuple_0)
    var_0 = module_0.get(tuple_1, int_0)
    module_0.get(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = -1123.213567689165
    dict_0 = {float_0: float_0, float_0: float_0}
    node_0 = module_1.Node(
        dict_0, successors=dict_0, incoming_nodes=float_0, outgoing_nodes=dict_0
    )
    module_0.shortest_path_length(dict_0, node_0, float_0)
