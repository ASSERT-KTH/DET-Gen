# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_1 == 0
    module_0.shortest_path_length(var_1, var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


def test_case_4():
    list_0 = []
    node_0 = module_1.Node()
    var_0 = module_0.shortest_path_length(list_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    tuple_0 = (var_0, var_0)
    list_1 = [tuple_0, list_0]
    module_0.get(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    var_0 = module_2.merge(*list_0)
    tuple_0 = (var_0, var_0)
    module_0.insert_or_update(var_0, tuple_0)


def test_case_7():
    list_0 = []
    tuple_0 = (list_0, list_0)
    list_1 = [tuple_0, list_0]
    var_0 = module_0.insert_or_update(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    tuple_0 = (var_0, var_0)
    list_1 = [tuple_0, list_0]
    var_1 = module_0.get(list_1, var_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_2 == 0
    module_0.shortest_path_length(var_2, var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_1.Node(tuple_0, tuple_0, tuple_0)
    module_0.shortest_path_length(node_0, node_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"J\xc9"
    dict_0 = {}
    tuple_0 = (bytes_0, dict_0)
    module_0.insert_or_update(tuple_0, tuple_0)
