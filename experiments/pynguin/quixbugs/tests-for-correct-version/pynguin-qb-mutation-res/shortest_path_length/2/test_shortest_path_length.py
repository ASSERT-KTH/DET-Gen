# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    str_0 = "rNUn3M(n&FY%pO{"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'v"4\t~8\ryyl\\fod4I'
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xf4T"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)
    module_0.insert_or_update(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    none_type_0 = None
    module_0.shortest_path_length(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "?o"
    bytes_0 = b""
    bool_0 = True
    list_0 = [str_0, str_0, bytes_0, bool_0]
    module_0.get(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xa8\xe5'-\x95y\xb2\xf3\xe3\xd3\xc0b\xdbq\xca][\x08V\xaf"
    node_0 = module_1.Node(successors=bytes_0, predecessors=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "?6"
    bytes_0 = b""
    module_0.insert_or_update(bytes_0, str_0)


def test_case_7():
    none_type_0 = None
    node_0 = module_1.Node(predecessors=none_type_0)
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"v^"
    bool_0 = False
    set_0 = {bytes_0, bytes_0, bytes_0, bool_0}
    complex_0 = 1068.4 + 123.957j
    tuple_0 = (set_0, complex_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    list_1 = [list_0, list_0]
    var_1 = module_0.insert_or_update(list_0, list_1)
    none_type_0 = None
    var_2 = module_0.shortest_path_length(var_0, var_1, none_type_0)
    assert var_2 == 0
    var_3 = module_2.merge()
    var_4 = module_0.get(list_0, list_0)
    list_1.predecessors()
