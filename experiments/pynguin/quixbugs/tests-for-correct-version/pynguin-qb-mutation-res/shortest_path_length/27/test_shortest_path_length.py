# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bytes_0 = b""
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x90\xe1>\x8c\x97\xdcD\x03\x0c\x02\xd4\xff\x87"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "yU"
    list_0 = [str_0, str_0]
    var_0 = module_0.insert_or_update(list_0, str_0)
    node_0 = module_1.Node(
        successor=var_0, successors=list_0, incoming_nodes=var_0, outgoing_nodes=var_0
    )
    assert node_0.successors == ["yU", "yU"]
    module_0.shortest_path_length(list_0, node_0, var_0)


def test_case_3():
    bytes_0 = b""
    var_0 = module_0.get(bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x1fD\xab}z\xfc\xcc7$\xd0\x14\xe8\xfc\xfd#\xc9\x88\xa6v\x1b"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.shortest_path_length(set_0, bytes_0, set_0)


def test_case_5():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "yU"
    list_0 = []
    var_0 = module_0.insert_or_update(list_0, str_0)
    node_0 = module_1.Node(
        successor=var_0, successors=list_0, incoming_nodes=var_0, outgoing_nodes=var_0
    )
    module_0.shortest_path_length(list_0, node_0, var_0)


def test_case_7():
    str_0 = "yU"
    list_0 = [str_0, str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "yU"
    list_0 = [str_0, str_0]
    node_0 = module_1.Node(
        successor=str_0, successors=list_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    module_0.shortest_path_length(list_0, node_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "yU"
    list_0 = [str_0, str_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_10():
    complex_0 = 2687.51 - 3551.001j
    int_0 = 2692
    dict_0 = {complex_0: complex_0, int_0: complex_0}
    list_0 = [dict_0]
    var_0 = module_0.get(list_0, int_0)
    assert var_0 == (2687.51 - 3551.001j)
