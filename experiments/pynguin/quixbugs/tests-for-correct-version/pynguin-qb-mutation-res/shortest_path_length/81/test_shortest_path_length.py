# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bytes_0 = b"\xb5#\xb3\xcbF\x9e\x1f\xa5\xe6Q<\xcd"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xb5#\xb3\xcbF\x9e\x1f\xa5\xe6Q<\xcd"
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    str_0 = "\r]"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.get(dict_0, str_0)
    assert var_0 == 0


def test_case_3():
    str_0 = "\r]"
    dict_0 = {str_0: str_0}
    var_0 = module_0.insert_or_update(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


def test_case_5():
    str_0 = ""
    node_0 = module_1.Node()
    var_0 = module_0.shortest_path_length(node_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "\r]"
    list_0 = []
    var_0 = module_0.insert_or_update(list_0, str_0)
    var_1 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(str_0, var_1, var_1)
    assert var_2 == 0
    module_0.shortest_path_length(var_0, var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    node_0 = module_1.Node()
    none_type_0 = None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    str_0 = "\r]"
    dict_0 = {str_0: var_0, var_0: node_0, var_0: node_0, var_0: str_0}
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x1ek>\xff%o7C\xa8\xf5\xc9\x1fL\xf1"
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, outgoing_nodes=bytes_0
    )
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


def test_case_9():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    var_0 = module_2.merge(*list_0, reverse=none_type_0)
    bool_0 = False
    tuple_0 = (var_0, bool_0)
    list_1 = [tuple_0, list_0, var_0]
    var_1 = module_0.get(list_1, bool_0)
