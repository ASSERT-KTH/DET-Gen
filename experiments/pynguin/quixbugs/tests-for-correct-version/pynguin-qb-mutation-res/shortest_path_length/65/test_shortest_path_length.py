# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = 536.62416
    dict_0 = {}
    list_0 = [float_0, dict_0, float_0]
    module_0.get(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_0.get(dict_0, none_type_0)
    assert var_0 == 0
    float_0 = -141.6
    module_0.insert_or_update(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -141.6
    module_0.insert_or_update(float_0, float_0)


def test_case_4():
    node_0 = module_1.Node()
    none_type_0 = None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    bytes_0 = b"\x0e5\xadh\x00)\xe7J\x06\x9f\xfd\xac\xb3"
    complex_0 = -1815.224317 - 163.004137j
    set_0 = {bytes_0, complex_0}
    list_0 = [set_0, set_0]
    var_0 = module_0.insert_or_update(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"<N8\xc1\xcawEJ)\xcc\x1a\x15\x0e\x9e\xf6\\~\x1d"
    node_0 = module_1.Node(bytes_0, successors=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\x0e5\xadh\x00)\xe7J\x06\x9f\xfd\xac\xb3"
    complex_0 = -1815.224317 - 163.004137j
    set_0 = {bytes_0, complex_0}
    list_0 = [set_0, set_0]
    var_0 = module_0.insert_or_update(list_0, set_0)
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '"Y'
    node_0 = module_1.Node(successors=str_0, incoming_nodes=str_0)
    set_0 = {str_0, node_0}
    none_type_0 = None
    module_0.get(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_2.merge()
    int_0 = -1583
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, int_0: int_0}
    var_1 = module_0.shortest_path_length(dict_0, var_0, var_0)
    assert var_1 == 0
    str_0 = 'q"Y'
    var_2 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_2 == 0
    node_0 = module_1.Node(successors=str_0, incoming_nodes=str_0)
    set_0 = {str_0, node_0}
    var_3 = module_0.get(var_0, var_1)
    assert var_3 == 0
    set_1 = {str_0, var_3, var_3}
    list_0 = [dict_0, set_0, set_1, set_0]
    var_4 = module_0.get(list_0, int_0)
    module_0.shortest_path_length(node_0, node_0, set_0)
