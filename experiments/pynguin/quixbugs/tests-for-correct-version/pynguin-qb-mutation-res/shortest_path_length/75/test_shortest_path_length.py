# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    tuple_1 = (var_0, var_0)
    module_0.get(tuple_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    none_type_0 = None
    module_0.shortest_path_length(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xf4\xf3\"\x89\x16{\xf5\x14k\x11k\xc6\xb2#\x80'\x1b\xb0\xf4"
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


def test_case_4():
    tuple_0 = ()
    node_0 = module_1.Node(predecessors=tuple_0, outgoing_nodes=tuple_0)
    var_0 = module_0.shortest_path_length(tuple_0, node_0, tuple_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    module_0.insert_or_update(tuple_1, tuple_1)


def test_case_6():
    tuple_0 = ()
    none_type_0 = None
    node_0 = module_1.Node(predecessors=tuple_0, outgoing_nodes=tuple_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    tuple_1 = (var_0, var_0)
    set_0 = {tuple_1}
    var_1 = module_0.get(set_0, tuple_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = ()
    node_0 = module_1.Node(predecessors=tuple_0, outgoing_nodes=tuple_0)
    list_0 = [node_0, node_0]
    module_0.insert_or_update(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    set_0 = {tuple_1}
    var_0 = module_0.get(set_0, tuple_0)
    var_1 = module_0.get(set_0, tuple_0)
    bool_0 = True
    module_0.get(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0, list_0, bool_0, bool_0)
    module_0.insert_or_update(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [bool_0, list_0]
    list_2 = [list_1, list_1]
    tuple_0 = (list_2,)
    module_0.insert_or_update(tuple_0, list_1)
