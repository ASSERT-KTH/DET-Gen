# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    module_0.insert_or_update(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.get(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.shortest_path_length(list_0, bool_0, list_0)


def test_case_4():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    node_0 = module_1.Node(successor=set_0)
    var_1 = module_0.shortest_path_length(node_0, node_0, set_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    set_0 = set()
    node_0 = module_1.Node(successor=set_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, set_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "oL"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, set_0]
    none_type_0 = None
    list_1 = [list_0, none_type_0]
    var_0 = module_0.get(list_1, set_0)
    var_1 = module_0.insert_or_update(list_1, list_0)
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0, set_0]
    var_0 = module_2.merge(key=set_0)
    none_type_0 = None
    var_1 = module_0.shortest_path_length(none_type_0, var_0, var_0)
    assert var_1 == 0
    set_1 = set()
    var_2 = module_0.get(set_1, set_1)
    assert var_2 == 0
    var_3 = module_0.shortest_path_length(var_2, list_1, list_1)
    assert var_3 == 0
    var_4 = module_0.shortest_path_length(var_2, set_1, set_1)
    assert var_4 == 0
    module_0.insert_or_update(var_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0]
    var_0 = module_0.insert_or_update(list_1, list_0)
    list_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    tuple_2 = (tuple_1, bool_0)
    module_0.insert_or_update(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"3\xfc\xd6a"
    node_0 = module_1.Node(successors=bytes_0, predecessors=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)
