# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import builtins as module_2
import heapq as module_3


def test_case_0():
    str_0 = ">v\x0b90p#R)7]y}c"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    tuple_0 = (list_0, bool_0, list_0, list_0)
    var_0 = module_0.get(tuple_0, bool_0)
    none_type_0 = None
    node_0 = module_1.Node(
        successor=var_0,
        successors=dict_0,
        incoming_nodes=none_type_0,
        outgoing_nodes=none_type_0,
    )
    assert node_0.successor == {False: False}
    module_0.shortest_path_length(dict_0, node_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    node_0 = module_1.Node(dict_0, successors=dict_0, incoming_nodes=bool_0)
    module_0.shortest_path_length(dict_0, node_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0, bool_0, list_0, list_0)
    node_0 = module_1.Node(incoming_nodes=list_0)
    var_0 = module_0.shortest_path_length(bool_0, node_0, tuple_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    str_0 = "cs"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    object_0 = module_2.object()
    none_type_0 = None
    module_0.shortest_path_length(object_0, object_0, none_type_0)


def test_case_6():
    bool_0 = False
    node_0 = module_1.Node(incoming_nodes=bool_0)
    var_0 = module_0.shortest_path_length(bool_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    tuple_0 = (list_0, bool_0, list_0, list_0)
    str_0 = '"*&3MND(Al]yr.N+C5w['
    module_0.get(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0, list_0, list_0, list_0)
    module_0.insert_or_update(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    dict_0 = {}
    list_0 = [dict_0, bool_0]
    tuple_0 = (list_0, bool_0, list_0, list_0)
    var_1 = module_0.get(tuple_0, bool_0)
    str_0 = '"*&3MND(Al]yr.N+C5w['
    var_2 = module_3.merge(key=str_0)
    var_3 = module_0.get(var_2, str_0)
    assert var_3 == 0
    str_1 = "cs"
    var_4 = module_0.shortest_path_length(str_1, str_1, str_1)
    assert var_4 == 0
    module_0.insert_or_update(var_1, str_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    tuple_0 = (list_0, bool_0, list_0, list_0)
    node_0 = module_1.Node(incoming_nodes=dict_0)
    var_0 = module_0.shortest_path_length(dict_0, node_0, tuple_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    str_0 = "cs"
    module_0.insert_or_update(tuple_0, str_0)
