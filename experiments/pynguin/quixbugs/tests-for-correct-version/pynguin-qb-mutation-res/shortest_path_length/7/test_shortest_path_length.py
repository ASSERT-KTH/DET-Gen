# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    float_0 = -20.92302
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    list_0 = [tuple_0, tuple_0]
    module_0.get(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0
    module_0.shortest_path_length(var_1, tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"W]^=\x19\xbe\xe4R\x9b\xbb\x8a\xc6(\x7f\xde\xbb\xb6\xdeb*"
    none_type_0 = None
    module_0.shortest_path_length(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = -976.5889138814462 + 3876.5j
    tuple_0 = (complex_0, complex_0)
    list_0 = [tuple_0, tuple_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)
    var_1 = module_1.merge(key=complex_0)
    var_2 = module_0.get(list_0, list_0)
    assert var_2 == 0
    bytes_0 = b""
    var_3 = module_0.get(bytes_0, bytes_0)
    assert var_3 == 0
    bool_0 = True
    module_0.get(var_3, bool_0)


def test_case_5():
    tuple_0 = ()
    node_0 = module_2.Node(predecessors=tuple_0)
    var_0 = module_0.shortest_path_length(tuple_0, node_0, tuple_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0
    set_0 = {var_0, tuple_0, var_1}
    module_0.insert_or_update(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    complex_0 = -1008.72 + 3876.5j
    set_0 = {complex_0, complex_0, complex_0}
    tuple_0 = (complex_0, set_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    node_0 = module_2.Node(set_0, successors=tuple_0, predecessors=list_0)
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    module_0.shortest_path_length(node_0, node_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    complex_0 = -1008.72 + 3876.5j
    set_0 = {complex_0}
    tuple_0 = (complex_0, set_0)
    list_0 = [tuple_0, tuple_0]
    var_0 = module_0.get(list_0, set_0)
    assert var_0 == (-1008.72 + 3876.5j)
    var_1 = module_0.get(list_0, list_0)
    assert var_1 == 0
    str_0 = "\x0c:~bIB6Ig:lt/,bD|+"
    var_2 = module_1.merge()
    var_3 = module_0.shortest_path_length(str_0, var_2, var_2)
    assert var_3 == 0
    module_0.shortest_path_length(var_3, list_0, var_3)


@pytest.mark.xfail(strict=True)
def test_case_9():
    complex_0 = -1008.72 + 3876.5j
    tuple_0 = (complex_0, complex_0)
    node_0 = module_2.Node(complex_0, successors=tuple_0, predecessors=complex_0)
    module_0.shortest_path_length(node_0, node_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    complex_0 = -1008.72 + 3876.5j
    set_0 = {complex_0, complex_0, complex_0}
    tuple_0 = (complex_0, set_0)
    list_0 = [tuple_0, tuple_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)
    var_1 = module_0.get(list_0, list_0)
    assert var_1 == 0
    module_0.insert_or_update(list_0, list_0)
