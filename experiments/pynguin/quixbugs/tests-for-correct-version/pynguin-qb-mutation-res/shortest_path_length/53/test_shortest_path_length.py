# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


def test_case_1():
    str_0 = "O{"
    set_0 = {str_0, str_0, str_0, str_0}
    var_0 = module_0.get(set_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "O{"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.insert_or_update(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"@\xb4g%aE\xb6\xe4?\x06b\x12\x9c\xc0"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    bool_1 = True
    module_0.shortest_path_length(bool_0, bool_0, bool_1)


def test_case_5():
    set_0 = set()
    node_0 = module_1.Node(set_0, set_0, predecessors=set_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, set_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    set_0 = set()
    node_0 = module_1.Node(set_0, set_0, predecessors=set_0)
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(node_0, node_0, set_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    none_type_0 = None
    var_2 = module_0.get(set_0, none_type_0)
    assert var_2 == 0
    var_3 = module_0.get(set_0, none_type_0)
    assert var_3 == 0
    var_4 = module_0.get(set_0, set_0)
    assert var_4 == 0
    list_0 = [var_1, set_0, var_4, var_1]
    var_5 = module_0.shortest_path_length(list_0, var_4, var_3)
    assert var_5 == 0
    int_0 = -986
    dict_0 = {var_3: var_3, none_type_0: int_0, none_type_0: var_0}
    module_0.insert_or_update(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "O{"
    list_0 = [str_0, str_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "/Y~NeN/jh 2q"
    node_0 = module_1.Node(str_0, str_0, str_0)
    module_0.shortest_path_length(str_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = 504.83975
    bytes_0 = b"+(\xa1\xdd\x9de"
    dict_0 = {float_0: float_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    var_0 = module_0.get(list_0, bytes_0)
    assert var_0 == pytest.approx(504.83975, abs=0.01, rel=0.01)
    bool_0 = False
    var_1 = module_0.shortest_path_length(float_0, bool_0, bool_0)
    assert var_1 == 0
    set_0 = {bool_0}
    module_0.get(set_0, set_0)
