# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    int_0 = -1666
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x04{\xb1\x84\xd4\x89\xe5\x0bG\xabU"
    node_0 = module_1.Node(successors=bytes_0, incoming_nodes=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1656
    module_0.insert_or_update(int_0, int_0)


def test_case_4():
    tuple_0 = ()
    node_0 = module_1.Node(
        tuple_0, tuple_0, incoming_nodes=tuple_0, outgoing_nodes=tuple_0
    )
    var_0 = module_0.shortest_path_length(tuple_0, node_0, tuple_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'\xa3\xa2"\xa64\xa9?\x80U\xe9!\x88\x19!'
    tuple_0 = (bytes_0, bytes_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_2.merge()
    bytes_0 = b"\x00\xf5"
    tuple_0 = (bytes_0, bytes_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_1}
    set_0 = {bool_0, bool_0, bool_1}
    int_0 = 1771
    tuple_0 = (dict_0, set_0, int_0)
    module_0.insert_or_update(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0,)
    var_0 = module_0.get(tuple_0, bool_0)
    assert var_0 is True
    var_1 = module_0.get(tuple_0, tuple_0)
    assert var_1 == 0
    node_0 = module_1.Node(var_0, var_0, incoming_nodes=var_0, outgoing_nodes=var_0)
    assert node_0.value is True
    assert node_0.successor is True
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes is True
    var_2 = module_0.shortest_path_length(node_0, bool_0, bool_0)
    assert var_2 == 0
    var_3 = module_0.shortest_path_length(tuple_0, node_0, tuple_0)
    assert var_3 == pytest.approx(1e309, abs=0.01, rel=0.01)
    module_0.get(var_2, var_3)
