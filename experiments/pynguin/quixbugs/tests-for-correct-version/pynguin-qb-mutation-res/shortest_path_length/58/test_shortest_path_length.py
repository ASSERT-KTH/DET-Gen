# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bytes_0 = b"\xf5N\xe9!_\xbd\xcd\x01\xf8_\xc1c"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"^\x81\x8f\xe0H\x81\xfb\x02\x16\xa9|z\xa0'\xaf\xb4\xe0\xeaz"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xf5N\xe9!_\xbd\xcd\x01\xf8_\xc1c"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    module_0.shortest_path_length(var_0, bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '2|lEQNRH\x0cy,6D9"-z<'
    node_0 = module_1.Node(str_0, successors=str_0)
    module_0.shortest_path_length(node_0, node_0, str_0)


def test_case_5():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"y."
    tuple_0 = (bytes_0,)
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    var_1 = module_0.get(tuple_0, var_0)
    assert var_1 == 0
    none_type_0 = None
    node_0 = module_1.Node(predecessors=bytes_0, incoming_nodes=none_type_0)
    var_2 = module_2.merge()
    var_3 = module_0.get(var_2, var_2)
    assert var_3 == 0
    var_4 = module_0.shortest_path_length(var_2, node_0, none_type_0)
    assert var_4 == pytest.approx(1e309, abs=0.01, rel=0.01)
    module_0.get(var_0, node_0)


def test_case_7():
    none_type_0 = None
    node_0 = module_1.Node(predecessors=none_type_0, incoming_nodes=none_type_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.insert_or_update(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    tuple_0 = ()
    node_0 = module_1.Node(predecessors=tuple_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, tuple_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    bytes_0 = b"%\x01"
    tuple_1 = (bytes_0,)
    bool_0 = True
    var_1 = module_0.get(tuple_1, bool_0)
    assert var_1 == 37
    module_0.insert_or_update(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    tuple_0 = ()
    node_0 = module_1.Node(predecessors=tuple_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, tuple_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    bytes_0 = b"%\x01"
    tuple_1 = (bytes_0,)
    list_0 = [tuple_1, bytes_0]
    module_0.insert_or_update(tuple_1, list_0)
