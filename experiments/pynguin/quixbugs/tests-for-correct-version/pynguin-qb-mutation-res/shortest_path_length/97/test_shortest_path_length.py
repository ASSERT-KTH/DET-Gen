# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import heapq as module_0
import shortest_path_length as module_1
import builtins as module_2
import node as module_3


def test_case_0():
    var_0 = module_0.merge()
    var_1 = module_1.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "1"
    none_type_0 = None
    module_1.get(str_0, none_type_0)


def test_case_2():
    set_0 = set()
    none_type_0 = None
    var_0 = module_1.get(set_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "9{-!e09S]|"
    none_type_0 = None
    set_0 = {none_type_0, str_0, none_type_0}
    list_0 = []
    var_0 = module_1.insert_or_update(list_0, set_0)
    module_1.shortest_path_length(var_0, list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_0.merge()
    module_1.insert_or_update(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    object_0 = module_2.object()
    module_1.shortest_path_length(dict_0, dict_0, object_0)


def test_case_6():
    str_0 = "9{-!e09S]|"
    none_type_0 = None
    set_0 = {none_type_0, str_0, none_type_0}
    list_0 = [set_0]
    var_0 = module_1.insert_or_update(list_0, set_0)
    var_1 = module_1.insert_or_update(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "9{-!e09S]|"
    none_type_0 = None
    set_0 = {none_type_0, str_0, none_type_0}
    list_0 = []
    var_0 = module_1.shortest_path_length(none_type_0, set_0, set_0)
    assert var_0 == 0
    var_1 = module_1.insert_or_update(list_0, set_0)
    float_0 = -2347.0
    var_2 = module_1.get(list_0, float_0)
    assert var_2 == 0
    var_1.successors()


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x87\xa5\n^^\x83&\xb6\xa9\x8cY\x97\xb9\x12\x9b"
    str_0 = "9{-!e09S]|"
    none_type_0 = None
    set_0 = {none_type_0, str_0, none_type_0}
    list_0 = []
    var_0 = module_1.get(list_0, bytes_0)
    assert var_0 == 0
    var_1 = module_1.insert_or_update(list_0, set_0)
    var_2 = module_1.get(list_0, var_1)
    assert var_2 == "9{-!e09S]|"
    var_3 = module_1.insert_or_update(list_0, set_0)
    module_1.shortest_path_length(set_0, none_type_0, var_2)


def test_case_9():
    bytes_0 = b"\x87\xa5\n^^\x83z\xb6\xa9\x8cY\x97\xb9\x12\x9b"
    node_0 = module_3.Node(bytes_0, bytes_0, predecessors=bytes_0)
    var_0 = module_1.shortest_path_length(node_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"#:"
    var_0 = module_1.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    str_0 = "9{-!e09S]|"
    none_type_0 = None
    set_0 = {none_type_0, str_0, none_type_0}
    list_0 = [bytes_0]
    var_1 = module_1.get(list_0, bytes_0)
    assert var_1 == 0
    module_1.insert_or_update(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\x87\xa5\xd8J\xa7\n^^z\xb6\xa9\x8cY\x97\x12\x9b"
    node_0 = module_3.Node(bytes_0, bytes_0, bytes_0, bytes_0)
    module_1.shortest_path_length(node_0, node_0, bytes_0)
