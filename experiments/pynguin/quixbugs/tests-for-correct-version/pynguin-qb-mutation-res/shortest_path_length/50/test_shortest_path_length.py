# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'Q(3^"(.R~9J\n5oL'
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x8b\xd3\xaf\x8dF\x83eg\x9b\xd4'\xb3\x9e\xb8\x1a"
    node_0 = module_1.Node(
        bytes_0, successors=bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0
    )
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


def test_case_4():
    list_0 = []
    node_0 = module_1.Node(successor=list_0)
    var_0 = module_0.shortest_path_length(list_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    bytes_0 = b"\x89O"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)


def test_case_6():
    bytes_0 = b"\x89O"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(list_0, bytes_0)
    none_type_0 = None
    var_2 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_2 == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\x89O"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    var_0 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_0 == 0
    node_0 = module_1.Node(successor=list_0)
    list_1 = [node_0, node_0]
    var_1 = module_0.insert_or_update(list_0, list_1)
    assert len(node_0.successor) == 1
    var_2 = module_0.get(list_0, node_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value is None
    assert (
        f"{type(var_2.successor).__module__}.{type(var_2.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(var_2.successor) == 1
    assert var_2.successors == []
    assert var_2.predecessors == []
    assert var_2.incoming_nodes == []
    assert var_2.outgoing_nodes == []
    module_2.nlargest(var_2, list_1)
