# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0


def test_case_0():
    str_0 = "XOU):N"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1


def test_case_1():
    list_0 = []
    none_type_0 = None
    var_0 = module_0.find_first_in_sorted(list_0, none_type_0)
    assert var_0 == -1
    str_0 = "J`&+YGPUX+ [SL"
    var_1 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_1 == -1
    var_2 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_2 == -1


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    list_0 = [dict_0, tuple_0, dict_0, dict_0]
    tuple_1 = (list_0,)
    var_0 = module_0.find_first_in_sorted(tuple_1, list_0)
    assert var_0 == 0
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    bytes_0 = b"\x81\xa2X\t"
    tuple_0 = (bool_0, bytes_0)
    list_0 = []
    var_0 = module_0.find_first_in_sorted(list_0, tuple_0)
    assert var_0 == -1
    var_1 = module_0.find_first_in_sorted(tuple_0, bytes_0)
    assert var_1 == 1
    var_2 = module_0.find_first_in_sorted(tuple_0, bytes_0)
    assert var_2 == 1
    str_0 = "X{3MEO||>KbIS:_"
    none_type_0 = None
    module_0.find_first_in_sorted(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = " ,`"
    int_0 = -296
    tuple_0 = (str_0, str_0, int_0)
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    var_1 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_1 == -1
    var_2 = module_0.find_first_in_sorted(tuple_0, str_0)
    assert var_2 == 0
    module_0.find_first_in_sorted(var_2, str_0)
