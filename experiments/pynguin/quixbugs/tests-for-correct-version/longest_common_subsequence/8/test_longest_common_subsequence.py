# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 755.446407
    module_0.longest_common_subsequence(float_0, float_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 2171
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(int_0, none_type_0)
    assert var_0 == ""
    tuple_0 = (int_0, int_0)
    module_0.longest_common_subsequence(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.longest_common_subsequence(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "3ZAII}MhwIpn\rl]\ns+oY"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "3ZAII}MhwIpn\rl]\ns+oY"
    var_1 = module_0.longest_common_subsequence(var_0, str_0)
    assert var_1 == "3ZAII}MhwIpn\rl]\ns+oY"
    var_2 = module_0.longest_common_subsequence(var_1, str_0)
    assert var_2 == "3ZAII}MhwIpn\rl]\ns+oY"
    var_3 = module_0.longest_common_subsequence(var_1, var_0)
    assert var_3 == "3ZAII}MhwIpn\rl]\ns+oY"
    var_4 = module_0.longest_common_subsequence(str_0, var_1)
    assert var_4 == "3ZAII}MhwIpn\rl]\ns+oY"
    tuple_0 = (str_0,)
    var_5 = module_0.longest_common_subsequence(tuple_0, str_0)
    assert var_5 == ""
    set_0 = {tuple_0}
    bool_0 = False
    list_0 = [bool_0, bool_0]
    var_6 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_6 == "3ZAII}MhwIpn\rl]\ns+oY"
    module_0.longest_common_subsequence(set_0, list_0)
