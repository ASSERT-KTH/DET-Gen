# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b""
    var_0 = module_0.find_in_sorted(bytes_0, bytes_0)
    assert var_0 == -1
    set_0 = {var_0}
    var_1 = module_0.find_in_sorted(bytes_0, set_0)
    assert var_1 == -1
    module_0.find_in_sorted(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"0\xaf/\xf9\x04S\xcd<\xee>\xa18Y\x03\xea\xf94y\\"
    none_type_0 = None
    module_0.find_in_sorted(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "]Z2yUZt\t-L0!"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    dict_0 = {}
    none_type_0 = None
    var_1 = module_0.find_in_sorted(dict_0, none_type_0)
    assert var_1 == -1
    tuple_0 = ()
    module_0.find_in_sorted(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "2"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == 0
    module_0.find_in_sorted(var_0, var_0)
