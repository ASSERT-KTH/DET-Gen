# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import kth as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.kth(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    module_0.kth(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xad\xc5>\xa1\x13e\xfb\x97g\xb5\xd8\xe9k/\x1a\x93\xc4QE\x0e"
    module_0.kth(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    var_0 = module_0.kth(list_0, bool_0)
    assert var_0 is True
    none_type_0 = None
    object_0 = module_1.object()
    module_0.kth(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    list_0 = [bool_0]
    module_0.kth(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    var_0 = module_0.kth(list_0, bool_0)
    assert var_0 is False
    none_type_0 = None
    str_0 = 'oZ"._u'
    var_1 = module_0.kth(str_0, var_0)
    assert var_1 == '"'
    module_0.kth(list_0, none_type_0)
