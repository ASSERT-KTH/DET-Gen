# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import kth as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = ']+bZ\x0c^"q'
    module_0.kth(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.kth(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    list_0 = []
    bytes_0 = b"\x9b\xe9\xee\xe0\n3\xeb\np\xce\xa8v\x18\xf8\xa7\xc5\\"
    tuple_0 = (bytes_0,)
    var_0 = module_0.kth(tuple_0, bool_0)
    assert var_0 == b"\x9b\xe9\xee\xe0\n3\xeb\np\xce\xa8v\x18\xf8\xa7\xc5\\"
    object_0 = module_1.object(*list_0)
    module_0.kth(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 1254
    str_0 = "@v\tLM}3i$Za#"
    module_0.kth(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    bytes_0 = b"\x9b\xe9\xee\xe0\n3\xeb\np\xce\xa8v\x18\xf8\xa7\xc5\\"
    tuple_0 = (bytes_0,)
    var_0 = module_0.kth(tuple_0, bool_0)
    assert var_0 == b"\x9b\xe9\xee\xe0\n3\xeb\np\xce\xa8v\x18\xf8\xa7\xc5\\"
    var_1 = module_0.kth(var_0, bool_0)
    assert var_1 == 10
    var_2 = module_0.kth(var_0, bool_0)
    assert var_2 == 10
    module_0.kth(var_2, bytes_0)
