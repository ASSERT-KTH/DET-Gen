# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.reverse_linked_list(list_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    node_0 = module_1.Node(successor=list_0, successors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == [False, False, False, False]
    assert node_0.successors is None
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.reverse_linked_list(node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "I6BC;J2'xzB2c|{pa)mU"
    node_0 = module_1.Node(
        predecessors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == "I6BC;J2'xzB2c|{pa)mU"
    assert node_0.incoming_nodes == "I6BC;J2'xzB2c|{pa)mU"
    assert node_0.outgoing_nodes == "I6BC;J2'xzB2c|{pa)mU"
    complex_0 = 5881.11 + 545.55107j
    tuple_0 = (node_0, complex_0)
    node_1 = module_1.Node(successors=tuple_0, predecessors=complex_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.successors) == 2
    assert node_1.predecessors == (5881.11 + 545.55107j)
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert (
        f"{type(var_0.successors).__module__}.{type(var_0.successors).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.successors) == 2
    assert var_0.predecessors == (5881.11 + 545.55107j)
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    none_type_0 = None
    var_1 = module_0.reverse_linked_list(none_type_0)
    var_2 = module_0.reverse_linked_list(none_type_0)
    var_1.successors()
