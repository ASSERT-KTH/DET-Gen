# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 2979
    tuple_0 = (int_0,)
    module_0.reverse_linked_list(tuple_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


def test_case_2():
    int_0 = 4082
    var_0 = module_1.Node(successors=int_0, outgoing_nodes=int_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == 4082
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == 4082
    var_1 = module_0.reverse_linked_list(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == 4082
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == 4082
    var_2 = module_0.reverse_linked_list(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value is None
    assert var_2.successor is None
    assert var_2.successors == 4082
    assert var_2.predecessors == []
    assert var_2.incoming_nodes == []
    assert var_2.outgoing_nodes == 4082
    var_3 = module_0.reverse_linked_list(var_2)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "node.Node"
    assert var_3.value is None
    assert var_3.successor is None
    assert var_3.successors == 4082
    assert var_3.predecessors == []
    assert var_3.incoming_nodes == []
    assert var_3.outgoing_nodes == 4082


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -121
    set_0 = {int_0, int_0, int_0, int_0}
    node_0 = module_1.Node(successor=set_0, incoming_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {-121}
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == -121
    assert node_0.outgoing_nodes == []
    module_0.reverse_linked_list(node_0)
