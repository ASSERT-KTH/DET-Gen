# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = 863.286548 - 762.68j
    module_0.reverse_linked_list(complex_0)


def test_case_1():
    dict_0 = {}
    var_0 = module_0.reverse_linked_list(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 2852.50044
    node_0 = module_1.Node(successor=float_0, predecessors=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == pytest.approx(2852.50044, abs=0.01, rel=0.01)
    assert node_0.successors == []
    assert node_0.predecessors == pytest.approx(2852.50044, abs=0.01, rel=0.01)
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.reverse_linked_list(node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    node_0.successor()
