# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -480
    module_0.reverse_linked_list(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    module_0.reverse_linked_list(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (bool_0, tuple_0)
    node_0 = module_1.Node(
        successor=bool_0,
        predecessors=tuple_1,
        incoming_nodes=tuple_0,
        outgoing_nodes=bool_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is True
    assert node_0.successors == []
    assert node_0.predecessors == (True, (True, True))
    assert node_0.incoming_nodes == (True, True)
    assert node_0.outgoing_nodes is True
    module_0.reverse_linked_list(node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    complex_0 = -95.5 + 1156.6303j
    var_0 = module_1.Node(complex_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == (-95.5 + 1156.6303j)
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    node_0 = module_0.reverse_linked_list(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == (-95.5 + 1156.6303j)
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value == (-95.5 + 1156.6303j)
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    tuple_0 = (complex_0,)
    module_0.reverse_linked_list(tuple_0)
