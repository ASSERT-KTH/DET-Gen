# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "`d 9j `p4bO"
    module_0.reverse_linked_list(str_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xe0Z\xd1\xad\x96\xfed!5\xe7\xf7\xb6\xd6\xa8\x81"
    node_0 = module_1.Node(predecessors=bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == b"\xe0Z\xd1\xad\x96\xfed!5\xe7\xf7\xb6\xd6\xa8\x81"
    assert node_0.incoming_nodes == b"\xe0Z\xd1\xad\x96\xfed!5\xe7\xf7\xb6\xd6\xa8\x81"
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == b"\xe0Z\xd1\xad\x96\xfed!5\xe7\xf7\xb6\xd6\xa8\x81"
    assert var_0.incoming_nodes == b"\xe0Z\xd1\xad\x96\xfed!5\xe7\xf7\xb6\xd6\xa8\x81"
    assert var_0.outgoing_nodes == []
    node_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -3156
    list_0 = [int_0, int_0, int_0]
    node_0 = module_1.Node(successor=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == [-3156, -3156, -3156]
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.reverse_linked_list(node_0)
