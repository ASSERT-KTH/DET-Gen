# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 1124
    module_0.reverse_linked_list(int_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    var_1 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -2113.780586
    node_0 = module_1.Node(successor=float_0, outgoing_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == pytest.approx(-2113.780586, abs=0.01, rel=0.01)
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == pytest.approx(-2113.780586, abs=0.01, rel=0.01)
    module_0.reverse_linked_list(node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -2113.780586
    node_0 = module_1.Node(successor=float_0, outgoing_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == pytest.approx(-2113.780586, abs=0.01, rel=0.01)
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == pytest.approx(-2113.780586, abs=0.01, rel=0.01)
    node_1 = module_1.Node(predecessors=float_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == pytest.approx(-2113.780586, abs=0.01, rel=0.01)
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == pytest.approx(-2113.780586, abs=0.01, rel=0.01)
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    var_1 = module_0.reverse_linked_list(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == pytest.approx(-2113.780586, abs=0.01, rel=0.01)
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    var_1.successors()
