# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = ':T"zGh&!*scI> V,ngV'
    module_0.reverse_linked_list(str_0)


def test_case_1():
    dict_0 = {}
    var_0 = module_0.reverse_linked_list(dict_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    bool_0 = True
    none_type_1 = None
    node_0 = module_1.Node(
        successors=bool_0, predecessors=none_type_1, incoming_nodes=none_type_1
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is True
    assert node_0.predecessors is None
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    node_1 = module_1.Node(successors=none_type_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors is None
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    node_2 = module_1.Node(successor=node_1)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert node_2.value is None
    assert (
        f"{type(node_2.successor).__module__}.{type(node_2.successor).__qualname__}"
        == "node.Node"
    )
    assert node_2.successors == []
    assert node_2.predecessors == []
    assert node_2.incoming_nodes == []
    assert node_2.outgoing_nodes == []
    var_1 = module_0.reverse_linked_list(node_2)
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_2.successor is None
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert (
        f"{type(var_1.successor).__module__}.{type(var_1.successor).__qualname__}"
        == "node.Node"
    )
    assert var_1.successors is None
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    var_1.successor()
