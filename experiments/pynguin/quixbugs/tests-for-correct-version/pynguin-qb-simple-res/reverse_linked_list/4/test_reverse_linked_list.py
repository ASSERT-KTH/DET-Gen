# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.reverse_linked_list(bool_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_0.reverse_linked_list(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    bool_0 = False
    node_0 = module_1.Node(
        successor=none_type_0,
        successors=bool_0,
        incoming_nodes=none_type_0,
        outgoing_nodes=bool_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is False
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes is False
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors is False
    assert var_0.predecessors == []
    assert var_0.incoming_nodes is None
    assert var_0.outgoing_nodes is False
    bool_1 = True
    module_0.reverse_linked_list(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.reverse_linked_list(none_type_0)
    var_2 = module_0.reverse_linked_list(var_0)
    bytes_0 = b"\x92+\x1an'\xed\rE\xb9\x8cbt\xab\xda\xb3"
    node_1 = module_1.Node(
        successor=node_0,
        predecessors=node_0,
        incoming_nodes=bytes_0,
        outgoing_nodes=var_1,
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successors == []
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "node.Node"
    )
    assert node_1.incoming_nodes == b"\x92+\x1an'\xed\rE\xb9\x8cbt\xab\xda\xb3"
    assert node_1.outgoing_nodes is None
    var_3 = module_0.reverse_linked_list(node_1)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "node.Node"
    assert var_3.value is None
    assert (
        f"{type(var_3.successor).__module__}.{type(var_3.successor).__qualname__}"
        == "node.Node"
    )
    assert var_3.successors == []
    assert var_3.predecessors == []
    assert var_3.incoming_nodes == []
    assert var_3.outgoing_nodes == []
    node_0.successors()
