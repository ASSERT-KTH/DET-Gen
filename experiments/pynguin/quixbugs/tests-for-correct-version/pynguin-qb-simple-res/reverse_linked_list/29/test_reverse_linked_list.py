# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 897.8
    dict_0 = {float_0: float_0}
    module_0.reverse_linked_list(dict_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    var_1 = module_0.reverse_linked_list(none_type_0)
    var_2 = module_0.reverse_linked_list(var_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    node_0 = module_1.Node(successors=list_0, predecessors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    int_0 = 921
    int_1 = 2715
    tuple_0 = (list_0, node_0, int_0, int_1)
    tuple_1 = (tuple_0,)
    var_0 = module_0.reverse_linked_list(list_0)
    node_1 = module_1.Node(tuple_1, tuple_1, incoming_nodes=int_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.value) == 1
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.successor) == 1
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == 921
    assert node_1.outgoing_nodes == []
    module_0.reverse_linked_list(node_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    str_0 = "9AG\\"
    node_0 = module_1.Node(predecessors=none_type_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == "9AG\\"
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors is None
    assert var_0.incoming_nodes == "9AG\\"
    assert var_0.outgoing_nodes == []
    str_1 = "Tf&;|4<"
    tuple_0 = (str_1,)
    module_0.reverse_linked_list(tuple_0)
