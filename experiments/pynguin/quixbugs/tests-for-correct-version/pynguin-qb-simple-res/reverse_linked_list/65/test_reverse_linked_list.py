# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import reverse_linked_list as module_1


def test_case_0():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    node_0 = module_0.Node(predecessors=set_0, outgoing_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == {True}
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is True
    var_0 = module_1.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == {True}
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    var_0 = module_1.reverse_linked_list(bool_0)
    tuple_0 = ()
    var_1 = module_1.reverse_linked_list(tuple_0)
    var_2 = module_1.reverse_linked_list(var_0)
    var_1.successors()


def test_case_2():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.reverse_linked_list(none_type_0)
    var_1 = module_1.reverse_linked_list(none_type_0)
    var_2 = module_1.reverse_linked_list(none_type_0)
    node_0 = module_0.Node(
        bool_0, bool_0, none_type_0, none_type_0, outgoing_nodes=bool_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is True
    assert node_0.successor is True
    assert node_0.successors is None
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is True
    module_1.reverse_linked_list(node_0)
