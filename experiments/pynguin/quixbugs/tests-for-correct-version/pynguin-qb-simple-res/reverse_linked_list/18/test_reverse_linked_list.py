# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1
import builtins as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"*\xa0\x85\x7f)+\xc8K\xbd>\xba\xe8\x07D\x01Z\x04d\x02"
    module_0.reverse_linked_list(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    var_1 = module_0.reverse_linked_list(none_type_0)
    var_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "_`pZQM{^J/L%zr*R"
    node_0 = module_1.Node(str_0, str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "_`pZQM{^J/L%zr*R"
    assert node_0.successor == "_`pZQM{^J/L%zr*R"
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.reverse_linked_list(node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xa3m\xe2;\x7f\xe7"
    list_0 = [bytes_0, bytes_0, bytes_0]
    node_0 = module_1.Node(incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == [
        b"\xa3m\xe2;\x7f\xe7",
        b"\xa3m\xe2;\x7f\xe7",
        b"\xa3m\xe2;\x7f\xe7",
    ]
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == [
        b"\xa3m\xe2;\x7f\xe7",
        b"\xa3m\xe2;\x7f\xe7",
        b"\xa3m\xe2;\x7f\xe7",
    ]
    assert var_0.outgoing_nodes == []
    var_1 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == [
        b"\xa3m\xe2;\x7f\xe7",
        b"\xa3m\xe2;\x7f\xe7",
        b"\xa3m\xe2;\x7f\xe7",
    ]
    assert var_1.outgoing_nodes == []
    var_2 = module_0.reverse_linked_list(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value is None
    assert var_2.successor is None
    assert var_2.successors == []
    assert var_2.predecessors == []
    assert var_2.incoming_nodes == [
        b"\xa3m\xe2;\x7f\xe7",
        b"\xa3m\xe2;\x7f\xe7",
        b"\xa3m\xe2;\x7f\xe7",
    ]
    assert var_2.outgoing_nodes == []
    object_0 = module_2.object()
    var_3 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "node.Node"
    assert var_3.value is None
    assert var_3.successor is None
    assert var_3.successors == []
    assert var_3.predecessors == []
    assert var_3.incoming_nodes == [
        b"\xa3m\xe2;\x7f\xe7",
        b"\xa3m\xe2;\x7f\xe7",
        b"\xa3m\xe2;\x7f\xe7",
    ]
    assert var_3.outgoing_nodes == []
    var_4 = module_0.reverse_linked_list(var_0)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "node.Node"
    assert var_4.value is None
    assert var_4.successor is None
    assert var_4.successors == []
    assert var_4.predecessors == []
    assert var_4.incoming_nodes == [
        b"\xa3m\xe2;\x7f\xe7",
        b"\xa3m\xe2;\x7f\xe7",
        b"\xa3m\xe2;\x7f\xe7",
    ]
    assert var_4.outgoing_nodes == []
    module_0.reverse_linked_list(object_0)
