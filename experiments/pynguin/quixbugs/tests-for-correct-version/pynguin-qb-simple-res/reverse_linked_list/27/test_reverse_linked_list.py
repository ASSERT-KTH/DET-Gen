# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.reverse_linked_list(bool_0)


def test_case_1():
    list_0 = []
    var_0 = module_0.reverse_linked_list(list_0)


def test_case_2():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    node_0 = module_1.Node(
        successors=none_type_0,
        predecessors=none_type_0,
        incoming_nodes=none_type_0,
        outgoing_nodes=none_type_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is None
    assert node_0.predecessors is None
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes is None
    var_1 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors is None
    assert var_1.predecessors is None
    assert var_1.incoming_nodes is None
    assert var_1.outgoing_nodes is None


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    int_0 = 1566
    node_0 = module_1.Node(int_0, successors=int_0, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == 1566
    assert node_0.successor is None
    assert node_0.successors == 1566
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {*()}
    var_0 = module_0.reverse_linked_list(set_0)
    var_1 = module_0.reverse_linked_list(set_0)
    node_1 = module_1.Node(successor=int_0, predecessors=node_0, outgoing_nodes=var_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor == 1566
    assert node_1.successors == []
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "node.Node"
    )
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes is None
    module_0.reverse_linked_list(node_1)
