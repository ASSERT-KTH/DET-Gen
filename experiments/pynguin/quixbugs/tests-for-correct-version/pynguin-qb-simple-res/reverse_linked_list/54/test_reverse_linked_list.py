# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 2620
    module_0.reverse_linked_list(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)
    float_0 = 1441.1495
    module_0.reverse_linked_list(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 2401.21347
    node_0 = module_1.Node(incoming_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == pytest.approx(2401.21347, abs=0.01, rel=0.01)
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == pytest.approx(2401.21347, abs=0.01, rel=0.01)
    assert var_0.outgoing_nodes == []
    module_0.reverse_linked_list(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "`&:*Is-c+@r"
    set_0 = {str_0, str_0}
    node_0 = module_1.Node(successor=set_0, incoming_nodes=str_0, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {"`&:*Is-c+@r"}
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "`&:*Is-c+@r"
    assert node_0.outgoing_nodes == {"`&:*Is-c+@r"}
    module_0.reverse_linked_list(node_0)
