# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "%"
    module_0.reverse_linked_list(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)
    var_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "t"
    list_0 = [str_0]
    node_0 = module_1.Node(list_0, predecessors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ["t"]
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == "t"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == ["t"]
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == "t"
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    node_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    var_0 = module_0.reverse_linked_list(tuple_0)
    none_type_0 = None
    var_1 = module_0.reverse_linked_list(none_type_0)
    var_2 = module_0.reverse_linked_list(none_type_0)
    var_3 = module_0.reverse_linked_list(none_type_0)
    node_0 = module_1.Node(successor=var_2)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_4 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "node.Node"
    assert var_4.value is None
    assert var_4.successor is None
    assert var_4.successors == []
    assert var_4.predecessors == []
    assert var_4.incoming_nodes == []
    assert var_4.outgoing_nodes == []
    var_5 = module_0.reverse_linked_list(var_0)
    var_6 = module_0.reverse_linked_list(none_type_0)
    var_7 = module_0.reverse_linked_list(none_type_0)
    var_8 = module_0.reverse_linked_list(var_2)
    var_9 = module_0.reverse_linked_list(none_type_0)
    var_10 = module_0.reverse_linked_list(var_3)
    node_1 = module_1.Node(successor=var_4, successors=var_6)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successors is None
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_11 = module_0.reverse_linked_list(node_1)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(var_4.successor).__module__}.{type(var_4.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert f"{type(var_11).__module__}.{type(var_11).__qualname__}" == "node.Node"
    assert var_11.value is None
    assert (
        f"{type(var_11.successor).__module__}.{type(var_11.successor).__qualname__}"
        == "node.Node"
    )
    assert var_11.successors == []
    assert var_11.predecessors == []
    assert var_11.incoming_nodes == []
    assert var_11.outgoing_nodes == []
    var_12 = module_0.reverse_linked_list(var_7)
    int_0 = 300
    node_2 = module_1.Node(
        successor=var_6, successors=var_3, predecessors=int_0, incoming_nodes=node_1
    )
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert node_2.value is None
    assert node_2.successor is None
    assert node_2.successors is None
    assert node_2.predecessors == 300
    assert (
        f"{type(node_2.incoming_nodes).__module__}.{type(node_2.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert node_2.outgoing_nodes == []
    var_1.predecessors()
