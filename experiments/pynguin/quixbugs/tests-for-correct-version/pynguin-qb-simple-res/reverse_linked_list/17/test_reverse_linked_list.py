# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -407.523254
    module_0.reverse_linked_list(float_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    var_0 = module_0.reverse_linked_list(tuple_0)
    node_0 = module_1.Node(
        tuple_0, successors=tuple_0, predecessors=tuple_0, outgoing_nodes=tuple_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ()
    assert node_0.successor is None
    assert node_0.successors == ()
    assert node_0.predecessors == ()
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == ()
    var_1 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value == ()
    assert var_1.successor is None
    assert var_1.successors == ()
    assert var_1.predecessors == ()
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == ()
    var_2 = module_0.reverse_linked_list(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value == ()
    assert var_2.successor is None
    assert var_2.successors == ()
    assert var_2.predecessors == ()
    assert var_2.incoming_nodes == []
    assert var_2.outgoing_nodes == ()
    var_3 = module_0.reverse_linked_list(tuple_0)
    var_4 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "node.Node"
    assert var_4.value == ()
    assert var_4.successor is None
    assert var_4.successors == ()
    assert var_4.predecessors == ()
    assert var_4.incoming_nodes == []
    assert var_4.outgoing_nodes == ()
    var_5 = module_0.reverse_linked_list(tuple_0)
    var_4.successors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\tK\x84\xae\xe9\x98\xb1\x15>r)E\x9c\x8e:"
    int_0 = 1717
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    node_0 = module_1.Node(
        successor=bytes_0,
        successors=bytes_0,
        incoming_nodes=int_0,
        outgoing_nodes=int_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\tK\x84\xae\xe9\x98\xb1\x15>r)E\x9c\x8e:"
    assert node_0.successors == b"\tK\x84\xae\xe9\x98\xb1\x15>r)E\x9c\x8e:"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 1717
    assert node_0.outgoing_nodes == 1717
    module_0.reverse_linked_list(node_0)
