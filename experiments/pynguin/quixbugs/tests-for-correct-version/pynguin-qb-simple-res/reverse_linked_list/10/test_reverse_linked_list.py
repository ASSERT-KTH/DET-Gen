# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"6!D[\x177Q\x0fn\xce\xeb\xbf}\xa3G\x1f\x0fb\xdc\xf7"
    module_0.reverse_linked_list(bytes_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"/U\xe1\xdc\x10\xd3>\xa2\xf8\xcf\xd5\xe7\xf2"
    node_0 = module_1.Node(outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"/U\xe1\xdc\x10\xd3>\xa2\xf8\xcf\xd5\xe7\xf2"
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == b"/U\xe1\xdc\x10\xd3>\xa2\xf8\xcf\xd5\xe7\xf2"
    var_1 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == b"/U\xe1\xdc\x10\xd3>\xa2\xf8\xcf\xd5\xe7\xf2"
    module_0.reverse_linked_list(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    node_0 = module_1.Node(bool_0, bool_0, incoming_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is True
    assert node_0.successor is True
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes == []
    module_0.reverse_linked_list(node_0)
