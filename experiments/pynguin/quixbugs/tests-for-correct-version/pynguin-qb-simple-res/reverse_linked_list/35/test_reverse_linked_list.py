# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import builtins as module_1
import node as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.reverse_linked_list(bool_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)


def test_case_2():
    object_0 = module_1.object()
    node_0 = module_2.Node(object_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.object"
    )
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "builtins.object"
    )
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    node_0 = module_2.Node(incoming_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is False
    assert node_0.outgoing_nodes == []
    var_0 = module_2.Node(
        successor=node_0, successors=bool_0, predecessors=bool_0, outgoing_nodes=bool_0
    )
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert (
        f"{type(var_0.successor).__module__}.{type(var_0.successor).__qualname__}"
        == "node.Node"
    )
    assert var_0.successors is False
    assert var_0.predecessors is False
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes is False
    bool_1 = False
    var_1 = module_0.reverse_linked_list(var_0)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "node.Node"
    )
    assert var_0.successor is None
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert (
        f"{type(var_1.successor).__module__}.{type(var_1.successor).__qualname__}"
        == "node.Node"
    )
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes is False
    assert var_1.outgoing_nodes == []
    var_2 = module_0.reverse_linked_list(node_0)
    assert node_0.successor is None
    assert (
        f"{type(var_0.successor).__module__}.{type(var_0.successor).__qualname__}"
        == "node.Node"
    )
    assert var_1.successor is None
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value is None
    assert (
        f"{type(var_2.successor).__module__}.{type(var_2.successor).__qualname__}"
        == "node.Node"
    )
    assert var_2.successors is False
    assert var_2.predecessors is False
    assert var_2.incoming_nodes == []
    assert var_2.outgoing_nodes is False
    var_3 = module_0.reverse_linked_list(bool_1)
    tuple_0 = (bool_1,)
    module_0.reverse_linked_list(tuple_0)
