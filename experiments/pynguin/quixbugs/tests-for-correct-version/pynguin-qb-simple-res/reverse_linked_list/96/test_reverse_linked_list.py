# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 323
    module_0.reverse_linked_list(int_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "|aZ>7mq\x0bxI\t>UpA"
    list_0 = [str_0, str_0, str_0]
    list_1 = [str_0, list_0, str_0, list_0]
    node_0 = module_1.Node(successor=str_0, incoming_nodes=str_0, outgoing_nodes=list_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "|aZ>7mq\x0bxI\t>UpA"
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "|aZ>7mq\x0bxI\t>UpA"
    assert node_0.outgoing_nodes == [
        "|aZ>7mq\x0bxI\t>UpA",
        ["|aZ>7mq\x0bxI\t>UpA", "|aZ>7mq\x0bxI\t>UpA", "|aZ>7mq\x0bxI\t>UpA"],
        "|aZ>7mq\x0bxI\t>UpA",
        ["|aZ>7mq\x0bxI\t>UpA", "|aZ>7mq\x0bxI\t>UpA", "|aZ>7mq\x0bxI\t>UpA"],
    ]
    module_0.reverse_linked_list(node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    node_0.successors()
