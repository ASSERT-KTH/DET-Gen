# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -3081
    module_0.reverse_linked_list(int_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    node_0 = module_1.Node(bool_0, bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is True
    assert node_0.successor is True
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.reverse_linked_list(node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"}\xc3\xf4\x84nF\x91\\R\t\x9b5\xec\xc0{\xc4>Q"
    var_0 = module_1.Node(bytes_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == b"}\xc3\xf4\x84nF\x91\\R\t\x9b5\xec\xc0{\xc4>Q"
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    var_1 = module_1.Node(
        var_0, successors=bytes_0, predecessors=bytes_0, incoming_nodes=var_0
    )
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "node.Node"
    )
    assert var_1.successor is None
    assert var_1.successors == b"}\xc3\xf4\x84nF\x91\\R\t\x9b5\xec\xc0{\xc4>Q"
    assert var_1.predecessors == b"}\xc3\xf4\x84nF\x91\\R\t\x9b5\xec\xc0{\xc4>Q"
    assert (
        f"{type(var_1.incoming_nodes).__module__}.{type(var_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert var_1.outgoing_nodes == []
    var_2 = module_0.reverse_linked_list(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert (
        f"{type(var_2.value).__module__}.{type(var_2.value).__qualname__}"
        == "node.Node"
    )
    assert var_2.successor is None
    assert var_2.successors == b"}\xc3\xf4\x84nF\x91\\R\t\x9b5\xec\xc0{\xc4>Q"
    assert var_2.predecessors == b"}\xc3\xf4\x84nF\x91\\R\t\x9b5\xec\xc0{\xc4>Q"
    assert (
        f"{type(var_2.incoming_nodes).__module__}.{type(var_2.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert var_2.outgoing_nodes == []
    int_0 = -959
    module_0.reverse_linked_list(int_0)
