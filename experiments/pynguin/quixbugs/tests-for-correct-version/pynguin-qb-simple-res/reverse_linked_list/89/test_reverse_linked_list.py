# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -71.62
    module_0.reverse_linked_list(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    var_1 = module_0.reverse_linked_list(var_0)
    var_2 = module_0.reverse_linked_list(var_0)
    var_2.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "k=8G:^*+H\n4"
    none_type_0 = None
    node_0 = module_1.Node(str_0, successors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "k=8G:^*+H\n4"
    assert node_0.successor is None
    assert node_0.successors is None
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == "k=8G:^*+H\n4"
    assert var_0.successor is None
    assert var_0.successors is None
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    node_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "k=8G:^*+H\n4"
    none_type_0 = None
    node_0 = module_1.Node(str_0, successors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "k=8G:^*+H\n4"
    assert node_0.successor is None
    assert node_0.successors is None
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == "k=8G:^*+H\n4"
    assert var_0.successor is None
    assert var_0.successors is None
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    set_0 = set()
    var_1 = module_1.Node(set_0, var_0, predecessors=var_0, outgoing_nodes=node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value == {*()}
    assert (
        f"{type(var_1.successor).__module__}.{type(var_1.successor).__qualname__}"
        == "node.Node"
    )
    assert var_1.successors == []
    assert (
        f"{type(var_1.predecessors).__module__}.{type(var_1.predecessors).__qualname__}"
        == "node.Node"
    )
    assert var_1.incoming_nodes == []
    assert (
        f"{type(var_1.outgoing_nodes).__module__}.{type(var_1.outgoing_nodes).__qualname__}"
        == "node.Node"
    )
    var_2 = module_0.reverse_linked_list(none_type_0)
    var_3 = module_0.reverse_linked_list(none_type_0)
    var_4 = module_0.reverse_linked_list(var_1)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(var_0.successor).__module__}.{type(var_0.successor).__qualname__}"
        == "node.Node"
    )
    assert var_1.successor is None
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "node.Node"
    assert var_4.value == "k=8G:^*+H\n4"
    assert (
        f"{type(var_4.successor).__module__}.{type(var_4.successor).__qualname__}"
        == "node.Node"
    )
    assert var_4.successors is None
    assert var_4.predecessors == []
    assert var_4.incoming_nodes == []
    assert var_4.outgoing_nodes == []
    str_1 = "/AMsM]V\x0bU~D {{F>B@y7"
    module_0.reverse_linked_list(str_1)
