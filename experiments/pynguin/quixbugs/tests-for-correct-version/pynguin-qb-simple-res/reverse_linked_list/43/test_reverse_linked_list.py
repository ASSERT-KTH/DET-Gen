# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '7Y"SoSSRB&UnN6J'
    module_0.reverse_linked_list(str_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    int_0 = 2284
    node_0 = module_1.Node(bool_0, outgoing_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is False
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == 2284
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is False
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == 2284
    module_0.reverse_linked_list(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"p\xd0\\\xfc\x90\x15\x12%4\x8a\xb5q"
    none_type_0 = None
    node_0 = module_1.Node(
        successor=bytes_0, successors=none_type_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"p\xd0\\\xfc\x90\x15\x12%4\x8a\xb5q"
    assert node_0.successors is None
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"p\xd0\\\xfc\x90\x15\x12%4\x8a\xb5q"
    module_0.reverse_linked_list(node_0)
