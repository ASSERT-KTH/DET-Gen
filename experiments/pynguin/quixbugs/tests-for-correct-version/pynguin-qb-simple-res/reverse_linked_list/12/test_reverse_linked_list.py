# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.reverse_linked_list(bool_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    float_0 = 729.62
    node_0 = module_1.Node(successor=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == pytest.approx(729.62, abs=0.01, rel=0.01)
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.reverse_linked_list(node_0)


def test_case_3():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    var_0 = module_1.Node(dict_0, dict_0, predecessors=none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == {None: None}
    assert var_0.successor == {None: None}
    assert var_0.successors == []
    assert var_0.predecessors is None
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    var_1 = module_0.reverse_linked_list(none_type_0)
    var_2 = module_0.reverse_linked_list(none_type_0)
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_3 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "node.Node"
    assert var_3.value is None
    assert var_3.successor is None
    assert var_3.successors == []
    assert var_3.predecessors == []
    assert var_3.incoming_nodes == []
    assert var_3.outgoing_nodes == []
