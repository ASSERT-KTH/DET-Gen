# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.reverse_linked_list(bool_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\n\xec\x08R\xdb\x1fr\xd1\xbf;\xcf\xfc\xc1\xa1\x95\xfcwr7\x80"
    node_0 = module_1.Node(bytes_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert (
        node_0.value == b"\n\xec\x08R\xdb\x1fr\xd1\xbf;\xcf\xfc\xc1\xa1\x95\xfcwr7\x80"
    )
    assert node_0.successor is None
    assert node_0.successors == []
    assert (
        node_0.predecessors
        == b"\n\xec\x08R\xdb\x1fr\xd1\xbf;\xcf\xfc\xc1\xa1\x95\xfcwr7\x80"
    )
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert (
        var_0.value == b"\n\xec\x08R\xdb\x1fr\xd1\xbf;\xcf\xfc\xc1\xa1\x95\xfcwr7\x80"
    )
    assert var_0.successor is None
    assert var_0.successors == []
    assert (
        var_0.predecessors
        == b"\n\xec\x08R\xdb\x1fr\xd1\xbf;\xcf\xfc\xc1\xa1\x95\xfcwr7\x80"
    )
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    node_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\n\xec\x08R\xdb\x1fr\xd1\xbf;\xcf\xfc\xc1\xa1\x95\xfcwr7\x80"
    none_type_0 = None
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, predecessors=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert (
        node_0.successor
        == b"\n\xec\x08R\xdb\x1fr\xd1\xbf;\xcf\xfc\xc1\xa1\x95\xfcwr7\x80"
    )
    assert (
        node_0.successors
        == b"\n\xec\x08R\xdb\x1fr\xd1\xbf;\xcf\xfc\xc1\xa1\x95\xfcwr7\x80"
    )
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.reverse_linked_list(node_0)
