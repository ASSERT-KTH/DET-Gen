# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import builtins as module_1
import node as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -2099
    tuple_0 = (int_0,)
    module_0.reverse_linked_list(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "\\q_$i>|cp2![D"
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    none_type_1 = None
    var_1 = module_0.reverse_linked_list(none_type_1)
    module_0.reverse_linked_list(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "Mfwp\tSqz%"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x12\xdc\x9a9\xe5\x0b\xc3\xac\x17\xa9\xa2\xcd\xa5\xf4"
    node_0 = module_2.Node(successor=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\x12\xdc\x9a9\xe5\x0b\xc3\xac\x17\xa9\xa2\xcd\xa5\xf4"
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.reverse_linked_list(node_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    node_0 = module_2.Node(incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes is None
    assert var_0.outgoing_nodes == []
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.reverse_linked_list(tuple_0)
