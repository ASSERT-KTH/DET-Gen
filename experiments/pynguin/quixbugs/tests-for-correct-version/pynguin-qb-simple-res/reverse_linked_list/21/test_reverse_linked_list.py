# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -584.0
    module_0.reverse_linked_list(float_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xc3\xe7\x16\xffW\x14M\xe1\x00\xa6\xdd\xec\xf5\x01\x95TW4"
    set_0 = {bytes_0, bytes_0}
    node_0 = module_1.Node(set_0, set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {
        b"\xc3\xe7\x16\xffW\x14M\xe1\x00\xa6\xdd\xec\xf5\x01\x95TW4"
    }
    assert node_0.successor == {
        b"\xc3\xe7\x16\xffW\x14M\xe1\x00\xa6\xdd\xec\xf5\x01\x95TW4"
    }
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.reverse_linked_list(node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xc3\xe7\x16\xffW\x14M\xe1\x00\xa6\xdd\xec\xf5\x01\x95TW4"
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    set_0 = {bytes_0, bytes_0}
    node_1 = module_1.Node(set_0, set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == {
        b"\xc3\xe7\x16\xffW\x14M\xe1\x00\xa6\xdd\xec\xf5\x01\x95TW4"
    }
    assert node_1.successor == {
        b"\xc3\xe7\x16\xffW\x14M\xe1\x00\xa6\xdd\xec\xf5\x01\x95TW4"
    }
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    module_0.reverse_linked_list(node_1)
