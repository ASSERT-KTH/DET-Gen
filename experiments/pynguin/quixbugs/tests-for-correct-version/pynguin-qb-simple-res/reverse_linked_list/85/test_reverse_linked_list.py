# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "UnE|P4"
    module_0.reverse_linked_list(str_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    node_0 = module_1.Node(successors=bool_0, outgoing_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is True
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is True
    node_1 = module_1.Node(successors=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "node.Node"
    )
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert (
        f"{type(var_0.successors).__module__}.{type(var_0.successors).__qualname__}"
        == "node.Node"
    )
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    set_0 = {var_0, node_1, node_1, bool_0}
    bool_1 = False
    var_1 = module_0.reverse_linked_list(node_1)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert (
        f"{type(var_1.successors).__module__}.{type(var_1.successors).__qualname__}"
        == "node.Node"
    )
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    node_2 = module_1.Node(successor=set_0, successors=node_1, outgoing_nodes=bool_1)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert node_2.value is None
    assert (
        f"{type(node_2.successor).__module__}.{type(node_2.successor).__qualname__}"
        == "builtins.set"
    )
    assert len(node_2.successor) == 2
    assert (
        f"{type(node_2.successors).__module__}.{type(node_2.successors).__qualname__}"
        == "node.Node"
    )
    assert node_2.predecessors == []
    assert node_2.incoming_nodes == []
    assert node_2.outgoing_nodes is False
    module_0.reverse_linked_list(node_2)
