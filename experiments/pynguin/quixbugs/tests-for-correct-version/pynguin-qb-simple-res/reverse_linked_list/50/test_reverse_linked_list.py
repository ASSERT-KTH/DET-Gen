# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import reverse_linked_list as module_1
import node as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    object_0 = module_0.object()
    module_1.reverse_linked_list(object_0)


def test_case_1():
    set_0 = set()
    var_0 = module_1.reverse_linked_list(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    node_0 = module_2.Node(
        none_type_0, successors=none_type_0, incoming_nodes=set_0, outgoing_nodes=set_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is None
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {None}
    assert node_0.outgoing_nodes == {None}
    node_1 = module_2.Node(successor=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_0 = module_1.reverse_linked_list(node_1)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert (
        f"{type(var_0.successor).__module__}.{type(var_0.successor).__qualname__}"
        == "node.Node"
    )
    assert var_0.successors is None
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == {None}
    assert var_0.outgoing_nodes == {None}
    none_type_1 = None
    var_1 = module_1.reverse_linked_list(none_type_1)
    none_type_2 = None
    var_2 = module_1.reverse_linked_list(none_type_2)
    var_3 = module_1.reverse_linked_list(none_type_2)
    none_type_3 = None
    var_4 = module_1.reverse_linked_list(none_type_3)
    var_5 = module_1.reverse_linked_list(none_type_3)
    tuple_0 = (var_5, var_5, none_type_3, var_5)
    var_6 = module_1.reverse_linked_list(none_type_3)
    var_7 = module_1.reverse_linked_list(var_4)
    module_1.reverse_linked_list(tuple_0)
