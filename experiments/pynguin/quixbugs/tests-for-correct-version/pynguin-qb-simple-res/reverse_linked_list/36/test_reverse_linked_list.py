# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import builtins as module_1
import node as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = -200.107 - 149.119j
    module_0.reverse_linked_list(complex_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    object_0 = module_1.object()
    none_type_0 = None
    node_0 = module_2.Node(predecessors=object_0, incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert (
        f"{type(node_0.predecessors).__module__}.{type(node_0.predecessors).__qualname__}"
        == "builtins.object"
    )
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert (
        f"{type(var_0.predecessors).__module__}.{type(var_0.predecessors).__qualname__}"
        == "builtins.object"
    )
    assert var_0.incoming_nodes is None
    assert var_0.outgoing_nodes == []
    var_1 = module_0.reverse_linked_list(none_type_0)
    var_2 = module_0.reverse_linked_list(var_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value is None
    assert var_2.successor is None
    assert var_2.successors == []
    assert (
        f"{type(var_2.predecessors).__module__}.{type(var_2.predecessors).__qualname__}"
        == "builtins.object"
    )
    assert var_2.incoming_nodes is None
    assert var_2.outgoing_nodes == []
    var_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"=\xf0"
    none_type_0 = None
    node_0 = module_2.Node(
        successor=bytes_0,
        successors=none_type_0,
        predecessors=none_type_0,
        outgoing_nodes=bytes_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"=\xf0"
    assert node_0.successors is None
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"=\xf0"
    var_0 = module_0.reverse_linked_list(none_type_0)
    module_0.reverse_linked_list(node_0)
