# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "y(\rEgE"
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)
    module_0.reverse_linked_list(str_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    var_0 = module_0.reverse_linked_list(bool_0)
    node_0 = module_1.Node(successors=var_0, outgoing_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is None
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is False
    var_1 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors is None
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes is False
    var_1.successor()


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    var_0 = module_0.reverse_linked_list(list_0)
    bytes_0 = b"\xf8x\xed\x06\x04\x04\xc7\x9e4K\x8a|\nO\xffm~H"
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\xf8x\xed\x06\x04\x04\xc7\x9e4K\x8a|\nO\xffm~H"
    assert node_0.successors == b"\xf8x\xed\x06\x04\x04\xc7\x9e4K\x8a|\nO\xffm~H"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.reverse_linked_list(node_0)
