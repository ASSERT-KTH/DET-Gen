# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 742
    module_0.reverse_linked_list(int_0)


def test_case_1():
    dict_0 = {}
    var_0 = module_0.reverse_linked_list(dict_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x87\xa4M\x90\x19\xbf\xc93\xf8\xe0x\xc6\x0e\x19"
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    tuple_1 = (bytes_0, bool_0, tuple_0)
    node_0 = module_1.Node(successor=tuple_1, successors=bool_1, incoming_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == (
        b"\x87\xa4M\x90\x19\xbf\xc93\xf8\xe0x\xc6\x0e\x19",
        False,
        (False, True),
    )
    assert node_0.successors is True
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is False
    assert node_0.outgoing_nodes == []
    module_0.reverse_linked_list(node_0)
