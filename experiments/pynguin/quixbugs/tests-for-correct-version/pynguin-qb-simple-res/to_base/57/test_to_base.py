# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import to_base as module_0
import re as module_1
import string as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 1343.64
    module_0.to_base(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -727
    var_0 = module_0.to_base(int_0, int_0)
    assert var_0 == ""
    var_0.setdefault(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xfc\xac@\x8ak\xae\xf36\x12\xe3\xa1;\xf3\xd7\xfd\xccm\xfc\t\x01"
    module_0.to_base(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    var_0 = module_0.to_base(regex_flag_0, regex_flag_0)
    assert var_0 == "10"
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    template_0 = module_2.Template(regex_flag_0)
    assert (
        f"{type(template_0).__module__}.{type(template_0).__qualname__}"
        == "string.Template"
    )
    assert template_0.template == module_1.RegexFlag.LOCALE
    assert module_2.whitespace == " \t\n\r\x0b\x0c"
    assert module_2.ascii_lowercase == "abcdefghijklmnopqrstuvwxyz"
    assert module_2.ascii_uppercase == "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    assert (
        module_2.ascii_letters == "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    )
    assert module_2.digits == "0123456789"
    assert module_2.hexdigits == "0123456789abcdefABCDEF"
    assert module_2.octdigits == "01234567"
    assert module_2.punctuation == "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
    assert (
        module_2.printable
        == "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\x0b\x0c"
    )
    assert module_2.Template.delimiter == "$"
    assert module_2.Template.idpattern == "(?a:[_a-z][_a-z0-9]*)"
    assert module_2.Template.braceidpattern is None
    assert module_2.Template.flags == module_1.RegexFlag.IGNORECASE
    assert (
        f"{type(module_2.Template.pattern).__module__}.{type(module_2.Template.pattern).__qualname__}"
        == "re.Pattern"
    )
    module_0.to_base(regex_flag_0, template_0)
