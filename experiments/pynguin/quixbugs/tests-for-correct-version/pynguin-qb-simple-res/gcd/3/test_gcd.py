# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import gcd as module_0


def test_case_0():
    bool_0 = True
    var_0 = module_0.gcd(bool_0, bool_0)
    assert var_0 is True
    var_1 = module_0.gcd(bool_0, bool_0)
    assert var_1 is True
    var_2 = module_0.gcd(bool_0, bool_0)
    assert var_2 is True
    var_3 = module_0.gcd(var_1, var_1)
    assert var_3 is True
    int_0 = 937
    var_4 = module_0.gcd(int_0, var_0)
    assert var_4 is True
    var_5 = module_0.gcd(bool_0, var_2)
    assert var_5 is True
    var_6 = module_0.gcd(var_0, var_2)
    assert var_6 is True
    var_7 = module_0.gcd(var_1, var_5)
    assert var_7 is True
    var_8 = module_0.gcd(bool_0, bool_0)
    assert var_8 is True
    var_9 = module_0.gcd(bool_0, bool_0)
    assert var_9 is True
    var_10 = module_0.gcd(var_5, var_9)
    assert var_10 is True
    var_11 = module_0.gcd(var_7, var_6)
    assert var_11 is True
    var_12 = module_0.gcd(var_11, var_8)
    assert var_12 is True
    var_13 = module_0.gcd(var_8, var_1)
    assert var_13 is True
    var_14 = module_0.gcd(bool_0, var_9)
    assert var_14 is True
    var_15 = module_0.gcd(var_2, var_1)
    assert var_15 is True
    float_0 = -1833.065152
    var_16 = module_0.gcd(float_0, var_4)
    assert var_16 == pytest.approx(2.2737367544323206e-13, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.gcd(none_type_0, none_type_0)
