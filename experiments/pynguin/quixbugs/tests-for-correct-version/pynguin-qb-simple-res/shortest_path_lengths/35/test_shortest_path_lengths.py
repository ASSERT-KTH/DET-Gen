# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import collections as module_0
import shortest_path_lengths as module_1
import node as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    str_0 = "YAA2P\nb\x0b1[v:B8%\rqu"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    defaultdict_0 = module_0.defaultdict(**dict_0)
    assert (
        f"{type(defaultdict_0).__module__}.{type(defaultdict_0).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(defaultdict_0) == 1
    assert (
        f"{type(module_0.defaultdict.default_factory).__module__}.{type(module_0.defaultdict.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = module_1.shortest_path_lengths(bool_0, defaultdict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(var_0) == 1
    node_0 = module_2.Node(var_0, predecessors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(node_0.value) == 1
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_1.shortest_path_lengths(node_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 1294
    module_1.shortest_path_lengths(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_1.shortest_path_lengths(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    str_0 = "C~rjt ^\x0cny&h:"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    defaultdict_0 = module_0.defaultdict(**dict_0)
    assert (
        f"{type(defaultdict_0).__module__}.{type(defaultdict_0).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(defaultdict_0) == 1
    assert (
        f"{type(module_0.defaultdict.default_factory).__module__}.{type(module_0.defaultdict.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = module_1.shortest_path_lengths(bool_0, defaultdict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(var_0) == 2
    var_0.successor()
