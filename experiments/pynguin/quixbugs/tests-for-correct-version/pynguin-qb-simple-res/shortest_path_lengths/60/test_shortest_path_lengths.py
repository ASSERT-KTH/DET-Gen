# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_lengths as module_0
import collections as module_1
import builtins as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.shortest_path_lengths(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    module_0.shortest_path_lengths(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -1886
    dict_0 = {int_0: int_0, int_0: int_0}
    var_0 = module_0.shortest_path_lengths(int_0, dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_1.defaultdict.default_factory).__module__}.{type(module_1.defaultdict.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_1 = module_0.shortest_path_lengths(int_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(var_1) == 1
    object_0 = module_2.object()
    module_0.shortest_path_lengths(object_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1886
    dict_0 = {int_0: int_0, int_0: int_0}
    var_0 = module_0.shortest_path_lengths(int_0, dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_1.defaultdict.default_factory).__module__}.{type(module_1.defaultdict.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_1 = module_0.shortest_path_lengths(int_0, dict_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(var_1) == 1
    bool_0 = True
    var_2 = module_0.shortest_path_lengths(bool_0, var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(var_2) == 2
    var_2.successors()


def test_case_4():
    int_0 = 96
    dict_0 = {int_0: int_0, int_0: int_0}
    var_0 = module_0.shortest_path_lengths(int_0, dict_0)
    var_1 = module_0.shortest_path_lengths(dict_0, var_0)
