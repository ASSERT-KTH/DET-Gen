# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_lengths as module_0
import collections as module_1
import node as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 2312
    module_0.shortest_path_lengths(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -4492
    module_0.shortest_path_lengths(int_0, int_0)


def test_case_2():
    int_0 = -4485
    str_0 = ""
    var_0 = module_0.shortest_path_lengths(int_0, str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(var_0) == 0
    assert (
        f"{type(module_1.defaultdict.default_factory).__module__}.{type(module_1.defaultdict.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    list_0 = []
    var_0 = module_0.shortest_path_lengths(bool_0, list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_1.defaultdict.default_factory).__module__}.{type(module_1.defaultdict.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_1 = module_2.Node(bool_0, bool_0, bool_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is True
    assert var_1.successor is True
    assert var_1.successors is True
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    module_0.shortest_path_lengths(var_1, var_1)
