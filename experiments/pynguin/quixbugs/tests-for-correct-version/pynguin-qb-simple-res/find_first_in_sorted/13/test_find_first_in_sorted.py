# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 2298.007
    tuple_0 = (float_0,)
    module_0.find_first_in_sorted(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    str_0 = "pW"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    int_0 = -649
    var_1 = module_0.find_first_in_sorted(set_0, set_0)
    assert var_1 == -1
    module_0.find_first_in_sorted(int_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "yq]U\\"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -1261
    set_0 = {int_0}
    tuple_0 = (int_0, set_0, set_0)
    var_0 = module_0.find_first_in_sorted(tuple_0, set_0)
    assert var_0 == 1
    bytes_0 = b"s\x82(\x92\xdfM\x0e!\x9a`:G\x83(\x97\xcd\xc3"
    var_1 = module_0.find_first_in_sorted(bytes_0, int_0)
    assert var_1 == -1
    bool_0 = True
    module_0.find_first_in_sorted(var_0, bool_0)


def test_case_5():
    float_0 = 2298.007
    tuple_0 = (float_0,)
    var_0 = module_0.find_first_in_sorted(tuple_0, float_0)
    assert var_0 == 0


def test_case_6():
    int_0 = -2163
    tuple_0 = ()
    tuple_1 = (int_0, tuple_0)
    var_0 = module_0.find_first_in_sorted(tuple_1, tuple_0)
    assert var_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 11
    set_0 = {int_0}
    tuple_0 = (int_0, set_0, set_0)
    var_0 = module_0.find_first_in_sorted(tuple_0, set_0)
    assert var_0 == 1
    bool_0 = True
    tuple_1 = (bool_0, bool_0, var_0)
    var_1 = module_0.find_first_in_sorted(tuple_1, var_0)
    assert var_1 == 0
    bool_1 = True
    str_0 = "UhM\nh4&hr(v{<gd@wM.k"
    var_2 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_2 == -1
    module_0.find_first_in_sorted(bool_1, var_2)
