# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.find_first_in_sorted(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    object_0 = module_1.object()
    none_type_0 = None
    var_0 = module_0.find_first_in_sorted(list_0, none_type_0)
    assert var_0 == -1
    module_0.find_first_in_sorted(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 1372.04
    module_0.find_first_in_sorted(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bool_1 = True
    tuple_0 = (bool_0, bool_0, set_0, bool_1)
    module_0.find_first_in_sorted(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "|_O(YlV_++~aB"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_0.find_first_in_sorted(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "+"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == 0
    bool_0 = True
    complex_0 = -4222.1515 + 455j
    module_0.find_first_in_sorted(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "\x0c'ln&+9e5lA'>.(]"
    tuple_0 = (str_0, str_0)
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    var_1 = module_0.find_first_in_sorted(tuple_0, str_0)
    assert var_1 == 0
    var_2 = module_0.find_first_in_sorted(tuple_0, str_0)
    assert var_2 == 0
    bytes_0 = b"0E\xb8"
    module_0.find_first_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "\x0c'ln&+9e5lA'>.(]"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    tuple_0 = (var_0, str_0)
    var_1 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_1 == -1
    var_2 = module_0.find_first_in_sorted(tuple_0, str_0)
    assert var_2 == 1
    bytes_0 = b"0E\xb8"
    module_0.find_first_in_sorted(bytes_0, bytes_0)
