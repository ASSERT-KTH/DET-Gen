# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"0\xd6\xe9TW/o\x88\xd6\xfd\xec\x0c9"
    module_0.find_first_in_sorted(bytes_0, bytes_0)


def test_case_1():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.find_first_in_sorted(tuple_0, set_0)
    assert var_0 == 0
    var_1 = module_0.find_first_in_sorted(set_0, tuple_0)
    assert var_1 == -1


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)


def test_case_3():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.find_first_in_sorted(tuple_0, set_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "[&&kym"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    var_0 = module_0.find_first_in_sorted(tuple_0, bool_0)
    assert var_0 == 0
    none_type_0 = None
    complex_0 = -2355.719416 + 4219.0162j
    module_0.find_first_in_sorted(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -1675
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    var_0 = module_0.find_first_in_sorted(tuple_0, bool_0)
    assert var_0 == 1
    var_1 = module_0.find_first_in_sorted(tuple_0, int_0)
    assert var_1 == 0
    module_0.find_first_in_sorted(int_0, bool_0)
