# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xad\xec"
    module_0.find_first_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    dict_0 = {}
    var_0 = module_0.find_first_in_sorted(dict_0, bool_0)
    assert var_0 == -1
    none_type_0 = None
    module_0.find_first_in_sorted(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    var_0 = module_0.find_first_in_sorted(tuple_0, dict_0)
    assert var_0 == 1
    module_0.find_first_in_sorted(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'v7tA-MJ\r<02]Zq\x0c\\"\\?o'
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_0.find_first_in_sorted(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "L\x0b\\"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    var_1 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_1 == -1
    object_0 = module_1.object()
    module_0.find_first_in_sorted(str_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_1)
    var_0 = module_0.find_first_in_sorted(tuple_0, bool_1)
    assert var_0 == 0
    bool_2 = True
    module_0.find_first_in_sorted(bool_2, bool_2)
