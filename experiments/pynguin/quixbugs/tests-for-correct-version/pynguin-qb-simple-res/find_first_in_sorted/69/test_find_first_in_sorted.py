# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_first_in_sorted as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -722
    set_0 = {int_0, int_0}
    module_0.find_first_in_sorted(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    str_0 = "3"
    var_0 = module_0.find_first_in_sorted(list_0, str_0)
    assert var_0 == -1
    list_1 = [list_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.find_first_in_sorted(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -4626.091656
    module_0.find_first_in_sorted(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    tuple_0 = (list_0, object_0, object_0)
    var_0 = module_0.find_first_in_sorted(tuple_0, object_0)
    assert var_0 == 1
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"O\x91\xdb"
    module_0.find_first_in_sorted(bytes_0, bytes_0)


def test_case_5():
    str_0 = "/w2S)y3>7%"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == -1
    dict_0 = {}
    object_0 = module_1.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "H"
    var_0 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_0 == 0
    var_1 = module_0.find_first_in_sorted(str_0, str_0)
    assert var_1 == 0
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -1366
    list_0 = [int_0, int_0, int_0]
    var_0 = module_0.find_first_in_sorted(list_0, int_0)
    assert var_0 == 0
    tuple_0 = (list_0, list_0, list_0)
    var_1 = module_0.find_first_in_sorted(tuple_0, list_0)
    assert var_1 == 0
    none_type_0 = None
    module_0.find_first_in_sorted(none_type_0, none_type_0)
