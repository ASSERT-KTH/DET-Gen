# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xa7\x05\x84\xd0\xee\xc5y\xc7\x15J\x1d\xd1\xf5\xe4\x1dZ\xbb&X"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.longest_common_subsequence(dict_0, dict_0)


def test_case_1():
    none_type_0 = None
    complex_0 = -1272.416 - 373.149j
    var_0 = module_0.longest_common_subsequence(complex_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, complex_0)
    assert var_1 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_1, var_1)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(var_1, var_2)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(var_1, var_2)
    assert var_4 == ""
    bytes_0 = b"\xe8eMp\xc1\x7f"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    bytes_0 = b"=;\x1a?\xfb\x7f\xceaL\x96>U\xd6\x9d"
    object_0 = module_1.object()
    set_0 = set()
    tuple_0 = (bool_0, set_0, set_0)
    var_0 = module_0.longest_common_subsequence(tuple_0, bytes_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(set_0, bool_0)
    assert var_1 == ""
    module_0.longest_common_subsequence(object_0, tuple_0)
