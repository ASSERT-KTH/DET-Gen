# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 949
    module_0.longest_common_subsequence(int_0, int_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(var_0, none_type_0)
    assert var_1 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_0 == ""
    module_0.longest_common_subsequence(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xfd\xfe\xc3\xc9\xeb"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


def test_case_4():
    str_0 = "w4\\"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "w4\\"
    set_0 = set()
    str_1 = "xwZk"
    var_1 = module_0.longest_common_subsequence(str_1, str_1)
    assert var_1 == "xwZk"
    var_2 = module_0.longest_common_subsequence(set_0, str_1)
    assert var_2 == ""
    str_2 = "uBF:x"
    var_3 = module_0.longest_common_subsequence(str_1, str_1)
    assert var_3 == "xwZk"
    var_4 = module_0.longest_common_subsequence(str_2, str_2)
    assert var_4 == "uBF:x"
    list_0 = [var_2]
    var_5 = module_0.longest_common_subsequence(list_0, var_4)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(str_2, var_4)
    assert var_6 == "uBF:x"
    var_7 = module_0.longest_common_subsequence(var_4, var_4)
    assert var_7 == "uBF:x"
    var_8 = module_0.longest_common_subsequence(var_6, var_4)
    assert var_8 == "uBF:x"
    var_9 = module_0.longest_common_subsequence(str_2, var_8)
    assert var_9 == "uBF:x"
