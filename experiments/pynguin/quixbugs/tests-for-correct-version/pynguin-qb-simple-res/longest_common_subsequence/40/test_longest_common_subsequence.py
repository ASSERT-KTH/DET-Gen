# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "-]GRk:y`"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "-]GRk:y`"
    bool_0 = True
    list_0 = [bool_0, bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_1, var_1)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(var_0, none_type_0)
    assert var_3 == ""


def test_case_2():
    bool_0 = False
    none_type_0 = None
    int_0 = -388
    var_0 = module_0.longest_common_subsequence(none_type_0, int_0)
    assert var_0 == ""
    tuple_0 = (bool_0,)
    var_1 = module_0.longest_common_subsequence(tuple_0, bool_0)
    assert var_1 == ""
    dict_0 = {tuple_0: tuple_0, tuple_0: var_1, bool_0: tuple_0, var_1: bool_0}
    var_2 = module_0.longest_common_subsequence(dict_0, bool_0)
    assert var_2 == ""
    none_type_1 = None
    var_3 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(bool_0, var_3)
    assert var_5 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "Er]ZkF6/sP\na{0eZ"
    tuple_0 = ()
    tuple_1 = (tuple_0, str_0)
    bytes_0 = b"1\xa8\xe3\xaf\xd6"
    var_0 = module_0.longest_common_subsequence(bytes_0, str_0)
    assert var_0 == ""
    bool_0 = True
    var_1 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_0, bytes_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(tuple_0, str_0)
    assert var_3 == ""
    tuple_2 = (tuple_1, bool_0)
    none_type_0 = None
    var_4 = module_0.longest_common_subsequence(tuple_2, none_type_0)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(var_4, tuple_0)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_6 == ""
    bool_1 = True
    module_0.longest_common_subsequence(bool_1, bool_1)
