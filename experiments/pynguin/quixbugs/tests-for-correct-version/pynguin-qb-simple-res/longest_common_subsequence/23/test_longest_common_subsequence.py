# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 874
    module_0.longest_common_subsequence(int_0, int_0)


def test_case_1():
    dict_0 = {}
    var_0 = module_0.longest_common_subsequence(dict_0, dict_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(dict_0, dict_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(dict_0, var_1)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(dict_0, dict_0)
    assert var_3 == ""


def test_case_2():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(list_0, none_type_0)
    assert var_0 == ""


def test_case_3():
    str_0 = "ns)7p"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "ns)7p"
    none_type_0 = None
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    float_0 = 418.0
    var_2 = module_0.longest_common_subsequence(var_0, var_1)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(var_1, float_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(var_3, var_2)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_6 == ""


def test_case_4():
    dict_0 = {}
    none_type_0 = None
    int_0 = 3398
    var_0 = module_0.longest_common_subsequence(none_type_0, int_0)
    assert var_0 == ""
    bytes_0 = b"?\xc9P\x016\x89\xc7\x0cd\xa8\x98/\xcf/\xe0;\xdd*\x03"
    str_0 = "xJ"
    tuple_0 = (dict_0, bytes_0, str_0)
    tuple_1 = (tuple_0,)
    none_type_1 = None
    var_1 = module_0.longest_common_subsequence(tuple_1, none_type_1)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(bytes_0, tuple_0)
    assert var_2 == ""
