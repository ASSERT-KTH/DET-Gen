# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.longest_common_subsequence(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_2 == ""


def test_case_2():
    bytes_0 = b"\x7f\x930\x89#C-\xba\x8a\x8f"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bytes_0, none_type_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "\x0b__HZpf\r5DK7\r"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "\x0b__HZpf\r5DK7\r"
    var_1 = module_0.longest_common_subsequence(var_0, str_0)
    assert var_1 == "\x0b__HZpf\r5DK7\r"
    set_0 = {str_0}
    module_0.longest_common_subsequence(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    str_0 = "C1oXlg4G,/I5g\x0cBWn9r"
    list_0 = [str_0, str_0, none_type_0, none_type_0]
    var_0 = module_0.longest_common_subsequence(str_0, list_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, list_0)
    assert var_1 == ""
    tuple_0 = ()
    var_2 = module_0.longest_common_subsequence(str_0, tuple_0)
    assert var_2 == ""
    bytes_0 = b"\x98J\xdf\"\x052u\x82j\x11\xc2'i\x06"
    tuple_1 = (str_0, bytes_0)
    var_3 = module_0.longest_common_subsequence(bytes_0, tuple_1)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(none_type_0, tuple_1)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(none_type_0, var_5)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(none_type_0, var_1)
    assert var_7 == ""
    bytes_1 = b"\xd7x\xe7\xcaB1E\xfa"
    var_8 = module_0.longest_common_subsequence(var_7, var_2)
    assert var_8 == ""
    var_9 = module_0.longest_common_subsequence(var_5, var_5)
    assert var_9 == ""
    var_10 = module_0.longest_common_subsequence(str_0, var_4)
    assert var_10 == ""
    var_11 = module_0.longest_common_subsequence(var_1, tuple_1)
    assert var_11 == ""
    dict_0 = {str_0: var_5}
    var_12 = module_0.longest_common_subsequence(var_10, bytes_0)
    assert var_12 == ""
    var_13 = module_0.longest_common_subsequence(dict_0, var_7)
    assert var_13 == ""
    var_14 = module_0.longest_common_subsequence(tuple_1, var_2)
    assert var_14 == ""
    module_0.longest_common_subsequence(bytes_1, bytes_1)
