# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


def test_case_0():
    bytes_0 = b"\xf2j\xedD\xd4\xf5\x15\xc2\xcd,\x99\x87\xa4f\x00"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(bytes_0, var_0)
    assert var_1 == ""


def test_case_1():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_0 == ""


def test_case_2():
    str_0 = "6oh"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "6oh"
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == "6oh"
    var_2 = module_0.longest_common_subsequence(str_0, var_1)
    assert var_2 == "6oh"


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "?$Kk"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "?$Kk"
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == "?$Kk"
    var_2 = module_0.longest_common_subsequence(var_1, var_1)
    assert var_2 == "?$Kk"
    int_0 = -1590
    bytes_0 = (
        b"\x9c\x89\x9f\xbc\xe5\x85\xc8\xbc\x97\x8a\xe6\x8d:\xa7\xd2\x19\xa3\xed\xe8\xab"
    )
    tuple_0 = (int_0, bytes_0, var_2)
    var_3 = module_0.longest_common_subsequence(var_1, tuple_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(var_1, var_1)
    assert var_4 == "?$Kk"
    complex_0 = -2780.12 + 986.6j
    module_0.longest_common_subsequence(complex_0, var_1)
