# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import longest_common_subsequence as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    object_0 = module_0.object()
    module_1.longest_common_subsequence(object_0, object_0)


def test_case_1():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_1.longest_common_subsequence(bool_0, bool_0)
    assert var_1 == ""


def test_case_2():
    bool_0 = True
    set_0 = set()
    var_0 = module_1.longest_common_subsequence(bool_0, set_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xf4(D\xc2\x80\xa8\x88\xfc\xcb\x9e\x04"
    module_1.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "6[Nosp}t`w]a\x0b"
    str_1 = "3!:St"
    float_0 = -342.75
    dict_0 = {str_1: float_0}
    none_type_0 = None
    bool_0 = False
    var_0 = module_1.longest_common_subsequence(dict_0, bool_0)
    assert var_0 == ""
    var_1 = module_1.longest_common_subsequence(str_0, str_1)
    assert var_1 == "t"
    list_0 = [float_0]
    var_2 = module_1.longest_common_subsequence(str_1, none_type_0)
    assert var_2 == ""
    module_0.object(*list_0, **dict_0)
