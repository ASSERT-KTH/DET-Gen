# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = -577.2683 + 1018.887j
    module_0.longest_common_subsequence(complex_0, complex_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""


def test_case_2():
    float_0 = -1456.5
    set_0 = {float_0}
    list_0 = [set_0, float_0, set_0, set_0]
    bytes_0 = b")\xda\xeaS\xd5\xc0\xa7\x05\x10\x8a\x1e\x8e\x07\xe5\xc1\xb0\x86\x1f\xc5"
    list_1 = [set_0, set_0, set_0]
    tuple_0 = (list_0, bytes_0, list_1, list_0)
    var_0 = module_0.longest_common_subsequence(tuple_0, bytes_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_2 == ""
    bool_0 = True
    list_0 = [bool_0]
    var_3 = module_0.longest_common_subsequence(none_type_0, var_2)
    assert var_3 == ""
    module_0.longest_common_subsequence(list_0, list_0)
