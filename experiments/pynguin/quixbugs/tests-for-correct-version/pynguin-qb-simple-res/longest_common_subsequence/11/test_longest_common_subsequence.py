# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import longest_common_subsequence as module_0
import builtins as module_1


def test_case_0():
    str_0 = 'gs90b|Vo\n;B{Lii"'
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == 'gs90b|Vo\n;B{Lii"'


def test_case_1():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(dict_0, none_type_0)
    assert var_0 == ""


def test_case_2():
    str_0 = 'J }"| [#tu4\tz#'
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == 'J }"| [#tu4\tz#'
    none_type_0 = None
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_2 == ""
    bool_0 = False
    var_3 = module_0.longest_common_subsequence(bool_0, var_2)
    assert var_3 == ""
    str_1 = ""
    var_4 = module_0.longest_common_subsequence(none_type_0, str_0)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(str_1, var_1)
    assert var_5 == ""
    bool_1 = True
    var_6 = module_0.longest_common_subsequence(bool_1, none_type_0)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(none_type_0, bool_1)
    assert var_7 == ""
    var_8 = module_0.longest_common_subsequence(str_1, var_1)
    assert var_8 == ""
    var_9 = module_0.longest_common_subsequence(bool_0, var_1)
    assert var_9 == ""
    var_10 = module_0.longest_common_subsequence(var_1, var_8)
    assert var_10 == ""
    tuple_0 = (str_0,)
    var_11 = module_0.longest_common_subsequence(str_0, tuple_0)
    assert var_11 == ""
    var_12 = module_0.longest_common_subsequence(tuple_0, str_0)
    assert var_12 == ""
    var_13 = module_0.longest_common_subsequence(none_type_0, tuple_0)
    assert var_13 == ""
    var_14 = module_0.longest_common_subsequence(none_type_0, var_8)
    assert var_14 == ""
