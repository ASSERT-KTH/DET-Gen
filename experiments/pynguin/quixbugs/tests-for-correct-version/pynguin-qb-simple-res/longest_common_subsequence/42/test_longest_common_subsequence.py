# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 572.1587
    module_0.longest_common_subsequence(float_0, float_0)


def test_case_1():
    list_0 = []
    var_0 = module_0.longest_common_subsequence(list_0, list_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_0, list_0)
    assert var_2 == ""


def test_case_2():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    dict_0 = {var_0: none_type_0}
    var_1 = module_0.longest_common_subsequence(dict_0, var_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_1, dict_0)
    assert var_2 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b";\xdf\x9a\xcf%\xa6\xacM\t\x86i\xcd1\xd1T<\xd1"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, bytes_0)
    assert var_0 == ""
    module_0.longest_common_subsequence(bytes_0, bytes_0)


def test_case_4():
    bool_0 = False
    str_0 = '"hQ\t0Szfh'
    tuple_0 = (bool_0, str_0)
    tuple_1 = (tuple_0, tuple_0)
    var_0 = module_0.longest_common_subsequence(tuple_1, tuple_0)
    assert var_0 == ""
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1]
    none_type_0 = None
    var_1 = module_0.longest_common_subsequence(bool_1, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(none_type_0, list_0)
    assert var_2 == ""
    none_type_1 = None
    var_3 = module_0.longest_common_subsequence(list_0, none_type_1)
    assert var_3 == ""
