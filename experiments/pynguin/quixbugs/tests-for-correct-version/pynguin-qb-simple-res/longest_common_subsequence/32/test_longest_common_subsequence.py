# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"4tPj\xbd\xd7\xb8^\xf0m\xefE"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


def test_case_1():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_0 == ""
    bytes_0 = b"\x82\xffk\xc2\xdeM-:=\x93R"
    set_0 = {bytes_0}
    none_type_1 = None
    var_1 = module_0.longest_common_subsequence(none_type_1, set_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(none_type_0, set_0)
    assert var_2 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    bytes_0 = b"\x0c\x95\xa4<\xd5\x83\x8a\x96\xd4\xe7\x172\x80\xbd"
    bool_1 = False
    list_0 = [bytes_0, bytes_0, bool_1]
    str_0 = "[(j+\n*z&M\rzoQ3\n"
    set_0 = {bytes_0}
    dict_0 = {}
    tuple_0 = (set_0, bool_1, dict_0, bytes_0)
    tuple_1 = (list_0, str_0, tuple_0)
    str_1 = "$]H*R"
    tuple_2 = (bool_0, bool_0, tuple_1, str_1)
    var_0 = module_0.longest_common_subsequence(tuple_2, tuple_1)
    assert var_0 == ""
    int_0 = -2485
    list_1 = [int_0, int_0, int_0, int_0]
    tuple_3 = (int_0, list_1)
    module_0.longest_common_subsequence(tuple_3, tuple_3)
