# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.longest_common_subsequence(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "0W?'VotB0~rD@aQ;J-h2"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.longest_common_subsequence(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.longest_common_subsequence(dict_0, bool_0)
    assert var_0 == ""
    bytes_0 = b"\xda*$E\xb7\n\x91\xd5pK"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "hKDLS"
    str_1 = "AqZX9\n bd\rQAJ1i/34"
    var_0 = module_0.longest_common_subsequence(str_0, str_1)
    assert var_0 == ""
    none_type_0 = None
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(var_1, var_2)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(var_1, var_1)
    assert var_5 == ""
    bytes_0 = b"\x8d\xa1\x7f\x802\x1c>\xa4\xca\x16\xf5\x14O\xfa\x929q"
    var_6 = module_0.longest_common_subsequence(var_5, bytes_0)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(var_2, var_1)
    assert var_7 == ""
    var_8 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_8 == ""
    var_9 = module_0.longest_common_subsequence(var_8, var_3)
    assert var_9 == ""
    var_10 = module_0.longest_common_subsequence(none_type_0, var_8)
    assert var_10 == ""
    var_11 = module_0.longest_common_subsequence(bytes_0, var_6)
    assert var_11 == ""
    dict_0 = {var_6: var_11}
    object_0 = module_1.object(*var_10)
    module_0.longest_common_subsequence(dict_0, object_0)
