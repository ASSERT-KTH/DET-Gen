# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


def test_case_0():
    str_0 = "58\razt|O|5#wf"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    object_0 = module_1.object()
    module_0.longest_common_subsequence(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x8a?\xc5\xbfU\xe2\xb9\x8a"
    bool_0 = True
    tuple_0 = (bool_0, bytes_0)
    bytes_1 = b"\xcb\xf7\xef\xb9"
    bool_1 = False
    dict_0 = {bytes_0: bytes_1, tuple_0: bytes_1, bool_1: tuple_0, bytes_1: tuple_0}
    tuple_1 = (tuple_0, dict_0, dict_0)
    tuple_2 = (bytes_0, tuple_1)
    module_0.longest_common_subsequence(tuple_2, tuple_0)
