# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 3586.3
    set_0 = {float_0, float_0, float_0}
    module_0.longest_common_subsequence(set_0, set_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""


def test_case_2():
    list_0 = []
    tuple_0 = (list_0,)
    var_0 = module_0.longest_common_subsequence(tuple_0, list_0)
    assert var_0 == ""


def test_case_3():
    str_0 = "Cu"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "Cu"
    var_1 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_1 == "Cu"
    set_0 = set()
    var_2 = module_0.longest_common_subsequence(var_0, set_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_3 == "Cu"


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, bool_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_1 == ""
    str_0 = "\x0c\"O\r)mG'(ll'B"
    var_2 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_2 == "\x0c\"O\r)mG'(ll'B"
    none_type_1 = None
    var_3 = module_0.longest_common_subsequence(var_0, none_type_1)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(var_2, str_0)
    assert var_4 == "\x0c\"O\r)mG'(ll'B"
    var_5 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_5 == ""
    list_0 = [str_0, str_0, str_0, str_0]
    int_0 = -593
    var_6 = module_0.longest_common_subsequence(list_0, var_2)
    assert var_6 == ""
    bytes_0 = b"\xde\x0b\xa6g\xd8H"
    str_1 = ">1!5G"
    var_7 = module_0.longest_common_subsequence(bytes_0, str_1)
    assert var_7 == ""
    module_0.longest_common_subsequence(list_0, int_0)
