# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "REKw3o"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(var_0, none_type_0)
    assert var_1 == ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.longest_common_subsequence(str_0, dict_0)


def test_case_1():
    set_0 = set()
    var_0 = module_0.longest_common_subsequence(set_0, set_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "t5f\x0b;Vk'E93r BU\x0b3"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == "t5f\x0b;Vk'E93r BU\x0b3"
    bytes_0 = b"\x05\xc0\x16\x8b\xc0p\x84\xd5\x99\xb9\x9d\xbef\xd5\xe9\xac"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(none_type_0, var_1)
    assert var_2 == ""
    bytes_0 = b"\xf4\xee\x07\x1f\xacJ\x9bsx"
    bool_0 = True
    var_3 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(bytes_0, var_1)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(var_1, none_type_0)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(var_1, none_type_0)
    assert var_6 == ""
    bytes_1 = b"\xc7\xee\xe0\xe4\xa9_\xf6\xc7\xb1\xffD\xd5M\x13\x85\xd3\xa9"
    list_0 = [bytes_1]
    var_7 = module_0.longest_common_subsequence(bytes_1, list_0)
    assert var_7 == ""
    var_8 = module_0.longest_common_subsequence(var_5, list_0)
    assert var_8 == ""
    bytes_2 = b"Z5*\xcf\xc4v\xf9@\r\xcf\x19@\xe0\xfd\xa3\x85n{;"
    var_9 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_9 == ""
    var_10 = module_0.longest_common_subsequence(var_8, bytes_2)
    assert var_10 == ""
    var_11 = module_0.longest_common_subsequence(var_2, var_2)
    assert var_11 == ""
    var_12 = module_0.longest_common_subsequence(var_7, var_7)
    assert var_12 == ""
    module_0.longest_common_subsequence(bytes_2, bytes_2)
