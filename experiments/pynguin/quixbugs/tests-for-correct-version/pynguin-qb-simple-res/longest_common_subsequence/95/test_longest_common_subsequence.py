# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xedz\x8a6;X\xf7\xa3\x88\xdc+\xc0\xfd\xd8"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""


def test_case_2():
    str_0 = "A(qj.\x0bCoehoB"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "A(qj.\x0bCoehoB"
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == "A(qj.\x0bCoehoB"
    bool_0 = False
    none_type_0 = None
    var_2 = module_0.longest_common_subsequence(none_type_0, bool_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(str_0, bool_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(none_type_0, str_0)
    assert var_4 == ""
    none_type_1 = None
    var_5 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(var_5, none_type_1)
    assert var_6 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "O"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "O"
    bool_0 = False
    var_1 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(var_2, var_2)
    assert var_3 == ""
    int_0 = -314
    var_4 = module_0.longest_common_subsequence(var_2, int_0)
    assert var_4 == ""
    list_0 = [bool_0, var_2, bool_0, var_2]
    var_5 = module_0.longest_common_subsequence(var_2, bool_0)
    assert var_5 == ""
    list_1 = [var_4, var_5, str_0]
    str_1 = "H"
    var_6 = module_0.longest_common_subsequence(list_1, str_1)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(var_3, var_2)
    assert var_7 == ""
    var_8 = module_0.longest_common_subsequence(bool_0, var_5)
    assert var_8 == ""
    int_1 = -19
    var_9 = module_0.longest_common_subsequence(int_1, var_8)
    assert var_9 == ""
    var_10 = module_0.longest_common_subsequence(list_0, var_3)
    assert var_10 == ""
    none_type_0 = None
    var_11 = module_0.longest_common_subsequence(list_0, none_type_0)
    assert var_11 == ""
    var_12 = module_0.longest_common_subsequence(var_2, bool_0)
    assert var_12 == ""
    set_0 = {bool_0}
    var_13 = module_0.longest_common_subsequence(set_0, var_1)
    assert var_13 == ""
    var_14 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_14 == ""
    var_15 = module_0.longest_common_subsequence(var_12, none_type_0)
    assert var_15 == ""
    var_16 = module_0.longest_common_subsequence(var_8, var_15)
    assert var_16 == ""
    module_0.longest_common_subsequence(set_0, set_0)
