# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import longest_common_subsequence as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    object_0 = module_0.object()
    module_1.longest_common_subsequence(object_0, object_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_1.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""


def test_case_2():
    int_0 = 3912
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(int_0, none_type_0)
    assert var_0 == ""
    var_1 = module_1.longest_common_subsequence(int_0, var_0)
    assert var_1 == ""
    var_2 = module_1.longest_common_subsequence(int_0, bool_0)
    assert var_2 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    bytes_0 = b"\xe2K7\xbb\x99\x8f"
    bool_0 = False
    complex_0 = 2746 - 1922.9j
    tuple_0 = (set_0, bytes_0, bool_0, complex_0)
    module_1.longest_common_subsequence(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(bool_0, none_type_0)
    assert var_0 == ""
    var_1 = module_1.longest_common_subsequence(var_0, var_0)
    assert var_1 == ""
    str_0 = 'Sd"PBw\x0bC&WXpM'
    list_0 = [str_0, str_0]
    var_2 = module_1.longest_common_subsequence(var_0, none_type_0)
    assert var_2 == ""
    none_type_1 = None
    var_3 = module_1.longest_common_subsequence(none_type_1, str_0)
    assert var_3 == ""
    var_4 = module_1.longest_common_subsequence(list_0, str_0)
    assert var_4 == ""
    object_0 = module_0.object()
    dict_0 = {var_4: list_0, object_0: object_0}
    tuple_0 = (dict_0, var_4, object_0, var_4)
    module_1.longest_common_subsequence(tuple_0, tuple_0)
