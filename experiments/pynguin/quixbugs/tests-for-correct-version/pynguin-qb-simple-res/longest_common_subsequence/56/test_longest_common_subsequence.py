# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import longest_common_subsequence as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    object_0 = module_0.object()
    module_1.longest_common_subsequence(object_0, object_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_1.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    var_2 = module_1.longest_common_subsequence(none_type_0, none_type_0)
    assert var_2 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "B\r"
    str_1 = "NNa45>"
    var_0 = module_1.longest_common_subsequence(str_0, str_0)
    assert var_0 == "B\r"
    str_2 = "[cu~5;9s@%_~z"
    var_1 = module_1.longest_common_subsequence(str_1, str_2)
    assert var_1 == "5"
    var_2 = module_1.longest_common_subsequence(str_2, str_0)
    assert var_2 == ""
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0}
    module_1.longest_common_subsequence(str_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"8\x8bSD\xf3\x82\x07\xf4F\x1d\xc8\xe6:(8\xe0\xb1\r"
    module_1.longest_common_subsequence(bytes_0, bytes_0)
