# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 147
    module_0.longest_common_subsequence(int_0, int_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""


def test_case_2():
    int_0 = -1577
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(int_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, var_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(none_type_0, int_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(int_0, none_type_0)
    assert var_3 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xc0sL\xe4u\xe7"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


def test_case_4():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(list_0, none_type_0)
    assert var_0 == ""
    bytes_0 = b"\x15\xc2\xbfg'\x9b"
    var_1 = module_0.longest_common_subsequence(bytes_0, list_0)
    assert var_1 == ""
    bool_1 = True
    tuple_0 = (bool_0, list_0, bytes_0, bool_1)
    var_2 = module_0.longest_common_subsequence(tuple_0, bytes_0)
    assert var_2 == ""
    str_0 = ";h="
    var_3 = module_0.longest_common_subsequence(bool_0, var_2)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_4 == ";h="
    var_5 = module_0.longest_common_subsequence(var_2, bytes_0)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(var_4, str_0)
    assert var_6 == ";h="
