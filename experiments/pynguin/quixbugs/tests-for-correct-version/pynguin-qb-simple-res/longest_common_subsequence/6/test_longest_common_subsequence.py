# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 18
    module_0.longest_common_subsequence(int_0, int_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""


def test_case_2():
    complex_0 = 322.65271 - 1467j
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(complex_0, none_type_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""
    bytes_0 = b"Q"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


def test_case_4():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""
    none_type_0 = None
    var_1 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_2 == ""
    str_0 = "lrz4;D"
    var_3 = module_0.longest_common_subsequence(none_type_0, bool_0)
    assert var_3 == ""
    str_1 = "}"
    tuple_0 = (str_1, var_2, str_0)
    var_4 = module_0.longest_common_subsequence(tuple_0, var_1)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(str_0, tuple_0)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(tuple_0, var_1)
    assert var_6 == ""
    bool_1 = True
    var_7 = module_0.longest_common_subsequence(var_0, bool_1)
    assert var_7 == ""
    var_8 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_8 == ""
    list_0 = []
    var_9 = module_0.longest_common_subsequence(bool_0, list_0)
    assert var_9 == ""
    var_10 = module_0.longest_common_subsequence(var_9, var_5)
    assert var_10 == ""
    float_0 = 645.0
    bool_2 = False
    var_11 = module_0.longest_common_subsequence(bool_0, bool_2)
    assert var_11 == ""
    var_12 = module_0.longest_common_subsequence(bool_0, float_0)
    assert var_12 == ""
    var_13 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_13 == "lrz4;D"
    var_14 = module_0.longest_common_subsequence(var_2, bool_0)
    assert var_14 == ""
