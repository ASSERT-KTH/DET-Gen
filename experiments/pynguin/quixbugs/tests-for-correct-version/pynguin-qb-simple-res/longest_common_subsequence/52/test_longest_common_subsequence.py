# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


def test_case_0():
    bytes_0 = b"\x0f;f\xf2\x987\xd7\xed\xa5\x06\xad\x89\xf5]\xdb\x93;\x91Z"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(dict_0, none_type_0)
    assert var_0 == ""


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_1 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "tD}nna:\x0ckcT"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "tD}nna:\x0ckcT"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.longest_common_subsequence(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1288
    str_0 = "mtRLf7S>A=3(\rzta-"
    bool_0 = True
    tuple_0 = (int_0, str_0, bool_0)
    list_0 = [tuple_0, tuple_0, bool_0, int_0]
    var_0 = module_0.longest_common_subsequence(str_0, tuple_0)
    assert var_0 == ""
    module_0.longest_common_subsequence(list_0, list_0)
