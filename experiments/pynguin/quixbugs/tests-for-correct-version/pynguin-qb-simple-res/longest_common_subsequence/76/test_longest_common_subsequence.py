# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


def test_case_0():
    str_0 = "3'q|gFoO!$hS"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "3'q|gFoO!$hS"


def test_case_1():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""


def test_case_2():
    object_0 = module_1.object()
    set_0 = {object_0}
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(set_0, none_type_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    bool_1 = True
    var_0 = module_0.longest_common_subsequence(bool_0, bool_1)
    assert var_0 == ""
    str_0 = "n"
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == "n"
    var_2 = module_0.longest_common_subsequence(var_1, var_1)
    assert var_2 == "n"
    complex_0 = 504 - 2194.6371j
    list_0 = [var_0, var_0]
    var_3 = module_0.longest_common_subsequence(var_0, complex_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(list_0, str_0)
    assert var_4 == ""
    bool_2 = True
    tuple_0 = (bool_2, bool_2)
    var_5 = module_0.longest_common_subsequence(str_0, var_1)
    assert var_5 == "n"
    var_6 = module_0.longest_common_subsequence(tuple_0, var_2)
    assert var_6 == ""
    tuple_1 = (complex_0, complex_0, tuple_0)
    var_7 = module_0.longest_common_subsequence(tuple_1, var_6)
    assert var_7 == ""
    module_0.longest_common_subsequence(tuple_1, complex_0)
