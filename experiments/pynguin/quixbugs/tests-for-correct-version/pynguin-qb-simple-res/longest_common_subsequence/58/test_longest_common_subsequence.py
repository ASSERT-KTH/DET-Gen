# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 966
    module_0.longest_common_subsequence(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    var_0 = module_0.longest_common_subsequence(list_0, list_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(list_0, list_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_1, var_0)
    assert var_2 == ""
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.longest_common_subsequence(dict_0, bool_0)


def test_case_2():
    bool_0 = True
    str_0 = "c2Ob?}a^:O?"
    int_0 = -682
    tuple_0 = (bool_0, str_0, int_0, str_0)
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(tuple_0, none_type_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    bytes_0 = b"0"
    var_1 = module_0.longest_common_subsequence(none_type_0, var_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(bytes_0, none_type_0)
    assert var_2 == ""
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(dict_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(dict_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(none_type_0, var_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(var_1, var_2)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_4 == ""
    none_type_1 = None
    var_5 = module_0.longest_common_subsequence(none_type_1, var_1)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(var_4, var_0)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_7 == ""
    var_8 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_8 == ""
    var_9 = module_0.longest_common_subsequence(var_8, var_8)
    assert var_9 == ""
    var_10 = module_0.longest_common_subsequence(var_8, var_8)
    assert var_10 == ""
    var_11 = module_0.longest_common_subsequence(var_8, none_type_1)
    assert var_11 == ""
    var_12 = module_0.longest_common_subsequence(var_8, none_type_1)
    assert var_12 == ""
    none_type_2 = None
    list_0 = [none_type_2, none_type_1, var_8, none_type_1]
    var_13 = module_0.longest_common_subsequence(var_9, list_0)
    assert var_13 == ""
    var_14 = module_0.longest_common_subsequence(list_0, var_1)
    assert var_14 == ""
    var_15 = module_0.longest_common_subsequence(var_7, list_0)
    assert var_15 == ""
    var_16 = module_0.longest_common_subsequence(none_type_1, list_0)
    assert var_16 == ""
    var_17 = module_0.longest_common_subsequence(none_type_2, none_type_2)
    assert var_17 == ""
    module_0.longest_common_subsequence(list_0, dict_0)
