# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = 1576.6855 + 1082.414693j
    module_0.longest_common_subsequence(complex_0, complex_0)


def test_case_1():
    none_type_0 = None
    bytes_0 = b"n\x9a\x8a\x0e\xe1 \x16\r\xf4\xe52\x7f"
    var_0 = module_0.longest_common_subsequence(bytes_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, var_0)
    assert var_1 == ""
    none_type_1 = None
    var_2 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_2 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"^eV\xd3\xd3\xde\xa5U\xee\t\xfb\xe8\xdeK\xea \x90\x17"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [bool_0, bool_0, bool_0, list_0]
    tuple_0 = ()
    str_0 = 'b{m~Ies/l=+["GH/+'
    tuple_1 = (bool_0, list_1, tuple_0, str_0)
    var_0 = module_0.longest_common_subsequence(tuple_1, str_0)
    assert var_0 == ""
    float_0 = 941.2
    module_0.longest_common_subsequence(float_0, float_0)
