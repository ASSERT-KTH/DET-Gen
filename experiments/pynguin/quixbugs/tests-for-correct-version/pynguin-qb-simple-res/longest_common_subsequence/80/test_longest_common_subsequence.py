# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.longest_common_subsequence(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""


def test_case_2():
    set_0 = set()
    str_0 = 'X_tGOOsP-m5:oK{B"-'
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(set_0, set_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_1, set_0)
    assert var_2 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"xN\xb9\xca\xce\xcd\x1b\x07\x00n-P\t0"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 185
    list_0 = []
    tuple_0 = (int_0, list_0)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(list_0, none_type_0)
    assert var_0 == ""
    list_1 = [tuple_1, int_0, list_0]
    module_0.longest_common_subsequence(list_1, tuple_0)
