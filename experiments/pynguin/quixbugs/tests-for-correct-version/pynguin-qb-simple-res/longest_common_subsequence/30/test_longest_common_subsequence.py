# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0]
    module_0.longest_common_subsequence(list_0, bool_0)


def test_case_1():
    bytes_0 = b""
    var_0 = module_0.longest_common_subsequence(bytes_0, bytes_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(bytes_0, bytes_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(bytes_0, bytes_0)
    assert var_2 == ""


def test_case_2():
    str_0 = ".E;K<Asdd"
    set_0 = {str_0}
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(set_0, none_type_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "apl?Mw1S\t(TAR@r7e+w-"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "apl?Mw1S\t(TAR@r7e+w-"
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.longest_common_subsequence(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "yNB'(4&%"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "yNB'(4&%"
    var_1 = module_0.longest_common_subsequence(var_0, str_0)
    assert var_1 == "yNB'(4&%"
    var_2 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_2 == "yNB'(4&%"
    str_1 = "W\\{BP]@W9"
    var_3 = module_0.longest_common_subsequence(var_2, str_0)
    assert var_3 == "yNB'(4&%"
    var_4 = module_0.longest_common_subsequence(str_1, var_2)
    assert var_4 == "B"
    none_type_0 = None
    var_5 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_5 == "yNB'(4&%"
    var_6 = module_0.longest_common_subsequence(var_3, none_type_0)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(str_1, var_5)
    assert var_7 == "B"
    var_8 = module_0.longest_common_subsequence(var_4, var_0)
    assert var_8 == "B"
    var_9 = module_0.longest_common_subsequence(var_0, str_1)
    assert var_9 == "B"
    var_10 = module_0.longest_common_subsequence(str_1, str_1)
    assert var_10 == "W\\{BP]@W9"
    var_11 = module_0.longest_common_subsequence(str_1, str_1)
    assert var_11 == "W\\{BP]@W9"
    var_12 = module_0.longest_common_subsequence(str_1, str_1)
    assert var_12 == "W\\{BP]@W9"
    var_13 = module_0.longest_common_subsequence(var_4, var_0)
    assert var_13 == "B"
    var_14 = module_0.longest_common_subsequence(var_2, var_11)
    assert var_14 == "B"
    var_15 = module_0.longest_common_subsequence(var_10, var_14)
    assert var_15 == "B"
    none_type_1 = None
    var_16 = module_0.longest_common_subsequence(var_15, var_0)
    assert var_16 == "B"
    var_17 = module_0.longest_common_subsequence(str_0, var_0)
    assert var_17 == "yNB'(4&%"
    var_18 = module_0.longest_common_subsequence(var_0, str_0)
    assert var_18 == "yNB'(4&%"
    var_19 = module_0.longest_common_subsequence(none_type_1, var_15)
    assert var_19 == ""
    bool_0 = True
    module_0.longest_common_subsequence(str_1, bool_0)
