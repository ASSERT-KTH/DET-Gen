# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


def test_case_0():
    bytes_0 = b"v\xa7\x02\x1bi\x99M\xe9\xc2gY\xd8\xa86t!h*"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bytes_0, none_type_0)
    assert var_0 == ""


def test_case_1():
    dict_0 = {}
    var_0 = module_0.longest_common_subsequence(dict_0, dict_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 431.871794
    module_0.longest_common_subsequence(float_0, float_0)


def test_case_3():
    str_0 = "{.$`C`@p0W#h}\rOh(b{M"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "{.$`C`@p0W#h}\rOh(b{M"
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == "{.$`C`@p0W#h}\rOh(b{M"
    var_2 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_2 == "{.$`C`@p0W#h}\rOh(b{M"
    var_3 = module_0.longest_common_subsequence(var_1, var_2)
    assert var_3 == "{.$`C`@p0W#h}\rOh(b{M"
    var_4 = module_0.longest_common_subsequence(str_0, var_1)
    assert var_4 == "{.$`C`@p0W#h}\rOh(b{M"


@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = 676 + 2496j
    list_0 = [complex_0, complex_0]
    int_0 = -633
    tuple_0 = (complex_0, list_0, int_0)
    module_0.longest_common_subsequence(tuple_0, list_0)
