# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = -2285.57924 + 312.8j
    module_0.longest_common_subsequence(complex_0, complex_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    bool_0 = False
    var_1 = module_0.longest_common_subsequence(var_0, bool_0)
    assert var_1 == ""


def test_case_2():
    str_0 = ";MW)1bY"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == ";MW)1bY"
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == ";MW)1bY"
    var_2 = module_0.longest_common_subsequence(var_1, str_0)
    assert var_2 == ";MW)1bY"
    var_3 = module_0.longest_common_subsequence(var_1, var_1)
    assert var_3 == ";MW)1bY"
    none_type_0 = None
    var_4 = module_0.longest_common_subsequence(var_3, none_type_0)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_5 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -3349
    list_0 = [int_0]
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, list_0)
    assert var_0 == ""
    module_0.longest_common_subsequence(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "9A"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "9A"
    str_1 = "kGW"
    str_2 = "a"
    var_1 = module_0.longest_common_subsequence(str_2, var_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_0, var_0)
    assert var_2 == "9A"
    var_3 = module_0.longest_common_subsequence(var_0, str_0)
    assert var_3 == "9A"
    var_4 = module_0.longest_common_subsequence(str_0, str_1)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(str_2, str_0)
    assert var_5 == ""
    var_6 = module_0.longest_common_subsequence(var_2, var_2)
    assert var_6 == "9A"
    var_7 = module_0.longest_common_subsequence(str_0, str_2)
    assert var_7 == ""
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0}
    module_1.object(**dict_0)
