# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -738.6
    module_0.longest_common_subsequence(float_0, float_0)


def test_case_1():
    int_0 = 1302
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, int_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(int_0, none_type_0)
    assert var_1 == ""
    none_type_1 = None
    var_2 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(var_2, var_3)
    assert var_5 == ""
    bytes_0 = b"I\xa1\x8a\x94\xc7\xfd=7R;\xb7:j\x13\xfasx;\x08\x12"
    var_6 = module_0.longest_common_subsequence(none_type_1, bytes_0)
    assert var_6 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    bool_0 = True
    var_0 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_1 == ""
    module_0.longest_common_subsequence(bool_0, bool_0)


def test_case_3():
    str_0 = "''(^WRq=VBV+Z6d5"
    none_type_0 = None
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: none_type_0}
    bool_0 = False
    list_0 = [none_type_0, str_0, str_0]
    tuple_0 = (str_0, dict_0, bool_0, list_0)
    var_0 = module_0.longest_common_subsequence(none_type_0, tuple_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_1 == "''(^WRq=VBV+Z6d5"
    var_2 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_2 == "''(^WRq=VBV+Z6d5"
    var_3 = module_0.longest_common_subsequence(str_0, var_2)
    assert var_3 == "''(^WRq=VBV+Z6d5"
    var_4 = module_0.longest_common_subsequence(var_2, var_2)
    assert var_4 == "''(^WRq=VBV+Z6d5"
    var_5 = module_0.longest_common_subsequence(var_2, var_4)
    assert var_5 == "''(^WRq=VBV+Z6d5"


def test_case_4():
    str_0 = "zB,LwY [64dYj!H<y"
    float_0 = -2901.233419370758
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, str_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, var_0)
    assert var_1 == ""
    object_0 = module_1.object()
    none_type_1 = None
    var_2 = module_0.longest_common_subsequence(none_type_1, var_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(var_1, str_0)
    assert var_3 == ""
    bool_0 = False
    var_4 = module_0.longest_common_subsequence(float_0, bool_0)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(var_0, none_type_0)
    assert var_5 == ""
    str_1 = "K\x0b>JVBrQX{[gM$eq"
    list_0 = [var_5, var_4, var_1]
    var_6 = module_0.longest_common_subsequence(str_1, list_0)
    assert var_6 == ""
