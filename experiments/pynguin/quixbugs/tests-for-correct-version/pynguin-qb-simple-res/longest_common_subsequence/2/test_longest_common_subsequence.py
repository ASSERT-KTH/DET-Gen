# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import longest_common_subsequence as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    object_0 = module_0.object()
    module_1.longest_common_subsequence(object_0, object_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x9c}\xb3'X`hd\xa7\xa9\x07]\xf5\x9b\x1ah\xcd\xf5\x9a{"
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(bytes_0, none_type_0)
    assert var_0 == ""
    module_1.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "~"
    bytes_0 = b"`\xdc\xbajuL+\xb0B\xf5\xb5\x99\x07\xe8$\xfe[\xf9\xd8"
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(bytes_0, str_0)
    assert var_0 == ""
    object_0 = module_0.object(*var_0)
    var_1 = module_1.longest_common_subsequence(none_type_0, object_0)
    assert var_1 == ""
    var_2 = module_1.longest_common_subsequence(str_0, none_type_0)
    assert var_2 == ""
    none_type_1 = None
    var_3 = module_1.longest_common_subsequence(var_0, var_0)
    assert var_3 == ""
    var_4 = module_1.longest_common_subsequence(bytes_0, none_type_1)
    assert var_4 == ""
    var_5 = module_1.longest_common_subsequence(bytes_0, str_0)
    assert var_5 == ""
    var_6 = module_1.longest_common_subsequence(none_type_1, var_4)
    assert var_6 == ""
    var_7 = module_1.longest_common_subsequence(var_2, bytes_0)
    assert var_7 == ""
    var_8 = module_1.longest_common_subsequence(bytes_0, var_4)
    assert var_8 == ""
    tuple_0 = (str_0, bytes_0)
    var_9 = module_1.longest_common_subsequence(bytes_0, tuple_0)
    assert var_9 == ""
    dict_0 = {tuple_0: str_0, bytes_0: bytes_0, str_0: str_0, bytes_0: bytes_0}
    list_0 = [dict_0]
    module_1.longest_common_subsequence(list_0, dict_0)
