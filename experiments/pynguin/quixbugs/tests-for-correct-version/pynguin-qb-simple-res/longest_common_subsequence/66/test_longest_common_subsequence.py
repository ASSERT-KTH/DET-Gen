# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import longest_common_subsequence as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    object_0 = module_0.object()
    bytes_0 = b"7\x0ba"
    module_1.longest_common_subsequence(object_0, bytes_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -555
    tuple_0 = (int_0,)
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(int_0, none_type_0)
    assert var_0 == ""
    module_1.longest_common_subsequence(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b" D"
    module_1.longest_common_subsequence(bytes_0, bytes_0)


def test_case_4():
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_1.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    var_2 = module_1.longest_common_subsequence(var_1, var_1)
    assert var_2 == ""
    str_0 = "8%2eAPH\\h@l-DR\x0c|Qt"
    var_3 = module_1.longest_common_subsequence(var_2, str_0)
    assert var_3 == ""
    var_4 = module_1.longest_common_subsequence(none_type_0, str_0)
    assert var_4 == ""
    dict_0 = {}
    var_5 = module_1.longest_common_subsequence(dict_0, var_1)
    assert var_5 == ""
    list_0 = [str_0, str_0, str_0]
    var_6 = module_1.longest_common_subsequence(list_0, str_0)
    assert var_6 == ""
    var_7 = module_1.longest_common_subsequence(str_0, var_5)
    assert var_7 == ""
    set_0 = {var_6}
    var_8 = module_1.longest_common_subsequence(var_1, var_5)
    assert var_8 == ""
    var_9 = module_1.longest_common_subsequence(var_2, set_0)
    assert var_9 == ""
    var_10 = module_1.longest_common_subsequence(var_0, none_type_0)
    assert var_10 == ""
    var_11 = module_1.longest_common_subsequence(list_0, var_9)
    assert var_11 == ""
    int_0 = -6
    var_12 = module_1.longest_common_subsequence(list_0, list_0)
    assert (
        var_12 == "8%2eAPH\\h@l-DR\x0c|Qt8%2eAPH\\h@l-DR\x0c|Qt8%2eAPH\\h@l-DR\x0c|Qt"
    )
    tuple_0 = (int_0,)
    list_1 = [tuple_0, int_0, int_0, tuple_0]
    none_type_1 = None
    var_13 = module_1.longest_common_subsequence(none_type_0, var_3)
    assert var_13 == ""
    var_14 = module_1.longest_common_subsequence(var_9, list_1)
    assert var_14 == ""
    var_15 = module_1.longest_common_subsequence(list_0, tuple_0)
    assert var_15 == ""
    var_16 = module_1.longest_common_subsequence(none_type_1, list_1)
    assert var_16 == ""
    var_17 = module_1.longest_common_subsequence(tuple_0, var_2)
    assert var_17 == ""
    var_18 = module_1.longest_common_subsequence(none_type_1, var_16)
    assert var_18 == ""
    var_19 = module_1.longest_common_subsequence(list_0, var_6)
    assert var_19 == ""
    var_20 = module_1.longest_common_subsequence(tuple_0, none_type_1)
    assert var_20 == ""
    var_21 = module_1.longest_common_subsequence(none_type_1, none_type_1)
    assert var_21 == ""
    bytes_0 = b"\x1d\xd9\xa7\xf2V\x7fwd\x89\x8fTJ\x93\x86'\xfcF\x0f"
    var_22 = module_1.longest_common_subsequence(none_type_0, bytes_0)
    assert var_22 == ""
    tuple_1 = (int_0, list_1, var_16, bytes_0)
    var_23 = module_1.longest_common_subsequence(tuple_1, none_type_1)
    assert var_23 == ""
    var_24 = module_1.longest_common_subsequence(var_1, none_type_0)
    assert var_24 == ""
    var_25 = module_1.longest_common_subsequence(tuple_1, var_16)
    assert var_25 == ""
    var_26 = module_1.longest_common_subsequence(var_6, var_3)
    assert var_26 == ""
