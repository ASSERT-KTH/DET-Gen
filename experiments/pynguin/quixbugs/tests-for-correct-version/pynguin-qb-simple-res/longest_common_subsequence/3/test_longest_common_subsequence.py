# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.longest_common_subsequence(bool_0, bool_0)


def test_case_1():
    str_0 = "<\t##Rxa.ji="
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "<\t##Rxa.ji="
    var_1 = module_0.longest_common_subsequence(var_0, str_0)
    assert var_1 == "<\t##Rxa.ji="


def test_case_2():
    object_0 = module_1.object()
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, object_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, object_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(object_0, none_type_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(none_type_0, var_0)
    assert var_3 == ""
    bool_0 = False
    str_0 = ""
    var_4 = module_0.longest_common_subsequence(bool_0, str_0)
    assert var_4 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    int_0 = 3337
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, int_0)
    assert var_1 == ""
    bytes_0 = b"\x80L\x0c$\x9e,\x99'\t\xf0\x08\xf8 \xb0\x95\xbaGw)"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    list_1 = [dict_0, dict_0, list_0, dict_0]
    module_0.longest_common_subsequence(list_0, list_1)
