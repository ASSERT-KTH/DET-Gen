# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import longest_common_subsequence as module_1


def test_case_0():
    set_0 = set()
    object_0 = module_0.object()
    var_0 = module_1.longest_common_subsequence(object_0, set_0)
    assert var_0 == ""
    var_1 = module_1.longest_common_subsequence(set_0, set_0)
    assert var_1 == ""
    var_2 = module_1.longest_common_subsequence(set_0, set_0)
    assert var_2 == ""


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_1.longest_common_subsequence(bool_0, none_type_0)
    assert var_1 == ""
    module_1.longest_common_subsequence(bool_0, bool_0)


def test_case_2():
    str_0 = "1l/["
    var_0 = module_1.longest_common_subsequence(str_0, str_0)
    assert var_0 == "1l/["
    str_1 = "A$zJWdhTdDd`~pOc"
    var_1 = module_1.longest_common_subsequence(str_1, str_1)
    assert var_1 == "A$zJWdhTdDd`~pOc"
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    var_2 = module_1.longest_common_subsequence(tuple_0, str_1)
    assert var_2 == ""
    var_3 = module_1.longest_common_subsequence(var_1, tuple_0)
    assert var_3 == ""
    var_4 = module_1.longest_common_subsequence(var_1, var_1)
    assert var_4 == "A$zJWdhTdDd`~pOc"
    var_5 = module_1.longest_common_subsequence(set_0, tuple_0)
    assert var_5 == ""
    var_6 = module_1.longest_common_subsequence(set_0, var_5)
    assert var_6 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -722
    dict_0 = {}
    str_0 = "AovkxKo,[]JPa*)("
    tuple_0 = (int_0, dict_0, str_0)
    list_0 = [tuple_0, str_0, tuple_0, dict_0]
    bool_0 = True
    var_0 = module_1.longest_common_subsequence(str_0, list_0)
    assert var_0 == ""
    var_1 = module_1.longest_common_subsequence(var_0, dict_0)
    assert var_1 == ""
    module_1.longest_common_subsequence(bool_0, bool_0)
