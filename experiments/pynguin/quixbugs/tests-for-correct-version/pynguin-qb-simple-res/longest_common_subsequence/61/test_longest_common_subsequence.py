# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 1122
    module_0.longest_common_subsequence(int_0, int_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(var_0, none_type_0)
    assert var_1 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 2399.558
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(float_0, none_type_0)
    assert var_0 == ""
    module_0.longest_common_subsequence(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.longest_common_subsequence(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "Te2'r}B&;)$*9\\=7c"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "Te2'r}B&;)$*9\\=7c"
    none_type_0 = None
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_subsequence(var_1, var_2)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(var_3, var_2)
    assert var_5 == ""
    bytes_0 = b"(\x0fK\xb6\xe0z\x184\x0b\x1d\x18\xba\x99\xbb\x8e\\\xf9:\xf3\xec"
    var_6 = module_0.longest_common_subsequence(var_1, none_type_0)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(var_2, var_2)
    assert var_7 == ""
    var_8 = module_0.longest_common_subsequence(bytes_0, var_1)
    assert var_8 == ""
    str_1 = "_Rzbv"
    var_9 = module_0.longest_common_subsequence(var_2, bytes_0)
    assert var_9 == ""
    var_10 = module_0.longest_common_subsequence(var_3, str_1)
    assert var_10 == ""
    var_11 = module_0.longest_common_subsequence(bytes_0, str_1)
    assert var_11 == ""
    bytes_1 = b"\r\xac"
    module_0.longest_common_subsequence(bytes_1, bytes_1)
