# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import longest_common_subsequence as module_1


def test_case_0():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)
    var_0 = module_1.longest_common_subsequence(object_0, dict_0)
    assert var_0 == ""


def test_case_1():
    none_type_0 = None
    var_0 = module_1.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"2\x07D\xc9bL\x8a\xe5\xf9!\xb4"
    dict_0 = {bytes_0: bytes_0}
    bytes_1 = b"Q3\xebjP\x1d-$\xb4"
    list_0 = [dict_0, bytes_1, dict_0]
    module_1.longest_common_subsequence(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xc6m\xb9H\xe9\x0c\x86!\x08\xb9\x83a"
    tuple_0 = (bytes_0, bytes_0)
    var_0 = module_1.longest_common_subsequence(tuple_0, bytes_0)
    assert var_0 == ""
    str_0 = "(^t\rw(o8cA>[l$+\x0c6"
    none_type_0 = None
    var_1 = module_1.longest_common_subsequence(tuple_0, var_0)
    assert var_1 == ""
    var_2 = module_1.longest_common_subsequence(str_0, none_type_0)
    assert var_2 == ""
    list_0 = []
    var_3 = module_1.longest_common_subsequence(str_0, list_0)
    assert var_3 == ""
    int_0 = 2088
    module_1.longest_common_subsequence(int_0, int_0)
