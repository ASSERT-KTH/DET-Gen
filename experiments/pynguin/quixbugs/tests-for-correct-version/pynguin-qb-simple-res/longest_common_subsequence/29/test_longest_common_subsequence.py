# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 6282.001575
    list_0 = [float_0, float_0, float_0]
    module_0.longest_common_subsequence(list_0, float_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.longest_common_subsequence(bool_0, bool_0)
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    int_0 = 889
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(bool_0, none_type_0)
    assert var_0 == ""
    none_type_1 = None
    var_1 = module_0.longest_common_subsequence(int_0, none_type_1)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_2 == ""
    none_type_2 = None
    var_3 = module_0.longest_common_subsequence(none_type_2, bool_0)
    assert var_3 == ""
    module_0.longest_common_subsequence(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    bytes_0 = b"\xf5\x15\x9cU\x81\x8b,\xe3^;c\xf9\x12h\xfaLJ\xf0\\"
    module_0.longest_common_subsequence(bytes_0, bytes_0)


def test_case_4():
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_subsequence(none_type_0, none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(var_1, var_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(none_type_0, var_1)
    assert var_3 == ""
    bytes_0 = b"'\x93\x15\xd2p\x06kG\xc3\x08o\xfe:\x9e\x1ei\x96\x8e\x9bE"
    var_4 = module_0.longest_common_subsequence(var_3, bytes_0)
    assert var_4 == ""
    str_0 = "s"
    var_5 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_5 == "s"
    var_6 = module_0.longest_common_subsequence(bytes_0, var_5)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(str_0, none_type_0)
    assert var_7 == ""
    var_8 = module_0.longest_common_subsequence(var_7, var_7)
    assert var_8 == ""
    var_9 = module_0.longest_common_subsequence(var_3, var_4)
    assert var_9 == ""
    float_0 = -2369.492
    var_10 = module_0.longest_common_subsequence(float_0, var_7)
    assert var_10 == ""
