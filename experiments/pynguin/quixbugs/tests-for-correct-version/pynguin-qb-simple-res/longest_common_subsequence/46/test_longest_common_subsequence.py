# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import longest_common_subsequence as module_0
import builtins as module_1


def test_case_0():
    str_0 = "BBz#jOP"
    var_0 = module_0.longest_common_subsequence(str_0, str_0)
    assert var_0 == "BBz#jOP"


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xe7m"
    bytes_1 = b"\x13v|\xf0\xbbc\xce\xd6"
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, bytes_1)
    assert var_0 == ""
    tuple_0 = (var_0, var_0)
    var_1 = module_0.longest_common_subsequence(var_0, tuple_0)
    assert var_1 == ""
    none_type_1 = None
    var_2 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(var_2, var_2)
    assert var_3 == ""
    none_type_2 = None
    var_4 = module_0.longest_common_subsequence(bytes_1, none_type_2)
    assert var_4 == ""
    module_0.longest_common_subsequence(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 108.9906
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    var_0 = module_0.longest_common_subsequence(none_type_0, float_0)
    assert var_0 == ""
    str_0 = "c=m\x0cQ#"
    str_1 = "v(u@M|l\tdw!D'{"
    var_1 = module_0.longest_common_subsequence(str_0, str_1)
    assert var_1 == ""
    var_2 = module_0.longest_common_subsequence(object_0, list_0)
    assert var_2 == ""
    var_3 = module_0.longest_common_subsequence(float_0, list_0)
    assert var_3 == ""
    dict_0 = {}
    list_1 = [float_0, list_0]
    var_4 = module_0.longest_common_subsequence(list_0, list_1)
    assert var_4 == ""
    var_5 = module_0.longest_common_subsequence(var_3, list_0)
    assert var_5 == ""
    none_type_1 = None
    var_6 = module_0.longest_common_subsequence(none_type_1, none_type_1)
    assert var_6 == ""
    var_7 = module_0.longest_common_subsequence(dict_0, var_3)
    assert var_7 == ""
    var_8 = module_0.longest_common_subsequence(dict_0, dict_0)
    assert var_8 == ""
    var_9 = module_0.longest_common_subsequence(var_0, float_0)
    assert var_9 == ""
    int_0 = 1649
    var_10 = module_0.longest_common_subsequence(int_0, var_9)
    assert var_10 == ""
    module_0.longest_common_subsequence(int_0, object_0)
