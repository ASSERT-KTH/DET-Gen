# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bytes_0 = b""
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


def test_case_1():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)
    var_1 = module_0.get(list_0, var_0)
    assert var_1 == 0


def test_case_2():
    bytes_0 = b""
    var_0 = module_0.get(bytes_0, bytes_0)
    assert var_0 == 0
    none_type_0 = None
    var_1 = module_0.shortest_path_length(var_0, none_type_0, none_type_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    bytes_0 = b""
    module_0.shortest_path_length(bool_0, bytes_0, bool_0)


def test_case_4():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, bool_0)
    list_0 = []
    var_1 = module_0.insert_or_update(list_0, tuple_0)
    tuple_1 = ()
    var_2 = module_0.get(tuple_1, tuple_1)
    assert var_2 == 0
    node_0 = module_1.Node(
        successors=tuple_1,
        predecessors=tuple_1,
        incoming_nodes=tuple_1,
        outgoing_nodes=tuple_1,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == ()
    assert node_0.predecessors == ()
    assert node_0.incoming_nodes == ()
    assert node_0.outgoing_nodes == ()
    var_3 = module_0.shortest_path_length(tuple_1, node_0, var_2)
    assert var_3 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_4 = module_0.insert_or_update(list_0, tuple_0)
    module_2.nlargest(tuple_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    list_0 = [tuple_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)
    var_1 = module_0.get(list_0, dict_0)
    node_0 = module_1.Node(
        successors=dict_0,
        predecessors=tuple_0,
        incoming_nodes=tuple_0,
        outgoing_nodes=tuple_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == {}
    assert node_0.predecessors == ({}, {})
    assert node_0.incoming_nodes == ({}, {})
    assert node_0.outgoing_nodes == ({}, {})
    var_2 = module_0.shortest_path_length(tuple_0, node_0, var_1)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    module_0.insert_or_update(node_0, var_0)


def test_case_7():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    node_0 = module_1.Node(successors=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == {False: False}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(dict_0, node_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = -1781
    bytes_0 = b"2"
    dict_0 = {int_0: bytes_0, int_0: int_0, bytes_0: bytes_0}
    int_1 = 4232
    dict_1 = {int_0: dict_0, int_1: int_1}
    list_0 = [dict_1, bytes_0, dict_1]
    set_0 = {int_0, int_0, int_1}
    module_0.insert_or_update(list_0, set_0)
