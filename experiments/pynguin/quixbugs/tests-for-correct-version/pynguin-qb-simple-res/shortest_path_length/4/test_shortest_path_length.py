# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2
import builtins as module_3


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x9d\xd0Z\x06m\xfe=\x0b\xca7\xf4\xd8\x9d'\xe0"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xeepoV\xee%\xdaXO"
    node_0 = module_1.Node(successors=bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\xeepoV\xee%\xdaXO"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"\xeepoV\xee%\xdaXO"
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 2713
    module_0.get(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"o\xaa\x80\xaa"
    none_type_0 = None
    module_0.shortest_path_length(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"6\xfe"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bytes_1 = b"f\x1d\x13ZJ\xbb\x89\xf8\xdc\xcb\xae\xaeH08]\xf4"
    var_0 = module_0.shortest_path_length(bytes_1, bytes_1, bytes_1)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(dict_0, bytes_0)
    module_0.get(dict_0, var_1)


def test_case_6():
    str_0 = "44kYL^3S"
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(str_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_7():
    bytes_0 = b"\xe5\x0e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "44kYLc^3S"
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    bytes_0 = b"\xe5\x0e"
    var_0 = module_2.merge(key=node_0, reverse=str_0)
    var_1 = module_0.shortest_path_length(str_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    module_0.insert_or_update(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    bytes_0 = b"\xe5\x0e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bytes_1 = b"\x1d\x13ZJ\xbb\x89\xdc\xcb\xae\xaeH08]\xf4"
    var_0 = module_0.shortest_path_length(bytes_1, bytes_1, bytes_1)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(dict_0, bytes_0)
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "p0WaU/'MIbSR+q+\t>\"R"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(dict_0, node_0, node_0)
    assert var_0 == 0
    bytes_0 = b"\xd4\x00"
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bytes_1 = b"f\x1d\x13ZJ\xbb\x89\xf8\xdc\xcb\xae\xaeH08]\xf4"
    var_1 = module_0.get(dict_1, var_0)
    assert var_1 == 212
    var_2 = module_3.object()
    var_3 = module_0.shortest_path_length(bytes_1, bytes_1, bytes_1)
    assert var_3 == 0
    var_4 = module_0.insert_or_update(dict_1, bytes_0)
    var_4.predecessors()
