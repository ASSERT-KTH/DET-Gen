# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "\rBt6)5%"
    none_type_0 = None
    module_0.get(str_0, none_type_0)


def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "\rBt6)5%"
    node_0 = module_1.Node(
        successor=str_0, successors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "\rBt6)5%"
    assert node_0.successors == "\rBt6)5%"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "\rBt6)5%"
    assert node_0.outgoing_nodes == "\rBt6)5%"
    module_0.shortest_path_length(str_0, node_0, str_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0, outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = "jdm\t-$bZ4V^jZUJx"
    int_0 = 2773
    tuple_0 = (str_0,)
    tuple_1 = (int_0, tuple_0)
    tuple_2 = (list_0, str_0, tuple_1)
    module_0.insert_or_update(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"*\x03"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    set_0 = {bytes_0}
    var_1 = module_0.shortest_path_length(set_0, set_0, set_0)
    assert var_1 == 0
    node_0 = module_1.Node(incoming_nodes=var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 0
    assert node_0.outgoing_nodes == []
    var_2 = module_0.shortest_path_length(var_1, node_0, var_1)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_3 = module_0.get(set_0, var_1)
    assert var_3 == 0
    str_0 = "\x0b"
    var_4 = module_0.get(list_0, set_0)
    assert var_4 == 0
    node_1 = module_1.Node(
        successor=set_0, successors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor == {b"*\x03"}
    assert node_1.successors == "\x0b"
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == "\x0b"
    assert node_1.outgoing_nodes == "\x0b"
    module_0.shortest_path_length(str_0, node_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xacm"
    set_0 = set()
    module_0.insert_or_update(set_0, bytes_0)


def test_case_8():
    bytes_0 = b"\x1c\x0e"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.get(list_0, bytes_0)
    assert var_0 == 0


def test_case_9():
    str_0 = ""
    tuple_0 = (str_0, str_0)
    tuple_1 = (tuple_0,)
    var_0 = module_0.get(tuple_1, str_0)
    assert var_0 == ""
