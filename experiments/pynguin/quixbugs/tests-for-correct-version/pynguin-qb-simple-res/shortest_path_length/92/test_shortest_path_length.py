# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "^r-\rn/edEZo("
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    node_0 = module_1.Node(successors=list_0, incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == [False, False, False]
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == [False, False, False]
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.insert_or_update(bool_0, bool_0)


def test_case_4():
    set_0 = set()
    node_0 = module_1.Node(outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {*()}
    var_0 = module_0.shortest_path_length(node_0, node_0, set_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "]#"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    tuple_1 = (var_0, var_0)
    var_1 = module_0.shortest_path_length(tuple_1, var_0, var_0)
    assert var_1 == 0
    module_0.insert_or_update(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\x19\x88A\\\xa1\xcf"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (set_0, set_0)
    list_0 = [tuple_0]
    var_0 = module_0.get(list_0, set_0)
    str_0 = "^r-\rn/edEZo("
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    tuple_1 = (var_0, var_0)
    set_0 = {tuple_0, var_0}
    var_1 = module_0.get(tuple_0, set_0)
    assert var_1 == 0
    list_0 = [tuple_1, tuple_0]
    module_0.get(list_0, set_0)


def test_case_9():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    list_0 = [tuple_1, tuple_0, tuple_0]
    var_0 = module_0.insert_or_update(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.shortest_path_length(node_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_2 = module_0.get(tuple_0, tuple_0)
    assert var_2 == 0
    tuple_1 = (var_2, var_2)
    var_3 = module_0.shortest_path_length(tuple_1, tuple_1, tuple_1)
    assert var_3 == 0
    list_0 = [tuple_1]
    list_1 = [list_0, tuple_0]
    module_0.insert_or_update(list_0, list_1)
