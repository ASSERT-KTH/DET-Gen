# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bytes_0 = b"\t\x81*\xa9J6\xb5\x13\x17\xfb"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\t\x81*\xa9J6\xb5\x13\x17\xfb"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "bIZIfo"
    node_0 = module_1.Node(
        str_0, successors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "bIZIfo"
    assert node_0.successor is None
    assert node_0.successors == "bIZIfo"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "bIZIfo"
    assert node_0.outgoing_nodes == "bIZIfo"
    module_0.shortest_path_length(str_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -4266.64
    bool_0 = True
    module_0.shortest_path_length(float_0, float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = 4121 + 4222.64j
    list_0 = [complex_0, complex_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_5():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    bytes_0 = b"\r!\x98\xae\xa2\x04\xb1r\x9a\xe4\t\xb1\xa5\x02#\xcc\x1b"
    var_0 = module_0.shortest_path_length(node_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = ""
    node_0 = module_1.Node(str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ""
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ""
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(str_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    set_0 = {str_0, var_0}
    tuple_0 = (set_0, var_0, var_0, set_0)
    var_1 = module_0.get(tuple_0, var_0)
    assert var_1 == ""
    module_0.get(set_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ""
    var_0 = module_0.get(str_0, str_0)
    assert var_0 == 0
    node_0 = module_1.Node(str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ""
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ""
    assert node_0.outgoing_nodes == []
    var_1 = module_0.shortest_path_length(node_0, node_0, str_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    set_0 = {str_0, var_1}
    tuple_0 = (set_0, var_1, var_1, set_0)
    list_0 = [var_1, var_0, tuple_0, set_0]
    module_0.get(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = ""
    var_0 = module_0.get(str_0, str_0)
    assert var_0 == 0
    dict_0 = {var_0: str_0, str_0: str_0, str_0: var_0}
    module_0.insert_or_update(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = ""
    node_0 = module_1.Node(str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ""
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ""
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, str_0}
    list_0 = [set_0, node_0, node_0, str_0, str_0]
    var_0 = module_0.insert_or_update(list_0, set_0)
    var_1 = module_0.get(str_0, list_0)
    assert var_1 == 0
    module_0.get(node_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = ""
    var_0 = module_0.get(str_0, str_0)
    assert var_0 == 0
    var_1 = module_2.merge()
    node_0 = module_1.Node(str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ""
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ""
    assert node_0.outgoing_nodes == []
    var_2 = module_0.shortest_path_length(var_1, node_0, str_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    set_0 = {var_1, var_2}
    list_0 = [set_0, var_0, node_0, str_0, var_1]
    var_3 = module_0.insert_or_update(list_0, set_0)
    tuple_0 = (var_2, var_1)
    module_0.insert_or_update(list_0, tuple_0)
