# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.shortest_path_length(set_0, set_0, set_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x161"
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    list_0 = []
    node_0 = module_1.Node(successor=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x91\xd2\xe0\xfe\xab\x1d\xe39\xc3\xecT\x8dE\xc4\xa5P\xa2-\xc7\x9c"
    none_type_0 = None
    module_0.shortest_path_length(none_type_0, bytes_0, none_type_0)


def test_case_4():
    list_0 = []
    node_0 = module_1.Node(successor=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(list_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x161"
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_6():
    list_0 = []
    node_0 = module_1.Node(successor=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = set()
    var_0 = module_0.shortest_path_length(set_0, node_0, set_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {var_0: var_0, node_0: node_0, var_0: set_0}
    var_1 = module_0.insert_or_update(list_0, dict_0)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successor) == 1


@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    node_0 = module_1.Node(successor=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {var_1: var_1, var_0: var_0, var_1: var_0}
    var_2 = module_0.insert_or_update(list_0, dict_0)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successor) == 1
    var_3 = module_0.get(list_0, list_0)
    assert var_3 == 0
    module_0.insert_or_update(list_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    node_0 = module_1.Node(successor=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = set()
    var_0 = module_0.shortest_path_length(set_0, set_0, set_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {var_1: var_1, var_0: var_0, var_1: set_0}
    var_2 = module_0.get(list_0, list_0)
    assert var_2 == 0
    var_3 = module_0.insert_or_update(list_0, dict_0)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successor) == 1
    var_4 = module_0.get(list_0, var_0)
    assert var_4 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_4.successors()


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\xd4\x89"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    module_0.insert_or_update(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    node_0 = module_1.Node(successors=list_0, incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == [False, False, False]
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == [False, False, False]
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(bool_0, node_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    list_0 = []
    node_0 = module_1.Node(successor=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = set()
    var_0 = module_0.shortest_path_length(set_0, set_0, set_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {var_1: var_1, var_0: var_0, var_1: set_0}
    var_2 = module_0.insert_or_update(list_0, dict_0)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successor) == 1
    list_1 = [list_0, dict_0]
    module_0.insert_or_update(list_0, list_1)
