# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    node_0 = module_1.Node(outgoing_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0}
    none_type_0 = None
    var_0 = module_0.get(list_0, none_type_0)
    assert var_0 == 0
    module_0.get(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "i6^Z~"
    node_0 = module_1.Node(successors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "i6^Z~"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "i6^Z~"
    module_0.shortest_path_length(node_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.insert_or_update(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    none_type_0 = None
    module_0.shortest_path_length(bool_0, none_type_0, bool_0)


def test_case_5():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    bool_0 = True
    tuple_1 = (list_0, bool_0)
    list_1 = [tuple_1]
    var_0 = module_0.get(list_1, tuple_0)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(list_1, tuple_1)


def test_case_6():
    list_0 = []
    node_0 = module_1.Node(outgoing_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = ()
    node_0 = module_1.Node(tuple_0, successors=tuple_0, outgoing_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ()
    assert node_0.successor is None
    assert node_0.successors == ()
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == ()
    var_0 = module_2.merge(key=node_0)
    list_0 = [var_0, tuple_0]
    bool_0 = True
    tuple_1 = (list_0, bool_0)
    module_0.insert_or_update(var_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    tuple_0 = ()
    node_0 = module_1.Node(tuple_0, successors=tuple_0, outgoing_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ()
    assert node_0.successor is None
    assert node_0.successors == ()
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == ()
    list_0 = [tuple_0, tuple_0]
    bool_0 = True
    tuple_1 = (list_0, bool_0)
    module_0.insert_or_update(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    tuple_0 = ()
    node_0 = module_1.Node(tuple_0, successors=tuple_0, outgoing_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ()
    assert node_0.successor is None
    assert node_0.successors == ()
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == ()
    list_0 = [tuple_0, tuple_0]
    bool_0 = True
    tuple_1 = (list_0, bool_0)
    list_1 = [list_0, tuple_1, node_0, tuple_1]
    var_0 = module_0.get(list_1, tuple_0)
    var_1 = module_0.insert_or_update(list_1, tuple_1)
    module_0.get(bool_0, node_0)
