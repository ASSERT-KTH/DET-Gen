# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2
import builtins as module_3


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'\x83\xdd\xe7"\xdav\xd9^\xb3\x04\x9f\xd9\xb7J\x82'
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(list_0, var_0, var_0)
    assert var_1 == 0
    var_2 = module_1.merge(*list_0)
    module_0.insert_or_update(var_2, var_2)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 386
    module_0.get(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    bytes_0 = b"g\xab\xb4\x97>)\x0c\x12\xea\x0f\x0e3\x87)\xbc\x96\xba\xf1\xdcy"
    module_0.shortest_path_length(none_type_0, bytes_0, none_type_0)


def test_case_5():
    list_0 = []
    node_0 = module_2.Node(list_0, list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == []
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(list_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    node_0 = module_2.Node(list_0, list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == []
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    set_0 = {node_0, var_0}
    module_0.insert_or_update(set_0, set_0)


def test_case_7():
    list_0 = []
    node_0 = module_2.Node(list_0, list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == []
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(list_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    set_0 = {node_0, var_0}
    var_1 = module_0.insert_or_update(list_0, set_0)
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.value) == 1
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successor) == 1
    var_2 = module_0.insert_or_update(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    set_0 = {tuple_0, bool_1}
    int_0 = 1810
    module_0.get(set_0, int_0)


def test_case_9():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    list_0 = []
    node_0 = module_2.Node(list_0, list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == []
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    object_0 = module_3.object(*list_0)
    var_1 = module_0.shortest_path_length(object_0, node_0, list_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_2 = module_0.get(list_0, var_1)
    assert var_2 == 0
    set_0 = {node_0, var_2}
    var_3 = module_0.insert_or_update(list_0, set_0)
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.value) == 1
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successor) == 1
    object_1 = module_3.object()
    var_4 = module_0.insert_or_update(list_0, set_0)
    var_5 = module_0.get(list_0, node_0)
    assert var_5 == 0


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    list_0 = []
    node_0 = module_2.Node(list_0, list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == []
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    object_0 = module_3.object(*list_0)
    var_1 = module_0.shortest_path_length(object_0, node_0, list_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_2 = module_0.get(list_0, var_1)
    assert var_2 == 0
    set_0 = {node_0, var_2}
    var_3 = module_0.insert_or_update(list_0, set_0)
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.value) == 1
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successor) == 1
    object_1 = module_3.object()
    str_0 = "XnWhT;KO76gV"
    dict_0 = {var_3: list_0, var_2: str_0}
    var_4 = module_0.insert_or_update(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b'\x83\xdd\xe7"\xdav\xd9^\xb3\x04\x9f\xd9\xb7J\x82'
    node_0 = module_2.Node(bytes_0, successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b'\x83\xdd\xe7"\xdav\xd9^\xb3\x04\x9f\xd9\xb7J\x82'
    assert node_0.successor is None
    assert node_0.successors == b'\x83\xdd\xe7"\xdav\xd9^\xb3\x04\x9f\xd9\xb7J\x82'
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    module_0.shortest_path_length(bytes_0, node_0, none_type_0)
