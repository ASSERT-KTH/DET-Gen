# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    str_0 = "6"
    module_0.get(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    set_0 = {var_0}
    module_0.get(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    str_0 = " K?ZzX\r-Av(Oz^\t"
    module_0.shortest_path_length(tuple_0, tuple_0, str_0)


def test_case_5():
    dict_0 = {}
    node_0 = module_1.Node(dict_0, successors=dict_0, outgoing_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {}
    assert node_0.successor is None
    assert node_0.successors == {}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {}
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = -2360.1743
    float_1 = 275.430081
    set_0 = {float_0, float_0, float_1}
    module_0.insert_or_update(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\x89\x1f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.get(dict_0, bytes_0)
    assert var_0 == 0
    var_1 = module_0.get(dict_0, var_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(bytes_0, var_1, var_0)
    assert var_2 == 0
    module_2.nsmallest(var_2, var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    bytes_0 = b"o\x9f\xa4\xedJ\x152OX\x10\xc9\xb59"
    node_0 = module_1.Node(dict_0, successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {}
    assert node_0.successor is None
    assert node_0.successors == b"o\x9f\xa4\xedJ\x152OX\x10\xc9\xb59"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(dict_0, node_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0, dict_0, dict_0]
    var_0 = module_0.get(dict_0, list_0)
    assert var_0 == 0
    node_0 = module_1.Node(dict_0, successors=dict_0, outgoing_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {}
    assert node_0.successor is None
    assert node_0.successors == {}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == [{}, {}, {}, {}, {}, {}]
    set_0 = {var_0, node_0, var_0}
    module_0.insert_or_update(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x89R"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)
    var_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\x89R"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.get(dict_0, bytes_0)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(dict_0, bytes_0)
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0]
    var_0 = module_0.get(list_1, bool_0)
    assert var_0 is False
    bytes_0 = b"\x89\x1f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_1 = module_0.get(dict_0, bytes_0)
    assert var_1 == 0
    var_2 = module_0.get(dict_0, var_1)
    assert var_2 == 0
    var_1.successor()
