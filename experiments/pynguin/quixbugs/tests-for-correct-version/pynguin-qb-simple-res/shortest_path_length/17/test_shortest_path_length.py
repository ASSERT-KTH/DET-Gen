# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -2624
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: int_0, bool_0: int_0}
    float_0 = -2895.65
    module_0.get(dict_0, float_0)


def test_case_2():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    module_0.insert_or_update(tuple_0, tuple_0)


def test_case_4():
    var_0 = module_1.merge()
    node_0 = module_2.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.generator"
    )
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.shortest_path_length(node_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b">\x9c"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"v\x07"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.shortest_path_length(list_0, bytes_0, bytes_0)
    assert var_0 == 0
    var_1 = module_0.get(list_0, var_0)
    assert var_1 == 0
    var_1.successors()


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    set_0 = module_1.merge()
    node_0 = module_2.Node(successors=set_0, predecessors=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.generator"
    )
    assert node_0.predecessors is False
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, set_0]
    var_0 = module_0.shortest_path_length(list_0, node_0, node_0)
    assert var_0 == 0
    none_type_0 = None
    var_1 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    module_0.insert_or_update(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"vl"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"v\x07"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    var_1 = module_0.shortest_path_length(list_0, bytes_0, bytes_0)
    assert var_1 == 0
    var_2 = module_0.get(list_0, var_1)
    assert var_2 == 0
    module_0.insert_or_update(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    node_0 = module_2.Node(successors=set_0, predecessors=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == {False}
    assert node_0.predecessors is False
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "\\/c|"
    list_0 = [str_0, str_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    var_0 = module_0.get(tuple_0, str_0)
    assert var_0 == "\\/c|"
    bool_1 = True
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    var_1 = module_0.shortest_path_length(set_0, bool_1, bool_1)
    assert var_1 == 0
    node_0 = module_2.Node(successors=set_0, predecessors=bool_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == {True}
    assert node_0.predecessors is True
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_1 = [node_0, set_0]
    var_2 = module_0.shortest_path_length(list_1, node_0, node_0)
    assert var_2 == 0
    none_type_0 = None
    module_0.shortest_path_length(node_0, node_0, none_type_0)
