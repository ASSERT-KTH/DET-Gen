# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    dict_0 = {}
    var_0 = module_0.shortest_path_length(dict_0, dict_0, dict_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "9,"
    set_0 = {str_0, str_0, str_0}
    var_0 = module_0.get(set_0, str_0)
    assert var_0 == 0
    bool_0 = True
    module_0.shortest_path_length(var_0, var_0, bool_0)


def test_case_2():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0


def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_5():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    var_0 = module_2.nsmallest(bool_0, tuple_0)
    var_1 = module_0.insert_or_update(var_0, tuple_0)
    var_2 = module_0.insert_or_update(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    var_0 = module_2.nsmallest(bool_0, tuple_0)
    var_1 = module_0.insert_or_update(var_0, tuple_0)
    var_2 = module_0.insert_or_update(var_0, tuple_0)
    var_3 = module_0.get(var_0, var_0)
    assert var_3 == 0
    var_4 = module_0.get(var_0, var_3)
    assert var_4 is False
    module_0.shortest_path_length(var_3, bool_0, var_3)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "9,"
    set_0 = {str_0, str_0, str_0}
    node_0 = module_1.Node(successors=str_0, incoming_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "9,"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {"9,"}
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, bool_0, bool_0)
    assert var_0 == 0
    var_1 = module_2.nsmallest(bool_0, tuple_0)
    bool_1 = True
    tuple_1 = (var_0, bool_1)
    var_2 = module_0.insert_or_update(var_1, tuple_1)
    var_3 = module_0.shortest_path_length(var_1, var_2, var_2)
    assert var_3 == 0
    var_4 = module_0.insert_or_update(var_1, tuple_0)
    node_0 = module_1.Node(outgoing_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == (False, False)
    var_5 = module_0.shortest_path_length(none_type_0, node_0, tuple_0)
    assert var_5 == pytest.approx(1e309, abs=0.01, rel=0.01)
    node_1 = module_1.Node(var_5, successors=tuple_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert node_1.successor is None
    assert node_1.successors == (False, False)
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    module_0.shortest_path_length(var_5, node_1, bool_0)
