# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    str_0 = "\x0cw{D\rCEM/V"
    module_0.get(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -2466.0
    set_0 = {float_0}
    node_0 = module_1.Node(successors=set_0, outgoing_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.set"
    )
    assert len(node_0.successors) == 1
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == pytest.approx(-2466.0, abs=0.01, rel=0.01)
    module_0.shortest_path_length(float_0, node_0, float_0)


def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    float_0 = 1904.670783
    var_0 = module_0.shortest_path_length(node_0, node_0, float_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xf6O"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    set_0 = {none_type_0, node_0}
    bytes_0 = b'\xd2\xc3\x855\x0cd.\xaa"\x1b\xa2\x0c'
    tuple_0 = (set_0, bytes_0)
    var_0 = module_0.shortest_path_length(none_type_0, tuple_0, tuple_0)
    assert var_0 == 0
    dict_0 = {node_0: node_0, node_0: node_0}
    var_1 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    float_0 = 1888.6876181020045
    var_2 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_2 == 0
    none_type_1 = None
    var_3 = module_0.shortest_path_length(float_0, none_type_1, none_type_1)
    assert var_3 == 0
    var_4 = module_0.shortest_path_length(var_2, none_type_1, none_type_1)
    assert var_4 == 0
    module_0.get(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"@\xf6e\xe8p\xb7\x8d\xce\x01"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {var_0, node_0}
    bytes_1 = b'\xd2\xc3\x855\x0cd.\xaa"\x1b\xa2\x0c'
    tuple_0 = (set_0, bytes_1)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    set_0 = {none_type_0, node_0}
    bytes_0 = b'\xd2\xc3\x855\x0cd.\xaa"\x1b\xa2\x0c'
    tuple_0 = (set_0, bytes_0)
    var_0 = module_0.shortest_path_length(none_type_0, tuple_0, tuple_0)
    assert var_0 == 0
    var_1 = module_0.get(tuple_0, node_0)
    float_0 = 1888.6876181020045
    var_2 = module_0.shortest_path_length(float_0, float_0, float_0)
    none_type_1 = None
    var_3 = module_0.shortest_path_length(float_0, none_type_1, none_type_1)
    var_4 = module_0.shortest_path_length(var_2, none_type_1, none_type_1)
    module_0.get(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    set_0 = {none_type_0, node_0}
    bytes_0 = b'\xd2\xc3\x855\x0cd.\xaa"\x1b\xa2\x0c'
    tuple_0 = (set_0, bytes_0)
    dict_0 = {node_0: node_0, node_0: node_0}
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    float_0 = 1888.6876181020045
    var_1 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_1 == 0
    module_0.insert_or_update(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    set_0 = {none_type_0, node_0}
    tuple_0 = module_2.merge()
    var_0 = module_0.shortest_path_length(none_type_0, tuple_0, tuple_0)
    assert var_0 == 0
    dict_0 = {node_0: node_0, node_0: node_0}
    var_1 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    float_0 = 1888.6876181020045
    var_2 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_2 == 0
    module_0.insert_or_update(tuple_0, set_0)
