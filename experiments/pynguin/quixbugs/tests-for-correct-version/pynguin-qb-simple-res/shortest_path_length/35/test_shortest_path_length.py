# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


def test_case_1():
    bytes_0 = b"\x85\xf9"
    set_0 = {bytes_0}
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0


def test_case_2():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "e%k"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.shortest_path_length(list_0, str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "`vMo!>~2/,L"
    node_0 = module_1.Node(str_0, successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "`vMo!>~2/,L"
    assert node_0.successor is None
    assert node_0.successors == "`vMo!>~2/,L"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, str_0)


def test_case_5():
    none_type_0 = None
    node_0 = module_1.Node(
        successor=none_type_0, predecessors=none_type_0, incoming_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ""
    var_0 = module_0.get(str_0, str_0)
    assert var_0 == 0
    var_1 = module_2.merge(reverse=var_0)
    tuple_0 = (var_1, var_1)
    module_0.insert_or_update(var_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [bool_0, bool_0, bool_0, list_0]
    tuple_0 = (bool_0, list_1)
    var_0 = module_0.shortest_path_length(tuple_0, tuple_0, tuple_0)
    assert var_0 == 0
    tuple_1 = (tuple_0,)
    module_0.insert_or_update(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = module_0.shortest_path_length(list_0, bool_0, bool_0)
    assert list_1 == 0
    tuple_0 = (bool_0, list_1)
    tuple_1 = (tuple_0,)
    module_0.insert_or_update(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    node_0 = module_1.Node(
        successor=none_type_0, predecessors=none_type_0, incoming_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    bool_0 = True
    bool_1 = True
    var_0 = module_0.shortest_path_length(bool_1, bool_1, bool_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(bool_1, bool_1, bool_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(bool_0, bool_1, bool_1)
    assert var_2 == 0
    tuple_0 = (bool_1, var_2)
    bool_2 = False
    var_3 = module_0.shortest_path_length(var_1, var_1, var_1)
    assert var_3 == 0
    int_0 = 725
    list_0 = [tuple_0, bool_0, var_1, bool_2]
    var_4 = module_0.get(list_0, var_0)
    assert var_4 is True
    module_0.shortest_path_length(var_3, var_3, int_0)
