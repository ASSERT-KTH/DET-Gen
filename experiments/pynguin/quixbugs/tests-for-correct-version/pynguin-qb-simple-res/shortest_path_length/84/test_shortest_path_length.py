# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xa5"
    none_type_0 = None
    module_0.get(bytes_0, none_type_0)


def test_case_2():
    list_0 = []
    none_type_0 = None
    var_0 = module_0.get(list_0, none_type_0)
    assert var_0 == 0
    node_0 = module_1.Node(successors=list_0, predecessors=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == 0
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.shortest_path_length(none_type_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -2649.0
    list_0 = [float_0, float_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(
        predecessors=none_type_0, incoming_nodes=none_type_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes is None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x03\x1c"
    list_0 = [bytes_0, bytes_0, bytes_0]
    node_0 = module_1.Node(successors=list_0, predecessors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == [b"\x03\x1c", b"\x03\x1c", b"\x03\x1c"]
    assert node_0.predecessors == [b"\x03\x1c", b"\x03\x1c", b"\x03\x1c"]
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    module_0.shortest_path_length(node_0, node_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x03\x1c"
    list_0 = []
    node_0 = module_1.Node(successors=list_0, predecessors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    assert node_0.successors == [b"\x03\x1c"]
    assert node_0.predecessors == [b"\x03\x1c"]
    module_0.shortest_path_length(node_0, node_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\x03\x1c"
    node_0 = module_1.Node(successors=bytes_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x03\x1c"
    assert node_0.predecessors == b"\x03\x1c"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x03\x1c"
    var_0 = module_2.merge()
    dict_0 = {bytes_0: bytes_0, bytes_0: var_0}
    var_1 = module_0.insert_or_update(dict_0, bytes_0)
    list_0 = []
    none_type_0 = None
    var_2 = module_0.get(list_0, none_type_0)
    assert var_2 == 0
    module_0.get(dict_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x03\x1c"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)
    list_0 = [dict_0]
    module_0.insert_or_update(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"|\x01"
    var_0 = module_2.merge()
    dict_0 = {
        bytes_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: var_0,
        bytes_0: var_0,
        bytes_0: var_0,
    }
    bool_0 = True
    var_1 = module_0.get(dict_0, bool_0)
    assert var_1 == 124
    list_0 = []
    none_type_0 = None
    var_2 = module_0.get(dict_0, dict_0)
    assert var_2 == 0
    var_3 = module_0.get(list_0, none_type_0)
    assert var_3 == 0
    var_4 = module_0.get(dict_0, var_2)
    assert var_4 == 0
    node_0 = module_1.Node(successors=list_0, predecessors=var_3)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == 0
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_5 = module_0.shortest_path_length(var_2, node_0, dict_0)
    assert var_5 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_6 = module_0.get(var_0, var_3)
    assert var_6 == 0
    var_7 = module_0.insert_or_update(list_0, bytes_0)
    assert node_0.successors == [b"|\x01"]
    var_8 = module_0.insert_or_update(list_0, bytes_0)
    var_9 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_9 == 0
    module_2.merge(*var_8, key=node_0, reverse=var_3)
