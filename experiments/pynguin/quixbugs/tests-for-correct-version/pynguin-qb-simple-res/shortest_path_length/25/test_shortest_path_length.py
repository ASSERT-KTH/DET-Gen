# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0, node_0: node_0, node_0: node_0, node_0: node_0}
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    module_0.get(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "|b1;j0'@Wph~9>mqsf"
    node_0 = module_1.Node(str_0, successors=str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "|b1;j0'@Wph~9>mqsf"
    assert node_0.successor is None
    assert node_0.successors == "|b1;j0'@Wph~9>mqsf"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "|b1;j0'@Wph~9>mqsf"
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    none_type_0 = None
    module_0.shortest_path_length(bool_0, bool_0, none_type_0)


def test_case_5():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0, node_0: node_0, node_0: node_0, node_0: node_0}
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_6():
    str_0 = "r5"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.insert_or_update(list_0, str_0)
    var_1 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(var_1, var_0, var_0)
    assert var_2 == 0


def test_case_7():
    str_0 = "r5"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.insert_or_update(list_0, str_0)
    var_1 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_2 == 0
    var_3 = module_0.get(list_0, str_0)
    assert var_3 == 0


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "r5"
    list_0 = [str_0, str_0, str_0]
    str_1 = "r>"
    var_0 = module_0.insert_or_update(list_0, str_1)
    module_0.shortest_path_length(str_1, list_0, str_0)


def test_case_9():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_1, bool_1: bool_1}
    list_0 = [dict_0, dict_0]
    var_0 = module_0.get(list_0, bool_1)
    assert var_0 is False
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_1 = {node_0: node_0, node_0: node_0, node_0: node_0, node_0: node_0}
    var_1 = module_0.shortest_path_length(dict_1, node_0, dict_1)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
