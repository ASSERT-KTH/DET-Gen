# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    dict_0 = {}
    var_0 = module_0.shortest_path_length(dict_0, dict_0, dict_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "5_h-,Iq"
    module_0.get(str_0, str_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0


def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "Qt:O;{Yp9-@8[.y&"
    tuple_0 = (str_0, str_0)
    module_0.insert_or_update(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "YhnY"
    node_0 = module_1.Node(successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "YhnY"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(str_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -4049
    set_0 = {int_0, int_0, int_0}
    dict_0 = {int_0: set_0, int_0: int_0}
    str_0 = "h>B7tX@"
    tuple_0 = (dict_0, str_0)
    list_0 = [tuple_0, str_0]
    module_0.get(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0, tuple_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "50"
    node_0 = module_1.Node(incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "50"
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(str_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {str_0: node_0, node_0: var_0}
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "50"
    node_0 = module_1.Node(incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "50"
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(str_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {str_0: node_0, node_0: var_0}
    var_1 = module_0.insert_or_update(dict_0, str_0)
    module_0.get(node_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "1vO'KComX7g+`"
    bytes_0 = b"Jl"
    tuple_0 = (str_0, bytes_0)
    var_0 = module_2.merge(key=tuple_0, reverse=tuple_0)
    list_0 = [var_0, str_0]
    list_1 = [list_0, bytes_0, bytes_0, bytes_0]
    var_1 = module_0.get(list_1, str_0)
    str_1 = "x\\)_\x0bg(]p.sqpmEVS$h"
    var_2 = module_2.merge(reverse=str_1)
    var_3 = module_0.get(var_2, var_2)
    assert var_3 == 0
    tuple_1 = ()
    tuple_1.predecessors()
