# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    list_0 = [var_0, tuple_0, var_0, tuple_0]
    module_0.get(list_0, tuple_0)


def test_case_2():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xa7\xde\x10\xb7S;_\x8aN\x05\x8d\x99\xdf\xe7\x93"
    complex_0 = -1712.5427 - 3752.92429j
    dict_0 = {
        bytes_0: bytes_0,
        bytes_0: complex_0,
        complex_0: complex_0,
        bytes_0: complex_0,
    }
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    module_0.shortest_path_length(var_0, var_0, bool_0)


def test_case_5():
    tuple_0 = ()
    node_0 = module_1.Node(successor=tuple_0, incoming_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == ()
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ()
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, tuple_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.insert_or_update(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    node_0 = module_1.Node(successor=tuple_0, successors=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == ()
    assert node_0.successors == {()}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"9\x17"
    set_0 = {bytes_0}
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    module_0.insert_or_update(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\xfbl\xabz88\xcf\xbe\xa6h)\x11\xf8\x1e7\n\x07"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_2.merge(*list_0)
    set_0 = {var_0, var_0, bytes_0}
    dict_0 = {}
    list_1 = [set_0, dict_0]
    var_1 = module_0.get(list_1, bytes_0)
    tuple_0 = ()
    set_1 = {tuple_0, tuple_0, tuple_0, tuple_0}
    var_2 = module_0.shortest_path_length(tuple_0, set_1, set_1)
    assert var_2 == 0
    list_2 = [var_2]
    var_3 = module_0.shortest_path_length(var_2, var_2, var_2)
    assert var_3 == 0
    list_2.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"9\x17"
    set_0 = {bytes_0}
    module_0.insert_or_update(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\x85\xed"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)
