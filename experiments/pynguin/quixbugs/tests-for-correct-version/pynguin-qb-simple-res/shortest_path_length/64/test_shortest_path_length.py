# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import builtins as module_2
import heapq as module_3


def test_case_0():
    bytes_0 = b"@"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x88\xacnK\x80\xd7vB\xb7\xba"
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    set_0 = set()
    none_type_0 = None
    var_0 = module_0.get(set_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"0\x9f"
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_4():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    object_0 = module_2.object()
    complex_0 = -2806.27 - 2479.60788j
    dict_0 = {object_0: object_0, complex_0: complex_0}
    list_0 = [dict_0, dict_0, dict_0]
    var_0 = module_0.get(list_0, dict_0)
    assert var_0 == 0
    module_0.get(var_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "}y"
    tuple_0 = (str_0,)
    module_0.insert_or_update(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    set_0 = set()
    int_0 = -1087
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [int_0, node_0]
    var_0 = module_0.shortest_path_length(set_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    module_0.insert_or_update(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [set_0, set_0]
    var_0 = module_0.shortest_path_length(set_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    tuple_0 = (list_0, var_0, list_0)
    var_1 = module_0.get(tuple_0, set_0)
    var_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "J~LPoWJ"
    list_0 = [str_0, str_0]
    list_1 = [list_0]
    var_0 = module_3.merge(*list_1, reverse=list_0)
    var_1 = module_0.get(list_1, list_0)
    assert var_1 == 0
    dict_0 = {var_0: list_1}
    var_2 = module_0.insert_or_update(dict_0, list_0)
    module_0.insert_or_update(list_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0, bool_0]
    node_0 = module_1.Node(successor=bool_0, successors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is True
    assert node_0.successors == [True, True, True, True, True]
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bool_0)
