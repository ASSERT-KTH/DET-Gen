# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x90tT"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -189.68327
    dict_0 = {float_0: float_0, float_0: float_0}
    node_0 = module_1.Node(successor=dict_0, successors=dict_0, incoming_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_0.successor) == 1
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_0.successors) == 1
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == pytest.approx(-189.68327, abs=0.01, rel=0.01)
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(float_0, node_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x05\x93\x8d\x9fA"
    none_type_0 = None
    module_0.shortest_path_length(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = -1626.941
    list_0 = [float_0, float_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_6():
    dict_0 = {}
    node_0 = module_1.Node(dict_0, incoming_nodes=dict_0, outgoing_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {}
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {}
    assert node_0.outgoing_nodes == {}
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = -189.68327
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0
    tuple_0 = (var_0, var_0)
    dict_0 = {var_0: var_0, tuple_0: tuple_0}
    tuple_1 = (dict_0,)
    var_1 = module_0.get(tuple_1, float_0)
    assert var_1 == 0
    node_0 = module_1.Node(successor=var_0, successors=dict_0, incoming_nodes=var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == 0
    assert node_0.successors == {0: 0, (0, 0): (0, 0)}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 0
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(float_0, node_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    dict_0 = {}
    bytes_0 = b"\xe2~"
    tuple_0 = (bytes_0, none_type_0)
    module_0.insert_or_update(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    bytes_0 = b"\xe29"
    tuple_0 = (bytes_0, var_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 214
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    dict_0 = {int_0: int_0, tuple_0: tuple_0}
    tuple_1 = (dict_0,)
    module_0.insert_or_update(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    float_0 = 1257.0
    int_0 = 214
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    dict_0 = {int_0: int_0, tuple_0: tuple_0}
    tuple_1 = (dict_0,)
    none_type_0 = None
    var_0 = module_0.get(tuple_1, none_type_0)
    assert var_0 == 0
    node_0 = module_1.Node(incoming_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == pytest.approx(1257.0, abs=0.01, rel=0.01)
    assert node_0.outgoing_nodes == []
    none_type_1 = None
    var_1 = module_0.shortest_path_length(float_0, node_0, none_type_1)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_2 = module_0.get(tuple_1, tuple_0)
    assert var_2 == 214
    dict_1 = {}
    var_3 = module_0.get(dict_1, dict_1)
    assert var_3 == 0
    var_4 = module_0.shortest_path_length(dict_1, var_3, var_3)
    assert var_4 == 0
    var_5 = module_0.shortest_path_length(none_type_0, tuple_0, tuple_0)
    assert var_5 == 0
    module_0.shortest_path_length(var_1, tuple_0, dict_1)
