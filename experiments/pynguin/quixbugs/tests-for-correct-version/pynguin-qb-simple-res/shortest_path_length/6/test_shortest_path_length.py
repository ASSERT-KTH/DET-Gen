# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xcf\xf0b\x9d\x1e\xb3\xc6$\xea\x0f\xf9\x97"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'b\xe3\xb5=V\x9c\xd8\xd1\x9d\xe9\x0fX$"'
    node_0 = module_1.Node(
        bytes_0, successors=bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b'b\xe3\xb5=V\x9c\xd8\xd1\x9d\xe9\x0fX$"'
    assert node_0.successor is None
    assert node_0.successors == b'b\xe3\xb5=V\x9c\xd8\xd1\x9d\xe9\x0fX$"'
    assert node_0.predecessors == b'b\xe3\xb5=V\x9c\xd8\xd1\x9d\xe9\x0fX$"'
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b'b\xe3\xb5=V\x9c\xd8\xd1\x9d\xe9\x0fX$"'
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -798
    none_type_0 = None
    module_0.shortest_path_length(int_0, int_0, none_type_0)


def test_case_5():
    bytes_0 = b"\xf8\xa7\xf3\xd5\x0f\xc3\x87\xe9\x1e\xe3\xac"
    node_0 = module_1.Node(bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xf8\xa7\xf3\xd5\x0f\xc3\x87\xe9\x1e\xe3\xac"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    var_0 = module_0.shortest_path_length(tuple_0, tuple_0, tuple_0)
    assert var_0 == 0
    var_1 = module_0.get(tuple_0, tuple_0)
    assert var_1 == 0
    bytes_0 = b"\x9f\x18"
    module_0.insert_or_update(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "78"
    module_0.insert_or_update(str_0, str_0)


def test_case_8():
    bytes_0 = b"\x9f\x18"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)


def test_case_9():
    bytes_0 = b"\xf1\xb5"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    var_0 = module_0.get(tuple_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x9f\x18"
    none_type_0 = None
    var_0 = module_0.shortest_path_length(bytes_0, none_type_0, none_type_0)
    assert var_0 == 0
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_1 = module_0.insert_or_update(dict_0, bytes_0)
    var_2 = module_2.merge()
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"4f\xe2(\xa8\xc4]\x1d\xe2|\rsJ/l\x83"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_2.merge(*list_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, var_0: var_0, bytes_0: var_0}
    list_1 = [dict_0, bytes_0, bytes_0, var_0]
    var_1 = module_0.get(list_1, var_0)
    assert var_1 == b"4f\xe2(\xa8\xc4]\x1d\xe2|\rsJ/l\x83"
    float_0 = 1e309
    node_0 = module_1.Node(outgoing_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == pytest.approx(1e309, abs=0.01, rel=0.01)
    set_0 = {node_0, float_0, node_0, float_0}
    dict_1 = {node_0: set_0, float_0: node_0, node_0: node_0}
    module_2.nlargest(dict_1, set_0)
