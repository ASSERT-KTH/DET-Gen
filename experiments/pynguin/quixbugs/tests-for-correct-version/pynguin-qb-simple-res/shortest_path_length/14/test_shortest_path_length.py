# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2
import builtins as module_3


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


def test_case_1():
    str_0 = "x9"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0


def test_case_2():
    str_0 = "x9"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.insert_or_update(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    bool_0 = False
    module_0.shortest_path_length(none_type_0, bool_0, none_type_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    dict_0 = {var_0: set_0, var_0: var_0, var_0: set_0}
    node_0 = module_1.Node(set_0, successors=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {*()}
    assert node_0.successor is None
    assert node_0.successors == {0: {*()}}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "x9"
    list_0 = module_2.merge()
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    none_type_0 = None
    var_1 = module_2.nlargest(var_0, list_0, none_type_0)
    module_0.insert_or_update(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    bytes_1 = b"]\x8f\x1ez\xa8`JE"
    list_1 = [tuple_0, bytes_1]
    var_0 = module_0.get(list_1, list_0)
    assert var_0 == b""
    module_0.get(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "x9"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    object_0 = module_3.object()
    var_1 = module_0.insert_or_update(list_0, str_0)
    none_type_0 = None
    bytes_0 = b"d\no)N\x02\xbe"
    var_2 = module_0.shortest_path_length(str_0, bytes_0, bytes_0)
    assert var_2 == 0
    node_0 = module_1.Node(
        successors=str_0, incoming_nodes=var_1, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "x9"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes is None
    tuple_0 = (var_1, var_0)
    module_0.insert_or_update(list_0, tuple_0)
