# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    none_type_0 = None
    var_0 = module_0.get(set_0, none_type_0)
    assert var_0 == 0
    str_0 = "CeNdU'_M:!II2:t"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'Hy;tAg@"<%pb>'
    node_0 = module_1.Node(successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == 'Hy;tAg@"<%pb>'
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    module_0.shortest_path_length(node_0, node_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 144
    module_0.get(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    none_type_0 = None
    module_0.shortest_path_length(bool_0, bool_0, none_type_0)


def test_case_5():
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "q:V\x0behX`Inm62"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    list_0 = [tuple_0, tuple_0, tuple_0, bool_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)
    tuple_1 = (tuple_0,)
    module_0.get(list_0, tuple_1)


def test_case_7():
    list_0 = []
    str_0 = "^V"
    var_0 = module_0.insert_or_update(list_0, str_0)


def test_case_8():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0, tuple_0, tuple_0, bool_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "q:V\x0behX`Inm62"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    list_0 = [tuple_0, tuple_0, tuple_0, bool_0]
    var_1 = module_0.insert_or_update(list_0, tuple_0)
    tuple_1 = (tuple_0,)
    var_2 = module_0.get(list_0, bool_0)
    assert var_2 == "q:V\x0behX`Inm62"
    module_0.get(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "q:V\x0behX`Inm62"
    none_type_0 = None
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(str_0, none_type_0, none_type_0)
    assert var_1 == 0
    str_1 = "q:V\x0behX`In;62"
    node_0 = module_1.Node(str_0, str_0, str_0, str_0, outgoing_nodes=str_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "q:V\x0behX`Inm62"
    assert node_0.successor == "q:V\x0behX`Inm62"
    assert node_0.successors == "q:V\x0behX`Inm62"
    assert node_0.predecessors == "q:V\x0behX`Inm62"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "q:V\x0behX`In;62"
    bool_0 = False
    float_0 = 687.0964
    dict_0 = {var_0: var_0, float_0: float_0, bool_0: none_type_0, var_0: float_0}
    tuple_0 = (dict_0, var_0)
    module_0.insert_or_update(tuple_0, tuple_0)
