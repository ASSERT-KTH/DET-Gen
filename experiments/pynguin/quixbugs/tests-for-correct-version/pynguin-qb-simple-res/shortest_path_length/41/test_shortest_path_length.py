# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    bytes_0 = b"\xa8\x1c\x0c\xbb\x14c\xb7_\n\x9d"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xa8\x1c\x0c\xbb\x14\xb1c\xb7_\n\x9d"
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    var_0 = module_1.merge()
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0
    bool_0 = True
    var_2 = module_0.shortest_path_length(bool_0, var_0, var_0)
    assert var_2 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


def test_case_4():
    var_0 = module_1.merge()
    node_0 = module_2.Node(var_0, successors=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.generator"
    )
    assert node_0.successor is None
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.generator"
    )
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.shortest_path_length(node_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -507
    list_0 = [int_0, int_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xdc\xf3"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_0, bool_0, bytes_0)
    int_0 = 48
    dict_0 = {int_0: bytes_0, int_0: bytes_0, bool_0: bytes_0}
    module_0.insert_or_update(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = "fz'bKn\\M('e}W#Z~ GT"
    str_1 = "$NSnG84NL/A"
    tuple_0 = (str_0, str_1, bool_0)
    tuple_1 = (list_0, tuple_0, bool_0, tuple_0)
    module_0.insert_or_update(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xdc\xf3"
    bool_0 = False
    var_0 = module_1.nlargest(bool_0, bytes_0)
    int_0 = 48
    dict_0 = {int_0: bytes_0, int_0: bytes_0, bool_0: bytes_0}
    var_1 = module_0.insert_or_update(var_0, dict_0)
    var_2 = module_0.get(var_0, var_0)
    assert var_2 == 0
    module_1.nlargest(var_2, var_2)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "tX-V3z<c*pLzs+~D>"
    node_0 = module_2.Node(successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "tX-V3z<c*pLzs+~D>"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(str_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b""
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    var_1 = module_1.nlargest(bool_0, bytes_0)
    int_0 = 46
    dict_0 = {int_0: bytes_0, bool_0: bytes_0}
    var_2 = module_0.insert_or_update(var_1, dict_0)
    node_0 = module_2.Node(bytes_0, successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b""
    assert node_0.successor is None
    assert node_0.successors == b""
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_3 = module_0.get(var_1, var_0)
    assert var_3 == 46
    var_4 = module_0.shortest_path_length(node_0, node_0, int_0)
    assert var_4 == pytest.approx(1e309, abs=0.01, rel=0.01)
    module_0.get(var_4, var_4)
