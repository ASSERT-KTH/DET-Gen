# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


def test_case_1():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    str_0 = "/+>.XIi>>1;FN0QR$Y"
    dict_0 = {tuple_0: str_0}
    var_0 = module_0.get(dict_0, tuple_0)
    assert var_0 == 0
    bool_1 = False
    var_1 = module_0.shortest_path_length(bool_1, bool_1, bool_1)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.insert_or_update(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    module_0.shortest_path_length(bool_0, bool_0, var_0)


def test_case_4():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_0.shortest_path_length(dict_0, none_type_0, none_type_0)
    assert var_0 == 0
    var_1 = module_0.get(dict_0, var_0)
    assert var_1 == 0


def test_case_5():
    none_type_0 = None
    tuple_0 = (none_type_0, none_type_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)


def test_case_6():
    str_0 = "\x0c37[vNo"
    node_0 = module_1.Node(successor=str_0, predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "\x0c37[vNo"
    assert node_0.successors == []
    assert node_0.predecessors == "\x0c37[vNo"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "\x0c37[vNo"
    var_0 = module_0.shortest_path_length(str_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_7():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    str_0 = "/+>.XIi>>1;FN0QR$Y"
    dict_0 = {tuple_0: str_0}
    var_0 = module_0.get(dict_0, tuple_0)
    assert var_0 == 0
    var_1 = module_0.get(dict_0, var_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    bool_0 = True
    var_1 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_1 == 0
    tuple_0 = (none_type_0, bool_0)
    list_0 = module_2.nlargest(var_1, tuple_0, bool_0)
    node_0 = module_1.Node(none_type_0, predecessors=tuple_0, incoming_nodes=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == (None, True)
    assert node_0.incoming_nodes == 0
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, none_type_0, tuple_0, bool_0}
    var_2 = module_0.shortest_path_length(tuple_0, node_0, set_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_3 = module_0.insert_or_update(list_0, tuple_0)
    dict_0 = {tuple_0: var_3}
    node_1 = module_1.Node(var_0, successors=tuple_0, predecessors=var_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == 0
    assert node_1.successor is None
    assert node_1.successors == (None, True)
    assert node_1.predecessors == 0
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    module_0.shortest_path_length(dict_0, node_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    node_0 = module_1.Node(bool_0, successors=tuple_0, predecessors=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is False
    assert node_0.successor is None
    assert node_0.successors == (False, False)
    assert node_0.predecessors is False
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(bool_0, node_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    bool_0 = False
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    tuple_0 = (none_type_0, bool_0)
    list_0 = [tuple_0, bool_0, bool_0, bool_0]
    node_0 = module_1.Node(none_type_0, predecessors=tuple_0, incoming_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == (None, False)
    assert node_0.incoming_nodes is False
    assert node_0.outgoing_nodes == []
    dict_0 = {var_0: var_0, none_type_0: list_0, none_type_0: tuple_0}
    module_0.insert_or_update(list_0, dict_0)
