# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    int_0 = -1879
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


def test_case_1():
    str_0 = "U#"
    dict_0 = {str_0: str_0}
    var_0 = module_0.get(dict_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 358
    bytes_0 = b";\xe0\xaa\xc9\xdd\xae\xcf"
    dict_0 = {int_0: int_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_3():
    bytes_0 = b"\x19K\xd7\xa1\x10T"
    node_0 = module_1.Node(successor=bytes_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\x19K\xd7\xa1\x10T"
    assert node_0.successors == []
    assert node_0.predecessors == b"\x19K\xd7\xa1\x10T"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_4():
    str_0 = "U#"
    dict_0 = {str_0: str_0}
    var_0 = module_0.insert_or_update(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 358
    bytes_0 = b";\xe0\xaa\xc9\xdd\xae\xcf"
    dict_0 = {int_0: int_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0]
    var_0 = module_0.get(list_0, bytes_0)
    assert var_0 == 358
    set_0 = set()
    module_0.insert_or_update(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x19K\xd7\xa1\x10T"
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\x19K\xd7\xa1\x10T"
    assert node_0.successors == b"\x19K\xd7\xa1\x10T"
    assert node_0.predecessors == b"\x19K\xd7\xa1\x10T"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bytes_0)
