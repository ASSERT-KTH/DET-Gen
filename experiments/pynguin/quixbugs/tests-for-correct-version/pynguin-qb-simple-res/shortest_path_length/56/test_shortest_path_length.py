# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "6[]nau#K]vIm\\<"
    module_0.get(str_0, str_0)


def test_case_2():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 594
    module_0.get(int_0, int_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    bytes_0 = b"\xa2\xa3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.insert_or_update(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\x986V\x0fz\x0c\n\xd5U\xed ,\xa1\x92D"
    bytes_1 = b"\xa1\x82\xa1~ki\xa6X!\x83\xb8\xc5\x8a\x89\xa2\x1e\x07\x16"
    dict_0 = {bytes_0: bytes_1, bytes_1: bytes_0}
    tuple_0 = (dict_0, bytes_0, bytes_0, dict_0)
    module_0.get(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    list_0 = [set_0, set_0]
    node_0 = module_1.Node(successors=list_0, predecessors=set_0, incoming_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == [{*()}, {*()}]
    assert node_0.predecessors == {*()}
    assert node_0.incoming_nodes == {*()}
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(set_0, node_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0, bool_0]
    var_0 = module_0.get(list_1, bool_0)
    assert var_0 is False
    var_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -2368
    dict_0 = {}
    bool_0 = False
    tuple_0 = (dict_0, bool_0, bool_0)
    int_1 = -714
    list_0 = [tuple_0, int_1, int_1, int_1]
    list_1 = [int_0, list_0]
    list_2 = [list_1, bool_0]
    tuple_1 = (list_2,)
    module_0.insert_or_update(tuple_1, list_1)
