# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"mS^\xb8\xb2\x10*a.\x13\x9d\xfd\xba\x87"
    set_0 = set()
    list_0 = []
    var_0 = module_0.get(set_0, list_0)
    assert var_0 == 0
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "~A}H;f"
    list_0 = [str_0, str_0]
    module_0.insert_or_update(str_0, list_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, predecessors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    list_0 = []
    bytes_0 = b"\xa0\x9d"
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    node_0 = module_1.Node(list_0, var_0, list_0, bytes_0, list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == [b"\xa0\x9d"]
    assert node_0.successor is None
    assert node_0.successors == [b"\xa0\x9d"]
    assert node_0.predecessors == b"\xa0\x9d"
    assert node_0.incoming_nodes == [b"\xa0\x9d"]
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(list_0, node_0, list_0)


def test_case_6():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0, bool_0, tuple_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    bytes_0 = b"\xeb\xc0"
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    var_1 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_1 == 0
    var_2 = module_0.get(list_0, var_1)
    assert var_2 == 0
    tuple_0 = (var_0, var_2)
    module_0.get(tuple_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 157
    list_0 = []
    bytes_0 = b"\xa0\x9d"
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    node_0 = module_1.Node(list_0, predecessors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == [b"\xa0\x9d"]
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == [b"\xa0\x9d"]
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.shortest_path_length(list_0, node_0, list_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_2 = module_0.get(list_0, int_0)
    assert var_2 == 160
    str_0 = ":u"
    str_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 157
    list_0 = []
    bytes_0 = b"\xa0\x9d"
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    node_0 = module_1.Node(list_0, predecessors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == [b"\xa0\x9d"]
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == [b"\xa0\x9d"]
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.shortest_path_length(list_0, node_0, list_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_2 = module_0.get(list_0, int_0)
    assert var_2 == 160
    str_0 = ":u"
    module_0.insert_or_update(list_0, str_0)
