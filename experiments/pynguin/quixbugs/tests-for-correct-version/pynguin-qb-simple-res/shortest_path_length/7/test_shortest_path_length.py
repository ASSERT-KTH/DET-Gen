# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    complex_0 = 1068.9 + 506.72712j
    var_0 = module_0.shortest_path_length(complex_0, complex_0, complex_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "Z7>tU,wC7 1({"
    module_0.get(str_0, str_0)


def test_case_2():
    bytes_0 = b""
    var_0 = module_0.get(bytes_0, bytes_0)
    assert var_0 == 0
    node_0 = module_1.Node(outgoing_nodes=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == 0
    var_1 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    complex_0 = 1068.9 + 506.72712j
    module_0.get(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    none_type_0 = None
    module_0.shortest_path_length(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 0
    list_0 = [int_0, int_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_6():
    bytes_0 = b""
    node_0 = module_1.Node(outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b""
    var_0 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 0
    list_0 = [int_0, int_0]
    int_1 = -1240
    list_1 = [list_0, int_1]
    var_0 = module_0.get(list_1, int_0)
    assert var_0 == 0
    bytes_0 = b"\xa6Cq\xf0\x19"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = ",E"
    set_0 = {str_0}
    module_0.insert_or_update(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = ",E"
    list_0 = [str_0]
    var_0 = module_0.insert_or_update(list_0, str_0)
    var_1 = module_0.get(list_0, list_0)
    assert var_1 == 0
    bool_0 = True
    none_type_0 = None
    module_0.shortest_path_length(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = ",E"
    set_0 = {str_0, str_0}
    list_0 = [set_0, str_0]
    module_0.insert_or_update(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"Lqf\x90\x820\x83\xaa\x9al\xef4b\xc9\xb25"
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"Lqf\x90\x820\x83\xaa\x9al\xef4b\xc9\xb25"
    assert node_0.successors == b"Lqf\x90\x820\x83\xaa\x9al\xef4b\xc9\xb25"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)
