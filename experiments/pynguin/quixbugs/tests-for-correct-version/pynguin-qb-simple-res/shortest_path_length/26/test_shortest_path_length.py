# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    list_0 = []
    var_0 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xcaC\xf9\xa3w\x00\x1a\xb7\x94\xcf"
    list_0 = [bytes_0]
    module_0.get(list_0, bytes_0)


def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    module_0.insert_or_update(list_0, list_0)


def test_case_4():
    set_0 = set()
    node_0 = module_1.Node(set_0, incoming_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {*()}
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {*()}
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, set_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xae\xa1"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.insert_or_update(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xe5\xb7]1\xe6"
    node_0 = module_1.Node(bytes_0, successors=bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xe5\xb7]1\xe6"
    assert node_0.successor is None
    assert node_0.successors == b"\xe5\xb7]1\xe6"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\xe5\xb7]1\xe6"
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bytes_0)


def test_case_7():
    bytes_0 = b"\xae\xa1"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bool_0 = True
    var_0 = module_0.get(set_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    bytes_0 = b"\x12\x0c"
    none_type_0 = None
    node_0 = module_1.Node(var_0, successors=bytes_0, incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == 0
    assert node_0.successor is None
    assert node_0.successors == b"\x12\x0c"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    var_1 = module_0.shortest_path_length(bytes_0, node_0, node_0)
    assert var_1 == 0
    module_0.insert_or_update(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"i\xa1"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    var_0 = module_0.get(set_0, bytes_0)
    assert var_0 == 0
    var_1 = module_0.get(set_0, var_0)
    assert var_1 == 0
    var_2 = module_2.nlargest(var_1, bytes_0)
    var_3 = module_0.insert_or_update(var_2, bytes_0)
    bytes_1 = b""
    list_0 = [var_2, bytes_1, bytes_1, var_0]
    bool_0 = False
    list_1 = [list_0, bool_0]
    module_0.insert_or_update(var_2, list_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    var_0 = module_2.merge()
    list_0 = [var_0]
    list_1 = [list_0, list_0]
    list_2 = [list_1, list_0, list_1]
    var_1 = module_0.get(list_2, list_0)
    bytes_0 = b"a+"
    var_2 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_2 == 0
    var_1.successors()
