# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "$u"
    list_0 = [str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    bool_0 = False
    module_0.insert_or_update(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xf5\x9c\xb8c\xde[\x83\xfcx\xa8\x04"
    node_0 = module_1.Node(bytes_0, successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xf5\x9c\xb8c\xde[\x83\xfcx\xa8\x04"
    assert node_0.successor is None
    assert node_0.successors == b"\xf5\x9c\xb8c\xde[\x83\xfcx\xa8\x04"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


def test_case_3():
    tuple_0 = ()
    node_0 = module_1.Node(tuple_0, successors=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ()
    assert node_0.successor is None
    assert node_0.successors == ()
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(tuple_0, node_0, tuple_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_4():
    str_0 = "g@0sLmdLON6(C4Iy+"
    node_0 = module_1.Node(str_0, str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "g@0sLmdLON6(C4Iy+"
    assert node_0.successor == "g@0sLmdLON6(C4Iy+"
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "g@0sLmdLON6(C4Iy+"
    complex_0 = -1985.17697 - 1822.62139j
    dict_0 = {node_0: complex_0, complex_0: complex_0}
    tuple_0 = (dict_0,)
    var_0 = module_0.get(tuple_0, complex_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == "g@0sLmdLON6(C4Iy+"
    assert var_0.successor == "g@0sLmdLON6(C4Iy+"
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == "g@0sLmdLON6(C4Iy+"


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "FK"
    list_0 = [str_0, str_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_6():
    str_0 = "$u"
    list_0 = [str_0]
    var_0 = module_0.insert_or_update(list_0, str_0)
