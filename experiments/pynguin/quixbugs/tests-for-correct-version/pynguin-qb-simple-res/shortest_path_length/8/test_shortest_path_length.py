# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    set_0 = set()
    var_0 = module_0.shortest_path_length(set_0, set_0, set_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get(list_0, list_0)


def test_case_2():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 195.8375
    none_type_0 = None
    module_0.shortest_path_length(float_0, float_0, none_type_0)


def test_case_4():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    none_type_0 = None
    var_0 = module_2.merge(key=none_type_0, reverse=none_type_0)
    var_1 = module_2.merge(*var_0)
    var_2 = module_0.shortest_path_length(none_type_0, var_1, var_1)
    assert var_2 == 0
    var_3 = module_0.get(var_0, var_0)
    assert var_3 == 0
    bytes_0 = b"\xb3\x12"
    set_0 = {bytes_0, bytes_0}
    var_4 = module_0.get(set_0, none_type_0)
    assert var_4 == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = -196.95608
    bytes_0 = b"\xb3\x12"
    set_0 = {float_0, bytes_0, bytes_0}
    module_0.insert_or_update(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.insert_or_update(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    tuple_0 = (none_type_0, none_type_0, none_type_0)
    node_0 = module_1.Node(successors=tuple_0, incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == (None, None, None)
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(none_type_0, node_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 842
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    dict_0 = {tuple_0: tuple_0}
    var_0 = module_0.get(dict_0, bool_0)
    assert var_0 == 842
    bytes_0 = b"\xc8\x06\\\xb9\xe1\xcek\x90Y\x86"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    float_0 = -155.17221441948777
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0
    none_type_0 = None
    var_1 = module_2.merge(key=var_0, reverse=none_type_0)
    var_2 = module_0.get(var_1, var_1)
    assert var_2 == 0
    bytes_0 = b"\xb3\x12"
    set_0 = {float_0, bytes_0, bytes_0}
    module_0.insert_or_update(set_0, bytes_0)
