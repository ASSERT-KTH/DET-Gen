# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import heapq as module_0
import shortest_path_length as module_1
import node as module_2
import builtins as module_3


def test_case_0():
    var_0 = module_0.merge()
    var_1 = module_1.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = -1147.43452
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.get(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 1099
    dict_0 = {int_0: int_0}
    node_0 = module_2.Node(successor=dict_0, successors=dict_0, outgoing_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {1099: 1099}
    assert node_0.successors == {1099: 1099}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == 1099
    module_1.shortest_path_length(node_0, node_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (bool_0, bool_0)
    module_1.insert_or_update(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_1.insert_or_update(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "%CvS&ypppf"
    none_type_0 = None
    module_1.shortest_path_length(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0}
    module_1.insert_or_update(set_0, tuple_0)


def test_case_7():
    bytes_0 = b"H1"
    object_0 = module_3.object()
    set_0 = {bytes_0, bytes_0}
    bool_0 = True
    var_0 = module_1.get(set_0, bool_0)
    assert var_0 == 0


def test_case_8():
    str_0 = "XTI<fj"
    node_0 = module_2.Node(str_0, predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "XTI<fj"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == "XTI<fj"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "XTI<fj"
    var_0 = module_1.shortest_path_length(node_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_9():
    bytes_0 = b"3\x8c"
    list_0 = [bytes_0, bytes_0]
    str_0 = "XTI<fj"
    node_0 = module_2.Node(str_0, predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "XTI<fj"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == "XTI<fj"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "XTI<fj"
    var_0 = module_1.shortest_path_length(node_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    list_1 = [list_0, bytes_0, list_0]
    var_1 = module_1.insert_or_update(list_1, bytes_0)
    dict_0 = {}
    set_0 = {bytes_0, bytes_0}
    var_2 = module_1.get(set_0, set_0)
    assert var_2 == 0
    var_3 = module_1.get(dict_0, str_0)
    assert var_3 == 0


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    float_0 = -1053.591197
    none_type_0 = None
    dict_0 = {float_0: none_type_0, none_type_0: bool_0}
    str_0 = "|RXd3:w#,"
    tuple_0 = (dict_0, bool_0, str_0)
    var_0 = module_1.get(tuple_0, none_type_0)
    assert var_0 == pytest.approx(-1053.591197, abs=0.01, rel=0.01)
    module_1.shortest_path_length(bool_0, bool_0, none_type_0)
