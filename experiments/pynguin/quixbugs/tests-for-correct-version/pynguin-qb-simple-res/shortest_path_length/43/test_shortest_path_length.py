# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xfa\xd3\xbd\xd0\xd0\x0b\xfc]xE]"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -2020
    module_0.get(int_0, int_0)


def test_case_3():
    dict_0 = {}
    node_0 = module_1.Node(dict_0, dict_0, dict_0, incoming_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {}
    assert node_0.successor == {}
    assert node_0.successors == {}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {}
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xbe\xf9Y\xb5Sn\xb0\xfa\xdc\xe8\x00"
    node_0 = module_1.Node(bytes_0, bytes_0, bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xbe\xf9Y\xb5Sn\xb0\xfa\xdc\xe8\x00"
    assert node_0.successor == b"\xbe\xf9Y\xb5Sn\xb0\xfa\xdc\xe8\x00"
    assert node_0.successors == b"\xbe\xf9Y\xb5Sn\xb0\xfa\xdc\xe8\x00"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\xbe\xf9Y\xb5Sn\xb0\xfa\xdc\xe8\x00"
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"~\xec\x16\\\xcbY\x16\x02\xe5\xf4\x9cY"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    int_0 = 653
    set_0 = {tuple_0, int_0}
    var_0 = module_0.get(set_0, bool_0)
    assert var_0 == b"~\xec\x16\\\xcbY\x16\x02\xe5\xf4\x9cY"
    module_0.insert_or_update(tuple_0, var_0)


def test_case_6():
    bytes_0 = b"\xda\xbf"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_1 = module_0.insert_or_update(dict_1, bytes_0)


def test_case_7():
    bytes_0 = b"\xda\xbf"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    var_0 = module_0.shortest_path_length(dict_0, dict_0, dict_0)
    assert var_0 == 0
    bytes_0 = b"f;"
    module_0.insert_or_update(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\xda\xbf"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_1 = module_0.insert_or_update(dict_1, bytes_0)
    module_0.insert_or_update(dict_1, dict_1)
