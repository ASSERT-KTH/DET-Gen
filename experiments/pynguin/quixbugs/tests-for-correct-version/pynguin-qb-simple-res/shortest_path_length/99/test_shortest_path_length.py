# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    var_0 = module_0.get(tuple_0, list_0)
    assert var_0 == 0
    module_0.get(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    var_0 = module_0.get(tuple_0, list_0)
    assert var_0 == 0
    module_0.shortest_path_length(list_0, tuple_0, var_0)


def test_case_3():
    complex_0 = 3663.4 - 1797.9j
    list_0 = [complex_0, complex_0]
    list_1 = [list_0, list_0, complex_0]
    var_0 = module_0.insert_or_update(list_1, list_0)


def test_case_4():
    tuple_0 = ()
    node_0 = module_1.Node(predecessors=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == ()
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, tuple_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.insert_or_update(tuple_0, list_0)


def test_case_6():
    complex_0 = -362.6 + 2094.2j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0, complex_0]
    var_0 = module_0.get(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    complex_0 = -362.6 + 2094.2j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0, complex_0, list_0]
    none_type_0 = None
    module_0.get(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x84\x90ig\xe3\xca"
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\x84\x90ig\xe3\xca"
    assert node_0.successors == b"\x84\x90ig\xe3\xca"
    assert node_0.predecessors == b"\x84\x90ig\xe3\xca"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    list_1 = [list_0, list_0]
    var_0 = module_0.insert_or_update(list_0, list_1)
    tuple_0 = ()
    complex_0 = -765.074 - 2686j
    var_1 = module_0.shortest_path_length(tuple_0, list_1, list_1)
    assert var_1 == 0
    var_2 = module_0.get(tuple_0, complex_0)
    assert var_2 == 0
    set_0 = {complex_0, var_1}
    module_0.insert_or_update(list_0, set_0)
