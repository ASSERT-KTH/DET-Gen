# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = 50.188
    dict_0 = {}
    list_0 = [float_0, dict_0, dict_0, float_0]
    list_1 = [list_0]
    module_0.get(list_1, list_0)


def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


def test_case_3():
    list_0 = []
    node_0 = module_1.Node(incoming_nodes=list_0, outgoing_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(list_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ".w"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    node_0 = module_1.Node(successor=set_0, successors=set_0, predecessors=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {False}
    assert node_0.successors == {False}
    assert node_0.predecessors == {False}
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(set_0, node_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"0\x1a"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_7():
    bytes_0 = b"0\x88"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    var_0 = module_0.get(set_0, none_type_0)
    assert var_0 == 0
    var_1 = module_0.get(set_0, set_0)
    assert var_1 == 0


def test_case_8():
    list_0 = []
    var_0 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_0 == 0
    node_0 = module_1.Node(incoming_nodes=var_0, outgoing_nodes=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 0
    assert node_0.outgoing_nodes == 0
    none_type_0 = None
    var_1 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {none_type_0: node_0, var_0: var_1}
    list_1 = [dict_0, dict_0, node_0, var_1, list_0, var_1]
    var_2 = module_0.get(list_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "poB4I)Bi"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.insert_or_update(tuple_1, tuple_0)
