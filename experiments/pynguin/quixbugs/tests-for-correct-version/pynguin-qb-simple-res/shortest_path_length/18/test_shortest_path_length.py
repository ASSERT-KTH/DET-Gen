# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    int_0 = -1627
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"z"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"[\x87y\\\xd7"
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, incoming_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"[\x87y\\\xd7"
    assert node_0.predecessors == b"[\x87y\\\xd7"
    assert node_0.incoming_nodes == b"[\x87y\\\xd7"
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.insert_or_update(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 730.2
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0
    module_0.shortest_path_length(var_0, float_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -1627
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0
    bytes_0 = b"hz"
    list_0 = [bytes_0, int_0]
    module_0.get(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x9d\x1c"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -1627
    bytes_0 = b"hz"
    list_0 = [bytes_0, int_0]
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.insert_or_update(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -1639
    bytes_0 = b"\x9d\x1c"
    list_0 = [bytes_0, int_0, int_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    module_0.get(var_0, var_0)


def test_case_9():
    bytes_0 = b"\x96\x95\x87\xb8\x0c"
    node_0 = module_1.Node(incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\x96\x95\x87\xb8\x0c"
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x9d\x1c"
    list_0 = []
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    module_0.get(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = -1627
    bytes_0 = b"hz"
    list_0 = [bytes_0, int_0]
    list_1 = [list_0, bytes_0, bytes_0, list_0]
    var_0 = module_0.get(list_1, int_0)
    assert var_0 == b"hz"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.insert_or_update(tuple_0, list_0)
