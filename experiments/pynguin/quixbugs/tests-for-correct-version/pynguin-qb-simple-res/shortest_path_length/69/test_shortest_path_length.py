# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"7\xc5g\xc9H$\x19\x97E(\x14\x91y\xd4\xe1M"
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    bytes_0 = b"\x01\xbbZ\x140'N\x18^bj"
    node_0 = module_1.Node(
        successor=bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\x01\xbbZ\x140'N\x18^bj"
    assert node_0.successors == []
    assert node_0.predecessors == b"\x01\xbbZ\x140'N\x18^bj"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"\x01\xbbZ\x140'N\x18^bj"
    var_0 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x01\xbbZ\x140'N\x18^bj"
    node_0 = module_1.Node(
        successor=bytes_0,
        successors=bytes_0,
        predecessors=bytes_0,
        outgoing_nodes=bytes_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\x01\xbbZ\x140'N\x18^bj"
    assert node_0.successors == b"\x01\xbbZ\x140'N\x18^bj"
    assert node_0.predecessors == b"\x01\xbbZ\x140'N\x18^bj"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"\x01\xbbZ\x140'N\x18^bj"
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\t\x9d"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    list_0 = []
    node_0 = module_1.Node(successor=list_0, predecessors=list_0, incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    list_1 = [list_0, list_0]
    tuple_0 = (list_1,)
    var_1 = module_0.get(tuple_0, list_0)
    module_0.insert_or_update(var_0, var_1)


def test_case_6():
    list_0 = []
    node_0 = module_1.Node(successor=list_0, predecessors=list_0, incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    list_1 = [node_0, node_0]
    tuple_0 = (list_1,)
    var_1 = module_0.get(tuple_0, list_1)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -1001
    list_0 = [int_0, int_0]
    tuple_0 = (list_0,)
    module_0.insert_or_update(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -1001
    list_0 = [int_0, int_0]
    tuple_0 = module_2.merge()
    module_0.insert_or_update(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    node_0 = module_1.Node(successor=list_0, predecessors=list_0, incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    list_1 = []
    list_2 = [node_0, node_0]
    var_1 = module_0.shortest_path_length(list_1, list_1, list_1)
    assert var_1 == 0
    var_2 = module_0.get(list_0, list_1)
    assert var_2 == 0
    tuple_0 = (list_2,)
    bytes_0 = b"\xf6\x87"
    module_0.insert_or_update(tuple_0, bytes_0)
