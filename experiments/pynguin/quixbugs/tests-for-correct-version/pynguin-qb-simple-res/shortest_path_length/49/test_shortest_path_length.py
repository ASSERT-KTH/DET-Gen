# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


def test_case_1():
    str_0 = 'J"'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.get(dict_0, str_0)
    assert var_0 == 0


def test_case_2():
    str_0 = 'J"'
    dict_0 = {str_0: str_0}
    var_0 = module_0.insert_or_update(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 2498
    module_0.get(int_0, int_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(
        none_type_0, none_type_0, predecessors=none_type_0, incoming_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'J"'
    str_1 = ""
    module_0.insert_or_update(str_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    list_1 = [list_0, list_0]
    var_0 = module_0.insert_or_update(list_0, list_1)
    var_1 = module_0.get(list_0, list_0)
    str_0 = 'J"'
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = -978.16746
    dict_0 = {float_0: float_0}
    node_0 = module_1.Node(float_0, successors=dict_0, outgoing_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == pytest.approx(-978.16746, abs=0.01, rel=0.01)
    assert node_0.successor is None
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_0.successors) == 1
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == pytest.approx(-978.16746, abs=0.01, rel=0.01)
    module_0.shortest_path_length(dict_0, node_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    var_0 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.get(list_0, var_0)
    assert var_1 == 0
    list_1 = [list_0, list_0]
    var_2 = module_0.insert_or_update(list_0, list_1)
    node_0 = module_1.Node(var_0, var_1, predecessors=var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == 0
    assert node_0.successor == 0
    assert node_0.successors == []
    assert node_0.predecessors == 0
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_3 = module_0.get(list_0, list_0)
    var_4 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_4 == 0
    var_5 = module_0.insert_or_update(list_0, list_1)
    str_0 = 'J"'
    node_1 = module_1.Node(predecessors=var_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == 0
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    module_0.insert_or_update(var_3, str_0)
