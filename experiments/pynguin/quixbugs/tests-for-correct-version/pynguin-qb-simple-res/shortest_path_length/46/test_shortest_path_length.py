# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "3m\ng\n"
    bytes_0 = b"\x98\xa5\x8a\x12\xb7\xee\xf0YDx\x06Y\xcb"
    module_0.get(bytes_0, str_0)


def test_case_2():
    bytes_0 = b"\xa83"
    list_0 = [bytes_0]
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 2430
    module_0.get(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    bytes_0 = b"\xa6\xd4\xa8\xf7+\x15\xff=\xeb\x8bcd3\x87\xfb\xf2\xf7"
    module_0.shortest_path_length(bool_0, bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xa83"
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_6():
    set_0 = set()
    node_0 = module_1.Node(outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {*()}
    var_0 = module_0.shortest_path_length(node_0, node_0, set_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_7():
    bytes_0 = b"\xa83"
    list_0 = [bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    node_0 = module_1.Node(predecessors=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == 0
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_2.merge()
    set_1 = {var_1, var_0}
    module_0.insert_or_update(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "vc5"
    node_0 = module_1.Node(str_0, successors=str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "vc5"
    assert node_0.successor is None
    assert node_0.successors == "vc5"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "vc5"
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"Q3"
    bytes_1 = b"\x12p\xa8c;b\x9c\xa7K\x9a\x80\x01\xc3@\xe6"
    dict_0 = {bytes_0: bytes_0, bytes_1: bytes_1, bytes_0: bytes_1, bytes_1: bytes_1}
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\x1b\x01"
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    list_0 = [bytes_0]
    bool_0 = True
    var_1 = module_0.get(list_0, bool_0)
    assert var_1 == 27
    var_2 = module_0.insert_or_update(list_0, bytes_0)
    node_0 = module_1.Node(successors=list_0, outgoing_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == [b"\x1b\x01"]
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == [b"\x1b\x01"]
    node_1 = module_1.Node(var_1, node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == 27
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_3 = module_0.shortest_path_length(node_0, bytes_0, bytes_0)
    assert var_3 == 0
    var_4 = module_0.shortest_path_length(list_0, node_1, bytes_0)
    assert var_4 == pytest.approx(1e309, abs=0.01, rel=0.01)
    bytes_1 = b"\xf9n\x97\x81"
    module_0.shortest_path_length(bytes_0, node_0, bytes_1)
