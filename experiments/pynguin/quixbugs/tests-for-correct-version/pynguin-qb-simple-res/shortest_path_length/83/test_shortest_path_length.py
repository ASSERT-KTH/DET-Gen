# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    bytes_0 = b"\xf6\xbam\x925\x1a\xd0\xf8\x96&\x0453\xcb"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "SuGZ<pZ.*Avi@M64 u-P"
    module_0.get(str_0, str_0)


def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_4():
    int_0 = 978
    node_0 = module_1.Node(outgoing_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == 978
    var_0 = module_0.shortest_path_length(int_0, node_0, int_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "Fm"
    list_0 = [str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(list_0, str_0)
    module_0.shortest_path_length(var_0, var_0, var_1)


def test_case_6():
    str_0 = "Fm"
    list_0 = [str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xc5nJd\xd5{P\xd11\x10S\x9cb"
    tuple_0 = (bytes_0,)
    node_0 = module_1.Node(
        successor=tuple_0,
        successors=bytes_0,
        incoming_nodes=bytes_0,
        outgoing_nodes=bytes_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == (b"\xc5nJd\xd5{P\xd11\x10S\x9cb",)
    assert node_0.successors == b"\xc5nJd\xd5{P\xd11\x10S\x9cb"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\xc5nJd\xd5{P\xd11\x10S\x9cb"
    assert node_0.outgoing_nodes == b"\xc5nJd\xd5{P\xd11\x10S\x9cb"
    dict_0 = {node_0: node_0, tuple_0: node_0, node_0: tuple_0, bytes_0: bytes_0}
    module_0.shortest_path_length(dict_0, node_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "Fm"
    str_1 = "{esbD}{su|"
    list_0 = []
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, str_1, str_1)
    assert var_1 == 0
    var_2 = module_0.insert_or_update(list_0, str_0)
    var_3 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_3 == 0
    node_0 = module_1.Node(str_1, successors=str_1, outgoing_nodes=str_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "{esbD}{su|"
    assert node_0.successor is None
    assert node_0.successors == "{esbD}{su|"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "{esbD}{su|"
    node_1 = module_1.Node()
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_4 = module_0.shortest_path_length(str_0, node_1, var_1)
    assert var_4 == pytest.approx(1e309, abs=0.01, rel=0.01)
    module_0.shortest_path_length(node_0, node_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x87H\xe2;"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, list_0]
    module_0.insert_or_update(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    object_0 = module_2.object()
    set_0 = {object_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0, list_0]
    var_0 = module_0.get(list_1, set_0)
    str_0 = "Fm"
    module_0.get(str_0, list_0)
