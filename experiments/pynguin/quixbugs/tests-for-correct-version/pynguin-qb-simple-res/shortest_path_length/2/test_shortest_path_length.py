# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    int_0 = -1957
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get(set_0, bool_0)


def test_case_2():
    bytes_0 = b""
    node_0 = module_1.Node(bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b""
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == b""
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b""
    var_0 = module_0.get(bytes_0, node_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    module_0.insert_or_update(set_0, set_0)


def test_case_4():
    bytes_0 = b""
    node_0 = module_1.Node(bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b""
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == b""
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b""
    var_0 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ""
    none_type_0 = None
    set_0 = {str_0, none_type_0}
    module_0.insert_or_update(str_0, set_0)


def test_case_6():
    str_0 = "o&t/h\x0b031ucbL"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0, tuple_0: tuple_0, str_0: str_0, tuple_0: tuple_0}
    tuple_1 = (dict_0,)
    var_0 = module_0.get(tuple_1, tuple_1)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "< $vnfdqe,uwXk46j[M"
    list_0 = [str_0, str_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    module_0.insert_or_update(tuple_0, list_0)


def test_case_8():
    bool_0 = True
    node_0 = module_1.Node(successor=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is True
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    node_1 = module_1.Node(incoming_nodes=node_0, outgoing_nodes=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "node.Node"
    )
    list_0 = [node_1, node_0]
    list_1 = [list_0, node_1, list_0, node_0, bool_0, bool_0, bool_0]
    var_0 = module_0.shortest_path_length(bool_0, node_1, node_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_1 = module_0.get(list_1, node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert (
        f"{type(var_1.incoming_nodes).__module__}.{type(var_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(var_1.outgoing_nodes).__module__}.{type(var_1.outgoing_nodes).__qualname__}"
        == "node.Node"
    )


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x9d7?h\xec:fc&"
    node_0 = module_1.Node(successors=bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x9d7?h\xec:fc&"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"\x9d7?h\xec:fc&"
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x9f\xcd"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    var_1 = module_0.shortest_path_length(none_type_0, bytes_0, bytes_0)
    assert var_1 == 0
    var_2 = module_0.insert_or_update(dict_0, bytes_0)
    module_0.insert_or_update(dict_0, dict_0)
