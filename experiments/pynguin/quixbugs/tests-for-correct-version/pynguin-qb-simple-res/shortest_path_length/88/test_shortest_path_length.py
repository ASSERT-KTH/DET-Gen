# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "Ml"
    module_0.get(str_0, str_0)


def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    bool_0 = True
    list_1 = [bool_0, bool_0]
    var_0 = module_0.insert_or_update(list_0, list_1)
    var_1 = module_0.get(list_0, list_1)
    assert var_1 == 0
    var_2 = module_0.get(list_0, list_1)
    assert var_2 == 0
    var_3 = module_0.insert_or_update(list_0, list_1)
    module_0.get(var_3, var_3)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "Ml"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"rc#\x03\x1f\x83B\x104\x86q"
    node_0 = module_1.Node(successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"rc#\x03\x1f\x83B\x104\x86q"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    bool_0 = True
    list_1 = [bool_0, bool_0]
    var_0 = module_0.get(list_0, list_1)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(list_0, list_1)
    module_0.get(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    none_type_0 = None
    list_1 = [none_type_0, none_type_0]
    var_0 = module_0.insert_or_update(list_0, list_1)
    var_1 = module_0.get(list_0, list_0)
    assert var_1 == 0
    var_2 = module_2.object()
    var_3 = module_0.get(list_0, none_type_0)
    node_0 = module_1.Node(outgoing_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == [[None, None]]
    node_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "T&5D\x0b06De4N2@ImK2"
    bytes_0 = b"uFo\xae\xedj\xbcC "
    bool_0 = False
    tuple_0 = (str_0, bytes_0, bool_0, bool_0)
    set_0 = {bool_0, bool_0, tuple_0}
    node_0 = module_1.Node(
        predecessors=set_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == {
        False,
        ("T&5D\x0b06De4N2@ImK2", b"uFo\xae\xedj\xbcC ", False, False),
    }
    assert node_0.incoming_nodes == b"uFo\xae\xedj\xbcC "
    assert node_0.outgoing_nodes == b"uFo\xae\xedj\xbcC "
    var_0 = module_0.shortest_path_length(node_0, node_0, set_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    list_0 = [set_0, bytes_0, var_0]
    var_1 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_1 == 0
    list_1 = [var_1, var_1]
    node_1 = module_1.Node(list_1, var_1, list_1, var_1, var_1, list_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == [0, 0]
    assert node_1.successor == 0
    assert node_1.successors == [0, 0]
    assert node_1.predecessors == 0
    assert node_1.incoming_nodes == 0
    assert node_1.outgoing_nodes == [0, 0]
    module_0.insert_or_update(list_0, list_1)
