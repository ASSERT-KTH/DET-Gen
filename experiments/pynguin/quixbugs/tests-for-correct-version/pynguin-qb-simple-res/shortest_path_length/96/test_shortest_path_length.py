# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    str_0 = ""
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ""
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: str_0}
    module_0.get(dict_0, none_type_0)


def test_case_2():
    str_0 = ""
    var_0 = module_0.get(str_0, str_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "da"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = 1362 + 62.6271j
    module_0.get(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 4016
    none_type_0 = None
    module_0.shortest_path_length(none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    float_0 = -906.4479
    bool_1 = True
    bool_2 = True
    dict_0 = {bool_0: bool_0, float_0: bool_1, bool_1: bool_2}
    list_0 = [dict_0, bool_0]
    module_0.get(list_0, bool_1)


def test_case_7():
    none_type_0 = None
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    float_0 = -906.4479
    bool_1 = True
    bool_2 = True
    dict_0 = {float_0: bool_1, bool_1: bool_2}
    list_0 = [dict_0, bool_0]
    var_0 = module_0.get(list_0, bool_1)
    assert var_0 == pytest.approx(-906.4479, abs=0.01, rel=0.01)
    str_0 = ""
    none_type_0 = None
    module_0.get(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\xad)\xb7"
    node_0 = module_1.Node(bytes_0, successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xad)\xb7"
    assert node_0.successor is None
    assert node_0.successors == b"\xad)\xb7"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = ""
    bytes_0 = b"\xc9\xfe>/8\x15\x93!"
    var_0 = module_0.shortest_path_length(bytes_0, str_0, str_0)
    assert var_0 == 0
    list_0 = [bytes_0, bytes_0]
    var_1 = module_2.nsmallest(var_0, bytes_0)
    var_2 = module_0.insert_or_update(var_1, list_0)
    node_0 = module_1.Node(str_0, successors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ""
    assert node_0.successor is None
    assert node_0.successors == [b"\xc9\xfe>/8\x15\x93!", b"\xc9\xfe>/8\x15\x93!"]
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(var_1, node_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "`F"
    bytes_0 = b"\xc9\x8f>/o\x93!"
    list_0 = [str_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 2073
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (int_0, list_0)
    list_1 = [list_0, int_0, list_0, list_0]
    list_2 = [tuple_0, list_0, tuple_0, list_1]
    var_0 = module_0.insert_or_update(list_2, tuple_0)
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)
