# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "3^\x0c\\lou"
    module_0.get(str_0, str_0)


def test_case_2():
    str_0 = "(/"
    tuple_0 = (str_0,)
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_4():
    list_0 = []
    node_0 = module_1.Node(successor=list_0, incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(list_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    list_0 = []
    bytes_0 = b"\xce\x18"
    var_0 = module_0.shortest_path_length(bytes_0, list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(list_0, bytes_0)
    set_0 = {bytes_0}
    node_0 = module_1.Node(successor=set_0, successors=bytes_0, predecessors=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {b"\xce\x18"}
    assert node_0.successors == b"\xce\x18"
    assert node_0.predecessors == {b"\xce\x18"}
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(list_0, node_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xce\x18"
    set_0 = {bytes_0}
    node_0 = module_1.Node(successor=set_0, successors=bytes_0, predecessors=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {b"\xce\x18"}
    assert node_0.successors == b"\xce\x18"
    assert node_0.predecessors == {b"\xce\x18"}
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(set_0, node_0, set_0)


def test_case_7():
    bytes_0 = b"\xc0{"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    bytes_0 = b"\xe4\x00"
    var_0 = module_0.shortest_path_length(bytes_0, list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(list_0, bytes_0)
    set_0 = {bytes_0}
    var_2 = module_0.get(set_0, bytes_0)
    assert var_2 == 0
    var_3 = module_0.get(set_0, var_2)
    assert var_3 == 228
    node_0 = module_1.Node(successor=var_1, successors=bytes_0, predecessors=var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\xe4\x00"
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(list_0, node_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    bytes_0 = b"\xce\x18"
    str_0 = "9i"
    var_0 = module_0.insert_or_update(list_0, str_0)
    int_0 = 1830
    tuple_0 = (int_0,)
    var_1 = module_0.get(list_0, tuple_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(bytes_0, list_0, list_0)
    assert var_2 == 0
    module_0.insert_or_update(list_0, bytes_0)
