# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    list_0 = []
    var_0 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "M.bJK6"
    none_type_0 = None
    module_0.get(str_0, none_type_0)


def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    complex_0 = 1022.461 + 29.21j
    module_0.get(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    module_0.shortest_path_length(list_0, list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "M.bJK6"
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    var_0 = module_1.merge(*list_0, reverse=none_type_0)
    dict_0 = {str_0: str_0, var_0: var_0, str_0: list_0}
    module_0.insert_or_update(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    bytes_0 = b"\xe8\xcd"
    module_0.insert_or_update(tuple_0, bytes_0)


def test_case_7():
    bool_0 = True
    node_0 = module_2.Node(incoming_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 11
    bytes_0 = b"\xe9>i\xf83\xbaT\xf1\xfb=\r\xef\xa2\xd0\x84\xe5\x13\xd8"
    tuple_0 = (int_0, bytes_0)
    list_0 = [tuple_0]
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    var_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 11
    bytes_0 = b"\xe9>i\xf83\xbaT\xf1\xfb=\r\xef\xa2\xd0\x84\xe5\x13\xd8"
    tuple_0 = (int_0, bytes_0)
    list_0 = [tuple_0]
    var_0 = module_0.insert_or_update(list_0, tuple_0)
    bytes_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x94\xe2\x82\xcc\xbb\x01\x1a\xba\xf3\x13I\x0c\xad"
    tuple_0 = (bytes_0, bytes_0)
    list_0 = [tuple_0]
    var_0 = module_0.get(list_0, bytes_0)
    assert var_0 == b"\x94\xe2\x82\xcc\xbb\x01\x1a\xba\xf3\x13I\x0c\xad"
    var_1 = module_1.merge()
    var_2 = module_0.get(var_1, var_1)
    assert var_2 == 0
    none_type_0 = None
    var_3 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_3 == 0
    module_0.shortest_path_length(var_0, var_1, var_3)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\xddS,"
    tuple_0 = (bytes_0, bytes_0)
    list_0 = [tuple_0, tuple_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b"\x96\x99\xe9\xdd"
    node_0 = module_2.Node(bytes_0, successors=bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\x96\x99\xe9\xdd"
    assert node_0.successor is None
    assert node_0.successors == b"\x96\x99\xe9\xdd"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\x96\x99\xe9\xdd"
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bytes_0)
