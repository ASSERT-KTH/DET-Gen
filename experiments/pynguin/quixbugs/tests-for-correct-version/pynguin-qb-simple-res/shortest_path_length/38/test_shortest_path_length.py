# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


def test_case_1():
    bytes_0 = b"A\x02"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    tuple_0 = (bytes_0,)
    var_1 = module_0.get(tuple_0, var_0)
    assert var_1 == 0


def test_case_2():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_0.get(dict_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.get(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"A\x02"
    node_0 = module_1.Node(
        successors=bytes_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"A\x02"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"A\x02"
    assert node_0.outgoing_nodes == b"A\x02"
    module_0.shortest_path_length(node_0, node_0, bytes_0)


def test_case_5():
    bytes_0 = b""
    node_0 = module_1.Node(
        successors=bytes_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b""
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b""
    assert node_0.outgoing_nodes == b""
    var_0 = module_0.shortest_path_length(node_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"bx"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"bx"
    tuple_0 = (bytes_0,)
    set_0 = {bytes_0, tuple_0, bytes_0, tuple_0}
    module_0.insert_or_update(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"bx"
    tuple_0 = (bytes_0,)
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    module_0.insert_or_update(tuple_0, bytes_0)


def test_case_9():
    str_0 = "Z.*8`\rL01"
    int_0 = 1676
    dict_0 = {str_0: str_0, str_0: int_0, int_0: int_0, int_0: str_0}
    list_0 = [dict_0, int_0, int_0, dict_0]
    var_0 = module_0.get(list_0, int_0)
    assert var_0 == "Z.*8`\rL01"
