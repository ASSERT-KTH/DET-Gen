# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "^a6W@1]n{ud-pe"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"<\x1f"
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0
    str_0 = "^a6W@1]n{ud-pe"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    var_0 = module_0.shortest_path_length(tuple_0, tuple_0, tuple_0)
    assert var_0 == 0
    set_0 = {var_0, tuple_0, var_0}
    module_0.insert_or_update(tuple_0, set_0)


def test_case_6():
    bytes_0 = b"\xff\xd82^\xae:\xe1*\xccb\xf0?V"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    dict_0 = {tuple_0: bool_0, bytes_0: tuple_0, tuple_0: tuple_0}
    var_0 = module_0.get(dict_0, bool_0)
    assert var_0 == b"\xff\xd82^\xae:\xe1*\xccb\xf0?V"
    none_type_0 = None
    var_1 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    int_0 = -5441
    set_0 = {int_0, var_0, int_0, int_0}
    complex_0 = -1928.2665 - 2283.1297j
    tuple_1 = (set_0, complex_0, tuple_0, var_0)
    module_0.get(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xff\xd82^\xae:\xe1*\xccb\xf0?V"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    dict_0 = {tuple_0: bool_0, bytes_0: tuple_0, tuple_0: tuple_0}
    module_0.insert_or_update(dict_0, dict_0)


def test_case_9():
    bytes_0 = b"\xff\xd82^\xae:\xe1*\xccb\xf0?V"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    dict_0 = {tuple_0: bool_0, bool_0: bytes_0, tuple_0: bool_0, tuple_0: tuple_0}
    var_0 = module_0.insert_or_update(dict_0, dict_0)
    var_1 = module_0.get(dict_0, bool_0)
    assert var_1 == b"\xff\xd82^\xae:\xe1*\xccb\xf0?V"
    none_type_0 = None
    var_2 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_2 == 0


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    node_0 = module_1.Node(set_0, successors=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {None}
    assert node_0.successor is None
    assert node_0.successors == {None}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(none_type_0, node_0, none_type_0)
