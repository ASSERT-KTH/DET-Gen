# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"\x07."
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"@\xc5}[u"
    list_0 = [bytes_0]
    module_0.get(list_0, list_0)


def test_case_2():
    bytes_0 = b"S\xf6"
    list_0 = [bytes_0]
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"S\xf6"
    list_0 = [bytes_0]
    module_0.shortest_path_length(bytes_0, list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"S\xf6"
    str_0 = ""
    module_0.insert_or_update(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"S\xf6"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"S\xf6"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    module_0.get(bytes_0, var_0)


def test_case_7():
    bytes_0 = b""
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b""
    assert node_0.predecessors == b""
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b""
    var_0 = module_0.shortest_path_length(node_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x07."
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    int_0 = 1211
    tuple_0 = (int_0, var_0)
    module_0.insert_or_update(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x07N"
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x07N"
    assert node_0.predecessors == b"\x07N"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"\x07N"
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x90\x01"
    node_0 = module_1.Node(successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x90\x01"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(bytes_0, node_0, node_0)
    assert var_0 == 0
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_1 = module_0.insert_or_update(list_0, bytes_0)
    var_2 = module_0.get(list_0, node_0)
    assert var_2 == 0
    bool_0 = True
    var_3 = module_0.get(list_0, bool_0)
    assert var_3 == 144
    module_0.get(var_0, bytes_0)
