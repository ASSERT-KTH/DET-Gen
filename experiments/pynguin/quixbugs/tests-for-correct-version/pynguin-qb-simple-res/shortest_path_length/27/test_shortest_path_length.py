# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    bytes_0 = b"\xc2>\x0cE\x1d\x17g\x13"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    tuple_1 = (tuple_0,)
    module_0.get(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xc2>\x0cE\x1d\x17g\x13"
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_3():
    var_0 = module_1.merge()
    node_0 = module_2.Node(successors=var_0, outgoing_nodes=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.generator"
    )
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert (
        f"{type(node_0.outgoing_nodes).__module__}.{type(node_0.outgoing_nodes).__qualname__}"
        == "builtins.generator"
    )
    var_1 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_4():
    int_0 = 2281
    list_0 = [int_0, int_0]
    list_1 = [list_0, int_0]
    var_0 = module_0.insert_or_update(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_1.merge()
    var_1 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0
    node_0 = module_2.Node(successors=var_0, outgoing_nodes=var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.generator"
    )
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == 0
    var_2 = module_0.shortest_path_length(var_1, node_0, var_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {var_2: var_2, var_0: var_2}
    module_0.insert_or_update(var_0, dict_0)


def test_case_6():
    bytes_0 = b"\xc2>\x0cE\x1d\x17g\x13"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    set_0 = {bytes_0, var_0, var_0}
    list_0 = [set_0]
    var_1 = module_0.get(list_0, set_0)
    assert var_1 == 0


def test_case_7():
    int_0 = 2281
    list_0 = [int_0, int_0]
    list_1 = [list_0, int_0]
    var_0 = module_0.insert_or_update(list_1, list_0)
    var_1 = module_0.get(list_1, int_0)
    assert var_1 == 2281


@pytest.mark.xfail(strict=True)
def test_case_8():
    float_0 = 2348.511
    list_0 = [float_0, float_0, float_0]
    node_0 = module_2.Node(successors=list_0, incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successors) == 3
    assert node_0.predecessors == []
    assert (
        f"{type(node_0.incoming_nodes).__module__}.{type(node_0.incoming_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.incoming_nodes) == 3
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    list_1 = [list_0, dict_0]
    module_0.insert_or_update(list_1, list_1)
