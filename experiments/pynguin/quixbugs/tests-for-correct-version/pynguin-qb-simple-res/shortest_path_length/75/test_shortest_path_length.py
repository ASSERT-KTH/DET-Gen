# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import heapq as module_0
import shortest_path_length as module_1
import builtins as module_2
import node as module_3


def test_case_0():
    var_0 = module_0.merge()
    var_1 = module_1.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_0.merge()
    var_1 = module_1.get(var_0, var_0)
    assert var_1 == 0
    bytes_0 = b"\xebIm\xee*\xd7"
    module_1.get(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    object_0 = module_2.object()
    list_0 = [object_0, object_0]
    module_1.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_1.insert_or_update(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_0.merge()
    float_0 = -3485.9682110574477
    module_1.shortest_path_length(var_0, float_0, var_0)


def test_case_5():
    var_0 = module_0.merge()
    var_1 = module_1.get(var_0, var_0)
    assert var_1 == 0
    var_2 = module_1.shortest_path_length(var_1, var_1, var_1)
    assert var_2 == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "^[enh1"
    node_0 = module_3.Node(successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "^[enh1"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_1.shortest_path_length(node_0, node_0, str_0)


def test_case_7():
    bytes_0 = b"\xecK3Y\xb6\x03"
    node_0 = module_3.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_1.shortest_path_length(node_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    list_2 = [list_1, list_0, list_1, bool_0]
    module_1.get(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "Vz"
    set_0 = {str_0}
    module_1.insert_or_update(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "Vz"
    set_0 = set()
    module_1.insert_or_update(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    var_0 = module_0.merge()
    bool_0 = True
    bytes_0 = b"\x10\xd2\xca\n\xf5\x97\x19\xf9\xed"
    dict_0 = {var_0: bool_0, var_0: var_0, bytes_0: var_0, var_0: bool_0}
    list_0 = [dict_0, dict_0, bool_0, bool_0]
    var_1 = module_1.get(list_0, bytes_0)
    none_type_0 = None
    module_1.insert_or_update(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    var_0 = module_1.shortest_path_length(tuple_0, none_type_0, none_type_0)
    assert var_0 == 0
    dict_0 = {tuple_0: var_0, none_type_0: tuple_0}
    module_1.insert_or_update(dict_0, dict_0)
