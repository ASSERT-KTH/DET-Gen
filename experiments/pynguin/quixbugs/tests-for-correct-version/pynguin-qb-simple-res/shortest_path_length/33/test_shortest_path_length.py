# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xa2z"
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    node_0 = module_1.Node(dict_0, dict_0, predecessors=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {}
    assert node_0.successor == {}
    assert node_0.successors == []
    assert node_0.predecessors == {}
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xa2z"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    module_0.shortest_path_length(var_0, bytes_0, var_0)


def test_case_4():
    bool_0 = True
    bytes_0 = b"_\x08"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.get(dict_0, bool_0)
    assert var_0 == 0


def test_case_5():
    dict_0 = {}
    node_0 = module_1.Node(dict_0, dict_0, predecessors=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {}
    assert node_0.successor == {}
    assert node_0.successors == []
    assert node_0.predecessors == {}
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    bytes_0 = b"9\x8c"
    module_0.insert_or_update(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "W&]O\nKI\x0c[(\x0b=7&Py"
    node_0 = module_1.Node(successors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "W&]O\nKI\x0c[(\x0b=7&Py"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "W&]O\nKI\x0c[(\x0b=7&Py"
    assert node_0.outgoing_nodes == "W&]O\nKI\x0c[(\x0b=7&Py"
    module_0.shortest_path_length(str_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xa2z"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"9\x8c"
    set_0 = {bytes_0}
    var_0 = module_0.get(set_0, bytes_0)
    assert var_0 == 0
    none_type_0 = None
    var_1 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_1 == 0
    dict_0 = {bytes_0: set_0}
    node_0 = module_1.Node(incoming_nodes=dict_0, outgoing_nodes=var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {b"9\x8c": {b"9\x8c"}}
    assert node_0.outgoing_nodes == 0
    var_2 = module_0.shortest_path_length(var_1, node_0, none_type_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_3 = module_0.get(dict_0, dict_0)
    assert var_3 == 0
    bytes_1 = b"9\x8c"
    var_4 = module_0.insert_or_update(dict_0, bytes_1)
    assert node_0.incoming_nodes == {b"9\x8c": {b"9\x8c"}, 0: b"9\x8c"}
    module_0.get(dict_0, var_3)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"cK"
    set_0 = {bytes_0}
    var_0 = module_0.get(set_0, bytes_0)
    assert var_0 == 0
    none_type_0 = None
    var_1 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_1 == 0
    dict_0 = {bytes_0: set_0}
    node_0 = module_1.Node(incoming_nodes=dict_0, outgoing_nodes=var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {b"cK": {b"cK"}}
    assert node_0.outgoing_nodes == 0
    var_2 = module_0.shortest_path_length(var_1, node_0, none_type_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_3 = module_0.get(dict_0, dict_0)
    assert var_3 == 0
    bytes_1 = b"9\x8c"
    module_0.insert_or_update(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    bytes_0 = b"\x9a\x01"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    node_0 = module_1.Node(bool_0, incoming_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is True
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_1 = module_0.insert_or_update(dict_0, bytes_0)
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_2 = module_0.get(dict_0, bool_0)
    assert var_2 == 154
    node_1 = module_1.Node(dict_1, successors=dict_1, incoming_nodes=dict_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == {b"\x9a\x01": b"\x9a\x01"}
    assert node_1.successor is None
    assert node_1.successors == {b"\x9a\x01": b"\x9a\x01"}
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == {b"\x9a\x01": b"\x9a\x01"}
    assert node_1.outgoing_nodes == []
    module_0.shortest_path_length(dict_1, node_1, dict_1)
