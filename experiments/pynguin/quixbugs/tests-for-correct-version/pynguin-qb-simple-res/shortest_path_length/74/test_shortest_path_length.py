# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bytes_0 = b"\xe8\x81[\xcfb\xdb\xfb\xeaq\xc8\xd9\x14"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


def test_case_1():
    bytes_0 = b"z\xb6"
    list_0 = [bytes_0]
    bool_0 = True
    var_0 = module_0.get(list_0, bool_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(bytes_0, var_0, var_0)
    assert var_1 == 0
    node_0 = module_1.Node(incoming_nodes=var_1, outgoing_nodes=var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 0
    assert node_0.outgoing_nodes == 0
    var_2 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"z\xb6"
    node_0 = module_1.Node(
        bytes_0, bytes_0, bytes_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"z\xb6"
    assert node_0.successor == b"z\xb6"
    assert node_0.successors == b"z\xb6"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"z\xb6"
    assert node_0.outgoing_nodes == b"z\xb6"
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


def test_case_4():
    bytes_0 = b"z\xb6"
    node_0 = module_1.Node(incoming_nodes=bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"z\xb6"
    assert node_0.outgoing_nodes == b"z\xb6"
    var_0 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    bytes_0 = b"\xe1\x12"
    list_0 = [bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"z\xb6"
    list_0 = [bytes_0]
    var_0 = module_2.merge(*list_0)
    var_1 = module_0.get(list_0, list_0)
    assert var_1 == 0
    module_0.insert_or_update(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xe1\x01"
    list_0 = [bytes_0]
    bool_0 = True
    var_0 = module_0.get(list_0, bool_0)
    assert var_0 == 225
    module_0.get(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xe1\x12"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)
