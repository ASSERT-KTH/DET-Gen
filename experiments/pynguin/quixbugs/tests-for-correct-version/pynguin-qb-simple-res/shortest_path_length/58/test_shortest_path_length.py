# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xd5_\x95\x16m\x0c"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "M4E^9Rb2$\x0bSIW5\na/"
    node_0 = module_1.Node(str_0, successors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "M4E^9Rb2$\x0bSIW5\na/"
    assert node_0.successor is None
    assert node_0.successors == "M4E^9Rb2$\x0bSIW5\na/"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "M4E^9Rb2$\x0bSIW5\na/"
    module_0.shortest_path_length(str_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    none_type_0 = None
    module_0.shortest_path_length(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ""
    node_0 = module_1.Node(str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ""
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == ""
    set_0 = {node_0, str_0, str_0}
    module_0.insert_or_update(set_0, set_0)


def test_case_5():
    none_type_0 = None
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = ""
    node_0 = module_1.Node(str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ""
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == ""
    set_0 = {node_0, str_0, str_0}
    module_0.insert_or_update(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -1970
    list_0 = [int_0, int_0]
    tuple_0 = (list_0,)
    var_0 = module_0.get(tuple_0, int_0)
    assert var_0 == -1970
    module_0.insert_or_update(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"E\xe4"
    int_0 = 945
    tuple_0 = (bytes_0, int_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "s:"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    list_0 = [str_0, str_0, str_0, var_0]
    module_0.get(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"E\xe4"
    list_0 = [bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    module_0.get(var_0, var_0)
