# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    str_0 = ',k"'
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\n\xb2b"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "#"
    none_type_0 = None
    node_0 = module_1.Node(
        successors=str_0, predecessors=str_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "#"
    assert node_0.predecessors == "#"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is None
    module_0.shortest_path_length(none_type_0, node_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ",k"
    module_0.insert_or_update(str_0, str_0)


def test_case_4():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    set_0 = {tuple_0, tuple_0, var_0}
    module_0.insert_or_update(tuple_0, set_0)


def test_case_6():
    str_0 = "\x0c#"
    tuple_0 = (str_0, str_0, str_0, str_0)
    int_0 = -1148
    var_0 = module_0.get(tuple_0, int_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bool_1 = True
    list_1 = [list_0, bool_1]
    module_0.insert_or_update(list_1, list_1)


def test_case_8():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bool_1 = True
    list_1 = [list_0, bool_1]
    var_0 = module_0.insert_or_update(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bool_1 = True
    list_1 = [list_0, bool_1]
    var_0 = module_0.insert_or_update(list_1, list_1)
    dict_0 = {}
    var_1 = module_0.get(dict_0, dict_0)
    assert var_1 == 0
    var_2 = module_0.get(list_1, bool_1)
    var_0.successor()
