# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


def test_case_1():
    str_0 = "]a"
    tuple_0 = (str_0, str_0)
    var_0 = module_0.get(tuple_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    var_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -652
    none_type_0 = None
    module_0.shortest_path_length(none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "]a"
    tuple_0 = (str_0, str_0)
    module_0.insert_or_update(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "%a"
    tuple_0 = (str_0, str_0)
    module_0.insert_or_update(tuple_0, tuple_0)


def test_case_7():
    float_0 = 1539.1826
    node_0 = module_1.Node(outgoing_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == pytest.approx(1539.1826, abs=0.01, rel=0.01)
    var_0 = module_0.shortest_path_length(node_0, node_0, float_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "*W#($gv@s?"
    node_0 = module_1.Node(successors=str_0, predecessors=str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "*W#($gv@s?"
    assert node_0.predecessors == "*W#($gv@s?"
    assert node_0.incoming_nodes == "*W#($gv@s?"
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(str_0, node_0, str_0)


def test_case_9():
    complex_0 = 3394.864 - 104.08754j
    bytes_0 = b":\xab1\x87M\x8aHYl\xca"
    bool_0 = False
    tuple_0 = (bool_0, complex_0, bool_0)
    tuple_1 = (tuple_0,)
    tuple_2 = (complex_0, complex_0, bytes_0, tuple_1)
    list_0 = [tuple_2, bytes_0]
    list_1 = [list_0]
    var_0 = module_0.get(list_1, bytes_0)
