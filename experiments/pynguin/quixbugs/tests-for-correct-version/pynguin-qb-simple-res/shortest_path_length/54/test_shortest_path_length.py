# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_0.get(dict_0, none_type_0)
    assert var_0 == 0
    list_0 = [var_0, var_0, var_0, dict_0]
    module_0.get(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x89J2"
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, incoming_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x89J2"
    assert node_0.predecessors == b"\x89J2"
    assert node_0.incoming_nodes == b"\x89J2"
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1262
    module_0.insert_or_update(int_0, int_0)


def test_case_4():
    dict_0 = {}
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.insert_or_update(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 22
    set_0 = {int_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0, list_0]
    var_0 = module_0.get(list_1, int_0)
    assert var_0 == 0
    str_0 = "ho)pwR~]\\-AIW)Jw"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_1 = module_0.shortest_path_length(dict_0, dict_0, dict_0)
    assert var_1 == 0
    dict_1 = {}
    list_2 = []
    var_2 = module_0.get(list_2, dict_1)
    assert var_2 == 0
    module_0.insert_or_update(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 22
    list_0 = [int_0, int_0]
    list_1 = [list_0, list_0]
    var_0 = module_0.get(list_1, int_0)
    assert var_0 == 22
    dict_0 = {var_0: var_0, var_0: var_0}
    var_1 = module_0.shortest_path_length(dict_0, dict_0, dict_0)
    assert var_1 == 0
    dict_1 = {}
    list_2 = []
    var_2 = module_0.get(list_2, dict_1)
    assert var_2 == 0
    none_type_0 = None
    var_3 = module_0.shortest_path_length(dict_1, none_type_0, none_type_0)
    assert var_3 == 0
    object_0 = module_2.object()
    list_3 = [dict_1, dict_1]
    module_0.insert_or_update(dict_1, list_3)


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 22
    set_0 = {int_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0, list_0]
    dict_0 = {}
    none_type_0 = None
    var_0 = module_0.shortest_path_length(dict_0, none_type_0, none_type_0)
    assert var_0 == 0
    module_0.insert_or_update(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 22
    set_0 = {int_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0, list_0]
    var_0 = module_0.get(list_1, int_0)
    assert var_0 == 0
    dict_0 = {}
    var_1 = module_0.insert_or_update(list_1, list_0)
    var_2 = module_0.shortest_path_length(dict_0, dict_0, dict_0)
    assert var_2 == 0
    dict_1 = {}
    list_2 = []
    var_3 = module_0.get(list_2, dict_1)
    assert var_3 == 0
    none_type_0 = None
    var_4 = module_0.shortest_path_length(dict_1, none_type_0, none_type_0)
    assert var_4 == 0
    object_0 = module_2.object()
    module_0.insert_or_update(list_1, list_1)
