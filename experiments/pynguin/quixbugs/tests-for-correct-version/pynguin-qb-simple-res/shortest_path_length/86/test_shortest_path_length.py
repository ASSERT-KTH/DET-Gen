# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xc8\x0b\xe8E,\n\xfe/U\xd9\x19\x0f"
    module_0.get(bytes_0, bytes_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    tuple_0 = (var_0, bool_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -3017
    dict_0 = {int_0: int_0}
    module_0.shortest_path_length(int_0, int_0, dict_0)


def test_case_6():
    float_0 = -3412.0
    node_0 = module_1.Node(float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == pytest.approx(-3412.0, abs=0.01, rel=0.01)
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(float_0, node_0, float_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    set_0 = set()
    node_0 = module_1.Node(set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {*()}
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(set_0, node_0, set_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    bytes_0 = b"IQ"
    dict_0 = {bytes_0: node_0}
    var_1 = module_0.get(dict_0, var_0)
    assert var_1 == 0
    module_0.get(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    tuple_0 = ()
    bool_0 = True
    var_0 = module_0.get(tuple_0, bool_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0
    tuple_1 = (var_0, bool_0)
    module_0.insert_or_update(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    str_0 = "\r$X2}G&t#$iP"
    tuple_0 = (list_0, str_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    dict_0 = {}
    bool_0 = False
    list_0 = [dict_0, bool_0]
    list_1 = [list_0]
    var_0 = module_0.get(list_1, bool_0)
    module_0.insert_or_update(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    dict_0 = {}
    bool_0 = False
    list_0 = [dict_0, bool_0]
    list_1 = [list_0]
    var_0 = module_0.insert_or_update(list_1, list_0)
    var_1 = module_0.get(list_1, bool_0)
    module_0.insert_or_update(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 1393
    tuple_0 = (int_0,)
    node_0 = module_1.Node(successor=tuple_0, successors=tuple_0, predecessors=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == (1393,)
    assert node_0.successors == (1393,)
    assert node_0.predecessors == (1393,)
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, int_0)
