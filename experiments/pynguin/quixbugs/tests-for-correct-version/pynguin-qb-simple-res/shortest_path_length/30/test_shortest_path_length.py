# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get(set_0, bool_0)


def test_case_2():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0


def test_case_3():
    tuple_0 = ()
    node_0 = module_1.Node(predecessors=tuple_0, outgoing_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == ()
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == ()
    var_0 = module_0.shortest_path_length(node_0, node_0, tuple_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = -2303.5688373903945
    tuple_0 = (float_0, float_0)
    set_0 = {tuple_0, tuple_0}
    module_0.insert_or_update(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    bytes_0 = b"\xd8\xa2"
    int_0 = -571
    var_0 = module_0.get(tuple_0, int_0)
    assert var_0 == 0
    module_0.insert_or_update(tuple_0, bytes_0)


def test_case_6():
    float_0 = -2278.2
    tuple_0 = (float_0, float_0)
    set_0 = {tuple_0, tuple_0}
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    list_1 = [list_0]
    var_0 = module_0.get(list_1, tuple_0)
    module_0.insert_or_update(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -2620
    bytes_0 = b"\xdc\xb2"
    set_0 = {int_0, int_0, int_0, bytes_0}
    module_0.insert_or_update(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    node_0 = module_1.Node(successors=tuple_0, incoming_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == (True, True, True)
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bool_0)
