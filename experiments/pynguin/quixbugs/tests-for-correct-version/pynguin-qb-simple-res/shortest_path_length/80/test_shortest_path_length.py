# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -2118
    dict_0 = {int_0: int_0}
    module_0.get(dict_0, dict_0)


def test_case_2():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "=f\x0bbg2?T>"
    module_0.insert_or_update(str_0, str_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"7\xa4\x12\x93\xb1\x1d\xe5\xe2"
    tuple_0 = (bytes_0, bytes_0)
    bool_0 = False
    list_0 = [tuple_0, bool_0, bytes_0]
    module_0.get(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "9q"
    list_0 = [str_0, str_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 1685
    set_0 = {int_0, int_0, int_0, int_0}
    set_1 = set()
    tuple_0 = (int_0, int_0, set_0, set_1)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    str_0 = "r"
    tuple_2 = (tuple_1, str_0)
    module_0.insert_or_update(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    list_0 = [none_type_0]
    node_0 = module_1.Node(
        successors=list_0, incoming_nodes=list_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == [None]
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == [None]
    assert node_0.outgoing_nodes is None
    module_0.shortest_path_length(none_type_0, node_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\xf9\xd9"
    tuple_0 = (bytes_0,)
    module_0.insert_or_update(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"7\xa4\x12\x93\xb1\x1d\xe5\xe2"
    tuple_0 = (bytes_0, bytes_0)
    bool_0 = False
    list_0 = [tuple_0, bool_0, bytes_0]
    var_0 = module_0.get(list_0, bytes_0)
    assert var_0 == b"7\xa4\x12\x93\xb1\x1d\xe5\xe2"
    module_0.get(list_0, list_0)
