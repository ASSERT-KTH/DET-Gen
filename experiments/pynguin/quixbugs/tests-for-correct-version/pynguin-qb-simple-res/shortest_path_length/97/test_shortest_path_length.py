# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    str_0 = "Xn\n gu"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "Xn\n gu"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "$}i\\,eO)"
    node_0 = module_1.Node(
        str_0, successors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "$}i\\,eO)"
    assert node_0.successor is None
    assert node_0.successors == "$}i\\,eO)"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "$}i\\,eO)"
    assert node_0.outgoing_nodes == "$}i\\,eO)"
    module_0.shortest_path_length(node_0, node_0, str_0)


def test_case_3():
    str_0 = "_"
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "_$"
    list_0 = []
    var_0 = module_0.insert_or_update(list_0, str_0)
    node_0 = module_1.Node(
        str_0, successors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "_$"
    assert node_0.successor is None
    assert node_0.successors == "_$"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "_$"
    assert node_0.outgoing_nodes == "_$"
    var_1 = module_0.shortest_path_length(str_0, var_0, var_0)
    assert var_1 == 0
    module_0.shortest_path_length(var_1, node_0, var_0)


def test_case_5():
    str_0 = "Kf"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.insert_or_update(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "z$"
    list_0 = [str_0]
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_1 == 0
    str_1 = "$}i\\,eO)"
    node_0 = module_1.Node(
        str_1, successors=str_1, incoming_nodes=str_1, outgoing_nodes=str_1
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "$}i\\,eO)"
    assert node_0.successor is None
    assert node_0.successors == "$}i\\,eO)"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "$}i\\,eO)"
    assert node_0.outgoing_nodes == "$}i\\,eO)"
    var_2 = module_0.get(list_0, list_0)
    assert var_2 == 0
    module_0.shortest_path_length(node_0, node_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0, bool_0, tuple_0, bool_0, bool_0]
    var_0 = module_0.get(list_0, bool_0)
    assert var_0 is False
    none_type_0 = None
    module_0.get(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "_$"
    list_0 = [str_0, str_0]
    var_0 = module_0.insert_or_update(list_0, str_0)
    module_0.insert_or_update(list_0, list_0)
