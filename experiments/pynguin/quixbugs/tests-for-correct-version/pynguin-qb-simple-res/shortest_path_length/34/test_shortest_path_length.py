# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    str_0 = "iV"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = -2074 - 854.471j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.get(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    module_0.get(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "iV"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = -2074 - 854.471j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.shortest_path_length(list_0, list_0, complex_0)


def test_case_5():
    set_0 = set()
    var_0 = module_0.shortest_path_length(set_0, set_0, set_0)
    assert var_0 == 0
    tuple_0 = (var_0, var_0)
    dict_0 = {tuple_0: var_0}
    none_type_0 = None
    var_1 = module_0.get(dict_0, none_type_0)
    assert var_1 == 0


def test_case_6():
    set_0 = set()
    var_0 = module_0.shortest_path_length(set_0, set_0, set_0)
    assert var_0 == 0
    tuple_0 = (var_0, var_0)
    dict_0 = {tuple_0: var_0}
    var_1 = module_0.get(dict_0, var_0)
    assert var_1 == 0


def test_case_7():
    str_0 = ""
    node_0 = module_1.Node(str_0, successors=str_0, predecessors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ""
    assert node_0.successor is None
    assert node_0.successors == ""
    assert node_0.predecessors == ""
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(str_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "S\nwR>L.g;0"
    node_0 = module_1.Node(str_0, successors=str_0, predecessors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "S\nwR>L.g;0"
    assert node_0.successor is None
    assert node_0.successors == "S\nwR>L.g;0"
    assert node_0.predecessors == "S\nwR>L.g;0"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(str_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    set_0 = set()
    var_0 = module_0.shortest_path_length(set_0, set_0, set_0)
    assert var_0 == 0
    tuple_0 = (var_0, var_0)
    module_0.insert_or_update(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\xd8\x86"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\xd8\x86"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)
    var_1 = module_0.insert_or_update(list_0, bytes_0)
    module_0.insert_or_update(list_0, list_0)
