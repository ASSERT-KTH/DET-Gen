# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    int_0 = -336
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


def test_case_1():
    str_0 = "/u"
    set_0 = {str_0}
    var_0 = module_0.get(set_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "*!"
    module_0.insert_or_update(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "/u"
    node_0 = module_1.Node(successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "/u"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(str_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    var_0 = module_0.shortest_path_length(tuple_0, tuple_0, tuple_0)
    assert var_0 == 0
    none_type_0 = None
    var_1 = module_0.get(tuple_0, none_type_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_2 == 0
    bytes_0 = b"\x90\xbc"
    module_0.insert_or_update(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"'\xbc"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, bytes_0, set_0)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    module_0.insert_or_update(tuple_0, tuple_1)


def test_case_7():
    str_0 = ""
    node_0 = module_1.Node(successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == ""
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(str_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "/u"
    set_0 = {str_0, str_0, str_0}
    module_0.insert_or_update(set_0, str_0)


def test_case_9():
    str_0 = "auj_lFd_Nk0\r+\rIf`x"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    list_0 = [tuple_0, dict_0, tuple_0]
    var_0 = module_0.get(list_0, dict_0)
    assert var_0 == "auj_lFd_Nk0\r+\rIf`x"
    var_1 = module_0.shortest_path_length(dict_0, list_0, list_0)
    assert var_1 == 0
