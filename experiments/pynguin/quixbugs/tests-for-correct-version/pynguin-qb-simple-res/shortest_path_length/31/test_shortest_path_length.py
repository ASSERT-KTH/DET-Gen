# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bytes_0 = b""
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b""
    var_0 = module_0.get(bytes_0, bytes_0)
    assert var_0 == 0
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b""
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_4():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xda9"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x82\x08n\xc4~>M\xf4\xf5\xc5\x08\x0cg\xcc\\c"
    int_0 = -2336
    tuple_0 = (bytes_0, int_0)
    list_0 = [tuple_0, tuple_0, bytes_0]
    module_0.get(list_0, list_0)


def test_case_7():
    bytes_0 = b"\xda9"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xda9"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\xc6\xfdy\x8c\x96\x0baWG\xb1\xdc\x14\x82"
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\xc6\xfdy\x8c\x96\x0baWG\xb1\xdc\x14\x82"
    assert node_0.successors == b"\xc6\xfdy\x8c\x96\x0baWG\xb1\xdc\x14\x82"
    assert node_0.predecessors == b"\xc6\xfdy\x8c\x96\x0baWG\xb1\xdc\x14\x82"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    node_0 = module_1.Node(bool_0, bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is True
    assert node_0.successor is True
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: bool_0, bool_0: node_0, bool_0: node_0}
    list_0 = [dict_0]
    var_0 = module_0.get(list_0, bool_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is True
    assert var_0.successor is True
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    list_1 = []
    var_1 = module_0.shortest_path_length(list_1, node_0, var_0)
    assert var_1 == 0
    bytes_0 = b"\x07y\x8c\x96aWG\xb1\x11\x14\x82"
    var_2 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_2 == 0
    bytes_1 = b"_"
    node_1 = module_1.Node(successor=bytes_0, successors=bytes_0, predecessors=var_2)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor == b"\x07y\x8c\x96aWG\xb1\x11\x14\x82"
    assert node_1.successors == b"\x07y\x8c\x96aWG\xb1\x11\x14\x82"
    assert node_1.predecessors == 0
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    module_0.shortest_path_length(bytes_1, node_1, bytes_1)
