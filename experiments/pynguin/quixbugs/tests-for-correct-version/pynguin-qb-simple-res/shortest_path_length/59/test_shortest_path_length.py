# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "HlI.({NDiBg}6"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -98
    tuple_0 = (int_0, int_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 2690
    module_0.insert_or_update(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_1.merge()
    bytes_0 = b"\xe5\xa5\xa7D"
    module_0.shortest_path_length(var_0, var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"+\xe0G\xab\xc2\x95\xe3J\x7f\xd7\x9b<"
    node_0 = module_2.Node(successors=bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"+\xe0G\xab\xc2\x95\xe3J\x7f\xd7\x9b<"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"+\xe0G\xab\xc2\x95\xe3J\x7f\xd7\x9b<"
    module_0.shortest_path_length(node_0, node_0, bytes_0)


def test_case_6():
    list_0 = []
    node_0 = module_2.Node(list_0, list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == []
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    tuple_0 = ()
    tuple_1 = (var_0, var_0)
    module_0.insert_or_update(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    list_0 = [set_0, set_0]
    list_1 = [list_0]
    var_0 = module_0.insert_or_update(list_1, list_0)
    tuple_0 = ()
    module_0.insert_or_update(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    set_0 = set()
    var_0 = module_0.shortest_path_length(set_0, set_0, set_0)
    assert var_0 == 0
    list_0 = [set_0, set_0]
    var_1 = module_0.get(set_0, var_0)
    assert var_1 == 0
    list_1 = [list_0, set_0]
    module_0.get(list_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    set_0 = set()
    var_0 = module_0.shortest_path_length(set_0, set_0, set_0)
    assert var_0 == 0
    list_0 = [set_0, set_0]
    var_1 = module_0.get(set_0, var_0)
    assert var_1 == 0
    none_type_0 = None
    list_1 = [list_0]
    var_2 = module_0.get(list_1, set_0)
    var_3 = module_0.insert_or_update(list_1, list_0)
    module_0.shortest_path_length(var_0, list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    set_0 = set()
    list_0 = [set_0, set_0]
    list_1 = [list_0]
    var_0 = module_0.insert_or_update(list_1, list_0)
    list_2 = [list_0, var_0]
    module_0.insert_or_update(list_1, list_2)
