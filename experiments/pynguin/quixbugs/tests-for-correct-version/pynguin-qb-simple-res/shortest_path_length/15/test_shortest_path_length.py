# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = 247.85
    set_0 = {float_0}
    var_0 = module_0.shortest_path_length(float_0, float_0, float_0)
    assert var_0 == 0
    module_0.get(set_0, set_0)


def test_case_2():
    none_type_0 = None
    var_0 = module_1.merge(key=none_type_0)
    var_1 = module_0.get(var_0, none_type_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"J\t"
    list_0 = [bytes_0, bytes_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    module_0.get(bool_0, bool_0)


def test_case_5():
    node_0 = module_2.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "'s"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.insert_or_update(dict_0, str_0)
    var_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = 193.75071010043132
    set_0 = {float_0, float_0}
    node_0 = module_2.Node(successors=set_0, predecessors=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.set"
    )
    assert len(node_0.successors) == 1
    assert (
        f"{type(node_0.predecessors).__module__}.{type(node_0.predecessors).__qualname__}"
        == "builtins.set"
    )
    assert len(node_0.predecessors) == 1
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(float_0, node_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xa5\t"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    module_0.get(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = 247.85
    none_type_0 = None
    dict_0 = {
        none_type_0: float_0,
        float_0: float_0,
        float_0: float_0,
        float_0: none_type_0,
    }
    str_0 = "3.XJ0@(ayR_?Y"
    tuple_0 = (dict_0, str_0)
    var_0 = module_0.get(tuple_0, float_0)
    var_1 = module_0.shortest_path_length(float_0, none_type_0, none_type_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(float_0, none_type_0, none_type_0)
    assert var_2 == 0
    set_0 = {float_0}
    node_0 = module_2.Node(successors=set_0, predecessors=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.set"
    )
    assert len(node_0.successors) == 1
    assert (
        f"{type(node_0.predecessors).__module__}.{type(node_0.predecessors).__qualname__}"
        == "builtins.set"
    )
    assert len(node_0.predecessors) == 1
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    bytes_0 = b""
    module_0.shortest_path_length(float_0, node_0, bytes_0)
