# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    str_0 = 'yN"P\nmnMPs6Ex'
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.merge()
    dict_0 = {var_0: var_0, var_0: var_0}
    var_1 = module_0.get(var_0, dict_0)
    assert var_1 == 0
    module_0.get(dict_0, dict_0)


def test_case_2():
    set_0 = set()
    var_0 = module_0.get(set_0, set_0)
    assert var_0 == 0


def test_case_3():
    none_type_0 = None
    node_0 = module_2.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "7i&@r[+6^>X@7U.\tn"
    int_0 = 1048
    set_0 = {str_0, str_0, str_0, int_0}
    list_0 = [set_0, str_0, str_0, int_0]
    module_0.get(list_0, list_0)


def test_case_6():
    node_0 = module_2.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0]
    list_1 = [list_0, node_0, node_0, node_0]
    var_0 = module_0.insert_or_update(list_1, list_0)
    var_1 = module_0.get(list_1, node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'r"'
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.insert_or_update(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x95;\x13\xa9?B5\xaf\xdb\x00H\n"
    node_0 = module_2.Node(bytes_0, bytes_0, bytes_0, bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\x95;\x13\xa9?B5\xaf\xdb\x00H\n"
    assert node_0.successor == b"\x95;\x13\xa9?B5\xaf\xdb\x00H\n"
    assert node_0.successors == b"\x95;\x13\xa9?B5\xaf\xdb\x00H\n"
    assert node_0.predecessors == b"\x95;\x13\xa9?B5\xaf\xdb\x00H\n"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bytes_0)
