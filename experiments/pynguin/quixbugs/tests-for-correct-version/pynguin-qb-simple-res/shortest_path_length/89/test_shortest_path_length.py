# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "B_zyQ=*j(C& }Q"
    module_0.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    module_0.shortest_path_length(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "HK"
    module_0.insert_or_update(str_0, str_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "ND(<!\\:#\x0b-@t~"
    list_0 = [str_0, str_0, str_0, str_0, str_0]
    bool_0 = False
    var_0 = module_2.nsmallest(bool_0, str_0)
    node_0 = module_1.Node(str_0, list_0, str_0, incoming_nodes=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "ND(<!\\:#\x0b-@t~"
    assert node_0.successor == [
        "ND(<!\\:#\x0b-@t~",
        "ND(<!\\:#\x0b-@t~",
        "ND(<!\\:#\x0b-@t~",
        "ND(<!\\:#\x0b-@t~",
        "ND(<!\\:#\x0b-@t~",
    ]
    assert node_0.successors == "ND(<!\\:#\x0b-@t~"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_1 = [bool_0, bool_0]
    var_1 = module_0.insert_or_update(var_0, list_1)
    assert node_0.incoming_nodes == [[False, False]]
    module_0.shortest_path_length(var_0, node_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_2.merge()
    bool_0 = True
    tuple_0 = (var_0, var_0, bool_0)
    list_0 = [tuple_0, tuple_0]
    tuple_1 = (list_0, var_0, var_0, var_0)
    module_0.get(tuple_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    complex_0 = 228.759316 - 2078.720248j
    bool_0 = False
    var_0 = module_0.shortest_path_length(complex_0, bool_0, bool_0)
    assert var_0 == 0
    bytes_0 = b"\xe0\xee[\xf1!\xd3\x99^z2J%\x00\x0b\x08;>$"
    none_type_0 = None
    str_0 = "ND(<!\\:#\x0b-@t~"
    bool_1 = False
    var_1 = module_2.nsmallest(bool_1, str_0)
    var_2 = module_0.get(var_1, complex_0)
    assert var_2 == 0
    list_0 = [bool_1, bool_1]
    var_3 = module_0.insert_or_update(var_1, list_0)
    list_1 = [none_type_0, bytes_0]
    module_0.insert_or_update(var_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xe0\xee[\xf1!\xd3\x99^z2\x8b%\x00\x0bUj;>$"
    none_type_0 = None
    var_0 = module_0.shortest_path_length(bytes_0, none_type_0, none_type_0)
    assert var_0 == 0
    str_0 = "D(<!\\:#\x0br@t~"
    bool_0 = False
    var_1 = module_2.nsmallest(bool_0, str_0)
    list_0 = [bool_0, bool_0]
    var_2 = module_0.insert_or_update(var_1, list_0)
    var_3 = module_0.get(var_1, bool_0)
    assert var_3 is False
    tuple_0 = (var_1, var_1)
    module_0.shortest_path_length(str_0, tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    complex_0 = 228.759316 - 2078.720248j
    var_0 = module_0.shortest_path_length(complex_0, complex_0, complex_0)
    assert var_0 == 0
    none_type_0 = None
    str_0 = "ND(<!\\:#\x0b-@t~"
    bool_0 = False
    var_1 = module_2.nsmallest(bool_0, str_0)
    var_2 = module_0.get(var_1, complex_0)
    assert var_2 == 0
    list_0 = [bool_0, bool_0]
    var_3 = module_0.insert_or_update(var_1, list_0)
    list_1 = [none_type_0, var_2]
    var_4 = module_0.insert_or_update(var_1, list_1)
    var_1.successor()


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "ND(<!\\:#\x0b-@t~Q"
    node_0 = module_1.Node(str_0, str_0, str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "ND(<!\\:#\x0b-@t~Q"
    assert node_0.successor == "ND(<!\\:#\x0b-@t~Q"
    assert node_0.successors == "ND(<!\\:#\x0b-@t~Q"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "ND(<!\\:#\x0b-@t~Q"
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(str_0, node_0, str_0)
