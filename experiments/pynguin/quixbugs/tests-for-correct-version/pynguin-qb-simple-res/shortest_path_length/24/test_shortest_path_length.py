# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xb4\t\x87\xcd\xa6\x12s(\\\xcf\xfc\x98\xce"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xe7"
    node_0 = module_1.Node(bytes_0, bytes_0, bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xe7"
    assert node_0.successor == b"\xe7"
    assert node_0.successors == b"\xe7"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.insert_or_update(bool_0, bool_0)


def test_case_4():
    bytes_0 = b""
    node_0 = module_1.Node(bytes_0, bytes_0, bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b""
    assert node_0.successor == b""
    assert node_0.successors == b""
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xe7\x88"
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_6():
    str_0 = "vn"
    bytes_0 = b"\xbb\xa8\x9e\xe1k\x0e\xe7o"
    dict_0 = {str_0: bytes_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.get(dict_0, str_0)
    assert var_0 == 0


def test_case_7():
    str_0 = "vn"
    bytes_0 = b"\xbb\xa8\x9e\xe1k\x0e\xe7o"
    dict_0 = {str_0: bytes_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.insert_or_update(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "vn"
    bytes_0 = b"\xbb\xa8\x9e\xe1k\x0e\xe7o"
    dict_0 = {str_0: bytes_0, str_0: str_0, str_0: str_0}
    bytes_1 = b"\xf6:"
    module_0.insert_or_update(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0
    tuple_0 = (var_0, bool_0)
    tuple_1 = (tuple_0,)
    var_1 = module_0.get(tuple_1, var_0)
    assert var_1 == 0
    bytes_0 = b'\x06\xd4Tg\xa1w\xea\x9e\xe7\xfc\xe4\xe1\x85\x19t"\xb2\xb3'
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_2 = module_0.shortest_path_length(node_0, node_0, bytes_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    node_1 = module_1.Node(var_2, var_1, bytes_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert node_1.successor == 0
    assert (
        node_1.successors
        == b'\x06\xd4Tg\xa1w\xea\x9e\xe7\xfc\xe4\xe1\x85\x19t"\xb2\xb3'
    )
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    module_0.shortest_path_length(bytes_0, node_1, bytes_0)
