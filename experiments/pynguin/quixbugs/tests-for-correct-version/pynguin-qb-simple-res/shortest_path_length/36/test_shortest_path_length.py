# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    bytes_0 = b"\xe2[\x83\xf67\x14"
    module_0.get(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "OlfnsbYTbOo#%w"
    var_0 = module_1.merge(reverse=str_0)
    dict_0 = {var_0: var_0, str_0: str_0}
    module_0.insert_or_update(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.insert_or_update(none_type_0, none_type_0)


def test_case_4():
    str_0 = "QH"
    node_0 = module_2.Node(incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "QH"
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, str_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "QH"
    node_0 = module_2.Node(str_0, successors=str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "QH"
    assert node_0.successor is None
    assert node_0.successors == "QH"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "QH"
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "QH"
    list_0 = [str_0, str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    var_1 = module_0.get(list_0, list_0)
    assert var_1 == 0
    module_1.nlargest(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "QH"
    list_0 = [str_0, str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    var_1 = module_0.get(list_0, list_0)
    assert var_1 == 0
    var_2 = module_0.insert_or_update(list_0, str_0)
    module_0.shortest_path_length(var_0, var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "QH"
    node_0 = module_2.Node(str_0, str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "QH"
    assert node_0.successor == "QH"
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "QH"
    list_0 = [str_0, str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    var_1 = module_0.get(list_0, list_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(node_0, node_0, str_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = -2553.0
    tuple_0 = (float_0, float_0)
    list_0 = [float_0]
    tuple_1 = (tuple_0, list_0)
    var_0 = module_0.get(tuple_1, float_0)
    assert var_0 == pytest.approx(-2553.0, abs=0.01, rel=0.01)
    var_1 = module_0.shortest_path_length(var_0, float_0, var_0)
    assert var_1 == 0
    int_0 = 205
    node_0 = module_2.Node(incoming_nodes=int_0, outgoing_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 205
    assert node_0.outgoing_nodes == 205
    node_0.predecessors()
