# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.merge()
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0
    dict_0 = {
        var_0: var_0,
        var_0: var_0,
        var_1: var_1,
        var_0: var_0,
        var_1: var_0,
        var_0: var_0,
        var_0: var_0,
    }
    module_0.get(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xe4 \x8b\xa1\xb4\xea5h\xe8\xc9"
    node_0 = module_2.Node(bytes_0, successors=bytes_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xe4 \x8b\xa1\xb4\xea5h\xe8\xc9"
    assert node_0.successor is None
    assert node_0.successors == b"\xe4 \x8b\xa1\xb4\xea5h\xe8\xc9"
    assert node_0.predecessors == b"\xe4 \x8b\xa1\xb4\xea5h\xe8\xc9"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bytes_0)


def test_case_3():
    var_0 = module_1.merge()
    node_0 = module_2.Node(var_0, outgoing_nodes=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.generator"
    )
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert (
        f"{type(node_0.outgoing_nodes).__module__}.{type(node_0.outgoing_nodes).__qualname__}"
        == "builtins.generator"
    )
    var_1 = module_0.shortest_path_length(node_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xe4 \x8b\x15\xc4\xa1\xb4\xa75h\xe8\xc9"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (list_0, list_0)
    module_0.insert_or_update(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    bytes_0 = b"\x0c\xb0"
    tuple_0 = (bytes_0,)
    var_0 = module_0.get(tuple_0, bool_0)
    assert var_0 == 0
    module_0.get(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_1.merge()
    node_0 = module_2.Node(var_0, outgoing_nodes=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.generator"
    )
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert (
        f"{type(node_0.outgoing_nodes).__module__}.{type(node_0.outgoing_nodes).__qualname__}"
        == "builtins.generator"
    )
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(node_0, node_0, var_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    dict_0 = {node_0: var_0, var_2: var_0, node_0: var_2}
    module_0.insert_or_update(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    tuple_1 = (set_0, tuple_0)
    list_0 = [tuple_0, tuple_1, tuple_0, bool_0]
    var_0 = module_0.insert_or_update(list_0, tuple_1)
    none_type_0 = None
    var_1 = module_0.get(dict_0, none_type_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_2 == 0
    module_0.shortest_path_length(dict_0, tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    node_0 = module_2.Node(successor=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is True
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_1.merge(reverse=node_0)
    tuple_0 = (var_0, bool_0)
    dict_0 = {tuple_0: var_0, node_0: bool_0, tuple_0: tuple_0}
    var_1 = module_0.get(dict_0, bool_0)
    var_2 = module_0.shortest_path_length(bool_0, node_0, tuple_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    bytes_0 = b"\xe4 \x8b\xc4\xa1\xb4\xea5h\xe8\xc9"
    var_3 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_3 == 0
    node_1 = module_2.Node(bytes_0, successors=bytes_0, predecessors=bytes_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == b"\xe4 \x8b\xc4\xa1\xb4\xea5h\xe8\xc9"
    assert node_1.successor is None
    assert node_1.successors == b"\xe4 \x8b\xc4\xa1\xb4\xea5h\xe8\xc9"
    assert node_1.predecessors == b"\xe4 \x8b\xc4\xa1\xb4\xea5h\xe8\xc9"
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    module_0.shortest_path_length(node_1, node_1, var_3)
