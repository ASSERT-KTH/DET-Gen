# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xea\xa3\x8b"
    module_0.get(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.insert_or_update(bool_0, bool_0)


def test_case_3():
    list_0 = []
    node_0 = module_1.Node(successor=list_0, successors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_4():
    str_0 = "b`"
    list_0 = [str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_5():
    list_0 = []
    tuple_0 = (list_0, list_0)
    module_0.insert_or_update(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    node_0 = module_1.Node(successor=list_0, successors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_0 == 0
    var_1 = module_0.get(list_0, list_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    set_0 = {var_2, var_0}
    var_3 = module_0.insert_or_update(list_0, set_0)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successor) == 1
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successors) == 1
    module_0.get(var_2, var_3)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b".\x07\xb1\x10,s\xbfa\xfek\x99]\x82\xa9\xee\xd9\xf7\xd9\xe2"
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert (
        node_0.successor
        == b".\x07\xb1\x10,s\xbfa\xfek\x99]\x82\xa9\xee\xd9\xf7\xd9\xe2"
    )
    assert (
        node_0.successors
        == b".\x07\xb1\x10,s\xbfa\xfek\x99]\x82\xa9\xee\xd9\xf7\xd9\xe2"
    )
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_path_length(node_0, node_0, bytes_0)


def test_case_8():
    str_0 = "Z~"
    list_0 = [str_0]
    var_0 = module_0.get(list_0, str_0)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(list_0, str_0)
    var_2 = module_0.shortest_path_length(var_1, var_1, var_1)
    assert var_2 == 0


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b".\x07\xb1\x10,s\xbfa\xfek\x99]\x82\xa9\xee\xd9\xf7\xd9\xe2"
    none_type_0 = None
    var_0 = module_0.shortest_path_length(bytes_0, none_type_0, none_type_0)
    assert var_0 == 0
    list_0 = []
    node_0 = module_1.Node(successor=list_0, successors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_1 == 0
    var_2 = module_0.get(list_0, var_0)
    assert var_2 == 0
    var_3 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_3 == pytest.approx(1e309, abs=0.01, rel=0.01)
    set_0 = {var_3, var_0}
    var_4 = module_0.insert_or_update(list_0, set_0)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successor) == 1
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successors) == 1
    tuple_0 = (var_2, var_2)
    module_0.insert_or_update(list_0, tuple_0)


def test_case_10():
    list_0 = []
    var_0 = module_0.get(list_0, list_0)
    assert var_0 == 0
    node_0 = module_1.Node(successor=list_0, successors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.shortest_path_length(list_0, list_0, list_0)
    assert var_1 == 0
    var_2 = module_0.get(list_0, list_0)
    assert var_2 == 0
    var_3 = module_0.shortest_path_length(node_0, node_0, list_0)
    assert var_3 == pytest.approx(1e309, abs=0.01, rel=0.01)
    set_0 = {var_3, var_1}
    var_4 = module_0.insert_or_update(list_0, set_0)
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successor) == 1
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successors) == 1
    var_5 = module_0.get(list_0, var_3)
    assert var_5 == 0
