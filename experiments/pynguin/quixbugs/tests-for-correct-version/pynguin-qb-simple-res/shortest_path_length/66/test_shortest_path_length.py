# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "f>2:odwf"
    none_type_0 = None
    module_0.get(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '\x0bqQ"\x0bw{Zrh{-'
    node_0 = module_1.Node(str_0, successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == '\x0bqQ"\x0bw{Zrh{-'
    assert node_0.successor is None
    assert node_0.successors == '\x0bqQ"\x0bw{Zrh{-'
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    bytes_0 = b"x\x8ew\xb6\x9eM\x93dQ\xa7\xd9\xd9\x01"
    module_0.shortest_path_length(str_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"-o"
    module_0.insert_or_update(bytes_0, bytes_0)


def test_case_4():
    var_0 = module_2.merge()
    node_0 = module_1.Node(predecessors=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert (
        f"{type(node_0.predecessors).__module__}.{type(node_0.predecessors).__qualname__}"
        == "builtins.generator"
    )
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.shortest_path_length(node_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_2.merge()
    list_0 = [var_0, var_0]
    module_0.insert_or_update(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "R3"
    dict_0 = {str_0: str_0}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    float_0 = 69.22
    node_0 = module_1.Node(float_0, predecessors=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == pytest.approx(69.22, abs=0.01, rel=0.01)
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == pytest.approx(69.22, abs=0.01, rel=0.01)
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    module_0.get(node_0, none_type_0)


def test_case_7():
    var_0 = module_2.merge()
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0
    var_2 = module_0.shortest_path_length(var_0, var_1, var_1)
    assert var_2 == 0
    list_0 = [var_1, var_1]
    list_1 = [list_0, var_0]
    var_3 = module_0.insert_or_update(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_2.merge()
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0
    list_0 = [var_1, var_1]
    var_2 = module_2.merge(reverse=var_0)
    list_1 = [list_0, var_0]
    module_0.insert_or_update(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\xdf \xf0\t\x922\xa3\x14\xb5\x07\x8ei\xb9`\xa1\x9b\xa3"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, list_0]
    var_0 = module_0.get(list_1, bytes_0)
    assert var_0 == b"\xdf \xf0\t\x922\xa3\x14\xb5\x07\x8ei\xb9`\xa1\x9b\xa3"
    none_type_0 = None
    module_0.get(var_0, none_type_0)
