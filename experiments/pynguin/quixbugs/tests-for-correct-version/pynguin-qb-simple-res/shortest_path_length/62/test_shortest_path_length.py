# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    str_0 = "Cw"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "Cw"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    module_0.shortest_path_length(str_0, str_0, dict_0)


def test_case_2():
    set_0 = set()
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_path_length(set_0, node_0, set_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"cw"
    module_0.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xf92"
    list_0 = [bytes_0]
    list_1 = [list_0, list_0]
    bool_0 = True
    tuple_0 = (list_1, bool_0, list_1, bool_0)
    module_0.insert_or_update(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "ZX@Bd;1\tZzO7B!KuR0j"
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    list_0 = [str_0, str_0]
    list_1 = [list_0, list_0, str_0, list_0]
    var_1 = module_0.get(list_1, str_0)
    assert var_1 == "ZX@Bd;1\tZzO7B!KuR0j"
    var_2 = module_0.insert_or_update(list_1, list_0)
    module_0.insert_or_update(var_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    list_1 = [list_0, list_0]
    bool_0 = False
    tuple_0 = module_2.merge(*list_1, key=bool_0)
    module_0.insert_or_update(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xf92"
    list_0 = [bytes_0]
    list_1 = [list_0, list_0]
    module_0.insert_or_update(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "\x0bC\t9N"
    none_type_0 = None
    node_0 = module_1.Node(
        successors=str_0, predecessors=none_type_0, outgoing_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "\x0bC\t9N"
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "\x0bC\t9N"
    module_0.shortest_path_length(str_0, node_0, none_type_0)
