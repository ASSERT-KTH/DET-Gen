# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import heapq as module_0
import shortest_path_length as module_1
import node as module_2


def test_case_0():
    var_0 = module_0.merge()
    var_1 = module_1.shortest_path_length(var_0, var_0, var_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "wVjh'N>uYOoF=W42{["
    module_1.get(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -1482
    module_1.get(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "&-Pvo4cLws;~'N"
    var_0 = module_1.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    module_1.shortest_path_length(var_0, str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "q$nHskgy4cR"
    node_0 = module_2.Node(successor=str_0, successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "q$nHskgy4cR"
    assert node_0.successors == "q$nHskgy4cR"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_1.shortest_path_length(str_0, node_0, str_0)


def test_case_5():
    none_type_0 = None
    node_0 = module_2.Node(none_type_0, none_type_0, predecessors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_1.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xa9\xa0"
    module_1.insert_or_update(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    complex_0 = 2842 - 58.899767j
    list_0 = [complex_0, complex_0]
    set_0 = {complex_0}
    tuple_0 = (set_0,)
    tuple_1 = (list_0, complex_0, tuple_0, complex_0)
    module_1.get(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    bytes_0 = b"\xa9\xa0"
    var_0 = module_1.insert_or_update(list_0, bytes_0)
    var_1 = module_1.insert_or_update(list_0, bytes_0)
    none_type_0 = None
    module_1.get(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    var_0 = module_1.get(list_0, list_0)
    assert var_0 == 0
    bytes_0 = b"\xa9\xa0"
    var_1 = module_1.insert_or_update(list_0, bytes_0)
    str_0 = "7["
    var_2 = module_1.insert_or_update(list_0, bytes_0)
    var_3 = module_1.shortest_path_length(str_0, str_0, str_0)
    assert var_3 == 0
    module_1.insert_or_update(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    bytes_1 = b"N\xc9\xc4\xd7\xf2\xd1\xebU\xcfSP\xf4b"
    str_0 = "<FZ\\Y-zc=#=w"
    tuple_0 = (list_0, bytes_1, bytes_1, str_0)
    var_0 = module_1.get(tuple_0, bytes_0)
    assert var_0 == b""
    none_type_0 = None
    node_0 = module_2.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_1.get(none_type_0, none_type_0)
