# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import detect_cycle as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.detect_cycle(none_type_0)
    assert var_0 is False


def test_case_1():
    bytes_0 = b"fZ\x12\x05\xf2\xe1\xd7"
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, incoming_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"fZ\x12\x05\xf2\xe1\xd7"
    assert node_0.predecessors == b"fZ\x12\x05\xf2\xe1\xd7"
    assert node_0.incoming_nodes == b"fZ\x12\x05\xf2\xe1\xd7"
    assert node_0.outgoing_nodes == []
    var_0 = module_0.detect_cycle(node_0)
    assert var_0 is False


def test_case_2():
    none_type_0 = None
    node_0 = module_1.Node(
        none_type_0, none_type_0, predecessors=none_type_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is None
    node_1 = module_1.Node(none_type_0, node_0, node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "node.Node"
    )
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_0 = module_0.detect_cycle(node_1)
    assert var_0 is False
