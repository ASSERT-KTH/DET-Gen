# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import detect_cycle as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    var_0 = module_0.detect_cycle(none_type_0)
    assert var_0 is False
    module_0.detect_cycle(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    module_0.detect_cycle(bool_0)


def test_case_2():
    dict_0 = {}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    node_0 = module_1.Node(predecessors=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == ({}, False)
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.detect_cycle(node_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    node_0 = module_1.Node(
        successor=list_0, incoming_nodes=list_0, outgoing_nodes=list_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == [False, False, False]
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == [False, False, False]
    assert node_0.outgoing_nodes == [False, False, False]
    module_0.detect_cycle(node_0)


def test_case_4():
    bool_0 = False
    node_0 = module_1.Node(predecessors=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is False
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    node_1 = module_1.Node(successor=node_0, successors=bool_0, outgoing_nodes=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successors is False
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "node.Node"
    )
    var_0 = module_0.detect_cycle(node_1)
    assert var_0 is False
