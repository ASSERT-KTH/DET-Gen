# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import detect_cycle as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.Node(node_0, node_0, predecessors=node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(var_0.successor).__module__}.{type(var_0.successor).__qualname__}"
        == "node.Node"
    )
    assert var_0.successors == []
    assert (
        f"{type(var_0.predecessors).__module__}.{type(var_0.predecessors).__qualname__}"
        == "node.Node"
    )
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    var_1 = module_1.detect_cycle(var_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_1.detect_cycle(tuple_0)


def test_case_2():
    bytes_0 = b"\xd6\x97X\xe3\x039\x0b"
    list_0 = [bytes_0, bytes_0]
    node_0 = module_0.Node(list_0, incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == [b"\xd6\x97X\xe3\x039\x0b", b"\xd6\x97X\xe3\x039\x0b"]
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == [
        b"\xd6\x97X\xe3\x039\x0b",
        b"\xd6\x97X\xe3\x039\x0b",
    ]
    assert node_0.outgoing_nodes == []
    var_0 = module_1.detect_cycle(node_0)
    assert var_0 is False
