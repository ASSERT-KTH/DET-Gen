# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import detect_cycle as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.detect_cycle(none_type_0)
    assert var_0 is False
    module_0.detect_cycle(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xe9\xa0\xfb \xd3\xfe*\xa5\xac\xd2\x83~\x92W"
    module_0.detect_cycle(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    node_0 = module_1.Node(successors=bool_0, outgoing_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is True
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is True
    var_0 = module_0.detect_cycle(node_0)
    assert var_0 is False
    module_0.detect_cycle(var_0)


def test_case_3():
    bool_0 = True
    node_0 = module_1.Node(incoming_nodes=bool_0, outgoing_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes is True
    node_1 = module_1.Node(node_0, node_0, incoming_nodes=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert node_1.outgoing_nodes == []
    var_0 = module_0.detect_cycle(node_1)
    assert var_0 is False
