# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import detect_cycle as module_1


def test_case_0():
    none_type_0 = None
    node_0 = module_0.Node(
        none_type_0, predecessors=none_type_0, incoming_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    node_1 = module_0.Node(successor=node_0, incoming_nodes=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert node_1.outgoing_nodes == []
    var_0 = module_1.detect_cycle(node_1)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "`k"
    module_1.detect_cycle(str_0)


def test_case_2():
    str_0 = "5uVK_x"
    node_0 = module_0.Node(predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == "5uVK_x"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "5uVK_x"
    var_0 = module_1.detect_cycle(node_0)
    assert var_0 is False
