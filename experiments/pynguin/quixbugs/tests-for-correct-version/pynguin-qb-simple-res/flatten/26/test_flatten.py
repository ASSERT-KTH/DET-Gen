# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import flatten as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.flatten(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    var_0 = module_0.flatten(list_0)
    module_1.object(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    int_0 = -1772
    tuple_1 = (tuple_0, int_0)
    var_0 = module_0.flatten(tuple_1)
    set_0 = {var_0}
    list_0 = [set_0, tuple_0]
    var_1 = module_0.flatten(list_0)
    bytes_0 = b"\x96\x0eV\xf8\xb4\xb0\xf6\x9en"
    var_2 = module_0.flatten(bytes_0)
    var_3 = module_0.flatten(var_2)
    none_type_0 = None
    var_4 = module_0.flatten(bytes_0)
    var_5 = module_0.flatten(var_2)
    var_6 = module_0.flatten(var_4)
    var_7 = module_0.flatten(var_0)
    var_8 = module_0.flatten(none_type_0)
    var_9 = module_0.flatten(bytes_0)
    var_10 = module_0.flatten(var_2)
    var_11 = module_0.flatten(none_type_0)
    var_12 = module_0.flatten(var_2)
    var_13 = module_0.flatten(var_6)
    bool_0 = True
    str_0 = "K/9kX"
    tuple_2 = (bool_0, str_0, var_9, list_0)
    var_14 = module_0.flatten(tuple_2)
    var_15 = module_0.flatten(list_0)
    var_16 = module_0.flatten(var_7)
    object_0 = module_1.object()
    var_17 = module_0.flatten(int_0)
    int_1 = -133
    var_18 = module_0.flatten(int_1)
    object_1 = module_1.object(*tuple_0)
    var_19 = module_0.flatten(var_3)
    var_20 = module_0.flatten(var_4)
    module_1.object(*var_14)
