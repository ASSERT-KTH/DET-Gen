# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import next_palindrome as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "T"
    module_0.next_palindrome(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    var_0 = module_0.next_palindrome(dict_0)
    bool_0 = False
    module_0.next_palindrome(bool_0)


def test_case_2():
    int_0 = 9
    list_0 = [int_0, int_0, int_0]
    var_0 = module_0.next_palindrome(list_0)
    var_1 = module_0.next_palindrome(var_0)


def test_case_3():
    int_0 = -8684
    list_0 = [int_0]
    var_0 = module_0.next_palindrome(list_0)


def test_case_4():
    int_0 = 9
    list_0 = [int_0, int_0]
    var_0 = module_0.next_palindrome(list_0)


def test_case_5():
    int_0 = 9
    list_0 = [int_0, int_0, int_0]
    var_0 = module_0.next_palindrome(list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 9
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: bool_0, bool_0: int_0}
    var_0 = module_0.next_palindrome(dict_0)
    list_0 = [int_0, int_0, int_0]
    var_1 = module_0.next_palindrome(list_0)
    str_0 = "9"
    var_2 = module_0.next_palindrome(list_0)
    module_0.next_palindrome(str_0)
