# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x1c"
    node_0 = module_1.Node(bytes_0, successors=bytes_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\x1c"
    assert node_0.successor is None
    assert node_0.successors == b"\x1c"
    assert node_0.predecessors == b"\x1c"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    none_type_0 = None
    module_0.breadth_first_search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, none_type_0)
    assert var_0 is False
    var_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 2694.612
    var_0 = module_1.Node(float_0, outgoing_nodes=float_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == pytest.approx(2694.612, abs=0.01, rel=0.01)
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == pytest.approx(2694.612, abs=0.01, rel=0.01)
    bytes_0 = b"\x9d\x9d]\xb4\xeb\x1d\x01"
    none_type_0 = None
    var_1 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_1 is True
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=none_type_0, incoming_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x9d\x9d]\xb4\xeb\x1d\x01"
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == b"\x9d\x9d]\xb4\xeb\x1d\x01"
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: var_1, var_1: node_0, node_0: node_0}
    node_1 = module_1.Node(successors=dict_0, outgoing_nodes=none_type_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.successors) == 2
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes is None
    module_0.breadth_first_search(node_1, none_type_0)
