# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True


def test_case_1():
    bool_0 = False
    node_0 = module_1.Node(incoming_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is False
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, bool_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xf7\xbc"
    node_0 = module_1.Node(successors=bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\xf7\xbc"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\xf7\xbc"
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"b"
    node_0 = module_1.Node(successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"b"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    tuple_0 = (node_0, node_0)
    node_1 = module_1.Node(
        successors=tuple_0, predecessors=node_0, incoming_nodes=node_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.successors) == 2
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert node_1.outgoing_nodes == []
    str_0 = ": N;V\t yu%Ij48;"
    module_0.breadth_first_search(node_1, str_0)
