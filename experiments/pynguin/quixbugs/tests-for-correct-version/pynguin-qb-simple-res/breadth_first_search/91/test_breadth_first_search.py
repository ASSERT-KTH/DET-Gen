# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


def test_case_1():
    float_0 = 5443.1
    node_0 = module_1.Node(float_0, outgoing_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == pytest.approx(5443.1, abs=0.01, rel=0.01)
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == pytest.approx(5443.1, abs=0.01, rel=0.01)
    var_0 = module_0.breadth_first_search(node_0, float_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    module_0.breadth_first_search(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "-g\n)OiF@Ztl(uNeg\x0b"
    node_0 = module_1.Node(successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "-g\n)OiF@Ztl(uNeg\x0b"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    node_0 = module_1.Node(
        bool_0, successors=tuple_0, predecessors=tuple_0, incoming_nodes=tuple_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is True
    assert node_0.successor is None
    assert node_0.successors == (True, True)
    assert node_0.predecessors == (True, True)
    assert node_0.incoming_nodes == (True, True)
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, bool_0]
    node_1 = module_1.Node(
        list_0, successors=list_0, predecessors=node_0, incoming_nodes=tuple_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.value) == 2
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 2
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "node.Node"
    )
    assert node_1.incoming_nodes == (True, True)
    assert node_1.outgoing_nodes == []
    int_0 = -283
    module_0.breadth_first_search(node_1, int_0)
