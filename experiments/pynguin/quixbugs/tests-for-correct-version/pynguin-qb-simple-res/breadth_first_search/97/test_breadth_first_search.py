# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    int_0 = -1102
    var_0 = module_0.breadth_first_search(int_0, int_0)
    assert var_0 is True


def test_case_1():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    node_1 = module_1.Node(successors=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "node.Node"
    )
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, node_1)
    assert var_0 is False


def test_case_2():
    str_0 = "\r"
    node_0 = module_1.Node(successors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "\r"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "\r"
    var_0 = module_0.breadth_first_search(node_0, str_0)
    assert var_0 is True
