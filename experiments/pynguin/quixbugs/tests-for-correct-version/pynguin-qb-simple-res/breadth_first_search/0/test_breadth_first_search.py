# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import breadth_first_search as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_1.breadth_first_search(node_0, node_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    none_type_0 = None
    module_1.breadth_first_search(bool_0, none_type_0)


def test_case_2():
    str_0 = "o"
    node_0 = module_0.Node(str_0, successors=str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "o"
    assert node_0.successor is None
    assert node_0.successors == "o"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "o"
    assert node_0.outgoing_nodes == []
    var_0 = module_1.breadth_first_search(node_0, str_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    node_0 = module_0.Node(incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    var_0 = module_1.breadth_first_search(node_0, none_type_0)
    assert var_0 is False
    set_0 = set()
    module_1.breadth_first_search(none_type_0, set_0)
