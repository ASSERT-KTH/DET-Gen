# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"P\x89\xa7\xa0\x06,\xf4\xd8\xd0]\xc1"
    node_0 = module_1.Node(
        bytes_0, successors=bytes_0, predecessors=bytes_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"P\x89\xa7\xa0\x06,\xf4\xd8\xd0]\xc1"
    assert node_0.successor is None
    assert node_0.successors == b"P\x89\xa7\xa0\x06,\xf4\xd8\xd0]\xc1"
    assert node_0.predecessors == b"P\x89\xa7\xa0\x06,\xf4\xd8\xd0]\xc1"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"P\x89\xa7\xa0\x06,\xf4\xd8\xd0]\xc1"
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    none_type_0 = None
    module_0.breadth_first_search(bool_0, none_type_0)


def test_case_3():
    int_0 = 5968
    node_0 = module_1.Node(int_0, int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == 5968
    assert node_0.successor == 5968
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, int_0)
    assert var_0 is False
    var_1 = module_0.breadth_first_search(int_0, int_0)
    assert var_1 is True
