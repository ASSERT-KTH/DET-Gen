# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1
import collections as module_2


def test_case_0():
    str_0 = "^\tUV"
    var_0 = module_0.breadth_first_search(str_0, str_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x9a\x14\xb0u\x82.\xdckN\xfd|"
    node_0 = module_1.Node(successors=bytes_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x9a\x14\xb0u\x82.\xdckN\xfd|"
    assert node_0.predecessors == b"\x9a\x14\xb0u\x82.\xdckN\xfd|"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    deque_0 = module_2.deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "collections.deque"
    )
    assert len(deque_0) == 0
    assert (
        f"{type(module_2.deque.maxlen).__module__}.{type(module_2.deque.maxlen).__qualname__}"
        == "builtins.getset_descriptor"
    )
    list_0 = [node_0, node_0, deque_0, node_0]
    var_0 = module_0.breadth_first_search(node_0, list_0)
    assert var_0 is False
    module_0.breadth_first_search(deque_0, var_0)
