# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x06\xeb\xff\xfa\x9e#\xa8Gx\x00\xcc\x86\xd9$6\xde\xb8\xc3"
    node_0 = module_1.Node(bytes_0, successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\x06\xeb\xff\xfa\x9e#\xa8Gx\x00\xcc\x86\xd9$6\xde\xb8\xc3"
    assert node_0.successor is None
    assert (
        node_0.successors
        == b"\x06\xeb\xff\xfa\x9e#\xa8Gx\x00\xcc\x86\xd9$6\xde\xb8\xc3"
    )
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    object_0 = module_2.object()
    var_0 = module_0.breadth_first_search(object_0, object_0)
    assert var_0 is True
    node_0 = module_1.Node(predecessors=object_0, incoming_nodes=object_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert (
        f"{type(node_0.predecessors).__module__}.{type(node_0.predecessors).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(node_0.incoming_nodes).__module__}.{type(node_0.incoming_nodes).__qualname__}"
        == "builtins.object"
    )
    assert node_0.outgoing_nodes == []
    var_1 = module_0.breadth_first_search(node_0, object_0)
    assert var_1 is False
    set_0 = {var_1}
    module_0.breadth_first_search(set_0, var_1)
