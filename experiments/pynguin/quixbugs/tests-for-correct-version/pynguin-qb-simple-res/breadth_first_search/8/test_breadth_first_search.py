# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    none_type_0 = None
    module_0.breadth_first_search(bool_0, none_type_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, node_0)
    assert var_0 is True
    var_1 = module_0.breadth_first_search(node_0, var_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "c@YV\\'\x0c[f,G[!\t45X"
    node_0 = module_1.Node(str_0, successors=str_0, predecessors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "c@YV\\'\x0c[f,G[!\t45X"
    assert node_0.successor is None
    assert node_0.successors == "c@YV\\'\x0c[f,G[!\t45X"
    assert node_0.predecessors == "c@YV\\'\x0c[f,G[!\t45X"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "m"
    bool_0 = False
    node_0 = module_1.Node(
        successor=str_0, successors=str_0, predecessors=bool_0, outgoing_nodes=bool_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "m"
    assert node_0.successors == "m"
    assert node_0.predecessors is False
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is False
    dict_0 = {node_0: str_0, str_0: str_0}
    node_1 = module_1.Node(successors=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.successors) == 2
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    module_0.breadth_first_search(node_1, bool_0)
