# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"%"
    node_0 = module_1.Node(bytes_0, successors=bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"%"
    assert node_0.successor is None
    assert node_0.successors == b"%"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"%"
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -352.4
    var_0 = module_0.breadth_first_search(float_0, float_0)
    assert var_0 is True
    module_0.breadth_first_search(float_0, var_0)


def test_case_3():
    bytes_0 = b'\xaf\x90z\x1e\x87B\xdf\xf2\x1b"Mu\xe2C\x0f!B\xf0\xe8\x96'
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, bytes_0)
    assert var_0 is False
