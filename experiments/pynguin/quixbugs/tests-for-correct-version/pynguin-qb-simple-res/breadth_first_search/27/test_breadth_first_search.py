# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "4 <VG"
    node_0 = module_1.Node(successors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "4 <VG"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "4 <VG"
    assert node_0.outgoing_nodes == "4 <VG"
    module_0.breadth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -1780
    bytes_0 = b"\xa3\x1b9k\x13J\xae#\x16"
    module_0.breadth_first_search(int_0, bytes_0)


def test_case_3():
    int_0 = 2719
    node_0 = module_1.Node(int_0, int_0, incoming_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == 2719
    assert node_0.successor == 2719
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 2719
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    var_0 = module_0.breadth_first_search(node_0, none_type_0)
    assert var_0 is False
    str_0 = "\t$E93:ODEY"
    var_1 = module_0.breadth_first_search(str_0, str_0)
    assert var_1 is True


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "a"
    node_0 = module_1.Node(successor=str_0, successors=str_0, predecessors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "a"
    assert node_0.successors == "a"
    assert node_0.predecessors == "a"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, str_0, node_0]
    node_1 = module_1.Node(
        node_0, successors=list_0, predecessors=str_0, outgoing_nodes=str_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 3
    assert node_1.predecessors == "a"
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == "a"
    module_0.breadth_first_search(node_1, list_0)
