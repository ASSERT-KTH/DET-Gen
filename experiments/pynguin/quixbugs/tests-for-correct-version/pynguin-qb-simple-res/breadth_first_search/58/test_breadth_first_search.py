# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    complex_0 = 1038.1 - 77.5j
    var_0 = module_0.breadth_first_search(complex_0, complex_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xd5\xc4V\xde\xf9\xaewL,\x9d\x87"
    bytes_1 = b"\x7f\xab\xe1\x85\x80v\x03\xd9\xde\xc3\xc0u\xc8U+\xb4\xad\xad\xaf"
    module_0.breadth_first_search(bytes_0, bytes_1)


def test_case_2():
    complex_0 = 1038.1 - 77.5j
    node_0 = module_1.Node(complex_0, predecessors=complex_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == (1038.1 - 77.5j)
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == (1038.1 - 77.5j)
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, complex_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "unv<ZQ%#T5"
    node_0 = module_1.Node(successors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "unv<ZQ%#T5"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "unv<ZQ%#T5"
    assert node_0.outgoing_nodes == "unv<ZQ%#T5"
    module_0.breadth_first_search(node_0, str_0)
