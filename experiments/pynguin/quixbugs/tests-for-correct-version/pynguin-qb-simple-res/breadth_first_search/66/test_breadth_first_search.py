# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"\x1f\\\xc3\xc0\xb6\xac\xc0bg\xc1F\x00N\x85\x10\xe4\x8eL)p"
    var_0 = module_0.breadth_first_search(bytes_0, bytes_0)
    assert var_0 is True


def test_case_1():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, none_type_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x1f\\\xc3\xc0\xb6\xac\xc0bg\xc1F\x00N\x85\x10\xe4\x8eL)p"
    none_type_0 = None
    module_0.breadth_first_search(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x18"
    node_0 = module_1.Node(bytes_0, successors=bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\x18"
    assert node_0.successor is None
    assert node_0.successors == b"\x18"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\x18"
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, bytes_0)
