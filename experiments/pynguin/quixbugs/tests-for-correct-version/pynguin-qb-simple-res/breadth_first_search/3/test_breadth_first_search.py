# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1
import collections as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True
    module_0.breadth_first_search(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is None
    var_0 = module_0.breadth_first_search(node_0, none_type_0)
    assert var_0 is False
    module_2.deque(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_1.Node(successor=list_0, successors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == [False, False, False, False]
    assert node_0.successors == [False, False, False, False]
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    list_0 = [bool_0]
    node_0 = module_1.Node(
        successors=list_0, predecessors=list_0, incoming_nodes=bool_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == [True]
    assert node_0.predecessors == [True]
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes == []
    list_1 = [node_0, bool_0, node_0, bool_0]
    node_1 = module_1.Node(successor=list_1, successors=list_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successor) == 4
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 4
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    module_0.breadth_first_search(node_1, list_0)
