# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    str_0 = "_gn"
    var_0 = module_0.breadth_first_search(str_0, str_0)
    assert var_0 is True


def test_case_1():
    float_0 = 2667.9952
    node_0 = module_1.Node(float_0, float_0, outgoing_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == pytest.approx(2667.9952, abs=0.01, rel=0.01)
    assert node_0.successor == pytest.approx(2667.9952, abs=0.01, rel=0.01)
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == pytest.approx(2667.9952, abs=0.01, rel=0.01)
    var_0 = module_0.breadth_first_search(node_0, float_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x0co"
    node_0 = module_1.Node(successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x0co"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, bytes_0)
