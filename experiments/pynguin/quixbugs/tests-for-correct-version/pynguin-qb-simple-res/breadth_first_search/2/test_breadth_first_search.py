# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"\xa78\x1a\x06*\x9f\x89\x0f\x1c"
    var_0 = module_0.breadth_first_search(bytes_0, bytes_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'$M\x0f\xd7\xbb\xdf\xefY"0\xc2\xe9v\x13'
    node_0 = module_1.Node(bytes_0, successors=bytes_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b'$M\x0f\xd7\xbb\xdf\xefY"0\xc2\xe9v\x13'
    assert node_0.successor is None
    assert node_0.successors == b'$M\x0f\xd7\xbb\xdf\xefY"0\xc2\xe9v\x13'
    assert node_0.predecessors == b'$M\x0f\xd7\xbb\xdf\xefY"0\xc2\xe9v\x13'
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ";&1xnZ/Nag(=p~"
    var_0 = module_0.breadth_first_search(str_0, str_0)
    assert var_0 is True
    module_0.breadth_first_search(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    dict_0 = {}
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True
    node_0 = module_1.Node(successors=dict_0, predecessors=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == {}
    assert node_0.predecessors == {}
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.breadth_first_search(node_0, var_0)
    assert var_1 is False
    module_0.breadth_first_search(var_0, var_1)
