# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    int_0 = 1252
    var_0 = module_0.breadth_first_search(int_0, int_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    module_0.breadth_first_search(none_type_0, var_0)


def test_case_2():
    str_0 = "o"
    node_0 = module_1.Node(successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "o"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, str_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 246.0
    var_0 = module_0.breadth_first_search(float_0, float_0)
    assert var_0 is True
    node_0 = module_1.Node(predecessors=float_0, incoming_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == pytest.approx(246.0, abs=0.01, rel=0.01)
    assert node_0.incoming_nodes == pytest.approx(246.0, abs=0.01, rel=0.01)
    assert node_0.outgoing_nodes == []
    var_1 = module_0.breadth_first_search(node_0, float_0)
    assert var_1 is False
    var_1.successor()
