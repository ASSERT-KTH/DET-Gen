# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    int_0 = -1555
    var_0 = module_0.breadth_first_search(int_0, int_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -1555
    var_0 = module_0.breadth_first_search(int_0, int_0)
    assert var_0 is True
    module_0.breadth_first_search(int_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "~I@]~pvev!M@\x0b6~\x0b9\x0c@"
    node_0 = module_1.Node(successors=str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "~I@]~pvev!M@\x0b6~\x0b9\x0c@"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "~I@]~pvev!M@\x0b6~\x0b9\x0c@"
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    node_0 = module_1.Node(bool_0, predecessors=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is False
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is False
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, bool_0)
    assert var_0 is False
    var_0.predecessors()


def test_case_4():
    str_0 = "+"
    node_0 = module_1.Node(str_0, successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "+"
    assert node_0.successor is None
    assert node_0.successors == "+"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {str_0, node_0, str_0}
    node_1 = module_1.Node(successors=set_0, incoming_nodes=str_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.successors) == 2
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == "+"
    assert node_1.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_1, str_0)
    assert var_0 is True
