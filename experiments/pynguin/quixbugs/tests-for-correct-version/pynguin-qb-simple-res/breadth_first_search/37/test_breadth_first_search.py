# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


def test_case_1():
    dict_0 = {}
    node_0 = module_1.Node(dict_0, successors=dict_0, outgoing_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {}
    assert node_0.successor is None
    assert node_0.successors == {}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {}
    var_0 = module_0.breadth_first_search(node_0, dict_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    str_0 = "<`4;NXOR\\ld9CLP9&X"
    module_0.breadth_first_search(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "/j]"
    node_0 = module_1.Node(successors=str_0, predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "/j]"
    assert node_0.predecessors == "/j]"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "/j]"
    module_0.breadth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "2"
    node_0 = module_1.Node(successors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "2"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "2"
    dict_0 = {str_0: node_0, node_0: node_0, node_0: node_0}
    dict_1 = {node_0: str_0, node_0: node_0, str_0: dict_0, node_0: str_0}
    node_1 = module_1.Node(dict_1, successors=dict_1, predecessors=str_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.value) == 2
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.successors) == 2
    assert node_1.predecessors == "2"
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    str_1 = "f=I+Xnt6J wtZOzYN}0j"
    list_0 = [str_1, dict_0]
    module_0.breadth_first_search(node_1, list_0)
