# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    none_type_0 = None
    module_0.breadth_first_search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x9d"
    node_0 = module_1.Node(successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x9d"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, bytes_0)


def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    int_0 = -627
    var_0 = module_0.breadth_first_search(node_0, int_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x10"
    node_0 = module_1.Node(successors=bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x10"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\x10"
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0, node_0, node_0]
    node_1 = module_1.Node(
        successors=list_0, incoming_nodes=list_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 4
    assert node_1.predecessors == []
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.incoming_nodes) == 4
    assert node_1.outgoing_nodes == b"\x10"
    none_type_0 = None
    module_0.breadth_first_search(node_1, none_type_0)
