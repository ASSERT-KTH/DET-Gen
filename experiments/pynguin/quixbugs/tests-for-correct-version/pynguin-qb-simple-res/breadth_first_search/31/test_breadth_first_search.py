# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True


def test_case_1():
    var_0 = module_1.Node()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    none_type_0 = None
    var_1 = module_0.breadth_first_search(var_0, none_type_0)
    assert var_1 is False


def test_case_2():
    int_0 = 3730
    list_0 = [int_0, int_0, int_0]
    node_0 = module_1.Node(list_0, successors=list_0, incoming_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == [3730, 3730, 3730]
    assert node_0.successor is None
    assert node_0.successors == [3730, 3730, 3730]
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 3730
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, int_0)
    assert var_0 is True


def test_case_3():
    int_0 = 3751
    list_0 = [int_0, int_0, int_0]
    node_0 = module_1.Node(list_0, successors=list_0, incoming_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == [3751, 3751, 3751]
    assert node_0.successor is None
    assert node_0.successors == [3751, 3751, 3751]
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 3751
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(int_0, int_0)
    assert var_0 is True
    list_1 = [node_0, int_0, int_0]
    node_1 = module_1.Node(successors=list_1, predecessors=int_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 3
    assert node_1.predecessors == 3751
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_1 = module_0.breadth_first_search(node_1, int_0)
    assert var_1 is True
