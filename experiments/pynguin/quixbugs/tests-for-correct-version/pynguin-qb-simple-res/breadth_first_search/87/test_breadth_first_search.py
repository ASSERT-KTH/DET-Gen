# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"\xbai\nOH\xfe\xa9\xdf\xa0\x18\x14P\x17u\xc4>\xdc1"
    var_0 = module_0.breadth_first_search(bytes_0, bytes_0)
    assert var_0 is True


def test_case_1():
    none_type_0 = None
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, none_type_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "+R\ruU@"
    node_0 = module_1.Node(str_0, successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "+R\ruU@"
    assert node_0.successor is None
    assert node_0.successors == "+R\ruU@"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "*"
    node_0 = module_1.Node(str_0, str_0, str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "*"
    assert node_0.successor == "*"
    assert node_0.successors == "*"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "*"
    assert node_0.outgoing_nodes == []
    complex_0 = 3727.665237 - 1423.612j
    set_0 = {complex_0, node_0, str_0}
    node_1 = module_1.Node(successors=set_0, predecessors=complex_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.successors) == 3
    assert node_1.predecessors == (3727.665237 - 1423.612j)
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    none_type_0 = None
    module_0.breadth_first_search(node_1, none_type_0)
