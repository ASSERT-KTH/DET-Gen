# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bytes_0 = b'\x10"\xd7\xb4J\x17'
    var_0 = module_0.breadth_first_search(bytes_0, bytes_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x08\x87\xb2!<<T\xcc\xeb\x85"
    node_0 = module_1.Node(successors=bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x08\x87\xb2!<<T\xcc\xeb\x85"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\x08\x87\xb2!<<T\xcc\xeb\x85"
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    none_type_0 = None
    module_0.breadth_first_search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "&$H<J0v1JM yW!(N"
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, str_0)
    assert var_0 is False
    node_0.predecessors()
