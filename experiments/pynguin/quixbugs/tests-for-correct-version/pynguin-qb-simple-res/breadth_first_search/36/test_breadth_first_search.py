# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = 630.900862 - 2512.6j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.breadth_first_search(complex_0, set_0)


def test_case_2():
    str_0 = "("
    node_0 = module_1.Node(successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "("
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, str_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "FO0c6U"
    node_0 = module_1.Node(str_0, str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "FO0c6U"
    assert node_0.successor == "FO0c6U"
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, str_0)
    assert var_0 is False
    module_0.breadth_first_search(str_0, var_0)


def test_case_4():
    str_0 = "O"
    node_0 = module_1.Node(
        successor=str_0, successors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "O"
    assert node_0.successors == "O"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "O"
    assert node_0.outgoing_nodes == "O"
    var_0 = module_0.breadth_first_search(str_0, str_0)
    assert var_0 is True
    set_0 = {str_0, node_0}
    node_1 = module_1.Node(successors=set_0, predecessors=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.successors) == 2
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.predecessors) == 2
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_1 = module_0.breadth_first_search(node_1, str_0)
    assert var_1 is True
