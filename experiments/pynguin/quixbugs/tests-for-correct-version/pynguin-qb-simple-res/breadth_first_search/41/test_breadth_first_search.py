# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "%o"
    node_0 = module_1.Node(str_0, str_0, str_0, str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "%o"
    assert node_0.successor == "%o"
    assert node_0.successors == "%o"
    assert node_0.predecessors == "%o"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "G%agTp1\"'vzR#_F7B+Qv"
    node_0 = module_1.Node(str_0, str_0, predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "G%agTp1\"'vzR#_F7B+Qv"
    assert node_0.successor == "G%agTp1\"'vzR#_F7B+Qv"
    assert node_0.successors == []
    assert node_0.predecessors == "G%agTp1\"'vzR#_F7B+Qv"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "G%agTp1\"'vzR#_F7B+Qv"
    dict_0 = {}
    var_0 = module_0.breadth_first_search(node_0, dict_0)
    assert var_0 is False
    node_0.successors()
