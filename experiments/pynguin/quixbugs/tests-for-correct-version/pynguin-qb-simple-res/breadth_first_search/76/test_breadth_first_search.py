# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    float_0 = -16.209194
    var_0 = module_0.breadth_first_search(float_0, float_0)
    assert var_0 is True


def test_case_1():
    str_0 = "k"
    node_0 = module_1.Node(
        str_0, successors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "k"
    assert node_0.successor is None
    assert node_0.successors == "k"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "k"
    assert node_0.outgoing_nodes == "k"
    var_0 = module_0.breadth_first_search(node_0, str_0)
    assert var_0 is True


def test_case_2():
    str_0 = ""
    none_type_0 = None
    node_0 = module_1.Node(
        str_0, successors=str_0, incoming_nodes=str_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ""
    assert node_0.successor is None
    assert node_0.successors == ""
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ""
    assert node_0.outgoing_nodes is None
    var_0 = module_0.breadth_first_search(node_0, str_0)
    assert var_0 is False
