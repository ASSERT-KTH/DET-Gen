# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"m\xd7\x83\xae\x81/\xa5\xd7\xa1T_\x8fi\xd1\xcfv"
    node_0 = module_1.Node(successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"m\xd7\x83\xae\x81/\xa5\xd7\xa1T_\x8fi\xd1\xcfv"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, bytes_0)


def test_case_2():
    complex_0 = 3201.9622 - 2582.516039j
    node_0 = module_1.Node(successor=complex_0, incoming_nodes=complex_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == (3201.9622 - 2582.516039j)
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == (3201.9622 - 2582.516039j)
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    var_0 = module_0.breadth_first_search(node_0, none_type_0)
    assert var_0 is False
    var_1 = module_0.breadth_first_search(var_0, var_0)
    assert var_1 is True
    bool_0 = False
    var_2 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_2 is True
