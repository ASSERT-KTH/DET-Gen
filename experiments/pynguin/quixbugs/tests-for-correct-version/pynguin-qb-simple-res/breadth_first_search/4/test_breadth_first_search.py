# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "=<jD["
    node_0 = module_1.Node(successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "=<jD["
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    var_0 = module_1.Node(successor=bool_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is False
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    var_1 = module_0.breadth_first_search(bool_0, bool_0)
    assert var_1 is True
    tuple_0 = (var_1, var_1, var_1)
    tuple_1 = module_0.breadth_first_search(var_0, var_1)
    assert tuple_1 is False
    node_0 = module_1.Node(tuple_1, tuple_0, tuple_1, incoming_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is False
    assert node_0.successor == (True, True, True)
    assert node_0.successors is False
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == (True, True, True)
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, var_1)
