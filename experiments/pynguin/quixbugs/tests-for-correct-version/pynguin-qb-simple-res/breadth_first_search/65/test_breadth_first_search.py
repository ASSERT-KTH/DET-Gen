# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    complex_0 = -351.81 + 1041.60601j
    var_0 = module_0.breadth_first_search(complex_0, complex_0)
    assert var_0 is True


def test_case_1():
    bool_0 = True
    node_0 = module_1.Node(incoming_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, bool_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"T"
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, incoming_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"T"
    assert node_0.successors == b"T"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"T"
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, bytes_0)
