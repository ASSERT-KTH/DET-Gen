# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    int_0 = 2738
    var_0 = module_0.breadth_first_search(int_0, int_0)
    assert var_0 is True


def test_case_1():
    dict_0 = {}
    node_0 = module_1.Node(successor=dict_0, outgoing_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {}
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {}
    var_0 = module_0.breadth_first_search(node_0, dict_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xf2\xf2N0\xd5\xe4\x8f8"
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\xf2\xf2N0\xd5\xe4\x8f8"
    assert node_0.successors == b"\xf2\xf2N0\xd5\xe4\x8f8"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"\xf2\xf2N0\xd5\xe4\x8f8"
    module_0.breadth_first_search(node_0, bytes_0)
