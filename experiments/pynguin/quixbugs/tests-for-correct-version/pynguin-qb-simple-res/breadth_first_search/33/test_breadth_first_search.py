# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    str_0 = "3"
    var_0 = module_0.breadth_first_search(str_0, str_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x15\xe90\x1f\x02\x9170\xe6\xf7\xff#\xc9tI\x1e"
    bool_0 = False
    module_0.breadth_first_search(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xb7c\xbb"
    node_0 = module_1.Node(successors=bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\xb7c\xbb"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\xb7c\xbb"
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    str_0 = "BL\nq_Bc"
    node_0 = module_1.Node(
        bool_0, predecessors=bool_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is True
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is True
    assert node_0.incoming_nodes == "BL\nq_Bc"
    assert node_0.outgoing_nodes == "BL\nq_Bc"
    var_0 = module_0.breadth_first_search(node_0, str_0)
    assert var_0 is False
    var_1 = module_0.breadth_first_search(var_0, var_0)
    assert var_1 is True
    var_0.successor()
