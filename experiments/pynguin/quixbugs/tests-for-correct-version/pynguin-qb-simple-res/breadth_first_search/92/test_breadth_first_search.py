# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.breadth_first_search(none_type_0, none_type_0)
    assert var_0 is True


def test_case_1():
    str_0 = "u"
    node_0 = module_1.Node(str_0, str_0, str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "u"
    assert node_0.successor == "u"
    assert node_0.successors == "u"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, str_0)
    assert var_0 is True


def test_case_2():
    bytes_0 = b"7\x9c\xbc9\xbc?J\x8c\xeb\x07:\xc2\x84\xf6\xe5s\x05\xacA\x0b"
    node_0 = module_1.Node(successor=bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert (
        node_0.successor
        == b"7\x9c\xbc9\xbc?J\x8c\xeb\x07:\xc2\x84\xf6\xe5s\x05\xacA\x0b"
    )
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert (
        node_0.outgoing_nodes
        == b"7\x9c\xbc9\xbc?J\x8c\xeb\x07:\xc2\x84\xf6\xe5s\x05\xacA\x0b"
    )
    bytes_1 = b"\tY:pQ\\(f\xba\xade\xf0\x13\xc0H.\x8fI"
    var_0 = module_0.breadth_first_search(node_0, bytes_1)
    assert var_0 is False
