# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search as module_0
import node as module_1


def test_case_0():
    float_0 = 2190.572
    var_0 = module_0.breadth_first_search(float_0, float_0)
    assert var_0 is True


def test_case_1():
    bool_0 = False
    node_0 = module_1.Node(bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is False
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.breadth_first_search(node_0, bool_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "bFS/;%ZE%"
    node_0 = module_1.Node(successors=str_0, predecessors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "bFS/;%ZE%"
    assert node_0.predecessors == "bFS/;%ZE%"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.breadth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 1131.3299813928675
    var_0 = module_0.breadth_first_search(float_0, float_0)
    assert var_0 is True
    str_0 = "`"
    node_0 = module_1.Node(successor=str_0, successors=str_0, predecessors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "`"
    assert node_0.successors == "`"
    assert node_0.predecessors == "`"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: var_0, var_0: str_0, str_0: var_0}
    node_1 = module_1.Node(successors=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.successors) == 3
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    node_2 = module_1.Node(node_0, successors=var_0, outgoing_nodes=float_0)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert (
        f"{type(node_2.value).__module__}.{type(node_2.value).__qualname__}"
        == "node.Node"
    )
    assert node_2.successor is None
    assert node_2.successors is True
    assert node_2.predecessors == []
    assert node_2.incoming_nodes == []
    assert node_2.outgoing_nodes == pytest.approx(
        1131.3299813928675, abs=0.01, rel=0.01
    )
    module_0.breadth_first_search(node_1, float_0)
