# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import lcs_length as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"3\x0e\xa8\xac\xa1\x0f\x0eQJ\x18\x80\xf0\x98\x8a\xdf\xb2\xa8=\xe9\xe1"
    var_0 = module_0.lcs_length(bytes_0, bytes_0)
    assert var_0 == 20
    bool_0 = False
    none_type_0 = None
    module_0.lcs_length(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    var_0 = module_0.lcs_length(set_0, set_0)
    assert var_0 == 0
    var_1 = module_0.lcs_length(set_0, set_0)
    assert var_1 == 0
    tuple_0 = ()
    var_2 = module_0.lcs_length(tuple_0, tuple_0)
    assert var_2 == 0
    var_3 = module_0.lcs_length(set_0, var_0)
    assert var_3 == 0
    var_4 = module_0.lcs_length(set_0, tuple_0)
    assert var_4 == 0
    str_0 = "\t>Gi4"
    module_0.lcs_length(var_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 37.06581
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.lcs_length(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.lcs_length(bool_0, bool_0)
