# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import lcs_length as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 2595
    list_0 = [int_0, int_0]
    var_0 = module_0.lcs_length(list_0, list_0)
    assert var_0 == 2
    int_1 = 1356
    module_0.lcs_length(var_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b""
    var_0 = module_0.lcs_length(bytes_0, bytes_0)
    assert var_0 == 0
    none_type_0 = None
    module_0.lcs_length(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xc7\xeb\xa8u\xe7e\xc3\x9a\x07T\x1bd-\xa6&"
    none_type_0 = None
    module_0.lcs_length(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    object_0 = module_1.object()
    module_0.lcs_length(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "8C4AWbVKHdl*8E"
    var_0 = module_0.lcs_length(str_0, str_0)
    assert var_0 == 14
    tuple_0 = (str_0, str_0)
    var_1 = module_0.lcs_length(str_0, str_0)
    assert var_1 == 14
    var_2 = module_0.lcs_length(tuple_0, tuple_0)
    assert var_2 == 2
    module_0.lcs_length(var_1, var_2)
