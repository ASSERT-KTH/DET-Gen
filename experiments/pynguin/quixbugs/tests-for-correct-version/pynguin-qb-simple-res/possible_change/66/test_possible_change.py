# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import possible_change as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    var_0 = module_0.possible_change(bool_0, bool_0)
    assert var_0 == 1
    int_0 = 2400
    module_0.possible_change(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    object_0 = module_1.object()
    str_0 = "(kP+b_lp<vc\td"
    module_0.possible_change(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -3369
    tuple_0 = (int_0, int_0)
    var_0 = module_0.possible_change(tuple_0, int_0)
    assert var_0 == 0
    bytes_0 = b"\x8b\xcf\x91&\x87\x83O\x97[M\xee\xc96^\xe7\x954\xd2\xb2"
    module_0.possible_change(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.possible_change(dict_0, bool_0)
    assert var_0 == 1
    bool_1 = False
    none_type_0 = None
    var_1 = module_0.possible_change(bool_1, bool_1)
    assert var_1 == 1
    var_2 = module_0.possible_change(none_type_0, var_1)
    assert var_2 == 0
    module_0.possible_change(none_type_0, none_type_0)
