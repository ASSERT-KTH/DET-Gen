# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import possible_change as module_0
import builtins as module_1


def test_case_0():
    int_0 = -717
    var_0 = module_0.possible_change(int_0, int_0)
    assert var_0 == 0
    var_1 = module_0.possible_change(int_0, int_0)
    assert var_1 == 0
    var_2 = module_0.possible_change(int_0, int_0)
    assert var_2 == 0
    var_3 = module_0.possible_change(int_0, int_0)
    assert var_3 == 0
    complex_0 = 1924.65 + 3153j
    int_1 = -941
    tuple_0 = (complex_0, int_1)
    var_4 = module_0.possible_change(tuple_0, var_1)
    assert var_4 == 1


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 1460
    dict_0 = {int_0: int_0}
    module_0.possible_change(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -2354
    str_0 = ""
    var_0 = module_0.possible_change(str_0, int_0)
    assert var_0 == 0
    module_0.possible_change(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.possible_change(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    var_0 = module_0.possible_change(bool_0, bool_0)
    assert var_0 == 1
    none_type_0 = None
    var_1 = module_0.possible_change(none_type_0, var_0)
    assert var_1 == 0
    var_2 = module_0.possible_change(none_type_0, bool_0)
    assert var_2 == 1
    list_0 = [bool_0]
    module_1.object(*list_0)
