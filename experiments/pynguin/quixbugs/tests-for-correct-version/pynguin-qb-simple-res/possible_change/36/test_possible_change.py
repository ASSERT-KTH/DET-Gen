# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import possible_change as module_0


def test_case_0():
    bool_0 = False
    bool_1 = False
    bool_2 = False
    dict_0 = {bool_0: bool_1, bool_2: bool_2, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    var_0 = module_0.possible_change(tuple_0, bool_1)
    assert var_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "7'ef{;>P"
    module_0.possible_change(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -2326
    bytes_0 = b"\xe3+BS\xc8\x15\xfa\x8f\xf5\x9b\xc7\xb6\xd7"
    tuple_0 = (int_0, bytes_0)
    var_0 = module_0.possible_change(tuple_0, int_0)
    assert var_0 == 0
    var_1 = module_0.possible_change(var_0, var_0)
    assert var_1 == 1
    none_type_0 = None
    module_0.possible_change(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.possible_change(bool_0, bool_0)
    assert var_0 == 1
    module_0.possible_change(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    var_0 = module_0.possible_change(list_0, bool_0)
    assert var_0 == 2
    var_1 = module_0.possible_change(list_0, bool_0)
    assert var_1 == 2
    module_0.possible_change(var_0, var_1)
