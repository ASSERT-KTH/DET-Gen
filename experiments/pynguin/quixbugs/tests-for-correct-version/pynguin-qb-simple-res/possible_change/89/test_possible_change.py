# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import possible_change as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    var_0 = module_0.possible_change(bool_0, bool_0)
    assert var_0 == 1
    bool_1 = True
    tuple_0 = (bool_1,)
    module_0.possible_change(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"?\x9cTk\xca\xf2?\x9b\x08\x8d:\x95\xd6\x03E"
    module_0.possible_change(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -514
    var_0 = module_0.possible_change(int_0, int_0)
    assert var_0 == 0
    var_1 = module_0.possible_change(var_0, var_0)
    assert var_1 == 1
    var_2 = module_0.possible_change(var_0, int_0)
    assert var_2 == 0
    var_3 = module_0.possible_change(var_0, int_0)
    assert var_3 == 0
    none_type_0 = None
    var_4 = module_0.possible_change(var_3, var_3)
    assert var_4 == 1
    module_0.possible_change(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 3350
    module_0.possible_change(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    var_0 = module_0.possible_change(bool_0, bool_0)
    assert var_0 == 1
    var_1 = module_0.possible_change(bool_0, bool_0)
    assert var_1 == 1
    bool_1 = False
    var_2 = module_0.possible_change(bool_0, var_1)
    assert var_2 == 0
    var_3 = module_0.possible_change(var_1, var_2)
    assert var_3 == 1
    var_4 = module_0.possible_change(bool_0, bool_0)
    assert var_4 == 1
    dict_0 = {bool_1: bool_1, bool_1: bool_1}
    var_5 = module_0.possible_change(bool_0, var_1)
    assert var_5 == 0
    var_6 = module_0.possible_change(var_2, var_3)
    assert var_6 == 0
    var_7 = module_0.possible_change(dict_0, var_5)
    assert var_7 == 1
    int_0 = 3276
    module_0.possible_change(int_0, int_0)
