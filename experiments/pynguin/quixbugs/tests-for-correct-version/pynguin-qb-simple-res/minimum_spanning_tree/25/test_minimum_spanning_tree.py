# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_spanning_tree as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.minimum_spanning_tree(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.minimum_spanning_tree(tuple_0)
    var_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.minimum_spanning_tree(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    dict_0 = {tuple_0: bool_0}
    var_0 = module_0.minimum_spanning_tree(dict_0)
    module_0.minimum_spanning_tree(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    dict_0 = {tuple_0: bool_0}
    var_0 = module_0.minimum_spanning_tree(dict_0)
    var_1 = module_1.Node(dict_0, predecessors=tuple_0, incoming_nodes=var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value == {(True, False): True}
    assert var_1.successor is None
    assert var_1.successors == []
    assert var_1.predecessors == (True, False)
    assert var_1.incoming_nodes == {(True, False)}
    assert var_1.outgoing_nodes == []
    tuple_1 = ()
    var_2 = module_0.minimum_spanning_tree(tuple_1)
    str_0 = "\nq:&2w{/d!y"
    module_0.minimum_spanning_tree(str_0)
