# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_spanning_tree as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.minimum_spanning_tree(dict_0)


def test_case_1():
    bytes_0 = b",\xb5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.minimum_spanning_tree(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x1b\x02\xab`j\xd1\xfa\xf2\xdf\xdf\xf0"
    module_0.minimum_spanning_tree(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: tuple_0}
    var_0 = module_0.minimum_spanning_tree(dict_0)
    set_0 = set()
    bool_1 = False
    list_0 = [set_0, set_0, set_0, bool_1]
    node_0 = module_1.Node(successor=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == [{*()}, {*()}, {*()}, False]
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    node_0.successors()
