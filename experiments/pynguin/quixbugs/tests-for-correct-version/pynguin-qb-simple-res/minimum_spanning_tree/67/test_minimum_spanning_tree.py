# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_spanning_tree as module_0
import node as module_1


def test_case_0():
    str_0 = ""
    var_0 = module_0.minimum_spanning_tree(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xaf\xac\xe42\x84\x84I\x9a"
    module_0.minimum_spanning_tree(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ""
    var_0 = module_0.minimum_spanning_tree(str_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.minimum_spanning_tree(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "_T"
    var_0 = module_1.Node(successors=str_0, predecessors=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == "_T"
    assert var_0.predecessors == "_T"
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    dict_0 = {str_0: str_0, str_0: str_0}
    var_1 = module_0.minimum_spanning_tree(dict_0)
    module_0.minimum_spanning_tree(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 1218
    tuple_0 = (int_0, int_0)
    dict_0 = {tuple_0: int_0, tuple_0: tuple_0}
    var_0 = module_0.minimum_spanning_tree(dict_0)
    str_0 = "~*"
    module_0.minimum_spanning_tree(str_0)
