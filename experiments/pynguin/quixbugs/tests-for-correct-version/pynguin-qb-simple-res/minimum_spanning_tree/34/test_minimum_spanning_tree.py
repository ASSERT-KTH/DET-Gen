# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_spanning_tree as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"i\xbf\xbc\xba\xfa\x8aoajke\x12J\xe92\xc4w\x82"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.minimum_spanning_tree(dict_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_0.minimum_spanning_tree(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.minimum_spanning_tree(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "b$"
    var_0 = module_1.Node(str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == "b$"
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    dict_0 = {str_0: var_0, str_0: var_0, str_0: str_0, var_0: str_0, str_0: str_0}
    module_0.minimum_spanning_tree(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: bool_0, tuple_0: tuple_0}
    list_0 = [dict_0, dict_0, dict_0, bool_0]
    var_0 = module_0.minimum_spanning_tree(dict_0)
    module_0.minimum_spanning_tree(list_0)
