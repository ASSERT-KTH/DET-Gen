# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_spanning_tree as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.minimum_spanning_tree(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    var_0 = module_0.minimum_spanning_tree(list_0)
    bool_0 = True
    list_1 = [bool_0, bool_0]
    module_0.minimum_spanning_tree(list_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.minimum_spanning_tree(node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xfa\x9d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.minimum_spanning_tree(dict_0)
    list_0 = []
    var_1 = module_0.minimum_spanning_tree(list_0)
    var_1.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, tuple_0}
    dict_0 = {tuple_0: bool_0, bool_0: set_0, tuple_0: set_0}
    module_0.minimum_spanning_tree(dict_0)
