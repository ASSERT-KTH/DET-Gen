# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_spanning_tree as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.minimum_spanning_tree(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "vI\njC"
    module_0.minimum_spanning_tree(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    var_0 = module_0.minimum_spanning_tree(dict_0)
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.minimum_spanning_tree(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ";l"
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: str_0}
    var_0 = module_0.minimum_spanning_tree(dict_0)
    module_0.minimum_spanning_tree(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 2642
    tuple_0 = (int_0, int_0)
    dict_0 = {tuple_0: tuple_0}
    var_0 = module_0.minimum_spanning_tree(dict_0)
    dict_1 = {}
    var_1 = module_0.minimum_spanning_tree(dict_1)
    bool_0 = False
    tuple_1 = (bool_0,)
    var_2 = module_1.Node(dict_1, var_1, tuple_1, var_1, var_1, dict_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value == {}
    assert var_2.successor == {*()}
    assert var_2.successors == (False,)
    assert var_2.predecessors == {*()}
    assert var_2.incoming_nodes == {*()}
    assert var_2.outgoing_nodes == {}
    var_1.successor()
