# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sqrt as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    float_0 = -668.2
    module_0.sqrt(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    tuple_0 = (bool_0,)
    var_0 = module_0.sqrt(bool_0, bool_0)
    assert var_0 == pytest.approx(0.5, abs=0.01, rel=0.01)
    module_0.sqrt(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.sqrt(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 1520
    var_0 = module_0.sqrt(int_0, int_0)
    assert var_0 == pytest.approx(42.01694154229679, abs=0.01, rel=0.01)
    int_1 = 85
    var_1 = module_0.sqrt(var_0, int_0)
    assert var_1 == pytest.approx(21.008470771148396, abs=0.01, rel=0.01)
    var_2 = module_0.sqrt(var_0, var_0)
    assert var_2 == pytest.approx(7.5782686769274346, abs=0.01, rel=0.01)
    var_3 = module_0.sqrt(var_0, int_1)
    assert var_3 == pytest.approx(7.5782686769274346, abs=0.01, rel=0.01)
    var_4 = module_0.sqrt(var_0, var_1)
    assert var_4 == pytest.approx(7.5782686769274346, abs=0.01, rel=0.01)
    var_5 = module_0.sqrt(var_0, int_1)
    assert var_5 == pytest.approx(7.5782686769274346, abs=0.01, rel=0.01)
    var_6 = module_0.sqrt(int_1, int_1)
    assert var_6 == pytest.approx(13.035112359550562, abs=0.01, rel=0.01)
    var_7 = module_0.sqrt(var_5, var_3)
    assert var_7 == pytest.approx(3.7891343384637173, abs=0.01, rel=0.01)
    var_8 = module_0.sqrt(var_2, var_6)
    assert var_8 == pytest.approx(3.7891343384637173, abs=0.01, rel=0.01)
    str_0 = "*"
    module_0.sqrt(str_0, var_0)
