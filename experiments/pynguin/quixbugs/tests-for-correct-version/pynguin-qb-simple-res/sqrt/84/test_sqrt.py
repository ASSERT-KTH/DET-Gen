# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sqrt as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    var_0 = module_0.sqrt(bool_0, bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = module_0.sqrt(var_0, bool_0)
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    float_0 = 29.5
    var_2 = module_0.sqrt(float_0, float_0)
    assert var_2 == pytest.approx(5.9486940298507465, abs=0.01, rel=0.01)
    var_3 = module_0.sqrt(float_0, var_2)
    assert var_3 == pytest.approx(5.9486940298507465, abs=0.01, rel=0.01)
    var_4 = module_0.sqrt(var_0, var_0)
    assert var_4 == pytest.approx(0.0, abs=0.01, rel=0.01)
    none_type_0 = None
    module_0.sqrt(var_2, none_type_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.sqrt(bool_0, bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = module_0.sqrt(bool_0, bool_0)
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = module_0.sqrt(var_0, var_0)
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    bool_1 = False
    var_3 = module_0.sqrt(bool_1, bool_1)
    assert var_3 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_4 = module_0.sqrt(var_3, bool_1)
    assert var_4 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_5 = module_0.sqrt(var_4, bool_0)
    assert var_5 == pytest.approx(0.0, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    none_type_0 = None
    module_0.sqrt(bool_0, none_type_0)
