# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -1455.08185
    tuple_0 = (float_0,)
    module_0.shortest_paths(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ""
    var_0 = module_0.shortest_paths(str_0, str_0)
    var_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.shortest_paths(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    var_0 = module_0.shortest_paths(tuple_1, tuple_0)
    module_0.shortest_paths(tuple_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    var_0 = module_0.shortest_paths(tuple_1, tuple_0)
    var_1 = module_1.Node(var_0, tuple_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value == {(True, ()): 0}
    assert var_1.successor == ()
    assert var_1.successors == []
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    var_2 = module_0.shortest_paths(bool_0, var_0)
    bytes_0 = b"1\x02\xaau\xcf1"
    module_0.shortest_paths(bool_0, bytes_0)
