# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"x\xc7)\xf0:I`\xb6\x1e\x84\xc0\xc9\x1f\xb0\xfe\x17"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.shortest_paths(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.shortest_paths(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    complex_0 = -879.46 + 464.044j
    list_0 = [complex_0, complex_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.shortest_paths(none_type_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [bool_0, tuple_0, bool_0, bool_0]
    dict_0 = {tuple_0: bool_0, tuple_0: bool_0, tuple_0: bool_0, tuple_0: list_0}
    module_0.shortest_paths(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: bool_0, tuple_0: bool_0}
    var_0 = module_0.shortest_paths(tuple_0, dict_0)
    node_0 = module_1.Node(
        bool_0, predecessors=dict_0, incoming_nodes=bool_0, outgoing_nodes=dict_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is True
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == {(True, True): True}
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes == {(True, True): True}
    node_0.successors()
