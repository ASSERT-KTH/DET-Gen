# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "gv1<v]5{Gqql.60JQQ"
    module_0.shortest_paths(str_0, str_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ""
    str_1 = "5\x0c"
    var_0 = module_0.shortest_paths(str_1, str_0)
    module_0.shortest_paths(str_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ""
    str_1 = "\x0c\x0c"
    var_0 = module_0.shortest_paths(str_1, str_0)
    var_1 = module_0.shortest_paths(str_1, var_0)
    node_0 = module_1.Node(outgoing_nodes=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {"\x0c\x0c": 0}
    node_0.successor()
