# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)
    node_0 = module_1.Node(tuple_0, var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ()
    assert node_0.successor == {(): 0}
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "Z\x0bisp\x0bRJb\x0cW3b"
    module_0.shortest_paths(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 1874
    module_0.shortest_paths(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)
    tuple_1 = (tuple_0, tuple_0)
    set_0 = {tuple_1, tuple_1}
    none_type_0 = None
    module_0.shortest_paths(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)
    tuple_1 = (tuple_0, tuple_0)
    set_0 = module_0.shortest_paths(tuple_1, tuple_0)
    none_type_0 = None
    var_1 = module_0.shortest_paths(none_type_0, set_0)
    module_0.shortest_paths(var_1, none_type_0)
