# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


def test_case_0():
    bytes_0 = b""
    var_0 = module_0.shortest_paths(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_0.shortest_paths(none_type_0, tuple_0)
    module_0.shortest_paths(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x87\xb8"
    list_0 = []
    var_0 = module_0.shortest_paths(bytes_0, list_0)
    module_0.shortest_paths(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -1487.7845851745858
    bytes_0 = b"\xb8\xb8"
    tuple_0 = (float_0, float_0, bytes_0)
    list_0 = [tuple_0, bytes_0]
    list_1 = [list_0]
    node_0 = module_1.Node(successor=list_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.successor) == 1
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.shortest_paths(bytes_0, list_1)
    var_1 = module_0.shortest_paths(tuple_0, var_0)
    bool_0 = False
    module_0.shortest_paths(tuple_0, bool_0)
