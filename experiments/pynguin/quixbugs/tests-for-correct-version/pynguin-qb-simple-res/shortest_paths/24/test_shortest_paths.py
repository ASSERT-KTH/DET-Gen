# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = ",.d;?"
    tuple_0 = (bool_0, list_0, str_0, bool_0)
    module_0.shortest_paths(tuple_0, str_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"'\xff"
    set_0 = {bytes_0, bytes_0}
    module_0.shortest_paths(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    int_0 = -200
    tuple_1 = (tuple_0, int_0)
    var_0 = module_0.shortest_paths(tuple_1, tuple_0)
    bytes_0 = b'>2\x0f6b\x99"$cZ'
    module_0.shortest_paths(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)
    int_0 = -200
    tuple_1 = (tuple_0, int_0)
    var_1 = module_0.shortest_paths(tuple_1, tuple_0)
    var_2 = module_0.shortest_paths(tuple_0, var_1)
    var_3 = module_1.Node(successor=tuple_1, outgoing_nodes=tuple_1)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "node.Node"
    assert var_3.value is None
    assert var_3.successor == ((), -200)
    assert var_3.successors == []
    assert var_3.predecessors == []
    assert var_3.incoming_nodes == []
    assert var_3.outgoing_nodes == ((), -200)
    var_4 = module_0.shortest_paths(tuple_0, tuple_0)
    bytes_0 = b'>2\x0f6b\x99"$cZ'
    module_0.shortest_paths(bytes_0, var_1)
