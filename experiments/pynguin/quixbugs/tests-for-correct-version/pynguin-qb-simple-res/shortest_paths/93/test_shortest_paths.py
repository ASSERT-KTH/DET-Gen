# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 4635
    bool_0 = False
    dict_0 = {}
    var_0 = module_0.shortest_paths(bool_0, dict_0)
    module_0.shortest_paths(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"=;0\x93\x9dJ"
    bytes_1 = b"D\xe2m\xbe\x98\x13"
    module_0.shortest_paths(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 4635
    module_0.shortest_paths(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_0 = module_0.shortest_paths(bool_0, list_0)
    node_0 = module_1.Node(list_0, successors=var_0, predecessors=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == [(False, False)]
    assert node_0.successor is None
    assert node_0.successors == {False: 0}
    assert node_0.predecessors is False
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_paths(node_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    dict_0 = {tuple_0: bool_0, tuple_0: tuple_0, tuple_0: bool_0}
    var_0 = module_0.shortest_paths(tuple_0, dict_0)
    none_type_0 = None
    var_1 = module_0.shortest_paths(bool_0, list_0)
    node_0 = module_1.Node(list_0, successors=none_type_0, predecessors=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == [(False, False)]
    assert node_0.successor is None
    assert node_0.successors is None
    assert node_0.predecessors is False
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_paths(node_0, list_0)
