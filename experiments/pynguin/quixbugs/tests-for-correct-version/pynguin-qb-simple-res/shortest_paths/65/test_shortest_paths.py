# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)
    module_0.shortest_paths(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_paths(node_0, node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    bytes_0 = b"\x8b\x15"
    var_0 = module_0.shortest_paths(bytes_0, tuple_0)
    module_0.shortest_paths(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    bytes_0 = b"\x8b\x8b"
    var_0 = module_0.shortest_paths(bytes_0, tuple_0)
    var_1 = module_0.shortest_paths(tuple_0, var_0)
    var_0.successor()
