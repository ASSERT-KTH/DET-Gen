# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


def test_case_0():
    str_0 = ""
    var_0 = module_0.shortest_paths(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 1771
    set_0 = {int_0}
    module_0.shortest_paths(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "j("
    set_0 = set()
    var_0 = module_0.shortest_paths(str_0, set_0)
    tuple_0 = (str_0,)
    module_0.shortest_paths(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "j("
    set_0 = set()
    var_0 = module_0.shortest_paths(str_0, set_0)
    module_0.shortest_paths(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "hh"
    set_0 = set()
    var_0 = module_0.shortest_paths(str_0, set_0)
    var_1 = module_0.shortest_paths(str_0, var_0)
    node_0 = module_1.Node(successor=str_0, predecessors=var_1, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "hh"
    assert node_0.successors == []
    assert (
        f"{type(node_0.predecessors).__module__}.{type(node_0.predecessors).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_0.predecessors) == 2
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {*()}
    node_0.successors()
