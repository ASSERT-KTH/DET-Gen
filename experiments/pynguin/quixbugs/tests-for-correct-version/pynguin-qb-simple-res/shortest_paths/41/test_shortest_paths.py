# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_0.shortest_paths(none_type_0, tuple_0)
    module_0.shortest_paths(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -3917
    module_0.shortest_paths(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "^\r"
    tuple_0 = ()
    var_0 = module_0.shortest_paths(str_0, tuple_0)
    bytes_0 = b"l\x07\x94S\x15"
    module_0.shortest_paths(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    node_0 = module_1.Node(successors=tuple_0, incoming_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == ()
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ()
    assert node_0.outgoing_nodes == []
    node_1 = module_1.Node(incoming_nodes=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert node_1.outgoing_nodes == []
    str_0 = "@@"
    tuple_1 = ()
    var_0 = module_0.shortest_paths(str_0, tuple_1)
    var_1 = module_0.shortest_paths(str_0, var_0)
    module_0.shortest_paths(var_1, tuple_1)
