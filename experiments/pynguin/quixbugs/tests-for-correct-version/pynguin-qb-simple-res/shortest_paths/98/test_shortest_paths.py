# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"-\x96\x8b-\x01RX\x98\xa9\x8b\xa4\xb6\xfb"
    module_0.shortest_paths(bytes_0, bytes_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.shortest_paths(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ""
    tuple_0 = (str_0, str_0)
    set_0 = {tuple_0}
    var_0 = module_0.shortest_paths(str_0, set_0)
    node_0 = module_1.Node(str_0, set_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ""
    assert node_0.successor == {("", "")}
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ""
    assert node_0.outgoing_nodes == []
    module_0.shortest_paths(node_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ""
    tuple_0 = (str_0, str_0)
    set_0 = module_0.shortest_paths(tuple_0, str_0)
    var_0 = module_0.shortest_paths(str_0, set_0)
    node_0 = module_1.Node(str_0, set_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ""
    assert node_0.successor == {("", ""): 0}
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ""
    assert node_0.outgoing_nodes == []
    var_1 = module_0.shortest_paths(node_0, set_0)
    none_type_0 = None
    module_0.shortest_paths(str_0, none_type_0)
