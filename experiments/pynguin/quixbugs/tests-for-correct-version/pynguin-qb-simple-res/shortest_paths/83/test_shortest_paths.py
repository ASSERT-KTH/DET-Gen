# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.shortest_paths(tuple_0, tuple_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_paths(node_0, node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    bytes_0 = b"/\x08"
    var_0 = module_0.shortest_paths(bytes_0, list_0)
    bool_0 = True
    module_0.shortest_paths(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    list_0 = []
    bytes_0 = b"\x08\x08"
    var_0 = module_0.shortest_paths(bytes_0, list_0)
    var_1 = module_0.shortest_paths(none_type_0, var_0)
    var_0.successor()
