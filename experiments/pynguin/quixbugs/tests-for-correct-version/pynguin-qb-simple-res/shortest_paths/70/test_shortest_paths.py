# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "2D4~&di-4ciy.d<T8"
    list_0 = [str_0, str_0, str_0]
    module_0.shortest_paths(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    module_0.shortest_paths(dict_0, dict_0)


def test_case_2():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x83\x9e"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    node_0 = module_1.Node(set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {b"\x83\x9e"}
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.shortest_paths(node_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    bytes_0 = b"\x83\x9e"
    var_0 = module_0.shortest_paths(bytes_0, tuple_0)
    module_0.shortest_paths(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    bytes_0 = b"\xc0\xc0"
    var_0 = module_0.shortest_paths(bytes_0, tuple_0)
    var_1 = module_0.shortest_paths(bytes_0, var_0)
    str_0 = "2D4~&di-4ciy.d<T8"
    tuple_1 = ()
    var_2 = module_0.shortest_paths(str_0, tuple_1)
    list_0 = [var_2, var_2, str_0]
    module_0.shortest_paths(list_0, var_2)
