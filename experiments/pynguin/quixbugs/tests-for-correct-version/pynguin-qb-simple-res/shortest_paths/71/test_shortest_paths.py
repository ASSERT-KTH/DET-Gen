# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)
    bool_0 = True
    module_0.shortest_paths(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_0 = 2490.6321 + 2155.2j
    module_0.shortest_paths(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "9!"
    set_0 = {str_0, str_0}
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)
    module_0.shortest_paths(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "9!"
    dict_0 = {str_0: str_0}
    module_0.shortest_paths(str_0, dict_0)


def test_case_5():
    str_0 = "44"
    tuple_0 = ()
    var_0 = module_0.shortest_paths(str_0, tuple_0)
    var_1 = module_0.shortest_paths(str_0, var_0)
    var_2 = module_0.shortest_paths(tuple_0, var_0)
    bool_0 = True
    node_0 = module_1.Node(predecessors=tuple_0, incoming_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == ()
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes == []
    var_3 = module_0.shortest_paths(bool_0, tuple_0)
