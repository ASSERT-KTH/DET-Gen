# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import builtins as module_1
import node as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    tuple_0 = ()
    object_0 = module_0.shortest_paths(tuple_0, tuple_0)
    module_0.shortest_paths(object_0, object_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_0.shortest_paths(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    object_0 = module_1.object()
    module_0.shortest_paths(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    node_0 = module_2.Node(successor=dict_0, predecessors=dict_0, incoming_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {}
    assert node_0.successors == []
    assert node_0.predecessors == {}
    assert node_0.incoming_nodes == {}
    assert node_0.outgoing_nodes == []
    bool_0 = True
    bytes_0 = b"M\x0b\x98\x1b\xcb\x81\x16\xfe\xc9\xe5]\xd9\xc0u\xfa\xb7t6\xea."
    tuple_0 = (bool_0, bytes_0)
    var_0 = module_0.shortest_paths(tuple_0, dict_0)
    tuple_1 = (tuple_0,)
    module_0.shortest_paths(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    bytes_0 = b"M\x0b\x98\x1b\xcb\x81\x16\xfe\xc9\xe5]\xd9\xc0u\xfa\xb7t6\xea."
    tuple_0 = (bytes_0, bytes_0)
    var_0 = module_0.shortest_paths(tuple_0, dict_0)
    str_0 = "gQn&<oR|@c&N"
    var_1 = module_0.shortest_paths(str_0, var_0)
    module_0.shortest_paths(var_0, var_0)
