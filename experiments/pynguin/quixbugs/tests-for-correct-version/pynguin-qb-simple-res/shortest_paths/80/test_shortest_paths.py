# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_paths as module_0
import node as module_1


def test_case_0():
    bytes_0 = b""
    var_0 = module_0.shortest_paths(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    str_0 = '2"GH~&18eo'
    module_0.shortest_paths(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -3766.0703
    module_0.shortest_paths(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    node_0 = module_1.Node(
        successors=list_0, predecessors=bool_0, incoming_nodes=list_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == [True, True]
    assert node_0.predecessors is True
    assert node_0.incoming_nodes == [True, True]
    assert node_0.outgoing_nodes == []
    tuple_0 = (list_0, list_0)
    module_0.shortest_paths(node_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -6347
    tuple_0 = (int_0, int_0)
    dict_0 = {tuple_0: tuple_0}
    str_0 = "Y"
    module_0.shortest_paths(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -6347
    tuple_0 = (int_0, int_0)
    dict_0 = {tuple_0: int_0}
    str_0 = "Y"
    complex_0 = -147.45781 + 1507.496j
    var_0 = module_0.shortest_paths(str_0, dict_0)
    module_0.shortest_paths(dict_0, complex_0)
