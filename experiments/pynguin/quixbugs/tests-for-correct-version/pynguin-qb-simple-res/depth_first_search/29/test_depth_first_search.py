# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    node_0 = module_1.Node(bool_0, successors=bool_0, outgoing_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is False
    assert node_0.successor is None
    assert node_0.successors is False
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is False
    node_1 = module_1.Node(predecessors=node_0, incoming_nodes=bool_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "node.Node"
    )
    assert node_1.incoming_nodes is False
    assert node_1.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_1, node_0)
    assert var_0 is False
    var_1 = module_0.depth_first_search(node_1, node_1)
    assert var_1 is True
    var_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "GXP/~vN&:G#81"
    none_type_0 = None
    module_0.depth_first_search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xabrI\xfa\x12M\xe2\xf5\x89\x86u\x14%\xaa2\xe8\xe8"
    node_0 = module_1.Node(bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xabrI\xfa\x12M\xe2\xf5\x89\x86u\x14%\xaa2\xe8\xe8"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert (
        node_0.incoming_nodes == b"\xabrI\xfa\x12M\xe2\xf5\x89\x86u\x14%\xaa2\xe8\xe8"
    )
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    node_1 = module_1.Node(
        successor=node_0, successors=bytes_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successors == b"\xabrI\xfa\x12M\xe2\xf5\x89\x86u\x14%\xaa2\xe8\xe8"
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes is None
    var_0 = module_0.depth_first_search(node_0, node_1)
    assert var_0 is False
    var_1 = module_0.depth_first_search(node_0, bytes_0)
    assert var_1 is False
    bool_0 = True
    var_2 = module_0.depth_first_search(bool_0, bool_0)
    assert var_2 is True
    module_0.depth_first_search(node_1, var_0)
