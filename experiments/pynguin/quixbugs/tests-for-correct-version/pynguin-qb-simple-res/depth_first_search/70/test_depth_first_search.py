# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.depth_first_search(none_type_0, dict_0)


def test_case_2():
    bool_0 = False
    node_0 = module_1.Node(
        successor=bool_0, incoming_nodes=bool_0, outgoing_nodes=bool_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is False
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is False
    assert node_0.outgoing_nodes is False
    var_0 = module_0.depth_first_search(node_0, bool_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    tuple_0 = (bool_0,)
    node_0 = module_1.Node(successors=tuple_0, incoming_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == (False,)
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == (False,)
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    module_0.depth_first_search(node_0, none_type_0)
