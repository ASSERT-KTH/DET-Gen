# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import depth_first_search as module_1
import node as module_2


def test_case_0():
    object_0 = module_0.object()
    var_0 = module_1.depth_first_search(object_0, object_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "y}qr\rhdn8~A` F1+=\x0c\"'"
    none_type_0 = None
    module_1.depth_first_search(str_0, none_type_0)


def test_case_2():
    bool_0 = True
    none_type_0 = None
    node_0 = module_2.Node(
        predecessors=bool_0, incoming_nodes=bool_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is True
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes is None
    var_0 = module_1.depth_first_search(node_0, bool_0)
    assert var_0 is False
    str_0 = "G"
    var_1 = module_1.depth_first_search(str_0, str_0)
    assert var_1 is True


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"h\xe2\xa9\x9fS\x9f\xdd\xfc\xd7\xdd\x8e\xbeD"
    var_0 = module_1.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    none_type_0 = None
    var_1 = module_2.Node(successor=var_0, successors=bytes_0, predecessors=none_type_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is True
    assert var_1.successors == b"h\xe2\xa9\x9fS\x9f\xdd\xfc\xd7\xdd\x8e\xbeD"
    assert var_1.predecessors is None
    assert var_1.incoming_nodes == []
    assert var_1.outgoing_nodes == []
    none_type_1 = None
    var_2 = module_1.depth_first_search(none_type_1, none_type_1)
    assert var_2 is True
    var_3 = module_1.depth_first_search(var_2, var_2)
    assert var_3 is True
    var_4 = module_1.depth_first_search(none_type_1, none_type_1)
    assert var_4 is True
    module_1.depth_first_search(var_1, var_2)
