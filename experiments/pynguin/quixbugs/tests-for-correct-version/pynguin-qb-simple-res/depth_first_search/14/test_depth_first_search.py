# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    node_0 = module_1.Node(outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is None
    list_0 = [node_0, node_0, none_type_0]
    node_1 = module_1.Node(successors=list_0, predecessors=none_type_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 3
    assert node_1.predecessors is None
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_1, none_type_0)
    assert var_0 is True
    var_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    list_0 = []
    module_0.depth_first_search(none_type_0, list_0)
