# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    node_0 = module_1.Node(outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is None
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False
    var_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '"(#Vp5TfR'
    list_0 = []
    module_0.depth_first_search(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xfa\xc8kV\xf7{Hl\xf5\x13\x9d\xfdQ.\xac\xac*"
    none_type_0 = None
    bytes_1 = b"\x9dFyCE\xc8\xbe\x16M\xf5\xfb\xefjh\xa8!\xbfe\xf7"
    node_0 = module_1.Node(
        successor=none_type_0, successors=bytes_1, outgoing_nodes=bytes_1
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x9dFyCE\xc8\xbe\x16M\xf5\xfb\xefjh\xa8!\xbfe\xf7"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"\x9dFyCE\xc8\xbe\x16M\xf5\xfb\xefjh\xa8!\xbfe\xf7"
    module_0.depth_first_search(node_0, bytes_0)
