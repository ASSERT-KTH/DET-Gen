# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


def test_case_1():
    int_0 = 1462
    list_0 = [int_0, int_0, int_0]
    node_0 = module_1.Node(predecessors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == [1462, 1462, 1462]
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_1 = [node_0, node_0]
    node_1 = module_1.Node(successors=list_1, predecessors=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 2
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "node.Node"
    )
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_1, list_0)
    assert var_0 is False
    str_0 = "[6\\`6i94A(VQ?hu0e"
    var_1 = module_0.depth_first_search(node_1, var_0)
    assert var_1 is False
    var_2 = module_0.depth_first_search(str_0, str_0)
    assert var_2 is True
