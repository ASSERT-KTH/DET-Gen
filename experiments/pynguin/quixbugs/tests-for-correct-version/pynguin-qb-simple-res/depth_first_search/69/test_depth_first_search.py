# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


def test_case_1():
    bool_0 = False
    node_0 = module_1.Node(bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is False
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, bool_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    bool_1 = False
    module_0.depth_first_search(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    bytes_0 = b"\x17\x02\x82S\xec\xe1\xbb\xb3\xbf\xf2\xb5"
    none_type_0 = None
    node_0 = module_1.Node(
        dict_0, dict_0, bytes_0, incoming_nodes=none_type_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {}
    assert node_0.successor == {}
    assert node_0.successors == b"\x17\x02\x82S\xec\xe1\xbb\xb3\xbf\xf2\xb5"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes is None
    module_0.depth_first_search(node_0, none_type_0)
