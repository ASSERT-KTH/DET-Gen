# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


def test_case_1():
    int_0 = -734
    node_0 = module_1.Node(int_0, int_0, incoming_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == -734
    assert node_0.successor == -734
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == -734
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, int_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    bytes_0 = b""
    module_0.depth_first_search(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    complex_0 = 168 + 2597j
    list_0 = [bool_0, bool_0, bool_0, complex_0]
    none_type_0 = None
    node_0 = module_1.Node(successors=list_0, predecessors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == [False, False, False, (168 + 2597j)]
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.depth_first_search(node_0, complex_0)
