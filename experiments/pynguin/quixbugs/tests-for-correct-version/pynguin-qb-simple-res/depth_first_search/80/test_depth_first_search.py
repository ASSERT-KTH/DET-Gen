# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "4MmOfsHLJwo%"
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, str_0)
    assert var_0 is False
    var_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    tuple_0 = ()
    module_0.depth_first_search(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "+\\y]{|ml>Rj&lw"
    var_0 = module_0.depth_first_search(str_0, str_0)
    assert var_0 is True
    node_0 = module_1.Node(
        str_0, successors=str_0, predecessors=str_0, incoming_nodes=var_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "+\\y]{|ml>Rj&lw"
    assert node_0.successor is None
    assert node_0.successors == "+\\y]{|ml>Rj&lw"
    assert node_0.predecessors == "+\\y]{|ml>Rj&lw"
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes == []
    module_0.depth_first_search(node_0, str_0)
