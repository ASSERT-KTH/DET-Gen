# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    float_0 = -1018.33
    module_0.depth_first_search(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False
    object_0 = module_2.object()
    module_0.depth_first_search(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "&66I[$vz48"
    var_0 = module_0.depth_first_search(str_0, str_0)
    assert var_0 is True
    int_0 = 1732
    bytes_0 = b"\x87\xed\xda"
    none_type_0 = None
    node_0 = module_1.Node(
        int_0, int_0, bytes_0, incoming_nodes=none_type_0, outgoing_nodes=int_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == 1732
    assert node_0.successor == 1732
    assert node_0.successors == b"\x87\xed\xda"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == 1732
    module_0.depth_first_search(node_0, bytes_0)
