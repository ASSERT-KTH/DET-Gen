# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    float_0 = -1871.496977
    var_0 = module_0.depth_first_search(float_0, float_0)
    assert var_0 is True
    module_0.depth_first_search(bool_0, var_0)


def test_case_2():
    dict_0 = {}
    node_0 = module_1.Node(successor=dict_0, successors=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {}
    assert node_0.successors == {}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    str_0 = "KB\n`}e}@c"
    var_0 = module_0.depth_first_search(node_0, str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"X\x9b\xe2Vl8N\xbb$Kb\x0e"
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"X\x9b\xe2Vl8N\xbb$Kb\x0e"
    assert node_0.successors == b"X\x9b\xe2Vl8N\xbb$Kb\x0e"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.depth_first_search(node_0, bytes_0)
