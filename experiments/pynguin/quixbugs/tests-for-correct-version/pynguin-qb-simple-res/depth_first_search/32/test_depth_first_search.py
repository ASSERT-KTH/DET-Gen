# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


def test_case_1():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    node_0 = module_1.Node(predecessors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    node_1 = module_1.Node()
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_1 = module_0.depth_first_search(node_0, var_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -255
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(int_0, int_0)
    assert var_1 is True
    module_0.depth_first_search(var_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xb5\xa5\xe5\x15\x0b+\xccN\xfd\x0f\xc4"
    node_0 = module_1.Node(successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\xb5\xa5\xe5\x15\x0b+\xccN\xfd\x0f\xc4"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    node_1 = module_1.Node(predecessors=none_type_0, incoming_nodes=none_type_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors is None
    assert node_1.incoming_nodes is None
    assert node_1.outgoing_nodes == []
    set_0 = {node_1, bytes_0, none_type_0}
    node_2 = module_1.Node(successors=set_0, predecessors=node_1)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert node_2.value is None
    assert node_2.successor is None
    assert (
        f"{type(node_2.successors).__module__}.{type(node_2.successors).__qualname__}"
        == "builtins.set"
    )
    assert len(node_2.successors) == 3
    assert (
        f"{type(node_2.predecessors).__module__}.{type(node_2.predecessors).__qualname__}"
        == "node.Node"
    )
    assert node_2.incoming_nodes == []
    assert node_2.outgoing_nodes == []
    node_3 = module_1.Node(
        successor=node_1, predecessors=none_type_0, incoming_nodes=set_0
    )
    assert f"{type(node_3).__module__}.{type(node_3).__qualname__}" == "node.Node"
    assert node_3.value is None
    assert (
        f"{type(node_3.successor).__module__}.{type(node_3.successor).__qualname__}"
        == "node.Node"
    )
    assert node_3.successors == []
    assert node_3.predecessors is None
    assert (
        f"{type(node_3.incoming_nodes).__module__}.{type(node_3.incoming_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_3.incoming_nodes) == 3
    assert node_3.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_2, none_type_0)
