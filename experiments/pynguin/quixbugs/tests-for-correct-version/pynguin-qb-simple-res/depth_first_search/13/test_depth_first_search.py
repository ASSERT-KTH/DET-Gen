# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"\x13\xe8\x99\x9f"
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "hY\nzktNY$:"
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    node_0 = module_1.Node(successors=str_0, predecessors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "hY\nzktNY$:"
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.depth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -2025
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(int_0, int_0)
    assert var_1 is True
    module_0.depth_first_search(var_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ""
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_1.Node(incoming_nodes=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == ""
    assert var_0.outgoing_nodes == []
    var_1 = module_0.depth_first_search(str_0, str_0)
    assert var_1 is True
    var_2 = module_0.depth_first_search(var_0, str_0)
    assert var_2 is False
    module_0.depth_first_search(var_2, var_0)
