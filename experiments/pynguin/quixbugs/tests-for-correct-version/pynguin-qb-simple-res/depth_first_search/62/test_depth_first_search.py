# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    str_0 = "?<\x0b#`K\x0c"
    var_0 = module_0.depth_first_search(str_0, str_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    list_0 = [bool_0]
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True
    node_0 = module_1.Node(
        successors=list_0, predecessors=list_0, outgoing_nodes=list_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == [True]
    assert node_0.predecessors == [True]
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == [True]
    none_type_0 = None
    module_0.depth_first_search(node_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0, incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False
    node_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    object_0 = module_2.object()
    module_0.depth_first_search(tuple_0, object_0)
