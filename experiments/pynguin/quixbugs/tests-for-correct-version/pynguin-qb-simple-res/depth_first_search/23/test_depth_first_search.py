# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    int_0 = 1430
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 4128
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(int_0, int_0)
    assert var_1 is True
    module_0.depth_first_search(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    node_0 = module_1.Node(successor=bool_0, outgoing_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is True
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is True
    none_type_0 = None
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False
    var_1 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_1 is True
    var_1.successor()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    bytes_0 = b"\x9dS\x1b9\xbc\x88\xc6\xd0\xb7\xb4"
    node_0 = module_1.Node(bool_0, successors=bytes_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is True
    assert node_0.successor is None
    assert node_0.successors == b"\x9dS\x1b9\xbc\x88\xc6\xd0\xb7\xb4"
    assert node_0.predecessors == b"\x9dS\x1b9\xbc\x88\xc6\xd0\xb7\xb4"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    module_0.depth_first_search(node_0, none_type_0)
