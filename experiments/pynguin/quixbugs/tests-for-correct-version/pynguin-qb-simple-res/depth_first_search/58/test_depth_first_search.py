# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    int_0 = 1809
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xbdXw=w\xe1\xcb\xca\xcc\x18~\x9b\xcaT"
    node_0 = module_1.Node(bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xbdXw=w\xe1\xcb\xca\xcc\x18~\x9b\xcaT"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"\xbdXw=w\xe1\xcb\xca\xcc\x18~\x9b\xcaT"
    bool_0 = False
    tuple_0 = (bool_0,)
    var_0 = module_0.depth_first_search(node_0, tuple_0)
    assert var_0 is False
    node_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    str_0 = "K[qe"
    module_0.depth_first_search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xbdXw=w\xe1\xcb\x8d\xcc\x18~\x9b\xcaT"
    node_0 = module_1.Node(bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xbdXw=w\xe1\xcb\x8d\xcc\x18~\x9b\xcaT"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"\xbdXw=w\xe1\xcb\x8d\xcc\x18~\x9b\xcaT"
    bool_0 = True
    tuple_0 = (bool_0,)
    var_0 = module_0.depth_first_search(node_0, tuple_0)
    assert var_0 is False
    var_1 = module_1.Node(successor=node_0, successors=tuple_0, incoming_nodes=tuple_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert (
        f"{type(var_1.successor).__module__}.{type(var_1.successor).__qualname__}"
        == "node.Node"
    )
    assert var_1.successors == (True,)
    assert var_1.predecessors == []
    assert var_1.incoming_nodes == (True,)
    assert var_1.outgoing_nodes == []
    var_2 = module_0.depth_first_search(node_0, var_0)
    assert var_2 is False
    module_0.depth_first_search(var_1, var_0)
