# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    int_0 = 482
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True


def test_case_1():
    float_0 = 3065.76
    dict_0 = {float_0: float_0, float_0: float_0}
    node_0 = module_1.Node(
        successor=dict_0, incoming_nodes=dict_0, outgoing_nodes=dict_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert (
        f"{type(node_0.successor).__module__}.{type(node_0.successor).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_0.successor) == 1
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert (
        f"{type(node_0.incoming_nodes).__module__}.{type(node_0.incoming_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_0.incoming_nodes) == 1
    assert (
        f"{type(node_0.outgoing_nodes).__module__}.{type(node_0.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_0.outgoing_nodes) == 1
    var_0 = module_0.depth_first_search(node_0, dict_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 3065.76
    dict_0 = {float_0: float_0, float_0: float_0}
    node_0 = module_1.Node(
        successors=dict_0,
        predecessors=float_0,
        incoming_nodes=float_0,
        outgoing_nodes=float_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_0.successors) == 1
    assert node_0.predecessors == pytest.approx(3065.76, abs=0.01, rel=0.01)
    assert node_0.incoming_nodes == pytest.approx(3065.76, abs=0.01, rel=0.01)
    assert node_0.outgoing_nodes == pytest.approx(3065.76, abs=0.01, rel=0.01)
    var_0 = module_0.depth_first_search(node_0, float_0)
    assert var_0 is True
    none_type_0 = None
    module_0.depth_first_search(var_0, none_type_0)
