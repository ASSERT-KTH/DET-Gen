# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


def test_case_1():
    bool_0 = True
    node_0 = module_1.Node(successor=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is True
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, bool_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    float_0 = -1498.73
    module_0.depth_first_search(none_type_0, float_0)


def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(
        none_type_0, incoming_nodes=none_type_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes is None
    var_0 = module_0.depth_first_search(node_0, node_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(node_0, none_type_0)
    assert var_1 is False
    dict_0 = {none_type_0: none_type_0, var_0: var_0, var_1: var_0}
    node_1 = module_1.Node(
        successor=none_type_0, successors=dict_0, incoming_nodes=node_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == {None: None, True: True, False: True}
    assert node_1.predecessors == []
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert node_1.outgoing_nodes == []
    var_2 = module_0.depth_first_search(node_1, none_type_0)
    assert var_2 is True
    var_3 = module_0.depth_first_search(node_0, none_type_0)
    assert var_3 is False
