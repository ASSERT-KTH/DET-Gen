# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "qfNtw&$\x0b"
    bytes_0 = b"\xe7\xe5"
    module_0.depth_first_search(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    none_type_0 = None
    node_0 = module_1.Node(tuple_0, outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ()
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is None
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False
    node_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "uAmRUn.O\nMeQ}\x0c"
    node_0 = module_1.Node(successor=str_0, successors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "uAmRUn.O\nMeQ}\x0c"
    assert node_0.successors == "uAmRUn.O\nMeQ}\x0c"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "uAmRUn.O\nMeQ}\x0c"
    none_type_0 = None
    module_0.depth_first_search(node_0, none_type_0)
