# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    module_0.depth_first_search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    str_0 = "%jM(l;9't3N7GCYY"
    module_0.depth_first_search(bool_0, str_0)


def test_case_3():
    float_0 = -1197.55
    node_0 = module_1.Node(float_0, incoming_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == pytest.approx(-1197.55, abs=0.01, rel=0.01)
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == pytest.approx(-1197.55, abs=0.01, rel=0.01)
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, float_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"A\xc8\xc1r)c"
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, incoming_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"A\xc8\xc1r)c"
    assert node_0.predecessors == b"A\xc8\xc1r)c"
    assert node_0.incoming_nodes == b"A\xc8\xc1r)c"
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    module_0.depth_first_search(node_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    node_0 = module_1.Node(
        predecessors=none_type_0, incoming_nodes=none_type_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes is None
    set_0 = set()
    float_0 = -442.72318
    tuple_0 = (set_0, float_0)
    list_0 = [node_0, node_0, tuple_0, node_0]
    node_1 = module_1.Node(
        successors=list_0, incoming_nodes=node_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 4
    assert node_1.predecessors == []
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert node_1.outgoing_nodes is None
    module_0.depth_first_search(node_1, set_0)
