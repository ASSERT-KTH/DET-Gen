# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


def test_case_1():
    int_0 = 2475
    set_0 = {int_0}
    node_0 = module_1.Node(successors=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == {2475}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, int_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    module_0.depth_first_search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    none_type_0 = None
    module_0.depth_first_search(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -2212
    set_0 = {int_0, int_0, int_0}
    node_0 = module_1.Node(set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {-2212}
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, int_0)
    assert var_0 is False
    bool_0 = True
    set_1 = {bool_0, bool_0}
    var_1 = module_0.depth_first_search(set_1, set_1)
    assert var_1 is True
    var_2 = module_0.depth_first_search(set_1, set_1)
    assert var_2 is True
    module_0.depth_first_search(var_1, set_1)
