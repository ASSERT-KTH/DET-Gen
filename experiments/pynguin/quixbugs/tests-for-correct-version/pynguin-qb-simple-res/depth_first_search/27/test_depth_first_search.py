# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xe8\x1d3"
    node_0 = module_1.Node(incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\xe8\x1d3"
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, bytes_0)
    assert var_0 is False
    node_0.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 1165
    none_type_0 = None
    module_0.depth_first_search(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xa8!`\x19\x9f\x13-31\xaa\x0c\x8aDEV"
    list_0 = [bytes_0]
    node_0 = module_1.Node(successors=list_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == [b"\xa8!`\x19\x9f\x13-31\xaa\x0c\x8aDEV"]
    assert node_0.predecessors == b"\xa8!`\x19\x9f\x13-31\xaa\x0c\x8aDEV"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, bytes_0)
    assert var_0 is True
    int_0 = 430
    node_1 = module_1.Node(int_0, int_0, predecessors=int_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == 430
    assert node_1.successor == 430
    assert node_1.successors == []
    assert node_1.predecessors == 430
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_1 = module_0.depth_first_search(int_0, int_0)
    assert var_1 is True
    var_2 = module_0.depth_first_search(node_1, int_0)
    assert var_2 is False
    var_3 = module_0.depth_first_search(node_1, var_1)
    assert var_3 is False
    var_2.successor()
