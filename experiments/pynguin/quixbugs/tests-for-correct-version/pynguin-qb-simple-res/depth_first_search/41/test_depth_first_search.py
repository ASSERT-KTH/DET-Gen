# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import depth_first_search as module_1
import node as module_2


def test_case_0():
    object_0 = module_0.object()
    var_0 = module_1.depth_first_search(object_0, object_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_1.depth_first_search(set_0, bool_0)


def test_case_2():
    int_0 = 1161
    node_0 = module_2.Node(incoming_nodes=int_0, outgoing_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 1161
    assert node_0.outgoing_nodes == 1161
    var_0 = module_1.depth_first_search(node_0, int_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    node_0 = module_2.Node(bool_0, incoming_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is True
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes == []
    var_0 = module_1.depth_first_search(node_0, bool_0)
    assert var_0 is False
    var_1 = module_1.depth_first_search(node_0, node_0)
    assert var_1 is True
    var_2 = module_1.depth_first_search(var_1, var_1)
    assert var_2 is True
    object_0 = module_0.object()
    var_3 = module_1.depth_first_search(object_0, object_0)
    assert var_3 is True
    str_0 = "Wy9nOY1N@6Y3\\6;6HR"
    node_1 = module_2.Node(successors=str_0, predecessors=bool_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == "Wy9nOY1N@6Y3\\6;6HR"
    assert node_1.predecessors is True
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    module_1.depth_first_search(node_1, object_0)
