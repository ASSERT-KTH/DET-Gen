# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bytes_0 = b'V7\xee\xbf\xedJ"\xb4\xa7V<\xaa\xb3\xf4\x91\x8fW:\xdc~'
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True


def test_case_1():
    str_0 = "ij&+\n\x0c\x0c\n@5nOIisy=6"
    node_0 = module_1.Node(successor=str_0, predecessors=str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "ij&+\n\x0c\x0c\n@5nOIisy=6"
    assert node_0.successors == []
    assert node_0.predecessors == "ij&+\n\x0c\x0c\n@5nOIisy=6"
    assert node_0.incoming_nodes == "ij&+\n\x0c\x0c\n@5nOIisy=6"
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    none_type_0 = None
    module_0.depth_first_search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    int_0 = 3902
    set_0 = {int_0, int_0}
    none_type_1 = None
    node_0 = module_1.Node(
        successors=set_0, predecessors=none_type_1, outgoing_nodes=none_type_1
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == {3902}
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is None
    module_0.depth_first_search(node_0, none_type_1)
