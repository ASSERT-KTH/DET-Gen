# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


def test_case_1():
    none_type_0 = None
    node_0 = module_1.Node(
        none_type_0, predecessors=none_type_0, incoming_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    float_0 = 445.7305
    var_0 = module_0.depth_first_search(node_0, float_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.depth_first_search(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "N[\t"
    bool_0 = False
    node_0 = module_1.Node(
        predecessors=str_0, incoming_nodes=str_0, outgoing_nodes=bool_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == "N[\t"
    assert node_0.incoming_nodes == "N[\t"
    assert node_0.outgoing_nodes is False
    int_0 = 2627
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(node_0, int_0)
    assert var_1 is False
    str_1 = "CA3KAhaX"
    set_0 = {str_1}
    node_1 = module_1.Node(successors=set_0, predecessors=var_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == {"CA3KAhaX"}
    assert node_1.predecessors is False
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_2 = module_0.depth_first_search(node_1, str_1)
    assert var_2 is True
    bytes_0 = b"\x89W,1\x12\xef\xd1S]\xb1\xd2-v\x86\xbc\xe2R\xc0"
    module_0.depth_first_search(node_1, bytes_0)
