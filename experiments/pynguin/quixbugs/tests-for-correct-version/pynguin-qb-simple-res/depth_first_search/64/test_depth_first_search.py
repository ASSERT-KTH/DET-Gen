# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"\x18"
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True


def test_case_1():
    int_0 = -3895
    set_0 = {int_0}
    node_0 = module_1.Node(successor=set_0, incoming_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {-3895}
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {-3895}
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, set_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    node_0 = module_1.Node(successors=set_0, outgoing_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == {False}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is False
    var_0 = module_0.depth_first_search(node_0, bool_0)
    assert var_0 is True
    var_0.successors()
