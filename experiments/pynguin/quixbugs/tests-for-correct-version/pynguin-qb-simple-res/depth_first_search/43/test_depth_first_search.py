# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = 268.147562
    node_0 = module_1.Node(predecessors=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == pytest.approx(268.147562, abs=0.01, rel=0.01)
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    node_1 = module_1.Node(float_0, float_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == pytest.approx(268.147562, abs=0.01, rel=0.01)
    assert node_1.successor == pytest.approx(268.147562, abs=0.01, rel=0.01)
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_1, float_0)
    assert var_0 is False
    var_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    none_type_0 = None
    module_0.depth_first_search(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    none_type_0 = None
    node_0 = module_1.Node(
        successors=tuple_0, predecessors=tuple_0, incoming_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == (True, True, True)
    assert node_0.predecessors == (True, True, True)
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    module_0.depth_first_search(node_0, none_type_0)
