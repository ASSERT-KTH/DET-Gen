# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.depth_first_search(tuple_0, tuple_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.depth_first_search(tuple_0, tuple_0)
    assert var_0 is True
    set_0 = {var_0, tuple_0}
    module_0.depth_first_search(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False
    float_0 = -423.01072
    bool_0 = True
    complex_0 = 1055.302882 - 286.57j
    tuple_0 = (float_0, bool_0, complex_0, bool_0)
    module_0.depth_first_search(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b","
    var_0 = module_1.Node(bytes_0, successors=bytes_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == b","
    assert var_0.successor is None
    assert var_0.successors == b","
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    module_0.depth_first_search(var_0, bytes_0)
