# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    str_0 = "OzdV\x0cb\x0bm$rW{rX`~1WE"
    var_0 = module_0.depth_first_search(str_0, str_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = -416.55
    var_0 = module_0.depth_first_search(float_0, float_0)
    assert var_0 is True
    bool_0 = False
    module_0.depth_first_search(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0, predecessors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False
    object_0 = module_2.object()
    var_1 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_1 is True
    module_0.depth_first_search(var_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x8d\xdfu\x91>\x03\x97\xa6\x1d-"
    bool_0 = False
    bool_1 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bool_1, bool_1: bool_1}
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True
    int_0 = 2348
    tuple_0 = (dict_0, bool_0, var_0, int_0)
    set_0 = {bytes_0}
    node_0 = module_1.Node(successors=tuple_0, predecessors=set_0, incoming_nodes=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == (
        {
            b"\x8d\xdfu\x91>\x03\x97\xa6\x1d-": b"\x8d\xdfu\x91>\x03\x97\xa6\x1d-",
            False: False,
        },
        False,
        True,
        2348,
    )
    assert node_0.predecessors == {b"\x8d\xdfu\x91>\x03\x97\xa6\x1d-"}
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes == []
    module_0.depth_first_search(node_0, int_0)
