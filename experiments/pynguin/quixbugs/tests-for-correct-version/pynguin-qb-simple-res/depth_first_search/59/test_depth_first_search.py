# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


def test_case_1():
    int_0 = 50
    node_0 = module_1.Node(
        int_0, int_0, predecessors=int_0, incoming_nodes=int_0, outgoing_nodes=int_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == 50
    assert node_0.successor == 50
    assert node_0.successors == []
    assert node_0.predecessors == 50
    assert node_0.incoming_nodes == 50
    assert node_0.outgoing_nodes == 50
    var_0 = module_0.depth_first_search(node_0, int_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    module_0.depth_first_search(list_0, list_0)


def test_case_3():
    object_0 = module_2.object()
    node_0 = module_1.Node(predecessors=object_0, incoming_nodes=object_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert (
        f"{type(node_0.predecessors).__module__}.{type(node_0.predecessors).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(node_0.incoming_nodes).__module__}.{type(node_0.incoming_nodes).__qualname__}"
        == "builtins.object"
    )
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0]
    node_1 = module_1.Node(successors=list_0, outgoing_nodes=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 2
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "node.Node"
    )
    var_0 = module_0.depth_first_search(node_1, object_0)
    assert var_0 is False
