# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    complex_0 = -1633.47 - 810.36j
    var_0 = module_0.depth_first_search(complex_0, complex_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    float_0 = 430.95
    none_type_0 = None
    node_0 = module_1.Node(
        bool_0, successors=bool_0, predecessors=float_0, incoming_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is True
    assert node_0.successor is None
    assert node_0.successors is True
    assert node_0.predecessors == pytest.approx(430.95, abs=0.01, rel=0.01)
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    bool_1 = False
    tuple_0 = (node_0, float_0, bool_1, float_0)
    tuple_1 = (tuple_0,)
    str_0 = "Z\\fqO3)kty_SK\x0b"
    node_1 = module_1.Node(
        successors=tuple_1, incoming_nodes=none_type_0, outgoing_nodes=str_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.successors) == 1
    assert node_1.predecessors == []
    assert node_1.incoming_nodes is None
    assert node_1.outgoing_nodes == "Z\\fqO3)kty_SK\x0b"
    module_0.depth_first_search(node_1, tuple_1)


def test_case_2():
    int_0 = -596
    complex_0 = -414.6 - 169.77j
    set_0 = {int_0, int_0, complex_0, complex_0}
    node_0 = module_1.Node(outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {-596, (-414.6 - 169.77j)}
    var_0 = module_0.depth_first_search(node_0, set_0)
    assert var_0 is False
    int_1 = -2236
    var_1 = module_0.depth_first_search(int_1, int_1)
    assert var_1 is True
    var_2 = module_0.depth_first_search(int_1, int_1)
    assert var_2 is True
