# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    float_0 = -3229.1
    var_0 = module_0.depth_first_search(float_0, float_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 308
    none_type_0 = None
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_1 is True
    module_0.depth_first_search(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "nZT"
    var_0 = module_1.Node(successor=str_0, successors=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor == "nZT"
    assert var_0.successors == "nZT"
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    module_0.depth_first_search(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 1717
    node_0 = module_1.Node(int_0, predecessors=int_0, incoming_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == 1717
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == 1717
    assert node_0.incoming_nodes == 1717
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False
    none_type_1 = None
    var_1 = module_0.depth_first_search(none_type_1, none_type_1)
    assert var_1 is True
    int_1 = -1828
    module_0.depth_first_search(int_1, none_type_1)
