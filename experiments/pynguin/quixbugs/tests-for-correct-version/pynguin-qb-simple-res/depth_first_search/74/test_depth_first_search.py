# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '"7"K_F#l$S\x0b'
    str_1 = "M$#\\T7-\nZE \n"
    var_0 = module_0.depth_first_search(str_1, str_1)
    assert var_0 is True
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.depth_first_search(node_0, str_0)
    assert var_1 is False
    var_1.successors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True
    int_0 = -1510
    tuple_0 = (bool_0, int_0, int_0, bool_0)
    module_0.depth_first_search(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    str_0 = "W~[D\x0c``NpM\rK"
    node_0 = module_1.Node(predecessors=none_type_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "W~[D\x0c``NpM\rK"
    bool_0 = True
    list_0 = [node_0, node_0, bool_0]
    node_1 = module_1.Node(
        successors=list_0, predecessors=list_0, outgoing_nodes=node_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 3
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.predecessors) == 3
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "node.Node"
    )
    module_0.depth_first_search(node_1, none_type_0)
