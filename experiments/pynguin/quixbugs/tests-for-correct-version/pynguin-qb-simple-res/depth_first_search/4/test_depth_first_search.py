# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bytes_0 = b"\x80\\m\xe83v"
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "z#x/21@nP\n"
    node_0 = module_1.Node(successor=str_0, predecessors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "z#x/21@nP\n"
    assert node_0.successors == []
    assert node_0.predecessors == "z#x/21@nP\n"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, str_0)
    assert var_0 is False
    var_1 = module_0.depth_first_search(var_0, var_0)
    assert var_1 is True
    var_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"r\xe9\xf9\x0c\x04\xc8l\n"
    none_type_0 = None
    module_0.depth_first_search(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"%\xf7^Tk\xbd\xca\x99}\xf8"
    none_type_0 = None
    var_0 = module_1.Node(bytes_0, successors=bytes_0, outgoing_nodes=none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == b"%\xf7^Tk\xbd\xca\x99}\xf8"
    assert var_0.successor is None
    assert var_0.successors == b"%\xf7^Tk\xbd\xca\x99}\xf8"
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes is None
    module_0.depth_first_search(var_0, bytes_0)
