# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import depth_first_search as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_1.depth_first_search(node_0, node_0)
    assert var_0 is True


def test_case_1():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    var_0 = module_1.depth_first_search(node_0, none_type_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_1.depth_first_search(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"Q\xc4\xfb\x1e}I\xce+\xec\xbf`\xb5\xf6\xf8o\x88\x86"
    node_0 = module_0.Node(successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"Q\xc4\xfb\x1e}I\xce+\xec\xbf`\xb5\xf6\xf8o\x88\x86"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_1.depth_first_search(node_0, bytes_0)
