# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    none_type_1 = None
    module_0.depth_first_search(bool_0, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "~\tM ;}==f\x0ccS2<G`SJ]{"
    bytes_0 = b"b\xaf_\xaf\xdd\x8a\xab\xb3$\xc7\x8b\xb8\x07\xd1\xff\xe4\x8b"
    none_type_0 = None
    node_0 = module_1.Node(str_0, bytes_0, bytes_0, str_0, none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "~\tM ;}==f\x0ccS2<G`SJ]{"
    assert (
        node_0.successor
        == b"b\xaf_\xaf\xdd\x8a\xab\xb3$\xc7\x8b\xb8\x07\xd1\xff\xe4\x8b"
    )
    assert (
        node_0.successors
        == b"b\xaf_\xaf\xdd\x8a\xab\xb3$\xc7\x8b\xb8\x07\xd1\xff\xe4\x8b"
    )
    assert node_0.predecessors == "~\tM ;}==f\x0ccS2<G`SJ]{"
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    module_0.depth_first_search(node_0, str_0)


def test_case_3():
    str_0 = "3k@\n81i1a\x0c4f"
    var_0 = module_0.depth_first_search(str_0, str_0)
    assert var_0 is True
    none_type_0 = None
    var_1 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_1 is True
    node_0 = module_1.Node(outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is None
    var_2 = module_0.depth_first_search(node_0, none_type_0)
    assert var_2 is False


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, none_type_0, outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is None
    list_0 = [node_0, node_0]
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    node_1 = module_1.Node(successors=list_0, incoming_nodes=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 2
    assert node_1.predecessors == []
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert node_1.outgoing_nodes == []
    node_2 = module_1.Node()
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert node_2.value is None
    assert node_2.successor is None
    assert node_2.successors == []
    assert node_2.predecessors == []
    assert node_2.incoming_nodes == []
    assert node_2.outgoing_nodes == []
    tuple_0 = (node_2,)
    var_1 = module_0.depth_first_search(node_1, tuple_0)
    assert var_1 is False
    str_0 = "A\nG8T\x0b<-"
    var_2 = module_0.depth_first_search(str_0, str_0)
    assert var_2 is True
