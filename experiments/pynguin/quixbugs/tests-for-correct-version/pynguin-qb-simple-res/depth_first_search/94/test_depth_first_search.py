# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


def test_case_1():
    float_0 = -1439.051668
    node_0 = module_1.Node(predecessors=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == pytest.approx(-1439.051668, abs=0.01, rel=0.01)
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, float_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b""
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    module_0.depth_first_search(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x18\xd9\ncD~f)L\xc8j\xd1\x98"
    var_0 = module_1.Node(
        bytes_0, successors=bytes_0, predecessors=bytes_0, incoming_nodes=bytes_0
    )
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == b"\x18\xd9\ncD~f)L\xc8j\xd1\x98"
    assert var_0.successor is None
    assert var_0.successors == b"\x18\xd9\ncD~f)L\xc8j\xd1\x98"
    assert var_0.predecessors == b"\x18\xd9\ncD~f)L\xc8j\xd1\x98"
    assert var_0.incoming_nodes == b"\x18\xd9\ncD~f)L\xc8j\xd1\x98"
    assert var_0.outgoing_nodes == []
    module_0.depth_first_search(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0, node_0]
    list_1 = [node_0, node_0, node_0, list_0]
    node_1 = module_1.Node(
        successor=list_1,
        successors=list_1,
        incoming_nodes=node_0,
        outgoing_nodes=list_0,
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successor) == 4
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 4
    assert node_1.predecessors == []
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 3
    none_type_0 = None
    module_0.depth_first_search(node_1, none_type_0)
