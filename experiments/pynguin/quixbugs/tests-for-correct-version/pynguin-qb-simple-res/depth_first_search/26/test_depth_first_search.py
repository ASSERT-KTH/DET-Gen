# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    int_0 = -3428
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -1092
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True
    module_0.depth_first_search(int_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 1798
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True
    dict_0 = {int_0: int_0}
    node_0 = module_1.Node(int_0, incoming_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == 1798
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {1798: 1798}
    assert node_0.outgoing_nodes == []
    node_1 = module_1.Node(dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == {1798: 1798}
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_1 = module_0.depth_first_search(node_1, node_0)
    assert var_1 is False
    node_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 1779
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True
    dict_0 = {int_0: int_0}
    node_0 = module_1.Node(int_0, incoming_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == 1779
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {1779: 1779}
    assert node_0.outgoing_nodes == []
    node_1 = module_1.Node(dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == {1779: 1779}
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_1 = module_0.depth_first_search(node_1, node_0)
    assert var_1 is False
    complex_0 = 770 + 3031j
    node_2 = module_1.Node(successors=dict_0, predecessors=complex_0)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert node_2.value is None
    assert node_2.successor is None
    assert node_2.successors == {1779: 1779}
    assert node_2.predecessors == (770 + 3031j)
    assert node_2.incoming_nodes == []
    assert node_2.outgoing_nodes == []
    module_0.depth_first_search(node_2, var_1)
