# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    str_0 = "0`BO]_k"
    var_0 = module_0.depth_first_search(str_0, str_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    bool_1 = True
    module_0.depth_first_search(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True
    node_0 = module_1.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is True
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.depth_first_search(node_0, var_0)
    assert var_1 is False
    module_0.depth_first_search(var_1, node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "4"
    var_0 = module_0.depth_first_search(str_0, str_0)
    assert var_0 is True
    node_0 = module_1.Node(successors=str_0, predecessors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "4"
    assert node_0.predecessors == "4"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, str_0, node_0}
    module_0.depth_first_search(node_0, set_0)
