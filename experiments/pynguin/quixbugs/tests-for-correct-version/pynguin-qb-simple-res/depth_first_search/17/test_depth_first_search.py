# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    complex_0 = 2956 - 184.682683j
    var_0 = module_0.depth_first_search(complex_0, complex_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xafuk\x15\xa8\xbb\x99x\xa4\xcdW\xd9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    node_0 = module_1.Node(predecessors=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == {
        b"\xafuk\x15\xa8\xbb\x99x\xa4\xcdW\xd9": b"\xafuk\x15\xa8\xbb\x99x\xa4\xcdW\xd9"
    }
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, bytes_0)
    assert var_0 is False
    str_0 = "jz)Lq"
    var_1 = module_0.depth_first_search(str_0, str_0)
    assert var_1 is True
    var_2 = module_0.depth_first_search(str_0, str_0)
    assert var_2 is True
    var_1.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "lg54X\\eud-j%ls-!)c{"
    none_type_0 = None
    module_0.depth_first_search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xafuk\x15\xa8\xbb\x99x\xa4\xcdW\xd9"
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\xafuk\x15\xa8\xbb\x99x\xa4\xcdW\xd9"
    assert node_0.successors == b"\xafuk\x15\xa8\xbb\x99x\xa4\xcdW\xd9"
    assert node_0.predecessors == b"\xafuk\x15\xa8\xbb\x99x\xa4\xcdW\xd9"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    module_0.depth_first_search(node_0, bytes_0)
