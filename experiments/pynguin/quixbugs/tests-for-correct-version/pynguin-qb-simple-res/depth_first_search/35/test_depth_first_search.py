# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    float_0 = -4762.161
    var_0 = module_0.depth_first_search(float_0, float_0)
    assert var_0 is True


def test_case_1():
    str_0 = "\n?S0AE5l0"
    var_0 = module_0.depth_first_search(str_0, str_0)
    assert var_0 is True
    node_0 = module_1.Node(incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "\n?S0AE5l0"
    assert node_0.outgoing_nodes == []
    float_0 = 2362.67
    var_1 = module_0.depth_first_search(node_0, node_0)
    assert var_1 is True
    var_2 = module_0.depth_first_search(node_0, float_0)
    assert var_2 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "p*bQ"
    node_0 = module_1.Node(
        str_0, successors=str_0, predecessors=str_0, outgoing_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "p*bQ"
    assert node_0.successor is None
    assert node_0.successors == "p*bQ"
    assert node_0.predecessors == "p*bQ"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "p*bQ"
    none_type_0 = None
    module_0.depth_first_search(node_0, none_type_0)
