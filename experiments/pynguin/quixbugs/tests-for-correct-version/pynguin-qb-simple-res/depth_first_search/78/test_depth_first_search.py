# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    bool_0 = True
    var_0 = module_0.depth_first_search(node_0, bool_0)
    assert var_0 is False
    var_1 = module_0.depth_first_search(node_0, var_0)
    assert var_1 is False
    bool_0.successor()


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "#dR\\H|3J\x0cL;\x0b"
    node_0 = module_1.Node(successors=str_0, predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == "#dR\\H|3J\x0cL;\x0b"
    assert node_0.predecessors == "#dR\\H|3J\x0cL;\x0b"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "#dR\\H|3J\x0cL;\x0b"
    module_0.depth_first_search(node_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0, node_0]
    none_type_0 = None
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False
    var_1 = module_0.depth_first_search(node_0, list_0)
    assert var_1 is False
    node_1 = module_1.Node(
        successors=list_0, predecessors=none_type_0, outgoing_nodes=node_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 3
    assert node_1.predecessors is None
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "node.Node"
    )
    var_2 = module_0.depth_first_search(node_1, list_0)
    assert var_2 is False
    var_3 = module_0.depth_first_search(node_0, node_0)
    assert var_3 is True
    var_4 = module_0.depth_first_search(node_0, var_3)
    assert var_4 is False
    node_0.successors()
