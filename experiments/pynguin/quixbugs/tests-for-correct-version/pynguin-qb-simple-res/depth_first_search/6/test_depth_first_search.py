# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


def test_case_1():
    bytes_0 = b",A\x1b\x00c\xf9\x8a.\xb7"
    node_0 = module_1.Node(
        bytes_0, bytes_0, predecessors=bytes_0, incoming_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b",A\x1b\x00c\xf9\x8a.\xb7"
    assert node_0.successor == b",A\x1b\x00c\xf9\x8a.\xb7"
    assert node_0.successors == []
    assert node_0.predecessors == b",A\x1b\x00c\xf9\x8a.\xb7"
    assert node_0.incoming_nodes == b",A\x1b\x00c\xf9\x8a.\xb7"
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, bytes_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"`H/\x9d\xe4\x92\x0f\xac/\xc0\x10j$Y|\xe4"
    list_0 = [bytes_0, bytes_0, bytes_0]
    node_0 = module_1.Node(
        successors=list_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == [
        b"`H/\x9d\xe4\x92\x0f\xac/\xc0\x10j$Y|\xe4",
        b"`H/\x9d\xe4\x92\x0f\xac/\xc0\x10j$Y|\xe4",
        b"`H/\x9d\xe4\x92\x0f\xac/\xc0\x10j$Y|\xe4",
    ]
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"`H/\x9d\xe4\x92\x0f\xac/\xc0\x10j$Y|\xe4"
    assert node_0.outgoing_nodes == b"`H/\x9d\xe4\x92\x0f\xac/\xc0\x10j$Y|\xe4"
    var_0 = module_0.depth_first_search(node_0, bytes_0)
    assert var_0 is True
    tuple_0 = ()
    var_1 = module_0.depth_first_search(tuple_0, tuple_0)
    assert var_1 is True
    module_0.depth_first_search(tuple_0, var_1)
