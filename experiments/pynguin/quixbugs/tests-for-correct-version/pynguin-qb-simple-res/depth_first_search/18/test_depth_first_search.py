# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    none_type_1 = None
    node_0 = module_1.Node(incoming_nodes=none_type_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    tuple_0 = (node_0, node_0)
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    node_1 = module_1.Node(successors=tuple_0, outgoing_nodes=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.successors) == 2
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "node.Node"
    )
    var_1 = module_0.depth_first_search(node_1, none_type_0)
    assert var_1 is False
    bool_0 = True
    var_2 = module_0.depth_first_search(bool_0, bool_0)
    assert var_2 is True
    set_0 = {bool_0, bool_0, bool_0, var_2}
    str_0 = "tkcaa2;n"
    tuple_1 = (str_0, var_1, bool_0, var_0)
    var_3 = module_0.depth_first_search(node_0, tuple_1)
    assert var_3 is False
    module_0.depth_first_search(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "tkcaa2;n"
    none_type_0 = None
    module_0.depth_first_search(none_type_0, str_0)
