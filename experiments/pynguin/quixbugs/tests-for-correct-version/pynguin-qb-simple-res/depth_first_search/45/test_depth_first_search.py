# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.depth_first_search(tuple_0, tuple_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"^xt\x14\xc1bp\x0c\xa4\x8e\x1bmlZ\xa2\x01"
    float_0 = 827.83
    node_0 = module_1.Node(
        successor=float_0, successors=bytes_0, outgoing_nodes=float_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == pytest.approx(827.83, abs=0.01, rel=0.01)
    assert node_0.successors == b"^xt\x14\xc1bp\x0c\xa4\x8e\x1bmlZ\xa2\x01"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == pytest.approx(827.83, abs=0.01, rel=0.01)
    module_0.depth_first_search(node_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_0 = -3746.1 - 266.056j
    none_type_0 = None
    module_0.depth_first_search(complex_0, none_type_0)


def test_case_3():
    float_0 = 695.389691
    node_0 = module_1.Node(successor=float_0, outgoing_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == pytest.approx(695.389691, abs=0.01, rel=0.01)
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == pytest.approx(695.389691, abs=0.01, rel=0.01)
    var_0 = module_0.depth_first_search(node_0, float_0)
    assert var_0 is False
