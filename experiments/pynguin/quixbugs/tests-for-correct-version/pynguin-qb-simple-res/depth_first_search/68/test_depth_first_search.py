# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "$0nn2izb"
    none_type_0 = None
    module_0.depth_first_search(str_0, none_type_0)


def test_case_2():
    float_0 = -1176.0
    node_0 = module_1.Node(incoming_nodes=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == pytest.approx(-1176.0, abs=0.01, rel=0.01)
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, float_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 333.1
    bytes_0 = b"\xf5\xb1\xff\x19Y\xc5\t'G\x1dq\xbe2$\xe8b\xa6u\xb1"
    node_0 = module_1.Node(
        successors=bytes_0, predecessors=bytes_0, incoming_nodes=float_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\xf5\xb1\xff\x19Y\xc5\t'G\x1dq\xbe2$\xe8b\xa6u\xb1"
    assert node_0.predecessors == b"\xf5\xb1\xff\x19Y\xc5\t'G\x1dq\xbe2$\xe8b\xa6u\xb1"
    assert node_0.incoming_nodes == pytest.approx(333.1, abs=0.01, rel=0.01)
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, node_0)
    assert var_0 is True
    none_type_0 = None
    module_0.depth_first_search(node_0, none_type_0)
