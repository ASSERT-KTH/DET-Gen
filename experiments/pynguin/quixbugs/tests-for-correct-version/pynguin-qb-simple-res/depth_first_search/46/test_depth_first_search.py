# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    float_0 = -1419.3
    var_0 = module_0.depth_first_search(float_0, float_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True
    bool_0 = True
    list_0 = [none_type_0, var_0, bool_0]
    module_0.depth_first_search(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, none_type_0, incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, none_type_0]
    node_1 = module_1.Node(list_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.value) == 2
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_1, node_0)
    assert var_0 is False
    bool_0 = True
    var_1 = module_0.depth_first_search(bool_0, bool_0)
    assert var_1 is True
    str_0 = "0@9/{k$"
    module_0.depth_first_search(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'f"YLR<N]e*-\t)!)A_EZ'
    var_0 = module_1.Node(str_0, str_0, str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == 'f"YLR<N]e*-\t)!)A_EZ'
    assert var_0.successor == 'f"YLR<N]e*-\t)!)A_EZ'
    assert var_0.successors == 'f"YLR<N]e*-\t)!)A_EZ'
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    float_0 = -2195.441
    node_0 = module_1.Node(successor=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == pytest.approx(-2195.441, abs=0.01, rel=0.01)
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.depth_first_search(node_0, float_0)
    assert var_1 is False
    module_0.depth_first_search(var_0, var_1)
