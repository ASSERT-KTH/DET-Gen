# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b",\x0b\x0e\xa8`B\xee\xb7\xb39sY\x9cI\xf6'\x98"
    tuple_0 = (bytes_0,)
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    node_0 = module_1.Node(
        successors=tuple_0, predecessors=tuple_0, outgoing_nodes=tuple_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == (b",\x0b\x0e\xa8`B\xee\xb7\xb39sY\x9cI\xf6'\x98",)
    assert node_0.predecessors == (b",\x0b\x0e\xa8`B\xee\xb7\xb39sY\x9cI\xf6'\x98",)
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == (b",\x0b\x0e\xa8`B\xee\xb7\xb39sY\x9cI\xf6'\x98",)
    var_1 = module_0.depth_first_search(node_0, bytes_0)
    assert var_1 is True
    bool_0 = False
    var_2 = module_0.depth_first_search(var_0, var_1)
    assert var_2 is True
    module_0.depth_first_search(var_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_0 = 3077.695 + 619.0566j
    bytes_0 = b"\xe71\x84"
    module_0.depth_first_search(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "8o& WB:[r!JCX4J"
    node_0 = module_1.Node(successor=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "8o& WB:[r!JCX4J"
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, str_0)
    assert var_0 is False
    var_0.successors()
