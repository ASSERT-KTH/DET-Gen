# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xc1=)\xe9\xdb"
    node_0 = module_1.Node(bytes_0, successors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xc1=)\xe9\xdb"
    assert node_0.successor is None
    assert node_0.successors == b"\xc1=)\xe9\xdb"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    none_type_0 = None
    module_0.depth_first_search(node_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -93.18975
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    node_0 = module_1.Node(dict_0, none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_0.value) == 1
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, dict_0)
    assert var_0 is False
    bytes_0 = b"\xc8{\xe5"
    var_1 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_1 is True
    var_1.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    none_type_0 = None
    module_0.depth_first_search(bool_0, none_type_0)
