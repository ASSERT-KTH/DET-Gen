# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    node_0 = module_1.Node(outgoing_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is False
    set_0 = {node_0}
    module_0.depth_first_search(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    node_0 = module_1.Node(outgoing_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes is False
    var_0 = module_0.depth_first_search(node_0, bool_0)
    assert var_0 is False
    set_0 = {node_0}
    module_0.depth_first_search(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xf1\x97\x83\xd9'f"
    node_0 = module_1.Node(
        successor=bytes_0, successors=bytes_0, incoming_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\xf1\x97\x83\xd9'f"
    assert node_0.successors == b"\xf1\x97\x83\xd9'f"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\xf1\x97\x83\xd9'f"
    assert node_0.outgoing_nodes == []
    module_0.depth_first_search(node_0, bytes_0)
