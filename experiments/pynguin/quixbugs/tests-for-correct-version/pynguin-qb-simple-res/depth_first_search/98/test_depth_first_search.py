# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


def test_case_1():
    bytes_0 = b"\xe36\xe8\xfdk\xd3\xbf\x95\xd4F\xfc%\xcbT\x07\x9620oe"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    node_0 = module_1.Node(outgoing_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {
        b"\xe36\xe8\xfdk\xd3\xbf\x95\xd4F\xfc%\xcbT\x07\x9620oe": b"\xe36\xe8\xfdk\xd3\xbf\x95\xd4F\xfc%\xcbT\x07\x9620oe"
    }
    var_0 = module_0.depth_first_search(node_0, dict_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "nb]m(6\rg$\\S"
    none_type_0 = None
    module_0.depth_first_search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True
    bytes_0 = b"\xe36\xe8\xfdk\xbf\x95\xd4F\xfc%\xcbT\x07\x9620oe"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_1 = module_1.Node(
        successor=var_0, successors=bytes_0, predecessors=var_0, incoming_nodes=bool_0
    )
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is True
    assert var_1.successors == b"\xe36\xe8\xfdk\xbf\x95\xd4F\xfc%\xcbT\x07\x9620oe"
    assert var_1.predecessors is True
    assert var_1.incoming_nodes is False
    assert var_1.outgoing_nodes == []
    module_0.depth_first_search(var_1, dict_0)
