# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    int_0 = 5282
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x0c5\xa4\x14\xd6k"
    node_0 = module_1.Node(
        successors=bytes_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x0c5\xa4\x14\xd6k"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\x0c5\xa4\x14\xd6k"
    assert node_0.outgoing_nodes == b"\x0c5\xa4\x14\xd6k"
    module_0.depth_first_search(node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 5282
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True
    module_0.depth_first_search(int_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(bool_0, bool_0)
    assert var_1 is True
    bool_1 = True
    var_2 = module_1.Node(incoming_nodes=bool_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value is None
    assert var_2.successor is None
    assert var_2.successors == []
    assert var_2.predecessors == []
    assert var_2.incoming_nodes is True
    assert var_2.outgoing_nodes == []
    var_3 = module_0.depth_first_search(var_2, bool_1)
    assert var_3 is False
    var_0.successors()
