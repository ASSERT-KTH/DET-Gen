# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = 1138.6 - 1872.68384j
    int_0 = -974
    module_0.depth_first_search(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "t@Y/o2fOY#=jlB]n\x0br"
    var_0 = module_1.Node(successor=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor == "t@Y/o2fOY#=jlB]n\x0br"
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    int_0 = 3291
    var_1 = module_0.depth_first_search(var_0, int_0)
    assert var_1 is False
    var_1.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "t@Y/o2fOY#=jlB]n\x0br"
    str_1 = "oAah.'S3p"
    node_0 = module_1.Node(str_0, successors=str_1, predecessors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "t@Y/o2fOY#=jlB]n\x0br"
    assert node_0.successor is None
    assert node_0.successors == "oAah.'S3p"
    assert node_0.predecessors == "t@Y/o2fOY#=jlB]n\x0br"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    int_0 = 3283
    module_0.depth_first_search(node_0, int_0)
