# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.depth_first_search(bool_0, bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    module_0.depth_first_search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x94\xc7]"
    none_type_0 = None
    module_0.depth_first_search(bytes_0, none_type_0)


def test_case_3():
    bool_0 = False
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=bool_0, outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is False
    assert node_0.outgoing_nodes is None
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False
    none_type_1 = None
    var_1 = module_0.depth_first_search(none_type_1, none_type_1)
    assert var_1 is True


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 1099
    var_0 = module_0.depth_first_search(int_0, int_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(var_0, var_0)
    assert var_1 is True
    bytes_0 = b"\xc6V\x88km\x83\x9e#`l\xfb\x19\xb3*M\x030V\x95"
    none_type_0 = None
    node_0 = module_1.Node(
        bytes_0, successors=bytes_0, incoming_nodes=bytes_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xc6V\x88km\x83\x9e#`l\xfb\x19\xb3*M\x030V\x95"
    assert node_0.successor is None
    assert node_0.successors == b"\xc6V\x88km\x83\x9e#`l\xfb\x19\xb3*M\x030V\x95"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\xc6V\x88km\x83\x9e#`l\xfb\x19\xb3*M\x030V\x95"
    assert node_0.outgoing_nodes is None
    module_0.depth_first_search(node_0, none_type_0)
