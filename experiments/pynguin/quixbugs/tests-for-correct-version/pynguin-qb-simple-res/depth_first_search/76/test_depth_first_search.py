# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    complex_0 = 2752.7998 + 1741.228j
    var_0 = module_0.depth_first_search(complex_0, complex_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 2373
    none_type_0 = None
    module_0.depth_first_search(int_0, none_type_0)


def test_case_2():
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    var_0 = module_0.depth_first_search(node_0, none_type_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xd9\xe6`&\xc3\xac\x98\xefj'\x18gC\x0b`de\xe2\x1f"
    node_0 = module_1.Node(bytes_0, bytes_0, bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xd9\xe6`&\xc3\xac\x98\xefj'\x18gC\x0b`de\xe2\x1f"
    assert node_0.successor == b"\xd9\xe6`&\xc3\xac\x98\xefj'\x18gC\x0b`de\xe2\x1f"
    assert node_0.successors == b"\xd9\xe6`&\xc3\xac\x98\xefj'\x18gC\x0b`de\xe2\x1f"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\xd9\xe6`&\xc3\xac\x98\xefj'\x18gC\x0b`de\xe2\x1f"
    assert node_0.outgoing_nodes == []
    module_0.depth_first_search(node_0, bytes_0)
