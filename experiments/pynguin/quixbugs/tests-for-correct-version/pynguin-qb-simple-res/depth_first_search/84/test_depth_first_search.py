# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.depth_first_search(none_type_0, none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "O)\x0b:uzXHswbF<"
    var_0 = module_0.depth_first_search(str_0, str_0)
    assert var_0 is True
    module_0.depth_first_search(str_0, var_0)


def test_case_2():
    bytes_0 = b"\xcd\x84\x0f\x05\xa9\t\x1a\x93k\xc9\xb1\xb3\x9b\x92K\x1d\xd6"
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    node_0 = module_1.Node(bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert (
        node_0.value == b"\xcd\x84\x0f\x05\xa9\t\x1a\x93k\xc9\xb1\xb3\x9b\x92K\x1d\xd6"
    )
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_1 = module_0.depth_first_search(node_0, bytes_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xcd\x84\x0f\x05\xa9\t\x1a\x93k\xc9\xb1\xb3\x9b\x92K\x1d\xd6"
    var_0 = module_0.depth_first_search(bytes_0, bytes_0)
    assert var_0 is True
    var_1 = module_0.depth_first_search(var_0, var_0)
    assert var_1 is True
    set_0 = {bytes_0, bytes_0}
    node_0 = module_1.Node(successor=var_0, successors=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is True
    assert node_0.successors == {
        b"\xcd\x84\x0f\x05\xa9\t\x1a\x93k\xc9\xb1\xb3\x9b\x92K\x1d\xd6"
    }
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    var_2 = module_0.depth_first_search(node_0, bytes_0)
    assert var_2 is True
    module_0.depth_first_search(var_0, node_0)
