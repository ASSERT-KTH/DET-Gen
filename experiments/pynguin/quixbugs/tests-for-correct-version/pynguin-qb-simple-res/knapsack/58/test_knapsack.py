# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import knapsack as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "Sp"
    set_0 = {str_0}
    list_0 = [set_0, set_0, str_0]
    module_0.knapsack(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    bytes_0 = b"\xcfki\x9f\xc3s\xfaA'\x0e"
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    module_0.knapsack(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    set_0 = {var_0, tuple_0}
    bool_0 = False
    tuple_1 = (set_0, bool_0)
    module_0.knapsack(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    set_0 = {var_0, tuple_0}
    bool_0 = True
    tuple_1 = (set_0, bool_0)
    module_0.knapsack(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    var_1 = module_0.knapsack(tuple_0, tuple_0)
    assert var_1 == 0
    bytes_0 = b"ij"
    bool_0 = True
    tuple_1 = (bytes_0, bool_0)
    bool_1 = True
    module_0.knapsack(bool_1, tuple_1)
