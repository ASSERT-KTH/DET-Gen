# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import knapsack as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "B>#~"
    module_0.knapsack(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    module_0.knapsack(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    bytes_0 = b"'\x9ao"
    var_0 = module_0.knapsack(bytes_0, dict_0)
    assert var_0 == 0
    str_0 = "ek"
    tuple_0 = (str_0, var_0, var_0)
    module_0.knapsack(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    bytes_0 = b"o"
    var_0 = module_0.knapsack(bytes_0, dict_0)
    assert var_0 == 0
    str_0 = "&="
    tuple_0 = (str_0, var_0, var_0)
    bool_0 = True
    module_0.knapsack(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0, bool_0)
    module_0.knapsack(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bytes_0 = b"2\xc3"
    tuple_0 = (bytes_0, list_0)
    var_0 = module_0.knapsack(bool_0, tuple_0)
    assert var_0 == 1
    tuple_1 = (list_0, bool_0)
    module_0.knapsack(bool_0, tuple_1)
