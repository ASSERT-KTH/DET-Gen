# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import knapsack as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "rq"
    module_0.knapsack(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    module_0.knapsack(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.knapsack(none_type_0, none_type_0)


def test_case_3():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    dict_0 = {var_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [dict_0]
    var_1 = module_0.knapsack(var_0, list_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    var_0 = module_0.knapsack(tuple_0, tuple_0)
    assert var_0 == 0
    dict_0 = {var_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [dict_0]
    bool_0 = True
    module_0.knapsack(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 1993
    tuple_0 = (int_0, int_0)
    list_0 = [tuple_0, tuple_0]
    bytes_0 = b"\x8d\xa8r\x91\xe5*\xb3\x00n"
    bool_0 = False
    tuple_1 = (list_0, bytes_0, bool_0, int_0)
    var_0 = module_0.knapsack(int_0, list_0)
    assert var_0 == 1993
    list_1 = []
    module_0.knapsack(tuple_1, list_1)
