# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import levenshtein as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "G!eYOd+jr\t"
    var_0 = module_0.levenshtein(str_0, str_0)
    assert var_0 == 0
    float_0 = 1125.2
    tuple_0 = (float_0, var_0, var_0, str_0)
    module_0.levenshtein(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -1862
    module_0.levenshtein(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ""
    int_0 = -1193
    tuple_0 = (str_0, int_0)
    var_0 = module_0.levenshtein(tuple_0, str_0)
    assert var_0 == 2
    tuple_1 = ()
    module_0.levenshtein(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    complex_0 = 53.1 - 1142.03j
    set_0 = {complex_0, complex_0}
    bytes_0 = b"\x1b\xcd$c\x14\x1au\xd3"
    list_0 = [set_0, complex_0, set_0, complex_0]
    tuple_0 = (complex_0, set_0, bytes_0, list_0)
    module_0.levenshtein(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "9\t"
    var_0 = module_0.levenshtein(str_0, str_0)
    assert var_0 == 0
    var_1 = module_0.levenshtein(str_0, str_0)
    assert var_1 == 0
    list_0 = [str_0]
    tuple_0 = ()
    bool_0 = True
    bool_1 = False
    tuple_1 = (list_0, tuple_0, bool_0, bool_1)
    bytes_0 = b"C"
    module_0.levenshtein(tuple_1, bytes_0)
