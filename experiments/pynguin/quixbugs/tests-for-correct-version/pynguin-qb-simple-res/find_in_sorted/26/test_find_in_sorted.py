# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    list_0 = [bool_0]
    var_0 = module_0.find_in_sorted(list_0, bool_0)
    assert var_0 == 0
    list_1 = []
    var_1 = module_0.find_in_sorted(list_1, list_1)
    assert var_1 == -1
    module_0.find_in_sorted(var_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"O\x8b\x1aBd\xee?P)\xce\x97\xc9b\x9e\x1f=$"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.find_in_sorted(list_0, bytes_0)
    assert var_0 == 2
    module_0.find_in_sorted(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -783
    module_0.find_in_sorted(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    tuple_0 = (bool_0,)
    var_0 = module_0.find_in_sorted(tuple_0, bool_0)
    assert var_0 == 0
    str_0 = "=6_L+rB~u-n0"
    var_1 = module_0.find_in_sorted(str_0, str_0)
    assert var_1 == -1
    var_2 = module_0.find_in_sorted(str_0, str_0)
    assert var_2 == -1
    module_0.find_in_sorted(var_1, var_1)
