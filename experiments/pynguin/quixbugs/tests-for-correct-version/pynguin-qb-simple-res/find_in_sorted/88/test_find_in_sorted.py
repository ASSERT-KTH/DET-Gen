# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0
import builtins as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.find_in_sorted(tuple_0, tuple_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'\xa8\xa2oK\xa5\x1c }"9'
    module_0.find_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    var_0 = module_0.find_in_sorted(list_0, set_0)
    assert var_0 == 1
    module_1.object(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "_Zu6^H%"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    set_0 = set()
    list_0 = [set_0]
    var_1 = module_0.find_in_sorted(list_0, set_0)
    assert var_1 == 0
    complex_0 = 3702 + 1489.2616j
    module_0.find_in_sorted(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'\xa8\xa2oK\xa5\x1c }"9'
    bool_0 = False
    var_0 = module_0.find_in_sorted(bytes_0, bool_0)
    assert var_0 == -1
    module_0.find_in_sorted(var_0, var_0)
