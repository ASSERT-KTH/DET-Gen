# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    dict_0 = {}
    var_0 = module_0.find_in_sorted(dict_0, dict_0)
    assert var_0 == -1
    float_0 = -1531.954067
    module_0.find_in_sorted(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x9f\xef\xb4Y\xc7\xb2\xf4/\xd7t\x91H\xa7"
    object_0 = module_1.object()
    dict_0 = {bytes_0: bytes_0, bytes_0: object_0, object_0: object_0}
    module_0.find_in_sorted(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.find_in_sorted(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "~(0RXpFe@N#3;l0Ak4"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    str_1 = "\x0bJK)JV8N"
    var_1 = module_0.find_in_sorted(str_0, str_1)
    assert var_1 == -1
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    var_0 = module_0.find_in_sorted(list_1, list_0)
    assert var_0 == 1
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)
