# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0


def test_case_0():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_0.find_in_sorted(dict_0, none_type_0)
    assert var_0 == -1
    var_1 = module_0.find_in_sorted(dict_0, dict_0)
    assert var_1 == -1


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -2575
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, int_0]
    module_0.find_in_sorted(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    var_0 = module_0.find_in_sorted(list_0, list_0)
    assert var_0 == -1
    bytes_0 = b"\x92\x867\xb4\xb8\x1dng\xf9\x85"
    var_1 = module_0.find_in_sorted(list_0, list_0)
    assert var_1 == -1
    var_2 = module_0.find_in_sorted(bytes_0, var_1)
    assert var_2 == -1
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.find_in_sorted(tuple_0, set_0)
    assert var_0 == 0
    bool_0 = False
    none_type_0 = None
    module_0.find_in_sorted(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "OYR?"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)
