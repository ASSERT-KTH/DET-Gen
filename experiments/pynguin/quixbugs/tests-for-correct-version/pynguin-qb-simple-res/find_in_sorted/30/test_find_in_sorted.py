# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b""
    var_0 = module_0.find_in_sorted(bytes_0, bytes_0)
    assert var_0 == -1
    bool_0 = True
    none_type_0 = None
    module_0.find_in_sorted(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x10"
    module_0.find_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "8b?"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_1.object(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "jj"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    none_type_0 = None
    module_0.find_in_sorted(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "8b"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    int_0 = 2233
    object_0 = module_1.object()
    tuple_0 = (var_0, int_0, var_0)
    var_1 = module_0.find_in_sorted(tuple_0, var_0)
    assert var_1 == 0
    int_1 = 2437
    module_0.find_in_sorted(int_1, var_1)
