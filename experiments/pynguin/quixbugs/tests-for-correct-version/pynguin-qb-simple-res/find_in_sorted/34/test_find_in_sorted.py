# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0]
    var_0 = module_0.find_in_sorted(list_1, tuple_0)
    assert var_0 == 0
    tuple_1 = ()
    var_1 = module_0.find_in_sorted(tuple_1, tuple_1)
    assert var_1 == -1
    var_2 = module_0.find_in_sorted(tuple_1, tuple_1)
    assert var_2 == -1
    bool_1 = True
    module_0.find_in_sorted(bool_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x02\x18w\xa1t\xbd\xd3\x05\xe2Z_"
    module_0.find_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0]
    var_0 = module_0.find_in_sorted(list_1, tuple_0)
    assert var_0 == 0
    module_0.find_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ".A"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    str_1 = "eJ$D^Zt=_'Io)A"
    var_1 = module_0.find_in_sorted(str_1, str_1)
    assert var_1 == -1
    module_0.find_in_sorted(var_1, var_1)
