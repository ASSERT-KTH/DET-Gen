# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b""
    var_0 = module_0.find_in_sorted(bytes_0, bytes_0)
    assert var_0 == -1
    var_1 = module_0.find_in_sorted(bytes_0, bytes_0)
    assert var_1 == -1


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xef\x83"
    module_0.find_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "|IC|\tHx^b.-~F6"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_0.find_in_sorted(var_0, var_0)


def test_case_4():
    str_0 = "rMaJmU'X7{B%x("
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_5():
    set_0 = set()
    var_0 = module_0.find_in_sorted(set_0, set_0)
    assert var_0 == -1
    var_1 = module_1.object()
    var_2 = module_1.object()
    list_0 = [set_0, set_0, set_0]
    list_1 = [list_0, list_0, set_0]
    var_3 = module_0.find_in_sorted(list_1, list_0)
    assert var_3 == 1
    bool_0 = False
    module_0.find_in_sorted(bool_0, var_3)
