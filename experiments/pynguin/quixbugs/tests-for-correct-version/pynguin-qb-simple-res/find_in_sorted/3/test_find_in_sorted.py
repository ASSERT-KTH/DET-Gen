# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import find_in_sorted as module_1


def test_case_0():
    set_0 = set()
    object_0 = module_0.object()
    var_0 = module_1.find_in_sorted(set_0, object_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xb6\xc1\x04"
    module_1.find_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -540.543
    module_1.find_in_sorted(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "c>[K!s\r4^v1"
    var_0 = module_1.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_1.find_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xb6\xc1\x04"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_1.find_in_sorted(list_0, bytes_0)
    assert var_0 == 1
    module_1.find_in_sorted(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xc9\xa3\xce\x9c0h\x8b\xcbJ\xa9\n\xbb\x97-\x16\xd1\x82\xaa\x06"
    none_type_0 = None
    float_0 = 861.49
    var_0 = module_1.find_in_sorted(bytes_0, float_0)
    assert var_0 == -1
    module_1.find_in_sorted(none_type_0, float_0)
