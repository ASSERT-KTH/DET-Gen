# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0


def test_case_0():
    set_0 = set()
    var_0 = module_0.find_in_sorted(set_0, set_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = 546.968 + 413.37j
    tuple_0 = ()
    list_0 = [complex_0, complex_0, complex_0, tuple_0]
    list_1 = [list_0, tuple_0, list_0]
    module_0.find_in_sorted(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "a2'f5j\""
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_0.find_in_sorted(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "|\t3Z_"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    str_1 = "w}f-mj1kay[N])C^T"
    var_1 = module_0.find_in_sorted(str_1, str_1)
    assert var_1 == -1
    int_0 = -544
    module_0.find_in_sorted(int_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -3351
    list_0 = [int_0, int_0, int_0, int_0]
    var_0 = module_0.find_in_sorted(list_0, int_0)
    assert var_0 == 2
    none_type_0 = None
    module_0.find_in_sorted(none_type_0, none_type_0)
