# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 1104
    bytes_0 = b'n"\x94\x0b\xb7\xac\xcaj\x06B\xc7\x80\x04\xd1\xd0\xa4\xe28\xf8\xdb'
    var_0 = module_0.find_in_sorted(bytes_0, int_0)
    assert var_0 == -1
    module_0.find_in_sorted(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -4337
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.find_in_sorted(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 2496
    module_0.find_in_sorted(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -2012
    dict_0 = {int_0: int_0, int_0: int_0}
    bytes_0 = b"\xdf\x8b\xa1e\x89s\x9d\x1dNp\x8b["
    tuple_0 = (bytes_0,)
    tuple_1 = (bytes_0, tuple_0)
    bool_0 = True
    tuple_2 = (dict_0, tuple_1, bool_0)
    module_0.find_in_sorted(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "u%\x0b>"
    list_0 = [str_0, str_0]
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    var_1 = module_0.find_in_sorted(list_0, str_0)
    assert var_1 == 1
    str_1 = "X<)\\`;>"
    var_2 = module_0.find_in_sorted(str_1, str_1)
    assert var_2 == -1
    module_0.find_in_sorted(str_1, var_2)
