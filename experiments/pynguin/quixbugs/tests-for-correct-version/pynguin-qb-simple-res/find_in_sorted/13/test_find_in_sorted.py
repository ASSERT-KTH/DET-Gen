# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_in_sorted as module_0


def test_case_0():
    list_0 = []
    none_type_0 = None
    var_0 = module_0.find_in_sorted(list_0, none_type_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"3a\x06\x89|\x8e\xc9\xeb\xeb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    module_0.find_in_sorted(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"iD\xe5\xe27\xfe{R\xb8u\x91\xd8\xfct"
    bool_0 = True
    var_0 = module_0.find_in_sorted(bytes_0, bool_0)
    assert var_0 == -1
    var_1 = module_0.find_in_sorted(bytes_0, bool_0)
    assert var_1 == -1
    bytes_1 = b"\x15{w7\x7f\x86a\x01M\x1f%\x83\x96\t%\xfb"
    module_0.find_in_sorted(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    bool_1 = True
    str_0 = "B`<X2U}eo_l3"
    tuple_0 = (str_0,)
    bool_2 = False
    tuple_1 = (bool_0, bool_1, tuple_0, bool_2)
    dict_0 = {tuple_1: str_0, bool_0: bool_0}
    list_0 = [dict_0, bool_1, bool_2, bool_2]
    var_0 = module_0.find_in_sorted(list_0, bool_0)
    assert var_0 == 2
    module_0.find_in_sorted(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "L?\tf>D`GY"
    var_0 = module_0.find_in_sorted(str_0, str_0)
    assert var_0 == -1
    module_0.find_in_sorted(str_0, var_0)
