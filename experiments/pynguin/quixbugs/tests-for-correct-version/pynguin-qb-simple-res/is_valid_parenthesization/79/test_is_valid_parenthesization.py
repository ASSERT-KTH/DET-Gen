# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import is_valid_parenthesization as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"~"
    var_0 = module_0.is_valid_parenthesization(bytes_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.is_valid_parenthesization(tuple_0)
    assert var_0 is True
    var_1 = module_0.is_valid_parenthesization(tuple_0)
    assert var_1 is True
    set_0 = set()
    var_2 = module_0.is_valid_parenthesization(set_0)
    assert var_2 is True
    bytes_0 = b"q\x0f\x9e\x88~\x18"
    var_3 = module_0.is_valid_parenthesization(bytes_0)
    assert var_3 is False
    str_0 = "BUqw6I,b!$O:"
    var_4 = module_0.is_valid_parenthesization(str_0)
    assert var_4 is False
    module_0.is_valid_parenthesization(var_2)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.is_valid_parenthesization(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "("
    str_1 = "JWf$z'-oQ*-:RO\x0b*"
    str_2 = "Q3<1DbikD"
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is False
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_2: str_0}
    var_1 = module_0.is_valid_parenthesization(dict_0)
    assert var_1 is False
    var_2 = module_0.is_valid_parenthesization(str_0)
    assert var_2 is False
    var_3 = module_0.is_valid_parenthesization(str_1)
    assert var_3 is False
    module_1.object(**dict_0)
