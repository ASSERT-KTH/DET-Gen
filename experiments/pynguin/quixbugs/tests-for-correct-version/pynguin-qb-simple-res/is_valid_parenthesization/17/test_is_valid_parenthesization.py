# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import is_valid_parenthesization as module_0


def test_case_0():
    dict_0 = {}
    list_0 = []
    tuple_0 = (dict_0, list_0)
    var_0 = module_0.is_valid_parenthesization(tuple_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    var_0 = module_0.is_valid_parenthesization(set_0)
    assert var_0 is True
    module_0.is_valid_parenthesization(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "(:0DkNt+v{[\nXG\\le`=)"
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is False
    bytes_0 = b"\x13\xb2\xcf\x00\x8cJ(\\\x96\x06\xe8\x82\xcc\x19Y\x11j"
    var_1 = module_0.is_valid_parenthesization(bytes_0)
    assert var_1 is False
    var_2 = module_0.is_valid_parenthesization(str_0)
    assert var_2 is False
    var_3 = module_0.is_valid_parenthesization(bytes_0)
    assert var_3 is False
    var_4 = module_0.is_valid_parenthesization(str_0)
    assert var_4 is False
    str_1 = "U/qe@:"
    var_5 = module_0.is_valid_parenthesization(str_1)
    assert var_5 is False
    var_6 = module_0.is_valid_parenthesization(str_0)
    assert var_6 is False
    dict_0 = {str_1: str_0}
    var_7 = module_0.is_valid_parenthesization(dict_0)
    assert var_7 is False
    var_8 = module_0.is_valid_parenthesization(dict_0)
    assert var_8 is False
    module_0.is_valid_parenthesization(var_5)
