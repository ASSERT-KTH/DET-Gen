# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import is_valid_parenthesization as module_0
import builtins as module_1


def test_case_0():
    str_0 = "KSt"
    var_0 = module_0.is_valid_parenthesization(str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xfcQ\xf5\x89\xc5k"
    var_0 = module_0.is_valid_parenthesization(bytes_0)
    assert var_0 is False
    str_0 = "W:|;0<YpG>"
    dict_0 = {bytes_0: bytes_0, str_0: bytes_0}
    str_1 = ""
    var_1 = module_0.is_valid_parenthesization(str_1)
    assert var_1 is True
    var_2 = module_0.is_valid_parenthesization(bytes_0)
    assert var_2 is False
    var_3 = module_0.is_valid_parenthesization(bytes_0)
    assert var_3 is False
    var_4 = module_0.is_valid_parenthesization(dict_0)
    assert var_4 is False
    var_5 = module_0.is_valid_parenthesization(dict_0)
    assert var_5 is False
    none_type_0 = None
    var_6 = module_0.is_valid_parenthesization(dict_0)
    assert var_6 is False
    module_0.is_valid_parenthesization(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'_#"\x97(\xe8\xca@\x05\xbe.\x07/\x8b\xba\xce'
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0]
    var_0 = module_0.is_valid_parenthesization(list_0)
    assert var_0 is False
    str_0 = "(EV3Ki\\E;R`>l"
    var_1 = module_0.is_valid_parenthesization(str_0)
    assert var_1 is False
    var_2 = module_0.is_valid_parenthesization(str_0)
    assert var_2 is False
    str_1 = "uAa[j\x0cpm3_)<1n}"
    var_3 = module_0.is_valid_parenthesization(str_0)
    assert var_3 is False
    var_4 = module_0.is_valid_parenthesization(str_1)
    assert var_4 is False
    object_0 = module_1.object()
    list_1 = [object_0]
    var_5 = module_0.is_valid_parenthesization(list_1)
    assert var_5 is False
    module_0.is_valid_parenthesization(object_0)
