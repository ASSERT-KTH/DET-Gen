# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bitcount as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -145
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.bitcount(set_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.bitcount(bool_0)
    assert var_0 == 0
    var_1 = module_0.bitcount(bool_0)
    assert var_1 == 0


def test_case_2():
    bool_0 = False
    var_0 = module_0.bitcount(bool_0)
    assert var_0 == 0
    var_1 = module_0.bitcount(var_0)
    assert var_1 == 0
    var_2 = module_0.bitcount(bool_0)
    assert var_2 == 0
    var_3 = module_0.bitcount(var_2)
    assert var_3 == 0
    var_4 = module_0.bitcount(bool_0)
    assert var_4 == 0
    var_5 = module_0.bitcount(var_4)
    assert var_5 == 0
    int_0 = 1250
    var_6 = module_0.bitcount(int_0)
    assert var_6 == 5
    var_7 = module_0.bitcount(bool_0)
    assert var_7 == 0
    var_8 = module_0.bitcount(var_2)
    assert var_8 == 0
    var_9 = module_0.bitcount(int_0)
    assert var_9 == 5
    var_10 = module_0.bitcount(var_0)
    assert var_10 == 0
    var_11 = module_0.bitcount(var_6)
    assert var_11 == 2
    var_12 = module_0.bitcount(bool_0)
    assert var_12 == 0
    var_13 = module_0.bitcount(bool_0)
    assert var_13 == 0
    var_14 = module_0.bitcount(bool_0)
    assert var_14 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    var_0 = module_0.bitcount(bool_0)
    assert var_0 == 1
    var_1 = module_0.bitcount(bool_0)
    assert var_1 == 1
    var_2 = module_0.bitcount(var_1)
    assert var_2 == 1
    var_3 = module_0.bitcount(var_1)
    assert var_3 == 1
    var_4 = module_0.bitcount(bool_0)
    assert var_4 == 1
    bytes_0 = b"\xa4\x8a\xacxs!"
    var_5 = module_0.bitcount(var_4)
    assert var_5 == 1
    module_0.bitcount(bytes_0)
