# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shunting_yard as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'r $>"\x0bks%,~\x0bQg<XO'
    module_0.shunting_yard(str_0)


def test_case_1():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    var_0 = module_0.shunting_yard(set_0)


def test_case_2():
    bytes_0 = b"$cF\x913\x14\xa0\xef\x80("
    set_0 = set()
    var_0 = module_0.shunting_yard(set_0)
    var_1 = module_0.shunting_yard(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.shunting_yard(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '/+o"'
    module_0.shunting_yard(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '/+//o"'
    module_0.shunting_yard(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '/+//-"'
    module_0.shunting_yard(str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xa8\x16\xc7\xbb"
    var_0 = module_0.shunting_yard(bytes_0)
    var_1 = module_0.shunting_yard(bytes_0)
    bool_0 = False
    str_0 = "/+/"
    tuple_0 = (str_0,)
    var_2 = module_0.shunting_yard(tuple_0)
    var_3 = module_0.shunting_yard(str_0)
    var_4 = module_0.shunting_yard(var_3)
    module_0.shunting_yard(bool_0)
