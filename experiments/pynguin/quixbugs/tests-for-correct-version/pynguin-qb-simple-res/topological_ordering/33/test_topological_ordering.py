# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "`#|\x0b:kWf!;s?iK&!H&x3"
    module_0.topological_ordering(str_0)


def test_case_2():
    str_0 = "sNOE=6SF\x0bp*&uz\x0b#"
    node_0 = module_1.Node(str_0, str_0, predecessors=str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "sNOE=6SF\x0bp*&uz\x0b#"
    assert node_0.successor == "sNOE=6SF\x0bp*&uz\x0b#"
    assert node_0.successors == []
    assert node_0.predecessors == "sNOE=6SF\x0bp*&uz\x0b#"
    assert node_0.incoming_nodes == "sNOE=6SF\x0bp*&uz\x0b#"
    assert node_0.outgoing_nodes == []
    dict_0 = {
        node_0: str_0,
        node_0: node_0,
        node_0: str_0,
        node_0: str_0,
        node_0: node_0,
        node_0: str_0,
        node_0: node_0,
        node_0: node_0,
        node_0: str_0,
    }
    none_type_0 = None
    node_1 = module_1.Node(
        successors=node_0, incoming_nodes=none_type_0, outgoing_nodes=dict_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "node.Node"
    )
    assert node_1.predecessors == []
    assert node_1.incoming_nodes is None
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_0, node_1]
    var_0 = module_0.topological_ordering(list_0)


def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "]~\tw"
    node_0 = module_1.Node(str_0, str_0, predecessors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "]~\tw"
    assert node_0.successor == "]~\tw"
    assert node_0.successors == []
    assert node_0.predecessors == "]~\tw"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    node_1 = module_1.Node(successor=str_0, predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor == "]~\tw"
    assert node_1.successors == []
    assert node_1.predecessors == "]~\tw"
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == "]~\tw"
    dict_0 = {node_0: node_0, node_1: str_0, node_1: str_0}
    module_0.topological_ordering(dict_0)


def test_case_5():
    str_0 = "(5)#NM5RM#oL"
    node_0 = module_1.Node(str_0, str_0, predecessors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "(5)#NM5RM#oL"
    assert node_0.successor == "(5)#NM5RM#oL"
    assert node_0.successors == []
    assert node_0.predecessors == "(5)#NM5RM#oL"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {
        node_0: str_0,
        node_0: node_0,
        node_0: str_0,
        node_0: str_0,
        node_0: node_0,
        node_0: str_0,
        node_0: node_0,
        node_0: node_0,
        node_0: str_0,
    }
    none_type_0 = None
    node_1 = module_1.Node(
        successors=node_0, incoming_nodes=none_type_0, outgoing_nodes=dict_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "node.Node"
    )
    assert node_1.predecessors == []
    assert node_1.incoming_nodes is None
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_0, node_1]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "(5)#NM5RM#oL"
    node_0 = module_1.Node(successor=str_0, predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "(5)#NM5RM#oL"
    assert node_0.successors == []
    assert node_0.predecessors == "(5)#NM5RM#oL"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "(5)#NM5RM#oL"
    dict_0 = {
        node_0: str_0,
        node_0: node_0,
        node_0: str_0,
        node_0: str_0,
        node_0: node_0,
        node_0: str_0,
        node_0: node_0,
        node_0: node_0,
        node_0: str_0,
    }
    none_type_0 = None
    node_1 = module_1.Node(
        successors=node_0, incoming_nodes=none_type_0, outgoing_nodes=dict_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "node.Node"
    )
    assert node_1.predecessors == []
    assert node_1.incoming_nodes is None
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_1, node_1]
    module_0.topological_ordering(list_0)
