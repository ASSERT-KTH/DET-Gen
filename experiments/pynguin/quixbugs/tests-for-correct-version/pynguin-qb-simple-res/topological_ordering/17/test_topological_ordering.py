# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0, node_0, node_0]
    var_0 = module_1.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    module_1.topological_ordering(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"J\x0b\x85jw"
    node_0 = module_0.Node(incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"J\x0b\x85jw"
    assert node_0.outgoing_nodes == []
    tuple_0 = ()
    tuple_1 = (node_0, tuple_0)
    module_1.topological_ordering(tuple_1)


def test_case_3():
    none_type_0 = None
    node_0 = module_0.Node(
        successor=none_type_0, successors=none_type_0, predecessors=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is None
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    tuple_0 = (node_0,)
    var_0 = module_0.Node(successors=tuple_0, outgoing_nodes=tuple_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert (
        f"{type(var_0.successors).__module__}.{type(var_0.successors).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.successors) == 1
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert (
        f"{type(var_0.outgoing_nodes).__module__}.{type(var_0.outgoing_nodes).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.outgoing_nodes) == 1
    tuple_1 = (var_0, var_0)
    var_1 = module_1.topological_ordering(tuple_1)


def test_case_4():
    str_0 = "ancq^Bq;[[i%MlHiI"
    str_1 = "ancqBq;Y[i%MlHiI"
    str_2 = "anc#^Bq;[[6%MlHiI"
    node_0 = module_0.Node(
        successor=str_1, successors=str_2, predecessors=str_0, incoming_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "ancqBq;Y[i%MlHiI"
    assert node_0.successors == "anc#^Bq;[[6%MlHiI"
    assert node_0.predecessors == "ancq^Bq;[[i%MlHiI"
    assert node_0.incoming_nodes == "ancq^Bq;[[i%MlHiI"
    assert node_0.outgoing_nodes == []
    tuple_0 = (node_0,)
    node_1 = module_0.Node(successors=tuple_0, outgoing_nodes=tuple_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.successors) == 1
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.outgoing_nodes) == 1
    tuple_1 = (node_1, node_1)
    var_0 = module_1.topological_ordering(tuple_1)
