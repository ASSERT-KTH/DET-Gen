# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "I$/4t~#L~_v0s*/8`\x0clo"
    module_0.topological_ordering(str_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    list_0 = [tuple_0]
    node_0 = module_1.Node(
        successors=list_0, predecessors=list_0, outgoing_nodes=list_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == [()]
    assert node_0.predecessors == [()]
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == [()]
    list_1 = [node_0, node_0]
    module_0.topological_ordering(list_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    node_0 = module_1.Node(bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is False
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    node_1 = module_1.Node(incoming_nodes=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert node_1.outgoing_nodes == []
    node_2 = module_1.Node(successor=node_1, successors=node_0, incoming_nodes=node_0)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert node_2.value is None
    assert (
        f"{type(node_2.successor).__module__}.{type(node_2.successor).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(node_2.successors).__module__}.{type(node_2.successors).__qualname__}"
        == "node.Node"
    )
    assert node_2.predecessors == []
    assert (
        f"{type(node_2.incoming_nodes).__module__}.{type(node_2.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert node_2.outgoing_nodes == []
    set_0 = {node_2, node_0}
    var_0 = module_0.topological_ordering(set_0)
    node_3 = module_1.Node()
    assert f"{type(node_3).__module__}.{type(node_3).__qualname__}" == "node.Node"
    assert node_3.value is None
    assert node_3.successor is None
    assert node_3.successors == []
    assert node_3.predecessors == []
    assert node_3.incoming_nodes == []
    assert node_3.outgoing_nodes == []
    module_0.topological_ordering(node_3)


def test_case_5():
    bool_0 = True
    node_0 = module_1.Node(successor=bool_0, predecessors=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is True
    assert node_0.successors == []
    assert node_0.predecessors is True
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: bool_0, node_0: node_0, node_0: bool_0}
    node_1 = module_1.Node(
        successors=dict_0, predecessors=dict_0, outgoing_nodes=dict_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.successors) == 1
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.predecessors) == 1
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_1, node_1]
    var_0 = module_0.topological_ordering(list_0)
