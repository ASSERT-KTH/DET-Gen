# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "MzV%y\r]uQ%"
    module_0.topological_ordering(str_0)


def test_case_2():
    list_0 = []
    node_0 = module_1.Node(successor=list_0, incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0, node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)
    list_0 = [var_0]
    node_0 = module_1.Node(successor=list_0, incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == [[]]
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == [[]]
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0, node_0, node_0}
    var_1 = module_0.topological_ordering(set_0)
    var_0.successors()


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "AX*Qx"
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "AX*Qx"
    dict_0 = {node_0: str_0, node_0: str_0, node_0: str_0}
    module_0.topological_ordering(dict_0)


def test_case_5():
    list_0 = []
    node_0 = module_1.Node(successor=list_0, incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0, node_0, node_0, node_0}
    var_0 = module_1.Node(successors=list_0, outgoing_nodes=set_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert (
        f"{type(var_0.outgoing_nodes).__module__}.{type(var_0.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(var_0.outgoing_nodes) == 1
    list_1 = [var_0]
    var_1 = module_0.topological_ordering(list_1)


def test_case_6():
    list_0 = []
    node_0 = module_1.Node(successor=list_0, incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0, node_0, node_0, node_0}
    node_1 = module_1.Node(successors=list_0, outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_1 = [node_1, node_0, node_0]
    var_0 = module_0.topological_ordering(list_1)


def test_case_7():
    list_0 = []
    none_type_0 = None
    list_1 = [none_type_0]
    node_0 = module_1.Node(
        successor=none_type_0, predecessors=list_0, incoming_nodes=list_1
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == [None]
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0, node_0, node_0, node_0}
    node_1 = module_1.Node(successors=list_0, outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_2 = [node_1, node_1]
    var_0 = module_0.topological_ordering(list_2)
