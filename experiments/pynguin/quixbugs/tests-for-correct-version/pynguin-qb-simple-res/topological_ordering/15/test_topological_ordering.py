# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1
import builtins as module_2


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"t\xabI\xbb\xb7l\xe2\x18}=ai\xcaf]\x7f"
    module_0.topological_ordering(bytes_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    complex_0 = 3659.3068 + 3369j
    bytes_0 = b"\xaa-\\XP\xec\xd8\x90\xf4\x0f\x8c"
    tuple_0 = (complex_0, bytes_0)
    node_0 = module_1.Node(
        successor=tuple_0,
        successors=bytes_0,
        incoming_nodes=tuple_0,
        outgoing_nodes=tuple_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == (
        (3659.3068 + 3369j),
        b"\xaa-\\XP\xec\xd8\x90\xf4\x0f\x8c",
    )
    assert node_0.successors == b"\xaa-\\XP\xec\xd8\x90\xf4\x0f\x8c"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == (
        (3659.3068 + 3369j),
        b"\xaa-\\XP\xec\xd8\x90\xf4\x0f\x8c",
    )
    assert node_0.outgoing_nodes == (
        (3659.3068 + 3369j),
        b"\xaa-\\XP\xec\xd8\x90\xf4\x0f\x8c",
    )
    tuple_1 = (node_0, node_0)
    var_0 = module_0.topological_ordering(tuple_1)
    bool_0 = True
    module_0.topological_ordering(bool_0)


def test_case_4():
    object_0 = module_2.object()
    node_0 = module_1.Node(object_0, successors=object_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.object"
    )
    assert node_0.successor is None
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.object"
    )
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0]
    node_1 = module_1.Node(list_0, list_0, outgoing_nodes=list_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.value) == 1
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successor) == 1
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 1
    tuple_0 = (node_1,)
    var_0 = module_0.topological_ordering(tuple_0)


def test_case_5():
    object_0 = module_2.object()
    node_0 = module_1.Node(object_0, successors=object_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.object"
    )
    assert node_0.successor is None
    assert (
        f"{type(node_0.successors).__module__}.{type(node_0.successors).__qualname__}"
        == "builtins.object"
    )
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0]
    node_1 = module_1.Node(list_0, list_0, outgoing_nodes=list_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.value) == 2
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successor) == 2
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 2
    tuple_0 = (node_1,)
    var_0 = module_0.topological_ordering(tuple_0)
