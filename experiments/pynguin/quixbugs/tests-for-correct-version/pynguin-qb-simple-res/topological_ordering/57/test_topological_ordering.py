# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "=|r\x0bz66sW;I>fj"
    module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_0 = 931.321 - 1002.54j
    module_0.topological_ordering(complex_0)


def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    bool_0 = False
    str_0 = "ccfc0PZ"
    tuple_1 = (tuple_0, bool_0, bool_0, str_0)
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=tuple_1, outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ((), False, False, "ccfc0PZ")
    assert node_0.outgoing_nodes is None
    dict_0 = {node_0: none_type_0, str_0: node_0, tuple_1: bool_0, none_type_0: tuple_0}
    var_0 = module_0.topological_ordering(tuple_0)
    module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    set_0 = {bool_0}
    node_0 = module_1.Node(successor=set_0, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {True}
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {True}
    tuple_0 = (node_0,)
    module_0.topological_ordering(tuple_0)


def test_case_6():
    tuple_0 = ()
    node_0 = module_1.Node(incoming_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ()
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0}
    node_1 = module_1.Node(successor=set_0, outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.successor) == 1
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    tuple_1 = (node_1,)
    var_0 = module_0.topological_ordering(tuple_1)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.topological_ordering(tuple_0)
    node_0 = module_1.Node(incoming_nodes=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0}
    var_1 = module_0.topological_ordering(set_0)
    var_2 = module_0.topological_ordering(var_0)
    var_3 = module_0.topological_ordering(set_0)
    node_1 = module_1.Node(successor=set_0, outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.successor) == 1
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    tuple_1 = (node_1,)
    var_4 = module_0.topological_ordering(tuple_1)
    var_5 = module_0.topological_ordering(var_4)
