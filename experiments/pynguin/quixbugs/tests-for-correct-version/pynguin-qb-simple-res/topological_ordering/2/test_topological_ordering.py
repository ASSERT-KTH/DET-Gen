# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, bool_0)
    module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(successors=none_type_0, predecessors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is None
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)


def test_case_4():
    bytes_0 = b"\\\xf9Y\xa0\xa2\xc7D\xefI\xc5\xb9\x81\xc5\x1ee\t\x93S\xb3"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    node_0 = module_1.Node(successor=list_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == [
        b"\\\xf9Y\xa0\xa2\xc7D\xefI\xc5\xb9\x81\xc5\x1ee\t\x93S\xb3",
        b"\\\xf9Y\xa0\xa2\xc7D\xefI\xc5\xb9\x81\xc5\x1ee\t\x93S\xb3",
        b"\\\xf9Y\xa0\xa2\xc7D\xefI\xc5\xb9\x81\xc5\x1ee\t\x93S\xb3",
        b"\\\xf9Y\xa0\xa2\xc7D\xefI\xc5\xb9\x81\xc5\x1ee\t\x93S\xb3",
    ]
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert (
        node_0.incoming_nodes
        == b"\\\xf9Y\xa0\xa2\xc7D\xefI\xc5\xb9\x81\xc5\x1ee\t\x93S\xb3"
    )
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: bytes_0, node_0: list_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "GnDdL"
    node_0 = module_1.Node(str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "GnDdL"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "GnDdL"
    tuple_0 = (node_0,)
    module_0.topological_ordering(tuple_0)


def test_case_6():
    bool_0 = False
    node_0 = module_1.Node(successors=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is False
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0}
    node_1 = module_1.Node(set_0, outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.value) == 1
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    tuple_0 = (node_1,)
    var_0 = module_0.topological_ordering(tuple_0)


def test_case_7():
    bool_0 = False
    node_0 = module_1.Node(successors=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is False
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0}
    node_1 = module_1.Node(set_0, outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.value) == 1
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    tuple_0 = (node_1,)
    var_0 = module_0.topological_ordering(tuple_0)
    var_1 = module_0.topological_ordering(var_0)
