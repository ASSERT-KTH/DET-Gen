# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0}
    var_0 = module_1.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xb0$,\xdf\x91\x9fa\x8eW\x13\x82\xcb\xfa"
    module_1.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -166
    module_1.topological_ordering(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    bool_1 = True
    node_0 = module_0.Node(bool_0, bool_1, incoming_nodes=bool_1, outgoing_nodes=bool_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is False
    assert node_0.successor is True
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is True
    assert node_0.outgoing_nodes is True
    list_0 = [node_0, node_0, node_0]
    var_0 = module_1.topological_ordering(list_0)
    module_1.topological_ordering(node_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"j\x9b\xb3\rk"
    node_0 = module_0.Node(bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"j\x9b\xb3\rk"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"j\x9b\xb3\rk"
    list_0 = [node_0]
    module_1.topological_ordering(list_0)
