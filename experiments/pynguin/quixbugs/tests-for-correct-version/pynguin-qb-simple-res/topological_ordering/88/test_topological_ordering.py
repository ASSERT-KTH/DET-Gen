# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


def test_case_1():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0, node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 339
    tuple_0 = (int_0, int_0)
    dict_0 = {tuple_0: int_0, int_0: int_0, tuple_0: int_0}
    node_0 = module_1.Node(
        successors=tuple_0, predecessors=dict_0, incoming_nodes=tuple_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == (339, 339)
    assert node_0.predecessors == {(339, 339): 339, 339: 339}
    assert node_0.incoming_nodes == (339, 339)
    assert node_0.outgoing_nodes == []
    dict_1 = {node_0: dict_0}
    int_1 = -2212
    node_1 = module_1.Node(successors=int_1, outgoing_nodes=dict_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == -2212
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_1]
    var_0 = module_0.topological_ordering(list_0)
    var_1 = module_0.topological_ordering(dict_1)
    var_2 = module_0.topological_ordering(list_0)
    var_3 = module_0.topological_ordering(var_0)
    var_1.predecessors()


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 339
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    node_0 = module_1.Node(successors=dict_0, predecessors=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == {339: 339}
    assert node_0.predecessors == 339
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_1 = {node_0: dict_0}
    int_1 = -2212
    node_1 = module_1.Node(successors=int_1, outgoing_nodes=dict_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == -2212
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_1]
    var_0 = module_0.topological_ordering(dict_1)
    var_1 = module_0.topological_ordering(list_0)
    module_0.topological_ordering(node_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 339
    tuple_0 = (int_0, int_0)
    dict_0 = {tuple_0: int_0, int_0: int_0, tuple_0: int_0}
    node_0 = module_1.Node(successors=dict_0, predecessors=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == {(339, 339): 339, 339: 339}
    assert node_0.predecessors == 339
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_1 = {node_0: dict_0}
    int_1 = -2212
    node_1 = module_1.Node(successors=int_1, outgoing_nodes=dict_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == -2212
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_1]
    var_0 = module_0.topological_ordering(dict_1)
    var_1 = module_0.topological_ordering(list_0)
    var_2 = module_0.topological_ordering(var_1)
    dict_1.predecessors()
