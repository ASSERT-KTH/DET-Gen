# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '"v`M38\rBr|L '
    module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.topological_ordering(bool_0)


def test_case_3():
    dict_0 = {}
    node_0 = module_1.Node(successor=dict_0, incoming_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {}
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {}
    assert node_0.outgoing_nodes == []
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)


def test_case_4():
    dict_0 = {}
    node_0 = module_1.Node(successor=dict_0, incoming_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {}
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {}
    assert node_0.outgoing_nodes == []
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)
    node_1 = module_1.Node(successors=node_0, incoming_nodes=var_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "node.Node"
    )
    assert node_1.predecessors == []
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.incoming_nodes) == 1
    assert node_1.outgoing_nodes == []
    node_2 = module_1.Node(successor=dict_0, successors=node_0, predecessors=node_1)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert node_2.value is None
    assert node_2.successor == {}
    assert (
        f"{type(node_2.successors).__module__}.{type(node_2.successors).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(node_2.predecessors).__module__}.{type(node_2.predecessors).__qualname__}"
        == "node.Node"
    )
    assert node_2.incoming_nodes == []
    assert node_2.outgoing_nodes == []
    list_1 = [node_1]
    var_1 = module_0.topological_ordering(list_1)


def test_case_5():
    dict_0 = {}
    node_0 = module_1.Node(successor=dict_0, incoming_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {}
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {}
    assert node_0.outgoing_nodes == []
    list_0 = [node_0]
    node_1 = module_1.Node(outgoing_nodes=list_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 1
    dict_1 = {node_1: node_0}
    var_0 = module_0.topological_ordering(dict_1)


def test_case_6():
    dict_0 = {}
    node_0 = module_1.Node(successor=dict_0, incoming_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == {}
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {}
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0]
    node_1 = module_1.Node(outgoing_nodes=list_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 2
    dict_1 = {node_1: node_0}
    var_0 = module_0.topological_ordering(dict_1)
