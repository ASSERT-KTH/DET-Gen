# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    str_0 = "5K[K'\tp'0x"
    tuple_0 = (set_0, str_0)
    module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.topological_ordering(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "IM>FVUr/tDQN0*"
    node_0 = module_1.Node(outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "IM>FVUr/tDQN0*"
    node_1 = module_1.Node(successor=node_0, successors=str_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successors == "IM>FVUr/tDQN0*"
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    list_0 = [node_1, node_0]
    module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "IM>FVUr/tDQN0*"
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=str_0, outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "IM>FVUr/tDQN0*"
    assert node_0.outgoing_nodes is None
    node_1 = module_1.Node(successor=node_0, successors=str_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successors == "IM>FVUr/tDQN0*"
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    list_0 = [node_1, node_0]
    var_0 = module_0.topological_ordering(list_0)
    module_0.topological_ordering(node_0)
