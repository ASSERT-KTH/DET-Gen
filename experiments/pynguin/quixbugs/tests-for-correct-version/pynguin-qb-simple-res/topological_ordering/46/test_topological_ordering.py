# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "WIJB\\"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.topological_ordering(bool_0)


def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = -1627.098
    tuple_0 = (float_0,)
    node_0 = module_1.Node(tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_0.value) == 1
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    node_1 = module_1.Node(node_0, predecessors=node_0, incoming_nodes=float_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert node_1.successors == []
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "node.Node"
    )
    assert node_1.incoming_nodes == pytest.approx(-1627.098, abs=0.01, rel=0.01)
    assert node_1.outgoing_nodes == []
    list_0 = [node_1]
    var_0 = module_0.topological_ordering(list_0)
    complex_0 = -2282.7 - 225.7606j
    module_0.topological_ordering(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xa9\x9d'\xdc\x17\x16U"
    node_0 = module_1.Node(outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"\xa9\x9d'\xdc\x17\x16U"
    set_0 = {node_0, node_0}
    module_0.topological_ordering(set_0)
