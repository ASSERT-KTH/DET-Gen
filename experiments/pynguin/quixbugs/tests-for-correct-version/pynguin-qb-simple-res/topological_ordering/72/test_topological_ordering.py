# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


def test_case_1():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0}
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.topological_ordering(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1975
    node_0 = module_1.Node(
        successor=int_0, predecessors=int_0, incoming_nodes=int_0, outgoing_nodes=int_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == -1975
    assert node_0.successors == []
    assert node_0.predecessors == -1975
    assert node_0.incoming_nodes == -1975
    assert node_0.outgoing_nodes == -1975
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)
    module_0.topological_ordering(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    node_0 = module_1.Node(
        successor=list_0,
        successors=list_0,
        predecessors=list_0,
        incoming_nodes=list_0,
        outgoing_nodes=list_1,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == [[], [], []]
    list_2 = [node_0]
    module_0.topological_ordering(list_2)


def test_case_5():
    list_0 = []
    node_0 = module_1.Node(
        successor=list_0,
        predecessors=list_0,
        incoming_nodes=list_0,
        outgoing_nodes=list_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_1 = [node_0]
    node_1 = module_1.Node(
        successors=list_0, predecessors=list_1, outgoing_nodes=list_1
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.predecessors) == 1
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 1
    dict_0 = {node_1: node_1}
    var_0 = module_0.topological_ordering(dict_0)


def test_case_6():
    list_0 = []
    node_0 = module_1.Node(
        successor=list_0,
        predecessors=list_0,
        incoming_nodes=list_0,
        outgoing_nodes=list_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_1 = [node_0, node_0, node_0]
    node_1 = module_1.Node(
        successors=list_0, predecessors=list_1, outgoing_nodes=list_1
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.predecessors) == 3
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 3
    dict_0 = {node_1: node_1}
    var_0 = module_0.topological_ordering(dict_0)
