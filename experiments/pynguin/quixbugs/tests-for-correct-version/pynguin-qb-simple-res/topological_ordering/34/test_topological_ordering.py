# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    list_0 = [bool_0]
    module_0.topological_ordering(list_0)


def test_case_1():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0, node_0: node_0, node_0: node_0, node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 634
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=int_0, outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 634
    assert node_0.outgoing_nodes is None
    tuple_0 = (node_0,)
    var_0 = module_0.topological_ordering(tuple_0)
    list_0 = []
    var_1 = module_0.topological_ordering(list_0)
    var_2 = module_0.topological_ordering(list_0)
    var_3 = module_0.topological_ordering(var_1)
    var_4 = module_0.topological_ordering(var_1)
    str_0 = "g2`ENV"
    module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "58y=:e\x0c"
    node_0 = module_1.Node(outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "58y=:e\x0c"
    list_0 = [node_0]
    module_0.topological_ordering(list_0)
