# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 2551
    tuple_0 = (int_0,)
    module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 1098
    module_0.topological_ordering(int_0)


def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(predecessors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0}
    node_1 = module_1.Node(outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_1 = {node_1, node_1}
    var_0 = module_0.topological_ordering(set_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -795
    none_type_0 = None
    node_0 = module_1.Node(int_0, none_type_0, int_0, incoming_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == -795
    assert node_0.successor is None
    assert node_0.successors == -795
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == -795
    assert node_0.outgoing_nodes == []
    tuple_0 = (node_0,)
    var_0 = module_0.topological_ordering(tuple_0)
    bytes_0 = b"R\xa2X\x13\x8fZ\xc7\x94"
    module_0.topological_ordering(bytes_0)


def test_case_6():
    none_type_0 = None
    node_0 = module_1.Node(predecessors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0, node_0}
    node_1 = module_1.Node(outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_1 = {node_1, node_1, node_0}
    var_0 = module_0.topological_ordering(set_1)
