# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    tuple_0 = ()
    node_0 = module_0.Node(incoming_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ()
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0, node_0, node_0]
    var_0 = module_1.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x91r\x8c;"
    module_1.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_0 = -244 - 457.75434j
    node_0 = module_0.Node(
        complex_0, incoming_nodes=complex_0, outgoing_nodes=complex_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == (-244 - 457.75434j)
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == (-244 - 457.75434j)
    assert node_0.outgoing_nodes == (-244 - 457.75434j)
    module_1.topological_ordering(node_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    var_0 = module_0.Node(dict_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == {}
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    node_0 = module_0.Node(incoming_nodes=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert (
        f"{type(node_0.incoming_nodes).__module__}.{type(node_0.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0, node_0, node_0]
    var_1 = module_1.topological_ordering(list_0)
    node_0.successor()


def test_case_4():
    tuple_0 = ()
    node_0 = module_0.Node(incoming_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ()
    assert node_0.outgoing_nodes == []
    list_0 = [
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    ]
    node_1 = module_0.Node(outgoing_nodes=list_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 11
    list_1 = [node_0, node_1]
    var_0 = module_1.topological_ordering(list_1)


def test_case_5():
    tuple_0 = ()
    node_0 = module_0.Node(incoming_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ()
    assert node_0.outgoing_nodes == []
    list_0 = [
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    ]
    node_1 = module_0.Node(outgoing_nodes=list_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 11
    list_1 = [node_1]
    var_0 = module_1.topological_ordering(list_1)
