# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x1f\xbdNP\xa59\n\xdb,w\x9a\xa6\xc0\x82\x99\xf7)\xef\x8e"
    module_0.topological_ordering(bytes_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "Ip\x0cF>7QrH="
    node_0 = module_1.Node(
        str_0, successors=str_0, predecessors=str_0, outgoing_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "Ip\x0cF>7QrH="
    assert node_0.successor is None
    assert node_0.successors == "Ip\x0cF>7QrH="
    assert node_0.predecessors == "Ip\x0cF>7QrH="
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "Ip\x0cF>7QrH="
    node_1 = module_1.Node()
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    set_0 = {node_0, node_0, node_0, node_1}
    module_0.topological_ordering(set_0)


def test_case_4():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    node_0 = module_1.Node(incoming_nodes=set_0, outgoing_nodes=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {False}
    assert node_0.outgoing_nodes is False
    set_1 = {node_0}
    var_0 = module_0.topological_ordering(set_1)
