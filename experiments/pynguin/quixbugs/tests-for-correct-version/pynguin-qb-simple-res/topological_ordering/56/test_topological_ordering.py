# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    bytes_0 = b""
    var_0 = module_0.topological_ordering(bytes_0)


def test_case_1():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.topological_ordering(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    var_0 = module_1.Node()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == []
    assert var_0.outgoing_nodes == []
    var_1 = module_0.topological_ordering(tuple_0)
    node_0 = module_1.Node(successors=var_1, incoming_nodes=var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert (
        f"{type(node_0.incoming_nodes).__module__}.{type(node_0.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert node_0.outgoing_nodes == []
    dict_0 = {tuple_0: tuple_0}
    tuple_1 = (node_0, dict_0)
    module_0.topological_ordering(tuple_1)


def test_case_4():
    tuple_0 = ()
    node_0 = module_1.Node(successors=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == ()
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    tuple_1 = (node_0, node_0)
    node_1 = module_1.Node(
        successor=tuple_1, predecessors=node_0, outgoing_nodes=tuple_1
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.successor) == 2
    assert node_1.successors == []
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "node.Node"
    )
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.outgoing_nodes) == 2
    set_0 = {node_1, node_0}
    var_0 = module_0.topological_ordering(set_0)


def test_case_5():
    tuple_0 = ()
    node_0 = module_1.Node(successors=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == ()
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    tuple_1 = (node_0, node_0)
    node_1 = module_1.Node(
        successor=tuple_1, predecessors=node_0, outgoing_nodes=tuple_1
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.successor) == 2
    assert node_1.successors == []
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "node.Node"
    )
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.outgoing_nodes) == 2
    set_0 = {node_1, node_1}
    var_0 = module_0.topological_ordering(set_0)
