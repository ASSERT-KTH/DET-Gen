# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"ip\x8e\x9e\x92\xcd\xd6v"
    module_0.topological_ordering(bytes_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    node_1 = module_1.Node(successors=node_0, incoming_nodes=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "node.Node"
    )
    assert node_1.predecessors == []
    assert (
        f"{type(node_1.incoming_nodes).__module__}.{type(node_1.incoming_nodes).__qualname__}"
        == "node.Node"
    )
    assert node_1.outgoing_nodes == []
    tuple_0 = (node_1,)
    var_0 = module_0.topological_ordering(tuple_0)
    none_type_0 = None
    node_2 = module_1.Node(incoming_nodes=none_type_0)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert node_2.value is None
    assert node_2.successor is None
    assert node_2.successors == []
    assert node_2.predecessors == []
    assert node_2.incoming_nodes is None
    assert node_2.outgoing_nodes == []
    list_0 = [node_2, node_2]
    var_1 = module_0.topological_ordering(list_0)
    list_1 = []
    var_2 = module_0.topological_ordering(list_1)
    var_3 = module_0.topological_ordering(var_2)
    str_0 = "]{R0]llsE}$\tog<"
    module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "<e?iP"
    node_0 = module_1.Node(str_0, predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "<e?iP"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == "<e?iP"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "<e?iP"
    dict_0 = {node_0: node_0}
    module_0.topological_ordering(dict_0)
