# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    str_0 = ""
    var_0 = module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.topological_ordering(list_0)


def test_case_2():
    str_0 = ""
    node_0 = module_1.Node(predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == ""
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == ""
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)


def test_case_3():
    str_0 = "Lk|TX`yf[<XS("
    node_0 = module_1.Node(
        successor=str_0, successors=str_0, incoming_nodes=str_0, outgoing_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "Lk|TX`yf[<XS("
    assert node_0.successors == "Lk|TX`yf[<XS("
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "Lk|TX`yf[<XS("
    assert node_0.outgoing_nodes == "Lk|TX`yf[<XS("
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "ZtAu[}7"
    node_0 = module_1.Node(predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == "ZtAu[}7"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "ZtAu[}7"
    list_0 = [node_0, node_0]
    module_0.topological_ordering(list_0)


def test_case_5():
    str_0 = ""
    node_0 = module_1.Node(predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == ""
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == ""
    list_0 = [node_0]
    node_1 = module_1.Node(successor=str_0, outgoing_nodes=list_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor == ""
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_0 = {node_1}
    var_0 = module_0.topological_ordering(set_0)
    var_1 = module_0.topological_ordering(var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "w"
    none_type_0 = None
    node_0 = module_1.Node(
        predecessors=str_0, incoming_nodes=str_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == "w"
    assert node_0.incoming_nodes == "w"
    assert node_0.outgoing_nodes is None
    list_0 = [node_0]
    node_1 = module_1.Node(successor=str_0, outgoing_nodes=list_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor == "w"
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_0 = {node_1}
    var_0 = module_0.topological_ordering(set_0)
    var_1 = module_0.topological_ordering(var_0)
    module_0.topological_ordering(str_0)
