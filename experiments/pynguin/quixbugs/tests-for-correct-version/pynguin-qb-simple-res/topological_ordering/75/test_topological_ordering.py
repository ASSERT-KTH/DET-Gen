# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xf1\x96\xaf\xeew\xf8\x07\x82\x10$sA\xc5\xf2\xc8q\xec\xa6P\xce"
    module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x87\x8c\x85'"
    node_0 = module_1.Node(successors=bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x87\x8c\x85'"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\x87\x8c\x85'"
    assert node_0.outgoing_nodes == []
    bytes_1 = b"\xe7\xe2\xf0\x87\xa6"
    dict_0 = {node_0: bytes_1, node_0: bytes_1}
    var_0 = module_0.topological_ordering(dict_0)
    list_0 = []
    var_1 = module_0.topological_ordering(list_0)
    module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    complex_0 = -435.14464 + 1462.6j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    list_1 = [list_0, complex_0, complex_0, list_0]
    node_0 = module_1.Node(predecessors=complex_0, outgoing_nodes=list_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == (-435.14464 + 1462.6j)
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == [
        [
            (-435.14464 + 1462.6j),
            (-435.14464 + 1462.6j),
            (-435.14464 + 1462.6j),
            (-435.14464 + 1462.6j),
        ],
        (-435.14464 + 1462.6j),
        (-435.14464 + 1462.6j),
        [
            (-435.14464 + 1462.6j),
            (-435.14464 + 1462.6j),
            (-435.14464 + 1462.6j),
            (-435.14464 + 1462.6j),
        ],
    ]
    set_0 = {node_0}
    module_0.topological_ordering(set_0)


def test_case_6():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    ]
    none_type_0 = None
    node_1 = module_1.Node(
        node_0, predecessors=list_0, incoming_nodes=none_type_0, outgoing_nodes=list_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert node_1.successors == []
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.predecessors) == 11
    assert node_1.incoming_nodes is None
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 11
    dict_0 = {node_0: node_0, node_1: node_0}
    var_0 = module_0.topological_ordering(dict_0)


def test_case_7():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    ]
    none_type_0 = None
    node_1 = module_1.Node(
        node_0, predecessors=list_0, incoming_nodes=none_type_0, outgoing_nodes=list_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert node_1.successors == []
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.predecessors) == 12
    assert node_1.incoming_nodes is None
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 12
    dict_0 = {node_1: node_0, node_1: node_0}
    var_0 = module_0.topological_ordering(dict_0)
