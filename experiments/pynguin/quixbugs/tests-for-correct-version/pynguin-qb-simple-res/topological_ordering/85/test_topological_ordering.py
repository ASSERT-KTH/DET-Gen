# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0}
    var_0 = module_1.topological_ordering(set_0)


def test_case_1():
    str_0 = "I8r~gY%)'ai}"
    node_0 = module_0.Node(successor=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "I8r~gY%)'ai}"
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0, node_0: str_0}
    node_1 = module_0.Node(node_0, successors=node_0, outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "node.Node"
    )
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    tuple_0 = (node_1,)
    var_0 = module_1.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xd7WiL\x91"
    node_0 = module_0.Node(incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\xd7WiL\x91"
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, bytes_0, bytes_0]
    module_1.topological_ordering(list_0)


def test_case_3():
    str_0 = "I8r@fY%)0Mi}"
    node_0 = module_0.Node(successor=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "I8r@fY%)0Mi}"
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0, node_0: str_0}
    node_1 = module_0.Node(node_0, successors=node_0, outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "node.Node"
    )
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    tuple_0 = (node_1,)
    var_0 = module_1.topological_ordering(tuple_0)
    node_2 = module_0.Node(var_0, var_0, var_0)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert (
        f"{type(node_2.value).__module__}.{type(node_2.value).__qualname__}"
        == "builtins.list"
    )
    assert len(node_2.value) == 2
    assert (
        f"{type(node_2.successor).__module__}.{type(node_2.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_2.successor) == 2
    assert (
        f"{type(node_2.successors).__module__}.{type(node_2.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_2.successors) == 2
    assert node_2.predecessors == []
    assert node_2.incoming_nodes == []
    assert node_2.outgoing_nodes == []
    var_1 = module_1.topological_ordering(var_0)
    var_2 = module_1.topological_ordering(tuple_0)


def test_case_4():
    str_0 = "I8r@fY%)0Mi}"
    none_type_0 = None
    node_0 = module_0.Node(str_0, none_type_0, none_type_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "I8r@fY%)0Mi}"
    assert node_0.successor is None
    assert node_0.successors is None
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "I8r@fY%)0Mi}"
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0, node_0: str_0}
    node_1 = module_0.Node(node_0, successors=node_0, outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "node.Node"
    )
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    tuple_0 = (node_1,)
    var_0 = module_1.topological_ordering(tuple_0)
    node_2 = module_0.Node(var_0, var_0, var_0)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert (
        f"{type(node_2.value).__module__}.{type(node_2.value).__qualname__}"
        == "builtins.list"
    )
    assert len(node_2.value) == 1
    assert (
        f"{type(node_2.successor).__module__}.{type(node_2.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_2.successor) == 1
    assert (
        f"{type(node_2.successors).__module__}.{type(node_2.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_2.successors) == 1
    assert node_2.predecessors == []
    assert node_2.incoming_nodes == []
    assert node_2.outgoing_nodes == []
    var_1 = module_1.topological_ordering(var_0)
    var_2 = module_1.topological_ordering(tuple_0)
