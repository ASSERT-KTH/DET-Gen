# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0}
    var_0 = module_1.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = 3876.355939 + 1322.7561j
    module_1.topological_ordering(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -3455
    none_type_0 = None
    node_0 = module_0.Node(int_0, none_type_0, incoming_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == -3455
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == -3455
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0, int_0: node_0, none_type_0: none_type_0, node_0: node_0}
    module_1.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b'\x8d\xf7\xb0%`"\xbd:\xaal'
    node_0 = module_0.Node(outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b'\x8d\xf7\xb0%`"\xbd:\xaal'
    set_0 = {node_0}
    module_1.topological_ordering(set_0)
