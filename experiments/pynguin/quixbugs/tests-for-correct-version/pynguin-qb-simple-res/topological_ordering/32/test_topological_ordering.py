# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.topological_ordering(dict_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -2457
    int_1 = 444
    node_0 = module_1.Node(successors=int_0, predecessors=int_0, incoming_nodes=int_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == -2457
    assert node_0.predecessors == -2457
    assert node_0.incoming_nodes == 444
    assert node_0.outgoing_nodes == []
    set_0 = {int_0, node_0}
    module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "@[/]e-zec3n@F*i{"
    node_0 = module_1.Node(outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "@[/]e-zec3n@F*i{"
    node_1 = module_1.Node()
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert node_1.outgoing_nodes == []
    list_0 = [
        node_1,
        node_1,
        node_1,
        node_1,
        node_1,
        node_1,
        node_1,
        node_1,
        node_1,
        node_1,
        node_1,
        node_1,
        node_0,
        node_1,
    ]
    module_0.topological_ordering(list_0)
