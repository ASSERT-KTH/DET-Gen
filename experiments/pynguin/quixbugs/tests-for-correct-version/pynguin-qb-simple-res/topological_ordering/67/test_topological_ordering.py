# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0]
    var_0 = module_1.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_1.topological_ordering(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "gU!fN*df\n,"
    none_type_0 = None
    node_0 = module_0.Node(
        predecessors=str_0, incoming_nodes=str_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == "gU!fN*df\n,"
    assert node_0.incoming_nodes == "gU!fN*df\n,"
    assert node_0.outgoing_nodes is None
    bool_0 = False
    set_0 = {node_0, bool_0, node_0}
    module_1.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"8\x8fO\xadj\xacS\xf4\x1c=\xd8G\x9e"
    node_0 = module_0.Node(bytes_0, bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"8\x8fO\xadj\xacS\xf4\x1c=\xd8G\x9e"
    assert node_0.successor == b"8\x8fO\xadj\xacS\xf4\x1c=\xd8G\x9e"
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"8\x8fO\xadj\xacS\xf4\x1c=\xd8G\x9e"
    dict_0 = {node_0: bytes_0}
    module_1.topological_ordering(dict_0)


def test_case_4():
    bytes_0 = b"\x83"
    node_0 = module_0.Node(successor=bytes_0, predecessors=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\x83"
    assert node_0.successors == []
    assert node_0.predecessors == b"\x83"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    tuple_0 = (node_0, node_0)
    node_1 = module_0.Node(tuple_0, tuple_0, outgoing_nodes=tuple_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.value) == 2
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.successor) == 2
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.outgoing_nodes) == 2
    dict_0 = {node_1: bytes_0}
    var_0 = module_1.topological_ordering(dict_0)


def test_case_5():
    bytes_0 = b'7|\x94x\xde"\x1c\xb9\xfc'
    none_type_0 = None
    node_0 = module_0.Node(
        successor=bytes_0,
        predecessors=none_type_0,
        incoming_nodes=bytes_0,
        outgoing_nodes=none_type_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b'7|\x94x\xde"\x1c\xb9\xfc'
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == b'7|\x94x\xde"\x1c\xb9\xfc'
    assert node_0.outgoing_nodes is None
    tuple_0 = (node_0, node_0)
    node_1 = module_0.Node(tuple_0, tuple_0, outgoing_nodes=tuple_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.value) == 2
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.successor) == 2
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.outgoing_nodes) == 2
    dict_0 = {node_1: bytes_0}
    var_0 = module_1.topological_ordering(dict_0)
