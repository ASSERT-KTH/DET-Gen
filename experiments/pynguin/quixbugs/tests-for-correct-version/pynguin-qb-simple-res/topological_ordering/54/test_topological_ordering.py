# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    bytes_0 = b"B\x1aL\x85a\xd8A|\xba\xa3\xd6.Q\xd5\xf7\x9a\xa9\xcb\x16"
    list_0 = [tuple_0, tuple_0, bytes_0]
    module_0.topological_ordering(list_0)


def test_case_2():
    set_0 = set()
    node_0 = module_1.Node(incoming_nodes=set_0, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {*()}
    assert node_0.outgoing_nodes == {*()}
    tuple_0 = (node_0,)
    var_0 = module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0, tuple_0]
    var_0 = module_0.topological_ordering(tuple_0)
    var_1 = module_0.topological_ordering(tuple_0)
    var_2 = module_0.topological_ordering(var_1)
    node_0 = module_1.Node(
        successor=var_0,
        successors=tuple_0,
        incoming_nodes=list_0,
        outgoing_nodes=tuple_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == []
    assert node_0.successors == ()
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == [(), (), (), (), ()]
    assert node_0.outgoing_nodes == ()
    var_3 = module_0.topological_ordering(var_2)
    var_4 = module_0.topological_ordering(var_1)
    bool_0 = False
    var_5 = module_0.topological_ordering(var_3)
    bool_1 = False
    tuple_1 = (node_0, bool_0, var_1, bool_1)
    module_0.topological_ordering(tuple_1)


def test_case_4():
    set_0 = set()
    node_0 = module_1.Node(incoming_nodes=set_0, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {*()}
    assert node_0.outgoing_nodes == {*()}
    tuple_0 = (node_0,)
    node_1 = module_1.Node(
        set_0, set_0, predecessors=tuple_0, incoming_nodes=set_0, outgoing_nodes=tuple_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == {*()}
    assert node_1.successor == {*()}
    assert node_1.successors == []
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.predecessors) == 1
    assert node_1.incoming_nodes == {*()}
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_1]
    var_0 = module_0.topological_ordering(list_0)


def test_case_5():
    set_0 = set()
    node_0 = module_1.Node(incoming_nodes=set_0, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {*()}
    assert node_0.outgoing_nodes == {*()}
    tuple_0 = (node_0,)
    node_1 = module_1.Node(
        set_0, set_0, predecessors=tuple_0, incoming_nodes=set_0, outgoing_nodes=tuple_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == {*()}
    assert node_1.successor == {*()}
    assert node_1.successors == []
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.predecessors) == 1
    assert node_1.incoming_nodes == {*()}
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_0, node_1]
    var_0 = module_0.topological_ordering(list_0)
