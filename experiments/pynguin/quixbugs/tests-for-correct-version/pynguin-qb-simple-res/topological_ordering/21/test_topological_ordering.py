# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    str_0 = ""
    var_0 = module_0.topological_ordering(str_0)


def test_case_1():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
    }
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.topological_ordering(bool_0)


def test_case_3():
    int_0 = -2030
    none_type_0 = None
    node_0 = module_1.Node(
        int_0, successors=none_type_0, incoming_nodes=int_0, outgoing_nodes=int_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == -2030
    assert node_0.successor is None
    assert node_0.successors is None
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == -2030
    assert node_0.outgoing_nodes == -2030
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)
    var_1 = module_0.topological_ordering(dict_0)


def test_case_4():
    bool_0 = False
    node_0 = module_1.Node(successors=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is False
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0}
    node_1 = module_1.Node(
        successors=set_0, incoming_nodes=bool_0, outgoing_nodes=set_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.successors) == 1
    assert node_1.predecessors == []
    assert node_1.incoming_nodes is False
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    tuple_0 = (node_1,)
    var_0 = module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    node_0 = module_1.Node(successors=bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is False
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0}
    var_0 = module_0.topological_ordering(set_0)
    tuple_0 = (var_0,)
    none_type_0 = None
    node_1 = module_1.Node(
        successors=tuple_0, incoming_nodes=none_type_0, outgoing_nodes=var_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.successors) == 1
    assert node_1.predecessors == []
    assert node_1.incoming_nodes is None
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 1
    tuple_1 = (node_1,)
    var_1 = module_0.topological_ordering(tuple_1)
    var_2 = module_0.topological_ordering(var_1)
    var_0.predecessors()
