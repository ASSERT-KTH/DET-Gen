# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0, node_0}
    var_0 = module_1.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_1.topological_ordering(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xaah"
    node_0 = module_0.Node(
        successor=bytes_0,
        predecessors=bytes_0,
        incoming_nodes=bytes_0,
        outgoing_nodes=bytes_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\xaah"
    assert node_0.successors == []
    assert node_0.predecessors == b"\xaah"
    assert node_0.incoming_nodes == b"\xaah"
    assert node_0.outgoing_nodes == b"\xaah"
    bytes_1 = b"\xdfj\xaf"
    set_0 = {bytes_0, bytes_1}
    dict_0 = {node_0: bytes_0, bytes_0: bytes_1, bytes_1: bytes_1, bytes_0: set_0}
    dict_1 = {node_0: node_0, bytes_0: bytes_1, node_0: bytes_1, node_0: dict_0}
    module_1.topological_ordering(dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "}J)w~"
    node_0 = module_0.Node(str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "}J)w~"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "}J)w~"
    set_0 = {node_0}
    module_1.topological_ordering(set_0)
