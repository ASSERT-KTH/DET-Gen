# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xe2r\\"
    module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 1042
    module_0.topological_ordering(int_0)


def test_case_3():
    set_0 = set()
    node_0 = module_1.Node(set_0, set_0, set_0, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {*()}
    assert node_0.successor == {*()}
    assert node_0.successors == {*()}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {*()}
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 1050.47
    node_0 = module_1.Node(
        successors=float_0,
        predecessors=float_0,
        incoming_nodes=float_0,
        outgoing_nodes=float_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == pytest.approx(1050.47, abs=0.01, rel=0.01)
    assert node_0.predecessors == pytest.approx(1050.47, abs=0.01, rel=0.01)
    assert node_0.incoming_nodes == pytest.approx(1050.47, abs=0.01, rel=0.01)
    assert node_0.outgoing_nodes == pytest.approx(1050.47, abs=0.01, rel=0.01)
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)
    var_1 = module_0.topological_ordering(dict_0)
    var_2 = module_0.topological_ordering(dict_0)
    module_0.topological_ordering(node_0)


def test_case_5():
    set_0 = set()
    node_0 = module_1.Node(set_0, set_0, set_0, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {*()}
    assert node_0.successor == {*()}
    assert node_0.successors == {*()}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {*()}
    list_0 = [node_0]
    node_1 = module_1.Node(set_0, successors=set_0, outgoing_nodes=list_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == {*()}
    assert node_1.successor is None
    assert node_1.successors == {*()}
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_1 = [node_1]
    var_0 = module_0.topological_ordering(list_1)


def test_case_6():
    set_0 = set()
    node_0 = module_1.Node(set_0, set_0, set_0, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {*()}
    assert node_0.successor == {*()}
    assert node_0.successors == {*()}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {*()}
    list_0 = [node_0, node_0]
    node_1 = module_1.Node(set_0, successors=set_0, outgoing_nodes=list_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == {*()}
    assert node_1.successor is None
    assert node_1.successors == {*()}
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 2
    list_1 = [node_1]
    var_0 = module_0.topological_ordering(list_1)
