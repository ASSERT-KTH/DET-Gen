# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    str_0 = ""
    var_0 = module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "o=Hw"
    module_0.topological_ordering(str_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0, node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 875
    node_0 = module_1.Node(
        predecessors=int_0, incoming_nodes=int_0, outgoing_nodes=int_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == 875
    assert node_0.incoming_nodes == 875
    assert node_0.outgoing_nodes == 875
    list_0 = [node_0]
    dict_0 = {node_0: int_0, node_0: node_0, node_0: int_0, node_0: list_0}
    var_0 = module_0.topological_ordering(dict_0)
    bool_0 = True
    module_0.topological_ordering(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    str_0 = "7\x0b@l.q^~P[A`IW"
    node_0 = module_1.Node(incoming_nodes=tuple_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == ()
    assert node_0.outgoing_nodes == "7\x0b@l.q^~P[A`IW"
    list_0 = [node_0]
    module_0.topological_ordering(list_0)
