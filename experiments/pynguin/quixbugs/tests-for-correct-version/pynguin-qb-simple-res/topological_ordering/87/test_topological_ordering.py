# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    str_0 = ""
    var_0 = module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "aRUBX^c"
    module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 2784
    node_0 = module_1.Node(predecessors=int_0, outgoing_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == 2784
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == 2784
    set_0 = {node_0}
    module_0.topological_ordering(set_0)


def test_case_3():
    set_0 = set()
    node_0 = module_1.Node(predecessors=set_0, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == {*()}
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {*()}
    set_1 = {node_0}
    var_0 = module_0.topological_ordering(set_1)
    var_1 = module_0.topological_ordering(var_0)


def test_case_4():
    int_0 = 2784
    none_type_0 = None
    node_0 = module_1.Node(
        predecessors=int_0, incoming_nodes=int_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == 2784
    assert node_0.incoming_nodes == 2784
    assert node_0.outgoing_nodes is None
    set_0 = {node_0}
    var_0 = module_0.topological_ordering(set_0)


def test_case_5():
    set_0 = set()
    node_0 = module_1.Node(predecessors=set_0, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == {*()}
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {*()}
    set_1 = {node_0}
    node_1 = module_1.Node(set_0, node_0, predecessors=set_0, outgoing_nodes=set_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == {*()}
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successors == []
    assert node_1.predecessors == {*()}
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_2 = {node_1}
    var_0 = module_0.topological_ordering(set_2)


def test_case_6():
    set_0 = set()
    node_0 = module_1.Node(predecessors=set_0, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == {*()}
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == {*()}
    set_1 = {node_0}
    node_1 = module_1.Node(set_0, node_0, predecessors=set_0, outgoing_nodes=set_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == {*()}
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "node.Node"
    )
    assert node_1.successors == []
    assert node_1.predecessors == {*()}
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_2 = {node_1, node_0, node_1, node_1}
    var_0 = module_0.topological_ordering(set_2)
