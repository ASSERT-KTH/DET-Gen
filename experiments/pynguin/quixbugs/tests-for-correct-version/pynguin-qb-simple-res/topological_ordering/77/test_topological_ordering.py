# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    tuple_0 = (node_0, node_0)
    var_0 = module_1.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x99\xba\x7f\xda\xc6\x8d\xc6z"
    module_1.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_1.topological_ordering(none_type_0)


def test_case_3():
    none_type_0 = None
    node_0 = module_0.Node(successor=none_type_0, successors=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is None
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0]
    node_1 = module_0.Node(
        successor=list_0, successors=list_0, predecessors=list_0, outgoing_nodes=list_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successor) == 2
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successors) == 2
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.predecessors) == 2
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 2
    tuple_0 = (node_1,)
    var_0 = module_1.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "}\"2tMM=^nm`rC15H~'aZ"
    none_type_0 = None
    node_0 = module_0.Node(
        successor=str_0,
        predecessors=str_0,
        incoming_nodes=str_0,
        outgoing_nodes=none_type_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == "}\"2tMM=^nm`rC15H~'aZ"
    assert node_0.successors == []
    assert node_0.predecessors == "}\"2tMM=^nm`rC15H~'aZ"
    assert node_0.incoming_nodes == "}\"2tMM=^nm`rC15H~'aZ"
    assert node_0.outgoing_nodes is None
    str_1 = "kY`/"
    list_0 = [node_0, node_0, str_1, str_1]
    module_1.topological_ordering(list_0)
