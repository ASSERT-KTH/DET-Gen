# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xe3\x9d&dO{\xb1\x7f]4\x12\x17\x8e"
    module_0.topological_ordering(bytes_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0, node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 502
    set_0 = {int_0}
    node_0 = module_1.Node(successors=set_0, incoming_nodes=int_0, outgoing_nodes=set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == {502}
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 502
    assert node_0.outgoing_nodes == {502}
    str_0 = "DL3U6"
    complex_0 = -3526.68 + 1597.620827j
    tuple_0 = (node_0, str_0, complex_0)
    module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    tuple_0 = (dict_0,)
    none_type_0 = None
    node_0 = module_1.Node(tuple_0, predecessors=none_type_0, outgoing_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == ({},)
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == ({},)
    list_0 = [node_0]
    module_0.topological_ordering(list_0)
