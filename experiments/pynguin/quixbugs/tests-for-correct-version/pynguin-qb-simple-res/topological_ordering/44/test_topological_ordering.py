# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "!"
    module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 707
    module_0.topological_ordering(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "-#PqWOq\nSWt}y\\hp`kj"
    node_0 = module_1.Node(outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "-#PqWOq\nSWt}y\\hp`kj"
    set_0 = {node_0, node_0}
    module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "-#PqWOq\nSWt}y\\hp`kj"
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=str_0, outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "-#PqWOq\nSWt}y\\hp`kj"
    assert node_0.outgoing_nodes is None
    set_0 = {node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)
    node_0.successor()


def test_case_5():
    str_0 = ""
    node_0 = module_1.Node(outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == ""
    set_0 = {node_0}
    var_0 = module_0.topological_ordering(set_0)


def test_case_6():
    str_0 = "VP<jj9Kbcb"
    node_0 = module_1.Node(str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "VP<jj9Kbcb"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0}
    node_1 = module_1.Node(outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_0 = {node_1, node_1, node_1}
    var_0 = module_0.topological_ordering(set_0)


def test_case_7():
    str_0 = "z;"
    node_0 = module_1.Node(str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "z;"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0}
    node_1 = module_1.Node(outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_0 = {node_1, node_1, node_1}
    var_0 = module_0.topological_ordering(set_0)
    var_1 = module_0.topological_ordering(var_0)


def test_case_8():
    str_0 = "VP<jj9Kbcb"
    none_type_0 = None
    node_0 = module_1.Node(
        none_type_0, none_type_0, predecessors=str_0, incoming_nodes=str_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == "VP<jj9Kbcb"
    assert node_0.incoming_nodes == "VP<jj9Kbcb"
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)
    node_1 = module_1.Node(outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_0 = {node_1, node_1, node_1}
    var_1 = module_0.topological_ordering(set_0)
    var_2 = module_0.topological_ordering(set_0)
    var_3 = module_0.topological_ordering(var_2)
