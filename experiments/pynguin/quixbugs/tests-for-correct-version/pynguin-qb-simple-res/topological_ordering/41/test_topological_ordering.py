# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "\\nbVs`\x0c] vGe{}6P.ur"
    module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -1292.617
    module_0.topological_ordering(float_0)


def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0, node_0: node_0, node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"A\x94\xcd\x9f0\x9f\xb6}\tH/\xbe"
    node_0 = module_1.Node(incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"A\x94\xcd\x9f0\x9f\xb6}\tH/\xbe"
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, bytes_0, bytes_0]
    module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "gGN,g075E*"
    node_0 = module_1.Node(str_0, predecessors=str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "gGN,g075E*"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == "gGN,g075E*"
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "gGN,g075E*"
    dict_0 = {node_0: node_0, node_0: node_0}
    module_0.topological_ordering(dict_0)
