# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.topological_ordering(set_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0}
    var_0 = module_0.topological_ordering(set_0)


def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    }
    node_1 = module_1.Node(outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_1]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"J\x92\xae\xaa\x04\x12@\xc54\x112>\x1f\x1e"
    node_0 = module_1.Node(
        bytes_0, successors=bytes_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"J\x92\xae\xaa\x04\x12@\xc54\x112>\x1f\x1e"
    assert node_0.successor is None
    assert node_0.successors == b"J\x92\xae\xaa\x04\x12@\xc54\x112>\x1f\x1e"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"J\x92\xae\xaa\x04\x12@\xc54\x112>\x1f\x1e"
    assert node_0.outgoing_nodes == b"J\x92\xae\xaa\x04\x12@\xc54\x112>\x1f\x1e"
    dict_0 = {node_0: node_0, node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)
    var_0.successors()


def test_case_5():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    }
    node_1 = module_1.Node(outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_1, node_0, node_1]
    var_0 = module_0.topological_ordering(list_0)
