# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"&@Y\xfe\xbb\xaf\x845)\x19\r\x8a\xc6\xb2"
    module_0.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 1187.244
    module_0.topological_ordering(float_0)


def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


def test_case_4():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
    }
    node_1 = module_1.Node(outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    dict_1 = {node_1: node_0}
    var_0 = module_0.topological_ordering(dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    tuple_0 = ()
    bool_1 = False
    tuple_1 = (bool_0, tuple_0, bool_1)
    list_0 = [tuple_1, tuple_1, bool_1]
    none_type_0 = None
    node_0 = module_1.Node(
        successor=list_0, predecessors=none_type_0, incoming_nodes=tuple_1
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == [(True, (), False), (True, (), False), False]
    assert node_0.successors == []
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == (True, (), False)
    assert node_0.outgoing_nodes == []
    list_1 = [node_0, list_0, tuple_0, tuple_0]
    module_0.topological_ordering(list_1)


def test_case_6():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
    }
    node_1 = module_1.Node(outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    dict_1 = {node_1: node_0, node_1: dict_0, node_0: dict_0, node_1: node_0}
    var_0 = module_0.topological_ordering(dict_1)
