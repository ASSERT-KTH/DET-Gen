# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


def test_case_1():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0, node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    complex_0 = 3034 - 2357.141j
    none_type_0 = None
    none_type_1 = None
    node_0 = module_1.Node(
        successors=none_type_0, predecessors=none_type_1, incoming_nodes=complex_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors is None
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == (3034 - 2357.141j)
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)
    int_0 = 371
    module_0.topological_ordering(int_0)


def test_case_4():
    complex_0 = -1595.5938826915383 - 1292.9229939982501j
    node_0 = module_1.Node(successors=complex_0, predecessors=complex_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == (-1595.5938826915383 - 1292.9229939982501j)
    assert node_0.predecessors == (-1595.5938826915383 - 1292.9229939982501j)
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: complex_0}
    node_1 = module_1.Node(outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_0 = {node_1}
    var_0 = module_0.topological_ordering(set_0)


def test_case_5():
    complex_0 = -1595.5938826915383 - 1292.9229939982501j
    node_0 = module_1.Node(successors=complex_0, predecessors=complex_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == (-1595.5938826915383 - 1292.9229939982501j)
    assert node_0.predecessors == (-1595.5938826915383 - 1292.9229939982501j)
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: complex_0}
    node_1 = module_1.Node(outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_0 = {node_0, node_1}
    var_0 = module_0.topological_ordering(set_0)
