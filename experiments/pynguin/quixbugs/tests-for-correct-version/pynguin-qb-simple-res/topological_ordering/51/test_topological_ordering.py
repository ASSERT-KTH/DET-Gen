# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0, node_0, node_0]
    var_0 = module_1.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_1.topological_ordering(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 675
    node_0 = module_0.Node(int_0, predecessors=int_0, incoming_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == 675
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == 675
    assert node_0.incoming_nodes == 675
    assert node_0.outgoing_nodes == []
    set_0 = {int_0, int_0, int_0, node_0}
    tuple_0 = (set_0,)
    tuple_1 = (node_0, int_0, node_0, tuple_0)
    module_1.topological_ordering(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "Olws\\;(#s#zR\\kv"
    node_0 = module_0.Node(outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "Olws\\;(#s#zR\\kv"
    list_0 = [node_0]
    module_1.topological_ordering(list_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_0.Node(successor=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0, node_0: node_0, node_0: node_0, node_0: node_0}
    node_1 = module_0.Node(outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_1]
    var_0 = module_1.topological_ordering(list_0)


def test_case_5():
    none_type_0 = None
    node_0 = module_0.Node(successor=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0, node_0: node_0, node_0: node_0, node_0: node_0}
    node_1 = module_0.Node(outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    list_0 = [node_0, node_1, node_0]
    var_0 = module_1.topological_ordering(list_0)
