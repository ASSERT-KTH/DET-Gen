# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0]
    var_0 = module_1.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x80\x17\x07P"
    none_type_0 = None
    node_0 = module_0.Node(
        successors=bytes_0, incoming_nodes=bytes_0, outgoing_nodes=none_type_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\x80\x17\x07P"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\x80\x17\x07P"
    assert node_0.outgoing_nodes is None
    list_0 = [node_0]
    var_0 = module_1.topological_ordering(list_0)
    float_0 = 1853.0
    module_1.topological_ordering(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'Z:>H"?'
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    node_0 = module_0.Node(outgoing_nodes=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == ('Z:>H"?', False)
    list_0 = [node_0]
    module_1.topological_ordering(list_0)
