# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "%J\x0c*hg z*`K=QM'~AD"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.topological_ordering(bool_0)


def test_case_3():
    tuple_0 = ()
    node_0 = module_1.Node(predecessors=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == ()
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)


def test_case_4():
    int_0 = 1417
    node_0 = module_1.Node(incoming_nodes=int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 1417
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: int_0, node_0: int_0, node_0: node_0, node_0: int_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b",\xfb1"
    node_0 = module_1.Node(successor=bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b",\xfb1"
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b",\xfb1"
    tuple_0 = (node_0,)
    module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xff\x80\xcc\xa8"
    node_0 = module_1.Node(successors=bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\xff\x80\xcc\xa8"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"\xff\x80\xcc\xa8"
    set_0 = {node_0}
    list_0 = [set_0, bytes_0, bytes_0, set_0]
    node_1 = module_1.Node(successor=list_0, outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successor) == 4
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    dict_0 = {node_1: set_0, node_1: set_0}
    module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xe5&\xef\xc6\xd5\xf7\x19EQ\xd91\xb1J"
    node_0 = module_1.Node(successors=bytes_0, outgoing_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == b"\xe5&\xef\xc6\xd5\xf7\x19EQ\xd91\xb1J"
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"\xe5&\xef\xc6\xd5\xf7\x19EQ\xd91\xb1J"
    set_0 = {node_0}
    list_0 = [set_0, bytes_0, set_0]
    node_1 = module_1.Node(successor=list_0, outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successor) == 3
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    dict_0 = {node_1: set_0, node_1: set_0, node_0: node_0}
    module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xe5&\xae\xef\xc6\xd5X\x19EQ\xd9u\xb1J"
    bytes_1 = b"\xe5&'\xde\x90\xae\xef\xc6\xd5X\x19EQ\xd9u\xb1J"
    node_0 = module_1.Node(
        successor=bytes_0,
        successors=bytes_0,
        predecessors=bytes_0,
        incoming_nodes=bytes_0,
        outgoing_nodes=bytes_1,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == b"\xe5&\xae\xef\xc6\xd5X\x19EQ\xd9u\xb1J"
    assert node_0.successors == b"\xe5&\xae\xef\xc6\xd5X\x19EQ\xd9u\xb1J"
    assert node_0.predecessors == b"\xe5&\xae\xef\xc6\xd5X\x19EQ\xd9u\xb1J"
    assert node_0.incoming_nodes == b"\xe5&\xae\xef\xc6\xd5X\x19EQ\xd9u\xb1J"
    assert node_0.outgoing_nodes == b"\xe5&'\xde\x90\xae\xef\xc6\xd5X\x19EQ\xd9u\xb1J"
    set_0 = {node_0}
    list_0 = [set_0, bytes_0, set_0]
    node_1 = module_1.Node(successor=list_0, outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert (
        f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.successor) == 3
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    dict_0 = {node_1: set_0, node_1: set_0}
    var_0 = module_0.topological_ordering(dict_0)
    var_1 = module_0.topological_ordering(var_0)
    tuple_0 = ()
    node_2 = module_1.Node(predecessors=tuple_0)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert node_2.value is None
    assert node_2.successor is None
    assert node_2.successors == []
    assert node_2.predecessors == ()
    assert node_2.incoming_nodes == []
    assert node_2.outgoing_nodes == []
    list_1 = [node_2]
    var_2 = module_0.topological_ordering(list_1)
    module_0.topological_ordering(node_2)
