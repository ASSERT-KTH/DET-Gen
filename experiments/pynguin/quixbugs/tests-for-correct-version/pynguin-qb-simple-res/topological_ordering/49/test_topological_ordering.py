# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    str_0 = ""
    var_0 = module_0.topological_ordering(str_0)


def test_case_1():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 608.3836
    none_type_0 = None
    none_type_1 = None
    node_0 = module_1.Node(
        float_0,
        successors=float_0,
        predecessors=none_type_0,
        incoming_nodes=float_0,
        outgoing_nodes=none_type_1,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == pytest.approx(608.3836, abs=0.01, rel=0.01)
    assert node_0.successor is None
    assert node_0.successors == pytest.approx(608.3836, abs=0.01, rel=0.01)
    assert node_0.predecessors is None
    assert node_0.incoming_nodes == pytest.approx(608.3836, abs=0.01, rel=0.01)
    assert node_0.outgoing_nodes is None
    dict_0 = {node_0: node_0, node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)
    var_0.successors()


def test_case_4():
    list_0 = []
    node_0 = module_1.Node(list_0, successors=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == []
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_1 = [node_0]
    node_1 = module_1.Node(list_0, predecessors=list_0, outgoing_nodes=list_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == []
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_0 = {node_0, node_1}
    var_0 = module_0.topological_ordering(set_0)


def test_case_5():
    list_0 = []
    node_0 = module_1.Node(list_0, successors=list_0, incoming_nodes=list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == []
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_1 = [node_0, node_0, node_0]
    node_1 = module_1.Node(list_0, predecessors=list_0, outgoing_nodes=list_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value == []
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 3
    set_0 = {node_1, node_1}
    var_0 = module_0.topological_ordering(set_0)
