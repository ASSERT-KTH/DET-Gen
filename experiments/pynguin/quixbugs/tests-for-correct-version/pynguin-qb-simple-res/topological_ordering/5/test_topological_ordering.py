# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    dict_0 = {}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ">g*wOtA\\2Ly4K(^`"
    module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    node_0 = module_1.Node(incoming_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes is None
    assert node_0.outgoing_nodes == []
    list_0 = [
        node_0,
        none_type_0,
        node_0,
        node_0,
        none_type_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        none_type_0,
        node_0,
        none_type_0,
        node_0,
        none_type_0,
        node_0,
        node_0,
        node_0,
        node_0,
        none_type_0,
        node_0,
    ]
    node_1 = module_1.Node(outgoing_nodes=list_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 21
    list_1 = [node_0, node_1, node_0, node_1, node_1, node_0, node_0]
    module_0.topological_ordering(list_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xbb\xd1\x8d\xc09\xcd\x01!-\x06\xfc\xea\xc3\x08"
    node_0 = module_1.Node(incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == b"\xbb\xd1\x8d\xc09\xcd\x01!-\x06\xfc\xea\xc3\x08"
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)
    var_0.successor()
