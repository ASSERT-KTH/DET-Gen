# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    str_0 = ""
    var_0 = module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "EEY7kc"
    module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -980.19
    module_0.topological_ordering(float_0)


def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x18Wa\xf9\x9dV.\xf6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    node_0 = module_1.Node(
        dict_0, successors=bytes_0, predecessors=dict_0, outgoing_nodes=bytes_0
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == {b"\x18Wa\xf9\x9dV.\xf6": b"\x18Wa\xf9\x9dV.\xf6"}
    assert node_0.successor is None
    assert node_0.successors == b"\x18Wa\xf9\x9dV.\xf6"
    assert node_0.predecessors == {b"\x18Wa\xf9\x9dV.\xf6": b"\x18Wa\xf9\x9dV.\xf6"}
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == b"\x18Wa\xf9\x9dV.\xf6"
    set_0 = {node_0}
    module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x18Wa\xf9\x9dV.\xf6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    node_0 = module_1.Node(bytes_0, dict_0, none_type_0, dict_0, bytes_0, bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\x18Wa\xf9\x9dV.\xf6"
    assert node_0.successor == {b"\x18Wa\xf9\x9dV.\xf6": b"\x18Wa\xf9\x9dV.\xf6"}
    assert node_0.successors is None
    assert node_0.predecessors == {b"\x18Wa\xf9\x9dV.\xf6": b"\x18Wa\xf9\x9dV.\xf6"}
    assert node_0.incoming_nodes == b"\x18Wa\xf9\x9dV.\xf6"
    assert node_0.outgoing_nodes == b"\x18Wa\xf9\x9dV.\xf6"
    set_0 = {node_0}
    var_0 = module_0.topological_ordering(set_0)
    list_0 = []
    var_1 = module_0.topological_ordering(list_0)
    list_0.predecessors()
