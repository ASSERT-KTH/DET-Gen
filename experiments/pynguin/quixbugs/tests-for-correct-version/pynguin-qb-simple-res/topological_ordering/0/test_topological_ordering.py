# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0]
    var_0 = module_1.topological_ordering(list_0)


def test_case_1():
    list_0 = []
    var_0 = module_1.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'H/^OB|%"!,\x0co$u6P'
    node_0 = module_0.Node(successor=str_0, successors=str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == 'H/^OB|%"!,\x0co$u6P'
    assert node_0.successors == 'H/^OB|%"!,\x0co$u6P'
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 'H/^OB|%"!,\x0co$u6P'
    assert node_0.outgoing_nodes == []
    tuple_0 = (node_0,)
    var_0 = module_1.topological_ordering(tuple_0)
    var_1 = module_1.topological_ordering(var_0)
    var_2 = module_0.Node(successors=str_0, predecessors=var_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "node.Node"
    assert var_2.value is None
    assert var_2.successor is None
    assert var_2.successors == 'H/^OB|%"!,\x0co$u6P'
    assert var_2.predecessors == []
    assert var_2.incoming_nodes == []
    assert var_2.outgoing_nodes == []
    module_1.topological_ordering(var_2)


def test_case_3():
    str_0 = '/^OB|%"!,o$u6P'
    node_0 = module_0.Node(successor=str_0, successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == '/^OB|%"!,o$u6P'
    assert node_0.successors == '/^OB|%"!,o$u6P'
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    tuple_0 = (node_0,)
    node_1 = module_0.Node(outgoing_nodes=tuple_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_0 = {node_1, node_0, node_1, node_1}
    var_0 = module_1.topological_ordering(set_0)


def test_case_4():
    str_0 = 'H/^OB|%"!,\x0co$u6P'
    node_0 = module_0.Node(successor=str_0, successors=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == 'H/^OB|%"!,\x0co$u6P'
    assert node_0.successors == 'H/^OB|%"!,\x0co$u6P'
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    tuple_0 = (node_0,)
    var_0 = module_1.topological_ordering(tuple_0)
    node_1 = module_0.Node(outgoing_nodes=tuple_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.outgoing_nodes) == 1
    node_2 = module_0.Node(predecessors=var_0)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert node_2.value is None
    assert node_2.successor is None
    assert node_2.successors == []
    assert (
        f"{type(node_2.predecessors).__module__}.{type(node_2.predecessors).__qualname__}"
        == "builtins.list"
    )
    assert len(node_2.predecessors) == 1
    assert node_2.incoming_nodes == []
    assert node_2.outgoing_nodes == []
    set_0 = {node_2, node_0, node_1, node_2}
    var_1 = module_1.topological_ordering(set_0)
    dict_0 = {node_1: node_1}
    var_2 = module_1.topological_ordering(dict_0)
    var_3 = module_1.topological_ordering(var_0)


def test_case_5():
    str_0 = 'H/^OB|%"!,\x0co$u6P'
    node_0 = module_0.Node(successor=str_0, successors=str_0, incoming_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == 'H/^OB|%"!,\x0co$u6P'
    assert node_0.successors == 'H/^OB|%"!,\x0co$u6P'
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == 'H/^OB|%"!,\x0co$u6P'
    assert node_0.outgoing_nodes == []
    tuple_0 = (node_0,)
    var_0 = module_1.topological_ordering(tuple_0)
    node_1 = module_0.Node(outgoing_nodes=tuple_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.tuple"
    )
    assert len(node_1.outgoing_nodes) == 1
    node_2 = module_0.Node(predecessors=var_0)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "node.Node"
    assert node_2.value is None
    assert node_2.successor is None
    assert node_2.successors == []
    assert node_2.predecessors == []
    assert node_2.incoming_nodes == []
    assert node_2.outgoing_nodes == []
    set_0 = {node_2, node_0, node_1, node_2}
    var_1 = module_1.topological_ordering(set_0)
    var_2 = module_1.topological_ordering(var_1)
