# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    set_0 = set()
    var_0 = module_0.topological_ordering(set_0)


def test_case_1():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0, node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 3075.7
    var_0 = module_1.Node(float_0, float_0, incoming_nodes=float_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value == pytest.approx(3075.7, abs=0.01, rel=0.01)
    assert var_0.successor == pytest.approx(3075.7, abs=0.01, rel=0.01)
    assert var_0.successors == []
    assert var_0.predecessors == []
    assert var_0.incoming_nodes == pytest.approx(3075.7, abs=0.01, rel=0.01)
    assert var_0.outgoing_nodes == []
    dict_0 = {var_0: var_0, float_0: float_0}
    module_0.topological_ordering(dict_0)


def test_case_3():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    }
    var_0 = module_1.Node(node_0, predecessors=set_0, outgoing_nodes=set_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "node.Node"
    )
    assert var_0.successor is None
    assert var_0.successors == []
    assert (
        f"{type(var_0.predecessors).__module__}.{type(var_0.predecessors).__qualname__}"
        == "builtins.set"
    )
    assert len(var_0.predecessors) == 1
    assert var_0.incoming_nodes == []
    assert (
        f"{type(var_0.outgoing_nodes).__module__}.{type(var_0.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(var_0.outgoing_nodes) == 1
    tuple_0 = (var_0,)
    var_1 = module_0.topological_ordering(tuple_0)


def test_case_4():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    }
    node_1 = module_1.Node(node_0, predecessors=set_0, outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "node.Node"
    )
    assert node_1.successor is None
    assert node_1.successors == []
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.predecessors) == 1
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    tuple_0 = (node_1,)
    var_0 = module_0.topological_ordering(tuple_0)
    var_1 = module_0.topological_ordering(var_0)
