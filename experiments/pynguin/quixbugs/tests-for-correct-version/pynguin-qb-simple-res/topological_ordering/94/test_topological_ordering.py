# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = 554.046996
    set_0 = {float_0, float_0, float_0}
    module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


def test_case_3():
    str_0 = "\x0b[AZ%>BG\x0bLkMjJt?"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    node_0 = module_1.Node(incoming_nodes=dict_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == {"\x0b[AZ%>BG\x0bLkMjJt?": "\x0b[AZ%>BG\x0bLkMjJt?"}
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)


def test_case_4():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


def test_case_5():
    float_0 = -989.834
    node_0 = module_1.Node(float_0, successors=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == pytest.approx(-989.834, abs=0.01, rel=0.01)
    assert node_0.successor is None
    assert node_0.successors == pytest.approx(-989.834, abs=0.01, rel=0.01)
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0}
    node_1 = module_1.Node(outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    dict_0 = {node_1: float_0, node_1: node_1}
    var_0 = module_0.topological_ordering(dict_0)


def test_case_6():
    float_0 = -989.834
    node_0 = module_1.Node(float_0, successors=float_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == pytest.approx(-989.834, abs=0.01, rel=0.01)
    assert node_0.successor is None
    assert node_0.successors == pytest.approx(-989.834, abs=0.01, rel=0.01)
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0}
    node_1 = module_1.Node(outgoing_nodes=set_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert node_1.successors == []
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.set"
    )
    assert len(node_1.outgoing_nodes) == 1
    dict_0 = {node_0: float_0, node_1: node_1}
    var_0 = module_0.topological_ordering(dict_0)
