# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0]
    var_0 = module_1.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xbc\xd6"
    module_1.topological_ordering(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_1.topological_ordering(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "4"
    node_0 = module_0.Node(outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "4"
    set_0 = {node_0, node_0, node_0}
    module_1.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "r"
    none_type_0 = None
    node_0 = module_0.Node(incoming_nodes=str_0, outgoing_nodes=none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == "r"
    assert node_0.outgoing_nodes is None
    set_0 = {node_0, node_0, node_0}
    var_0 = module_1.topological_ordering(set_0)
    tuple_0 = ()
    var_1 = module_1.topological_ordering(tuple_0)
    str_1 = "=Per~"
    module_1.topological_ordering(str_1)
