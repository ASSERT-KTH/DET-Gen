# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ".9[qv]\tH6~amA?f.\n2}"
    module_0.topological_ordering(str_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [node_0, node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xa5A\xd1\xf5\xa5\x83\xf3\xa4r\x08T\xe0\xd8"
    node_0 = module_1.Node(bytes_0, predecessors=bytes_0, incoming_nodes=bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == b"\xa5A\xd1\xf5\xa5\x83\xf3\xa4r\x08T\xe0\xd8"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == b"\xa5A\xd1\xf5\xa5\x83\xf3\xa4r\x08T\xe0\xd8"
    assert node_0.incoming_nodes == b"\xa5A\xd1\xf5\xa5\x83\xf3\xa4r\x08T\xe0\xd8"
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, node_0}
    var_0 = module_0.topological_ordering(set_0)
    none_type_0 = None
    module_0.topological_ordering(none_type_0)


def test_case_4():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    list_0 = [
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
        node_0,
    ]
    node_1 = module_1.Node(
        successors=node_0, predecessors=node_0, outgoing_nodes=list_0
    )
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "node.Node"
    )
    assert (
        f"{type(node_1.predecessors).__module__}.{type(node_1.predecessors).__qualname__}"
        == "node.Node"
    )
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.list"
    )
    assert len(node_1.outgoing_nodes) == 20
    dict_0 = {node_1: node_1, node_1: node_1, node_1: node_1}
    var_0 = module_0.topological_ordering(dict_0)
