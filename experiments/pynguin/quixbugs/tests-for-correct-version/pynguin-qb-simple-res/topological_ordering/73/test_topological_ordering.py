# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"8\xd8\x87J\xc4\xdf\x06#\xd8\x119P"
    module_0.topological_ordering(bytes_0)


def test_case_2():
    node_0 = module_1.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    tuple_0 = (node_0,)
    var_0 = module_0.topological_ordering(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1689
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0, tuple_0)
    node_0 = module_1.Node(
        successor=tuple_1,
        successors=tuple_0,
        predecessors=tuple_1,
        incoming_nodes=tuple_0,
    )
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor == ((-1689,), (-1689,))
    assert node_0.successors == (-1689,)
    assert node_0.predecessors == ((-1689,), (-1689,))
    assert node_0.incoming_nodes == (-1689,)
    assert node_0.outgoing_nodes == []
    set_0 = {node_0, tuple_0}
    module_0.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "{q*"
    node_0 = module_1.Node(str_0, outgoing_nodes=str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == "{q*"
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == "{q*"
    list_0 = [node_0, node_0]
    module_0.topological_ordering(list_0)
