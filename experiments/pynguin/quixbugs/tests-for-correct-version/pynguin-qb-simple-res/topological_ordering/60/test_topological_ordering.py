# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import node as module_0
import topological_ordering as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {node_0: node_0, node_0: node_0, node_0: node_0}
    var_0 = module_1.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 405
    set_0 = {int_0}
    module_1.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_1.topological_ordering(none_type_0)


def test_case_3():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
    }
    node_1 = module_0.Node(successors=dict_0, outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.successors) == 1
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_0 = {node_1}
    var_0 = module_1.topological_ordering(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    list_1 = [list_0]
    node_0 = module_0.Node(list_0, successors=list_1, incoming_nodes=list_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value == []
    assert node_0.successor is None
    assert node_0.successors == [[]]
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == [[]]
    assert node_0.outgoing_nodes == []
    tuple_0 = (node_0,)
    var_0 = module_1.topological_ordering(tuple_0)
    tuple_0.successor()


def test_case_5():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
    assert node_0.value is None
    assert node_0.successor is None
    assert node_0.successors == []
    assert node_0.predecessors == []
    assert node_0.incoming_nodes == []
    assert node_0.outgoing_nodes == []
    dict_0 = {
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
        node_0: node_0,
    }
    node_1 = module_0.Node(successors=dict_0, outgoing_nodes=dict_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
    assert node_1.value is None
    assert node_1.successor is None
    assert (
        f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.successors) == 1
    assert node_1.predecessors == []
    assert node_1.incoming_nodes == []
    assert (
        f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
        == "builtins.dict"
    )
    assert len(node_1.outgoing_nodes) == 1
    set_0 = {node_1, node_1, node_0, node_1}
    var_0 = module_1.topological_ordering(set_0)
