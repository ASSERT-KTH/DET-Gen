# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    list_0 = []
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "n3H<keZERGv]-[o"
    module_0.topological_ordering(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -303.7
    module_0.topological_ordering(float_0)


def test_case_3():
    none_type_0 = None
    node_0 = module_1.Node(successor=none_type_0, successors=none_type_0)
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -1835
    none_type_0 = None
    none_type_1 = None
    node_0 = module_1.Node(
        successor=none_type_0, successors=none_type_1, incoming_nodes=int_0
    )
    bool_0 = True
    dict_0 = {node_0: bool_0}
    var_0 = module_0.topological_ordering(dict_0)
    none_type_2 = None
    module_0.topological_ordering(none_type_2)


def test_case_5():
    float_0 = 2673.065881363429
    node_0 = module_1.Node(float_0)
    list_0 = [node_0]
    node_1 = module_1.Node(successors=list_0, outgoing_nodes=list_0)
    set_0 = {node_1, node_1, node_1, node_0}
    var_0 = module_0.topological_ordering(set_0)


def test_case_6():
    float_0 = 2673.065881363429
    node_0 = module_1.Node(float_0)
    list_0 = [node_0]
    node_1 = module_1.Node(successors=list_0, outgoing_nodes=list_0)
    set_0 = {node_1, node_1, node_1}
    var_0 = module_0.topological_ordering(set_0)
