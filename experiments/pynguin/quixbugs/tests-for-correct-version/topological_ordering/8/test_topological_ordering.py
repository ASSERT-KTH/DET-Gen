# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import topological_ordering as module_0
import node as module_1


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.topological_ordering(tuple_0)


def test_case_1():
    node_0 = module_1.Node()
    list_0 = [node_0]
    var_0 = module_0.topological_ordering(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -2073.0
    module_0.topological_ordering(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"'Y\x82\xa4\xd7\x83\x9b\x12\x1c"
    node_0 = module_1.Node(outgoing_nodes=bytes_0)
    dict_0 = {node_0: node_0}
    module_0.topological_ordering(dict_0)


def test_case_4():
    bytes_0 = b"'Y\x82\xa4\xd7\x83\x9b\x12\x1c"
    bytes_1 = b"\x88\x18\x08\xf3\xe2-\x15\x92~\x12\xac\xca\xaf)\xf8\x0e"
    node_0 = module_1.Node(
        successors=bytes_0, incoming_nodes=bytes_0, outgoing_nodes=bytes_1
    )
    dict_0 = {node_0: node_0}
    var_0 = module_0.topological_ordering(dict_0)


def test_case_5():
    list_0 = []
    node_0 = module_1.Node(successor=list_0, incoming_nodes=list_0)
    tuple_0 = (node_0, node_0)
    node_1 = module_1.Node(outgoing_nodes=tuple_0)
    dict_0 = {node_1: node_1}
    var_0 = module_0.topological_ordering(dict_0)
