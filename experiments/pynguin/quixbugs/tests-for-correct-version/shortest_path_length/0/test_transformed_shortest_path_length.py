# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


#@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "*qW:~\x0cuh]IS|LNjrY"
    none_type_0 = None
#    module_0.get(str_0, none_type_0)


def test_case_2():
    dict_0 = {}
    node_0 = module_1.Node(dict_0, dict_0, predecessors=dict_0, outgoing_nodes=dict_0)
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_1 = module_0.get(dict_0, dict_0)
    assert var_1 == 0


#@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
#    module_0.insert_or_update(none_type_0, none_type_0)


#@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    bool_1 = False
#    module_0.shortest_path_length(bool_0, bool_0, bool_1)


def test_case_5():
    dict_0 = {}
    node_0 = module_1.Node(dict_0, dict_0, predecessors=dict_0, outgoing_nodes=dict_0)
    var_0 = module_0.shortest_path_length(dict_0, node_0, dict_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


#@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    set_0 = {var_0, none_type_0, var_0, var_0}
#    module_0.insert_or_update(set_0, set_0)


#@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = ()
    node_0 = module_1.Node(
        successors=tuple_0, incoming_nodes=tuple_0, outgoing_nodes=tuple_0
    )
    var_0 = module_0.shortest_path_length(tuple_0, node_0, tuple_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)
    tuple_1 = (var_0, node_0)
    tuple_2 = (tuple_1,)
    var_1 = module_0.get(tuple_2, tuple_2)
    assert var_1 == 0
#    module_2.nlargest(var_1, var_1)


#@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xc5\xff"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bool_0}
    tuple_0 = ()
    int_0 = 1897
    tuple_1 = (bytes_0, dict_0, tuple_0, int_0)
    var_0 = module_0.get(tuple_1, bool_0)
    assert var_0 == b"\xc5\xff"
#    var_0.successors()


#@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "cg"
    list_0 = [str_0, str_0]
#    module_0.insert_or_update(list_0, list_0)


#@pytest.mark.xfail(strict=True)
def test_case_10():
    tuple_0 = ()
    node_0 = module_1.Node(
        successors=tuple_0, incoming_nodes=tuple_0, outgoing_nodes=tuple_0
    )
    var_0 = module_0.get(tuple_0, node_0)
    assert var_0 == 0
    var_1 = module_0.shortest_path_length(tuple_0, node_0, tuple_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    tuple_1 = (var_1, var_0)
    set_0 = {tuple_1}
#    module_0.insert_or_update(set_0, tuple_1)


#@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 267
    dict_0 = {int_0: int_0, int_0: int_0}
    node_0 = module_1.Node(successors=dict_0)
#    module_0.shortest_path_length(node_0, node_0, dict_0)
