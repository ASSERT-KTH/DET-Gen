# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


#@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xaaK\xb8"
#    module_0.get(bytes_0, bytes_0)


#@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"j\xb8\xa47\x08\xfc}\xb2j"
    node_0 = module_1.Node(successor=bytes_0, successors=bytes_0)
#    module_0.shortest_path_length(bytes_0, node_0, bytes_0)


#@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 2561
#    module_0.get(int_0, int_0)


def test_case_4():
    bytes_0 = b"Y\xc6\xa7\x12K\x94\xe0]\x8e5WM\x0b\xcf\x12\x8f\x00ls"
    node_0 = module_1.Node(outgoing_nodes=bytes_0)
    var_0 = module_0.shortest_path_length(bytes_0, node_0, bytes_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


#@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -1273
    tuple_0 = (int_0, int_0)
#    module_0.insert_or_update(tuple_0, tuple_0)


def test_case_6():
    list_0 = []
    list_1 = [list_0, list_0]
    var_0 = module_0.insert_or_update(list_0, list_1)


#@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 2397
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0
    set_0 = {var_0, int_0, int_0, int_0}
    tuple_0 = (set_0, int_0)
#    module_0.get(tuple_0, var_0)


#@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "f#^h"
    bytes_0 = b"\xd9T\xa4\xb1\xda\xfbd\x10\xb2\xe74"
    tuple_0 = (str_0, bytes_0)
    set_0 = {tuple_0, bytes_0, str_0, bytes_0}
    var_0 = module_0.get(set_0, bytes_0)
    assert var_0 == "f#^h"
    bytes_1 = b"\xbc\xe63nVs\xe8"
    float_0 = -1337.8181
#    module_0.insert_or_update(bytes_1, float_0)


#@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "f#^h"
    bytes_0 = b"\xd9T\xa4\xb1\xda\xfbd\x10\xb2\xe74"
    tuple_0 = (str_0, bytes_0)
    set_0 = {tuple_0, bytes_0, str_0, bytes_0}
#    module_0.insert_or_update(set_0, tuple_0)


#@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "Eh"
    bytes_0 = b"\xd9T\xa4\xb1\xda\xfbd\x10\xb2\xe74"
    tuple_0 = (str_0, bytes_0)
    set_0 = {tuple_0, bytes_0, str_0, bytes_0}
#    module_0.insert_or_update(set_0, tuple_0)
