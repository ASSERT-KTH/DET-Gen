# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


#@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xa9\x8a\x87I"
#    module_0.get(bytes_0, bytes_0)


#@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    node_0 = module_1.Node(
        none_type_0, successors=dict_0, predecessors=dict_0, incoming_nodes=none_type_0
    )
#    module_0.shortest_path_length(node_0, node_0, none_type_0)


#@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1723
    none_type_0 = None
#    module_0.shortest_path_length(int_0, int_0, none_type_0)


#@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x15*"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
#    module_0.insert_or_update(dict_0, var_0)


def test_case_5():
    bytes_0 = b"\x15*"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)


def test_case_6():
    bool_0 = True
    node_0 = module_1.Node(incoming_nodes=bool_0)
    var_0 = module_0.shortest_path_length(bool_0, node_0, bool_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


#@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\x15*"
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_1 = module_0.insert_or_update(dict_0, bytes_0)
    set_0 = set()
#    module_0.insert_or_update(set_0, bytes_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
    node_0 = module_1.Node(incoming_nodes=var_0)
    assert node_0.incoming_nodes == 0
    var_1 = module_0.shortest_path_length(var_0, node_0, var_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    node_1 = module_1.Node(incoming_nodes=var_0)
    assert node_1.incoming_nodes == 0
    complex_0 = 2682.653 - 1099.3220429199644j
    dict_0 = {var_1: complex_0}
    var_2 = module_2.merge(key=var_0, reverse=var_1)
    node_2 = module_1.Node(
        node_1, successors=dict_0, predecessors=var_0, incoming_nodes=var_0
    )
    assert node_2.predecessors == 0
    assert node_2.incoming_nodes == 0
    list_0 = [var_0, node_0]
    tuple_1 = (list_0, var_0)
    var_3 = module_0.get(tuple_1, node_0)
    assert var_3 == 0


#@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x15*"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)
#    module_0.insert_or_update(dict_0, dict_0)
