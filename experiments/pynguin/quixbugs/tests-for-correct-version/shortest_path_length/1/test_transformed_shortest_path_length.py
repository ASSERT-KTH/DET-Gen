# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    int_0 = 2098
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


#@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    bytes_0 = b"$\xd7c=\x93\x12|\xb9"
#    module_0.get(bytes_0, none_type_0)


#@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    bytes_0 = b""
    dict_0 = {bool_0: bool_0, bytes_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    var_0 = module_0.get(bytes_0, bytes_0)
    assert var_0 == 0
    dict_1 = {}
#    module_0.insert_or_update(dict_1, dict_0)


#@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
#    module_0.insert_or_update(tuple_0, tuple_0)


#@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    none_type_0 = None
#    module_0.shortest_path_length(bool_0, none_type_0, bool_0)


#@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xb8W"
    list_0 = [bytes_0, bytes_0]
#    module_0.insert_or_update(list_0, list_0)


def test_case_6():
    none_type_0 = None
    node_0 = module_1.Node(none_type_0, predecessors=none_type_0)
    var_0 = module_0.shortest_path_length(none_type_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


#@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xb8W"
    bool_0 = True
    list_0 = [bytes_0, bool_0]
    none_type_0 = None
#    module_0.get(list_0, none_type_0)


#@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"%\xb4Z\xb3\xeb_(\xfa\xcb\xc2H\x88\xcei\xe3J\xe05"
    list_0 = [bytes_0, bytes_0]
    bool_0 = False
    str_0 = 'au_9eOLmBKr"Wg+r'
    tuple_0 = (list_0, bool_0, str_0)
#    module_0.insert_or_update(tuple_0, list_0)


#@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    node_0 = module_1.Node(none_type_0, successors=dict_0, predecessors=dict_0)
#    module_0.shortest_path_length(none_type_0, node_0, dict_0)


#@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    bytes_0 = b"[\x96\xaav\xec\x80]\xdb\x1fW I\xd4\xde\x90\x9e\xf8\xda"
    dict_0 = {tuple_0: bool_0, bytes_0: bool_0, bool_0: tuple_0, tuple_0: bool_0}
    var_0 = module_0.get(dict_0, bool_0)
    assert var_0 is False
    none_type_0 = None
    dict_1 = {}
    var_1 = module_0.shortest_path_length(dict_1, dict_1, dict_1)
    assert var_1 == 0
    var_2 = module_0.get(dict_1, none_type_0)
    assert var_2 == 0
    dict_2 = {
        var_2: var_2,
        var_2: var_2,
        none_type_0: dict_1,
        var_2: var_2,
        none_type_0: dict_1,
    }
    node_0 = module_1.Node()
    var_3 = module_2.merge()
    var_4 = module_0.shortest_path_length(none_type_0, node_0, var_3)
    assert var_4 == pytest.approx(1e309, abs=0.01, rel=0.01)
    none_type_1 = None
    node_1 = module_1.Node(none_type_0, successors=dict_2, predecessors=none_type_1)
    assert node_1.successors == {0: 0, None: {}}
#    module_0.shortest_path_length(var_2, node_1, dict_1)
