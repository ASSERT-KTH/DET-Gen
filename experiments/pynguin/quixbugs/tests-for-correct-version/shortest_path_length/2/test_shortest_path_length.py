# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1
import heapq as module_2


def test_case_0():
    bool_0 = True
    var_0 = module_0.shortest_path_length(bool_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    str_0 = "XWeR"
    module_0.get(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xe7z\x84\x13\xf3\tC\x84\x83"
    node_0 = module_1.Node(successors=bytes_0)
    module_0.shortest_path_length(node_0, node_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 1903.21436
    list_0 = [float_0, float_0]
    module_0.insert_or_update(list_0, list_0)


def test_case_4():
    none_type_0 = None
    node_0 = module_1.Node(predecessors=none_type_0)
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


def test_case_5():
    bytes_0 = b"W\xc9"
    set_0 = set()
    list_0 = [bytes_0, bytes_0, set_0]
    var_0 = module_0.insert_or_update(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"q\x82"
    dict_0 = {bytes_0: bytes_0}
    var_0 = module_0.insert_or_update(dict_0, bytes_0)
    module_0.get(dict_0, bytes_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.get(dict_0, dict_0)
    assert var_0 == 0
    node_0 = module_1.Node(predecessors=dict_0)
    var_1 = module_2.nlargest(var_0, dict_0)
    var_2 = module_1.Node(predecessors=node_0)
    str_0 = "jP"
    var_3 = module_0.insert_or_update(var_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"q\x82"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    var_0 = module_0.get(dict_0, list_0)
    assert var_0 == 0
    var_1 = module_0.insert_or_update(dict_0, bytes_0)
    node_0 = module_1.Node(var_1, incoming_nodes=list_0, outgoing_nodes=dict_0)
    var_2 = module_0.shortest_path_length(var_1, node_0, var_0)
    assert var_2 == pytest.approx(1e309, abs=0.01, rel=0.01)
    module_0.insert_or_update(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"q%"
    var_0 = module_0.shortest_path_length(bytes_0, bytes_0, bytes_0)
    assert var_0 == 0
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    var_1 = module_0.get(dict_0, list_0)
    assert var_1 == 0
    var_2 = module_0.insert_or_update(dict_0, bytes_0)
    node_0 = module_1.Node(var_2, dict_0, incoming_nodes=list_0, outgoing_nodes=dict_0)
    var_3 = module_0.get(list_0, var_0)
    assert var_3 == b"q%"
    var_4 = module_0.shortest_path_length(var_2, node_0, var_1)
    assert var_4 == pytest.approx(1e309, abs=0.01, rel=0.01)
    var_5 = module_0.shortest_path_length(node_0, node_0, bytes_0)
    module_0.get(dict_0, var_1)
