# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import heapq as module_1
import node as module_2


def test_case_0():
    int_0 = -2107
    var_0 = module_0.shortest_path_length(int_0, int_0, int_0)
    assert var_0 == 0


#@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0
    list_0 = [var_0, var_0, var_0]
    var_1 = module_1.merge(reverse=list_0)
#    module_0.get(list_0, none_type_0)


#@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    var_0 = module_1.merge(reverse=list_0)
    var_1 = module_0.get(var_0, var_0)
    assert var_1 == 0
#    module_0.insert_or_update(var_0, var_1)


def test_case_3():
    none_type_0 = None
    node_0 = module_2.Node(
        none_type_0,
        predecessors=none_type_0,
        incoming_nodes=none_type_0,
        outgoing_nodes=none_type_0,
    )
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


#@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"c~u"
    str_0 = "]&"
#    module_0.insert_or_update(bytes_0, str_0)


#@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bytes_0 = b"m\x9b\xd3A\x9c<\xc3t\xa7\xc7"
    tuple_0 = (list_0, list_0, bytes_0, bytes_0)
#    module_0.insert_or_update(tuple_0, list_0)


#@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '[e\t\\4"LCD)Iy^)8g*'
    var_0 = module_0.shortest_path_length(str_0, str_0, str_0)
    assert var_0 == 0
    bytes_0 = b""
    str_1 = "]&"
#    module_0.insert_or_update(bytes_0, str_1)


#@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    list_1 = [tuple_0, bool_0]
    list_2 = [list_1, tuple_0, list_0]
    var_0 = module_0.insert_or_update(list_2, list_1)
    list_3 = [list_1, list_1, list_1]
    list_4 = []
    bool_1 = False
    node_0 = module_2.Node(var_0, list_4, outgoing_nodes=bool_1)
    var_1 = module_0.get(list_3, tuple_0)
    assert var_1 == 0
#    module_0.shortest_path_length(var_1, var_1, list_4)


#@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    node_0 = module_2.Node(
        none_type_0,
        successors=list_0,
        incoming_nodes=none_type_0,
        outgoing_nodes=list_0,
    )
#    module_0.shortest_path_length(list_0, node_0, list_0)


#@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    list_1 = [tuple_0, bool_0]
    list_2 = [list_1, tuple_0, list_0]
    var_0 = module_0.insert_or_update(list_2, list_1)
    var_1 = module_0.shortest_path_length(list_1, tuple_0, tuple_0)
    assert var_1 == 0
    var_2 = module_0.get(list_1, var_1)
    node_0 = module_2.Node(successor=var_0)
#    module_0.shortest_path_length(list_1, var_1, var_2)


#@pytest.mark.xfail(strict=True)
def test_case_10():
    list_0 = []
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    list_1 = [tuple_0, bool_0]
    list_2 = [list_1, tuple_0, list_0]
    var_0 = module_0.insert_or_update(list_2, list_1)
    none_type_0 = None
    list_3 = [none_type_0, none_type_0, none_type_0]
    list_4 = []
    dict_0 = {none_type_0: list_4, none_type_0: list_3}
    bool_1 = False
    node_0 = module_2.Node(none_type_0, list_4, outgoing_nodes=bool_1)
    var_1 = module_0.shortest_path_length(dict_0, node_0, none_type_0)
    assert var_1 == pytest.approx(1e309, abs=0.01, rel=0.01)
    node_1 = module_2.Node(
        none_type_0,
        successors=list_3,
        incoming_nodes=none_type_0,
        outgoing_nodes=list_3,
    )
    list_5 = [var_1, list_4]
#    module_0.insert_or_update(list_1, list_5)
