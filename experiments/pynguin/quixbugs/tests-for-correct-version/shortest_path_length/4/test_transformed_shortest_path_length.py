# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import shortest_path_length as module_0
import node as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.shortest_path_length(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


#@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"Z\xf9\x95"
    none_type_0 = None
#    module_0.get(bytes_0, none_type_0)


#@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    var_0 = module_0.get(tuple_0, tuple_0)
    assert var_0 == 0
#    var_0.successor()


#@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
#    module_0.insert_or_update(none_type_0, none_type_0)


def test_case_4():
    node_0 = module_1.Node()
    none_type_0 = None
    var_0 = module_0.shortest_path_length(node_0, node_0, none_type_0)
    assert var_0 == pytest.approx(1e309, abs=0.01, rel=0.01)


#@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xf9\x95"
#    module_0.insert_or_update(bytes_0, bytes_0)


#@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "!Z"
    tuple_0 = (str_0,)
#    module_0.insert_or_update(tuple_0, str_0)


#@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"C\x91\xde\x93#\xfb98qG\xbd"
    node_0 = module_1.Node(successors=bytes_0)
#    module_0.shortest_path_length(node_0, node_0, bytes_0)


#@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    list_0 = [set_0, set_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0)
#    module_0.get(tuple_0, list_0)


#@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x98\x91"
    float_0 = 4426.3981
    bytes_1 = b"Zq"
    set_0 = {bytes_1, bytes_0}
    tuple_0 = (bytes_0, float_0, bytes_1, set_0)
#    module_0.insert_or_update(tuple_0, set_0)


#@pytest.mark.xfail(strict=True)
def test_case_10():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
#    module_0.insert_or_update(tuple_0, list_0)


#@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"%p\x8bw\xf1\xf6e\xb1\xe9\x86"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    set_0 = {tuple_0}
    var_0 = module_0.get(set_0, bool_0)
    assert var_0 == b"%p\x8bw\xf1\xf6e\xb1\xe9\x86"
    none_type_0 = None
#    module_0.get(none_type_0, none_type_0)
