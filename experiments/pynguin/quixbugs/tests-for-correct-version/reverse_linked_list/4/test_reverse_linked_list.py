# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reverse_linked_list as module_0
import node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = -1627 + 445.8j
    module_0.reverse_linked_list(complex_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.reverse_linked_list(none_type_0)


def test_case_2():
    none_type_0 = None
    node_0 = module_1.Node(successors=none_type_0, incoming_nodes=none_type_0)
    var_0 = module_0.reverse_linked_list(node_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "node.Node"
    assert var_0.value is None
    assert var_0.successor is None
    assert var_0.successors is None
    assert var_0.predecessors == []
    assert var_0.incoming_nodes is None
    assert var_0.outgoing_nodes == []
    var_1 = module_0.reverse_linked_list(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "node.Node"
    assert var_1.value is None
    assert var_1.successor is None
    assert var_1.successors is None
    assert var_1.predecessors == []
    assert var_1.incoming_nodes is None
    assert var_1.outgoing_nodes == []


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "M2S%u\\`aGxX\\_\tiZ?"
    bool_0 = False
    var_0 = module_1.Node(successor=str_0, predecessors=bool_0)
    module_0.reverse_linked_list(var_0)
