============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.4, pluggy-1.4.0
rootdir: /home/khashayar/projs/det-gen
plugins: anyio-4.3.0
collected 2 items

pynguin-qb-simple-res/detect_cycle/80/test_transformed_detect_cycle.py F [ 50%]
F                                                                        [100%]

=================================== FAILURES ===================================
_________________________________ test_case_0 __________________________________

    def test_case_0():
        node_0 = module_0.Node()
        assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
        assert node_0.value is None
        assert node_0.successor is None
        assert node_0.successors == []
        assert node_0.predecessors == []
        assert node_0.incoming_nodes == []
        assert node_0.outgoing_nodes == []
        node_1 = module_0.Node(node_0, node_0, node_0, outgoing_nodes=node_0)
        assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
        assert (
            f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
            == "node.Node"
        )
        assert (
            f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
            == "node.Node"
        )
        assert (
            f"{type(node_1.successors).__module__}.{type(node_1.successors).__qualname__}"
            == "node.Node"
        )
        assert node_1.predecessors == []
        assert node_1.incoming_nodes == []
        assert (
            f"{type(node_1.outgoing_nodes).__module__}.{type(node_1.outgoing_nodes).__qualname__}"
            == "node.Node"
        )
>       var_0 = module_1.detect_cycle(node_1)

pynguin-qb-simple-res/detect_cycle/80/test_transformed_detect_cycle.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

node = <node.Node object at 0x7f735aaf87f0>

    def detect_cycle(node):
        hare = tortoise = node
    
        while True:
>           if hare.successor is None:
E           AttributeError: 'NoneType' object has no attribute 'successor'

pynguin-qb-simple-res/detect_cycle/80/detect_cycle.py:5: AttributeError
_________________________________ test_case_1 __________________________________

    def test_case_1():
        bool_0 = False
        node_0 = module_0.Node(bool_0)
        assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "node.Node"
        assert node_0.value is False
        assert node_0.successor is None
        assert node_0.successors == []
        assert node_0.predecessors == []
        assert node_0.incoming_nodes == []
        assert node_0.outgoing_nodes == []
        node_1 = module_0.Node(
            successor=node_0, successors=bool_0, predecessors=bool_0, outgoing_nodes=bool_0
        )
        assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "node.Node"
        assert node_1.value is None
        assert (
            f"{type(node_1.successor).__module__}.{type(node_1.successor).__qualname__}"
            == "node.Node"
        )
        assert node_1.successors is False
        assert node_1.predecessors is False
        assert node_1.incoming_nodes == []
        assert node_1.outgoing_nodes is False
>       var_0 = module_1.detect_cycle(node_1)

pynguin-qb-simple-res/detect_cycle/80/test_transformed_detect_cycle.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

node = <node.Node object at 0x7f735ab09ba0>

    def detect_cycle(node):
        hare = tortoise = node
    
        while True:
>           if hare.successor is None:
E           AttributeError: 'NoneType' object has no attribute 'successor'

pynguin-qb-simple-res/detect_cycle/80/detect_cycle.py:5: AttributeError
=========================== short test summary info ============================
FAILED pynguin-qb-simple-res/detect_cycle/80/test_transformed_detect_cycle.py::test_case_0
FAILED pynguin-qb-simple-res/detect_cycle/80/test_transformed_detect_cycle.py::test_case_1
============================== 2 failed in 0.07s ===============================
