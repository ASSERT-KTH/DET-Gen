{
    "levenshtein": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "max_sublist_sum": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "next_palindrome": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "breadth_first_search": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "longest_common_subsequence": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "bitcount": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "kheapsort": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "next_permutation": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "reverse_linked_list": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "to_base": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "depth_first_search": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "possible_change": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "gcd": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "get_factors": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "shortest_path_length": {
        "buggy_fail": false,
        "correct_fail": true
    },
    "is_valid_parenthesization": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "shunting_yard": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "detect_cycle": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "find_first_in_sorted": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "sqrt": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "powerset": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "pascal": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "subsequences": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "topological_ordering": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "flatten": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "kth": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "shortest_paths": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "knapsack": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "lcs_length": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "rpn_eval": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "bucketsort": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "lis": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "hanoi": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "shortest_path_lengths": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "mergesort": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "node": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "find_in_sorted": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "wrap": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "minimum_spanning_tree": {
        "buggy_fail": true,
        "correct_fail": false
    },
    "sieve": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "quicksort": {
        "buggy_fail": false,
        "correct_fail": false
    },
    "programs_with_buggy_fail": [
        "find_in_sorted",
        "reverse_linked_list",
        "to_base",
        "possible_change",
        "sqrt",
        "kth",
        "gcd",
        "lis",
        "is_valid_parenthesization",
        "breadth_first_search",
        "shortest_paths",
        "mergesort",
        "find_first_in_sorted",
        "lcs_length",
        "pascal",
        "minimum_spanning_tree",
        "detect_cycle",
        "levenshtein"
    ],
    "programs_with_correct_fail": [
        "shortest_path_length"
    ]
}