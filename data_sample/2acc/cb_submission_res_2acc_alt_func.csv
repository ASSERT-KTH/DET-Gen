id,submission,sourceCode,author,memory,time,sent,countLine,problems_id,verdicts_id,languages_id,test_res,sanity,verdicts,bleu_score,diff_ratio,test_res_result,failed_tests_ratio,nested_input,func_sourceCode
3003896,27974808,"s = input()
c = 0
i = 1
t=s[0]
while c != 7 and i < len(s):
    if s[i] == t:
        c += 1
    else:
        t = s[i]
        c = 0
    i += 1
if c == 7:
    print(""YES"")
else:
    print(""NO"")",62894,5396,122,6/23/17 4:01,15,2555,2,8,"[(True, 'NO', 'NO', 219615), (True, 'YES', 'YES', 219616), (False, 'NO', 'YES', 219617), (True, 'YES', 'YES', 219618), (True, 'NO', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (True, 'YES', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (True, 'NO', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (True, 'NO', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (False, 'NO', 'YES', 219634), (True, 'NO', 'NO', 219635), (True, 'NO', 'NO', 219636), (True, 'YES', 'YES', 219637), (True, 'NO', 'NO', 219638), (True, 'NO', 'NO', 219639), (False, 'NO', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (True, 'YES', 'YES', 219645), (True, 'NO', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (True, 'NO', 'NO', 219649), (True, 'YES', 'YES', 219650), (True, 'YES', 'YES', 219651), (True, 'YES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (False, 'NO', 'YES', 219655), (False, 'NO', 'YES', 219656), (False, 'NO', 'YES', 219657), (False, 'NO', 'YES', 219658)]",False,Wrong Answer,0.8729435194251833,0.985645933014354,False,0.1590909090909091,False,"def func(*args):
	
	s = args[0]
	c = 0
	i = 1
	t = s[0]
	while ((c != 7) and (i < len(s))):
	    if (s[i] == t):
	        c += 1
	    else:
	        t = s[i]
	        c = 0
	    i += 1
	if (c == 7):
	    print('YES')
	else:
	    print('NO')
"
1807840,23977690,"s = input()
m = max(s)
n = sum(map(lambda x: x==m, s))
print(m*n)",28772,4504,154,1/20/17 5:19,4,1596,1,8,"[(True, 'rr', 'rr', 20294), (True, 'wwwww', 'wwwww', 20295), (True, 's', 's', 20296), (True, 'ssss', 'ssss', 20297), (True, 'u', 'u', 20298), (True, 'r', 'r', 20299), (True, 'w', 'w', 20300), (True, 'zzzzzzzzz', 'zzzzzzzzz', 20301), (True, 'tt', 'tt', 20302), (True, 'hhhhh', 'hhhhh', 20303), (True, 'bbbbbbbbb', 'bbbbbbbbb', 20304), (True, 'zz', 'zz', 20305), (True, 'z', 'z', 20306), (True, 'e', 'e', 20307), (True, 'e', 'e', 20308), (True, 'ee', 'ee', 20309), (True, 'b', 'b', 20310), (True, 'zzzzzz', 'zzzzzz', 20311), (True, 'zzzzzz', 'zzzzzz', 20312), (True, 'rrrrr', 'rrrrr', 20313), (True, 'zzz', 'zzz', 20314), (True, 'bbb', 'bbb', 20315), (True, 'zz', 'zz', 20316), (True, 'hh', 'hh', 20317), (True, 'hh', 'hh', 20318), (True, 'uu', 'uu', 20319), (True, 'uu', 'uu', 20320), (True, 'u', 'u', 20321), (True, 'v', 'v', 20322), (True, 'u', 'u', 20323), (True, 'u', 'u', 20324), (True, 'rr', 'rr', 20325), (True, 'o', 'o', 20326), (True, 'y', 'y', 20327), (True, 't', 't', 20328), (True, 'tt', 'tt', 20329), (True, 'mmm', 'mmm', 20330), (True, 'kk', 'kk', 20331), (True, 'zzzzzzzzzz', 'zzzzzzzzzz', 20332), (True, 'aaaaaaaaaa', 'aaaaaaaaaa', 20333), (True, 'zz', 'zz', 20334), (True, 'b', 'b', 20335), (True, 'y', 'y', 20336), (True, 'yy', 'yy', 20337), (True, 'zz', 'zz', 20338), (True, 'bb', 'bb', 20339), (True, 'aa', 'aa', 20340), (True, 'a', 'a', 20341), (True, 'z', 'z', 20342), (True, 'zz', 'zz', 20343), (True, 'zzzzzzz', 'zzzzzzz', 20344), (True, 'llll', 'llll', 20345), (True, 'oo', 'oo', 20346), (True, 'rr', 'rr', 20347)]",True,Accecpted,0.912167909070388,0.9855072463768116,False,0.0,False,"def func(*args):
	
	s = args[0]
	m = max(s)
	n = sum(map((lambda x: (x == m)), s))
	print((m * n))
"
2648813,15172222,"from functools import reduce
from operator import *
from math import *
from sys import *
from string import *
from collections import *
setrecursionlimit(10**7)
dX= [-1, 1, 0, 0,-1, 1,-1, 1]
dY= [ 0, 0,-1, 1, 1,-1,-1, 1]
RI=lambda: list(map(int,input().split()))
RS=lambda: input().rstrip().split()
#################################################
s=input()
for i in range(len(s)-1,-1, -1):
    if(s[i].isalpha()):
        ans= s[i] in ""AEIOUYaeiouy""
print([""NO"",""YES""][ans])",6918,1000,92,1/3/16 22:23,17,2286,2,8,"[(False, 'YES', 'NO', 206526), (True, 'YES', 'YES', 206527), (True, 'YES', 'YES', 206528), (True, 'YES', 'YES', 206529), (False, 'YES', 'NO', 206530), (True, 'NO', 'NO', 206531), (False, 'YES', 'NO', 206532), (True, 'YES', 'YES', 206533), (False, 'YES', 'NO', 206534), (True, 'NO', 'NO', 206535), (True, 'NO', 'NO', 206536), (True, 'NO', 'NO', 206537), (False, 'YES', 'NO', 206538), (True, 'NO', 'NO', 206539), (False, 'NO', 'YES', 206540), (True, 'NO', 'NO', 206541), (True, 'NO', 'NO', 206542), (True, 'NO', 'NO', 206543), (True, 'NO', 'NO', 206544), (False, 'YES', 'NO', 206545), (True, 'NO', 'NO', 206546), (True, 'NO', 'NO', 206547), (True, 'YES', 'YES', 206548), (True, 'NO', 'NO', 206549), (True, 'NO', 'NO', 206550), (True, 'NO', 'NO', 206551), (True, 'NO', 'NO', 206552), (True, 'NO', 'NO', 206553), (False, 'NO', 'YES', 206554), (False, 'NO', 'YES', 206555), (False, 'NO', 'YES', 206556), (False, 'NO', 'YES', 206557), (True, 'YES', 'YES', 206558), (False, 'NO', 'YES', 206559), (False, 'NO', 'YES', 206560)]",False,Wrong Answer,0.968623284932899,0.9855072463768116,False,0.3714285714285714,False,"def func(*args):
	
	from functools import reduce
	from operator import *
	from math import *
	from sys import *
	from string import *
	from collections import *
	setrecursionlimit((10 ** 7))
	dX = [(- 1), 1, 0, 0, (- 1), 1, (- 1), 1]
	dY = [0, 0, (- 1), 1, 1, (- 1), (- 1), 1]
	RI = (lambda : list(map(int, args[0].split())))
	RS = (lambda : args[1].rstrip().split())
	s = args[2]
	for i in range((len(s) - 1), (- 1), (- 1)):
	    if s[i].isalpha():
	        ans = (s[i] in 'AEIOUYaeiouy')
	print(['NO', 'YES'][ans])
"
1256860,17683069,"n,a,b = map(int,input().split())
ans  = min((n-a),(b+1))
print(ans)",13862,4784,124,5/2/16 2:18,3,1142,1,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (True, '1', '1', 138320), (True, '1', '1', 138321), (True, '4', '4', 138322), (True, '7', '7', 138323), (True, '5', '5', 138324), (True, '6', '6', 138325), (True, '10', '10', 138326), (True, '7', '7', 138327), (True, '9', '9', 138328), (True, '15', '15', 138329), (True, '8', '8', 138330), (True, '2', '2', 138331), (True, '24', '24', 138332), (True, '5', '5', 138333), (True, '6', '6', 138334), (True, '16', '16', 138335), (True, '5', '5', 138336), (True, '12', '12', 138337), (True, '17', '17', 138338), (True, '38', '38', 138339), (True, '18', '18', 138340), (True, '38', '38', 138341), (True, '13', '13', 138342), (True, '8', '8', 138343), (True, '13', '13', 138344), (True, '1', '1', 138345), (True, '40', '40', 138346), (True, '53', '53', 138347), (True, '34', '34', 138348), (True, '23', '23', 138349), (True, '39', '39', 138350), (True, '38', '38', 138351), (True, '13', '13', 138352), (True, '36', '36', 138353), (True, '7', '7', 138354), (True, '21', '21', 138355), (True, '21', '21', 138356), (True, '2', '2', 138357), (True, '43', '43', 138358), (True, '9', '9', 138359), (True, '14', '14', 138360), (True, '23', '23', 138361), (True, '89', '89', 138362), (True, '32', '32', 138363), (True, '73', '73', 138364), (True, '89', '89', 138365), (True, '19', '19', 138366), (True, '1', '1', 138367)]",True,Accecpted,0.6434588841607617,0.9855072463768116,False,0.0,False,"def func(*args):
	
	(n, a, b) = map(int, args[0].split())
	ans = min((n - a), (b + 1))
	print(ans)
"
2648814,15172236,"from functools import reduce
from operator import *
from math import *
from sys import *
from string import *
from collections import *
setrecursionlimit(10**7)
dX= [-1, 1, 0, 0,-1, 1,-1, 1]
dY= [ 0, 0,-1, 1, 1,-1,-1, 1]
RI=lambda: list(map(int,input().split()))
RS=lambda: input().rstrip().split()
#################################################
s=input()
for i in range(len(s)-1,-1, -1):
    if(s[i].isalpha()):
        ans= s[i] in ""AEIOUYaeiouy""
        break
print([""NO"",""YES""][ans])",6918,1036,186,1/3/16 22:24,18,2286,1,8,"[(True, 'NO', 'NO', 206526), (True, 'YES', 'YES', 206527), (True, 'YES', 'YES', 206528), (True, 'YES', 'YES', 206529), (True, 'NO', 'NO', 206530), (True, 'NO', 'NO', 206531), (True, 'NO', 'NO', 206532), (True, 'YES', 'YES', 206533), (True, 'NO', 'NO', 206534), (True, 'NO', 'NO', 206535), (True, 'NO', 'NO', 206536), (True, 'NO', 'NO', 206537), (True, 'NO', 'NO', 206538), (True, 'NO', 'NO', 206539), (True, 'YES', 'YES', 206540), (True, 'NO', 'NO', 206541), (True, 'NO', 'NO', 206542), (True, 'NO', 'NO', 206543), (True, 'NO', 'NO', 206544), (True, 'NO', 'NO', 206545), (True, 'NO', 'NO', 206546), (True, 'NO', 'NO', 206547), (True, 'YES', 'YES', 206548), (True, 'NO', 'NO', 206549), (True, 'NO', 'NO', 206550), (True, 'NO', 'NO', 206551), (True, 'NO', 'NO', 206552), (True, 'NO', 'NO', 206553), (True, 'YES', 'YES', 206554), (True, 'YES', 'YES', 206555), (True, 'YES', 'YES', 206556), (True, 'YES', 'YES', 206557), (True, 'YES', 'YES', 206558), (True, 'YES', 'YES', 206559), (True, 'YES', 'YES', 206560)]",True,Accecpted,0.968623284932899,0.9855072463768116,False,0.0,False,"def func(*args):
	
	from functools import reduce
	from operator import *
	from math import *
	from sys import *
	from string import *
	from collections import *
	setrecursionlimit((10 ** 7))
	dX = [(- 1), 1, 0, 0, (- 1), 1, (- 1), 1]
	dY = [0, 0, (- 1), 1, 1, (- 1), (- 1), 1]
	RI = (lambda : list(map(int, args[0].split())))
	RS = (lambda : args[1].rstrip().split())
	s = args[2]
	for i in range((len(s) - 1), (- 1), (- 1)):
	    if s[i].isalpha():
	        ans = (s[i] in 'AEIOUYaeiouy')
	        break
	print(['NO', 'YES'][ans])
"
1256859,17683041,"n,a,b = map(int,input().split())
ans  = min((n-a),(a+1))
print(ans)",13862,4488,122,5/2/16 2:14,3,1142,2,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (True, '1', '1', 138320), (True, '1', '1', 138321), (False, '5', '4', 138322), (False, '5', '7', 138323), (True, '5', '5', 138324), (True, '6', '6', 138325), (False, '7', '10', 138326), (True, '7', '7', 138327), (False, '5', '9', 138328), (False, '9', '15', 138329), (True, '8', '8', 138330), (False, '7', '2', 138331), (False, '6', '24', 138332), (True, '5', '5', 138333), (False, '12', '6', 138334), (True, '16', '16', 138335), (True, '5', '5', 138336), (False, '14', '12', 138337), (True, '17', '17', 138338), (False, '8', '38', 138339), (False, '17', '18', 138340), (False, '12', '38', 138341), (True, '13', '13', 138342), (False, '23', '8', 138343), (True, '13', '13', 138344), (True, '1', '1', 138345), (False, '13', '40', 138346), (False, '10', '53', 138347), (False, '30', '34', 138348), (False, '31', '23', 138349), (False, '28', '39', 138350), (False, '34', '38', 138351), (False, '15', '13', 138352), (True, '36', '36', 138353), (True, '7', '7', 138354), (False, '26', '21', 138355), (True, '21', '21', 138356), (True, '2', '2', 138357), (False, '1', '43', 138358), (True, '9', '9', 138359), (True, '14', '14', 138360), (False, '3', '23', 138361), (False, '6', '89', 138362), (True, '32', '32', 138363), (False, '23', '73', 138364), (False, '12', '89', 138365), (True, '19', '19', 138366), (True, '1', '1', 138367)]",False,Wrong Answer,0.6434588841607617,0.9855072463768116,False,0.52,False,"def func(*args):
	
	(n, a, b) = map(int, args[0].split())
	ans = min((n - a), (a + 1))
	print(ans)
"
2731137,20791915,"def tri(a, b, c, d):
	if ((a + b > c) and (a + c > b) and (b + c > a) or ((d + b > c) and (d + c > b) and (b + c > d)) or (( a+ d > c) and (a + c > d) and ( d + c > a)) or ((a + b > d) and (a + d > b) and (b + d > a))):

		print(""TRIANGLE"")
	else:
		if ((a + b == c) or (a + c == b) or (b + c == a) or (d + b == c) or (d + c == b) or (b + c == d) or (a + d == c) or (a + c == d) or (d + c == a) or (a + b == d) or (b + d == a) or (a + d == b)):
			print(""SEGMENT"")
		else:
			print(""IMPOSSIBLE"")
a, b, c, d= map(int, input().split(' '))
tri(a,b,c,d)",28708,28,154,9/21/16 13:14,11,2346,1,8,"[(True, 'TRIANGLE', 'TRIANGLE', 209679), (True, 'SEGMENT', 'SEGMENT', 209680), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209681), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209682), (True, 'TRIANGLE', 'TRIANGLE', 209683), (True, 'TRIANGLE', 'TRIANGLE', 209684), (True, 'TRIANGLE', 'TRIANGLE', 209685), (True, 'TRIANGLE', 'TRIANGLE', 209686), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209687), (True, 'TRIANGLE', 'TRIANGLE', 209688), (True, 'SEGMENT', 'SEGMENT', 209689), (True, 'TRIANGLE', 'TRIANGLE', 209690), (True, 'SEGMENT', 'SEGMENT', 209691), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209692), (True, 'TRIANGLE', 'TRIANGLE', 209693), (True, 'TRIANGLE', 'TRIANGLE', 209694), (True, 'SEGMENT', 'SEGMENT', 209695), (True, 'SEGMENT', 'SEGMENT', 209696), (True, 'TRIANGLE', 'TRIANGLE', 209697), (True, 'SEGMENT', 'SEGMENT', 209698), (True, 'SEGMENT', 'SEGMENT', 209699), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209700), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209701), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209702), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209703), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209704), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209705), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209706), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209707), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209708), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209709), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209710), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209711), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209712), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209713), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209714), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209715), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209716), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209717), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209718), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209719), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209720), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209721), (True, 'SEGMENT', 'SEGMENT', 209722), (True, 'SEGMENT', 'SEGMENT', 209723), (True, 'SEGMENT', 'SEGMENT', 209724), (True, 'SEGMENT', 'SEGMENT', 209725), (True, 'SEGMENT', 'SEGMENT', 209726), (True, 'SEGMENT', 'SEGMENT', 209727), (True, 'SEGMENT', 'SEGMENT', 209728), (True, 'SEGMENT', 'SEGMENT', 209729), (True, 'SEGMENT', 'SEGMENT', 209730), (True, 'SEGMENT', 'SEGMENT', 209731), (True, 'SEGMENT', 'SEGMENT', 209732), (True, 'SEGMENT', 'SEGMENT', 209733), (True, 'SEGMENT', 'SEGMENT', 209734), (True, 'SEGMENT', 'SEGMENT', 209735), (True, 'SEGMENT', 'SEGMENT', 209736), (True, 'SEGMENT', 'SEGMENT', 209737), (True, 'SEGMENT', 'SEGMENT', 209738), (True, 'SEGMENT', 'SEGMENT', 209739), (True, 'SEGMENT', 'SEGMENT', 209740), (True, 'SEGMENT', 'SEGMENT', 209741), (True, 'TRIANGLE', 'TRIANGLE', 209742), (True, 'TRIANGLE', 'TRIANGLE', 209743), (True, 'TRIANGLE', 'TRIANGLE', 209744), (True, 'TRIANGLE', 'TRIANGLE', 209745), (True, 'TRIANGLE', 'TRIANGLE', 209746), (True, 'TRIANGLE', 'TRIANGLE', 209747), (True, 'TRIANGLE', 'TRIANGLE', 209748), (True, 'TRIANGLE', 'TRIANGLE', 209749), (True, 'TRIANGLE', 'TRIANGLE', 209750), (True, 'TRIANGLE', 'TRIANGLE', 209751), (True, 'TRIANGLE', 'TRIANGLE', 209752), (True, 'TRIANGLE', 'TRIANGLE', 209753), (True, 'TRIANGLE', 'TRIANGLE', 209754), (True, 'TRIANGLE', 'TRIANGLE', 209755), (True, 'TRIANGLE', 'TRIANGLE', 209756), (True, 'TRIANGLE', 'TRIANGLE', 209757), (True, 'TRIANGLE', 'TRIANGLE', 209758), (True, 'TRIANGLE', 'TRIANGLE', 209759), (True, 'TRIANGLE', 'TRIANGLE', 209760), (True, 'TRIANGLE', 'TRIANGLE', 209761)]",True,Accecpted,0.9469534546310188,0.985480943738657,False,0.0,False,"def func(*args):
	
	
	def tri(a, b, c, d):
	    if ((((a + b) > c) and ((a + c) > b) and ((b + c) > a)) or (((d + b) > c) and ((d + c) > b) and ((b + c) > d)) or (((a + d) > c) and ((a + c) > d) and ((d + c) > a)) or (((a + b) > d) and ((a + d) > b) and ((b + d) > a))):
	        print('TRIANGLE')
	    elif (((a + b) == c) or ((a + c) == b) or ((b + c) == a) or ((d + b) == c) or ((d + c) == b) or ((b + c) == d) or ((a + d) == c) or ((a + c) == d) or ((d + c) == a) or ((a + b) == d) or ((b + d) == a) or ((a + d) == b)):
	        print('SEGMENT')
	    else:
	        print('IMPOSSIBLE')
	(a, b, c, d) = map(int, args[0].split(' '))
	tri(a, b, c, d)
"
2731136,20791882,"def tri(a, b, c, d):
	if ((a + b > c) and (a + c > b) and (b + c > a) or ((d + b > c) and (d + c > b) and (b + c > d)) or (( a+ d > c) and (a + c > d) and ( d + c > a)) or ((a + b > d) and (a + d > b) and (b + d > a))):

		print(""TRIANGLE"")
	else:
		if ((a + b == c) or (a + c == b) or (b + c == a) or (d + b == c) or (d + c == b) or (b + c == d) or (a + d == c) or (a + c == d) or (d + c == a) or (a + b == d) or (b + d == a)):
			print(""SEGMENT"")
		else:
			print(""IMPOSSIBLE"")
a, b, c, d= map(int, input().split(' '))
tri(a,b,c,d)",28708,8,124,9/21/16 13:11,11,2346,2,8,"[(True, 'TRIANGLE', 'TRIANGLE', 209679), (True, 'SEGMENT', 'SEGMENT', 209680), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209681), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209682), (True, 'TRIANGLE', 'TRIANGLE', 209683), (True, 'TRIANGLE', 'TRIANGLE', 209684), (True, 'TRIANGLE', 'TRIANGLE', 209685), (True, 'TRIANGLE', 'TRIANGLE', 209686), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209687), (True, 'TRIANGLE', 'TRIANGLE', 209688), (False, 'IMPOSSIBLE', 'SEGMENT', 209689), (True, 'TRIANGLE', 'TRIANGLE', 209690), (True, 'SEGMENT', 'SEGMENT', 209691), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209692), (True, 'TRIANGLE', 'TRIANGLE', 209693), (True, 'TRIANGLE', 'TRIANGLE', 209694), (True, 'SEGMENT', 'SEGMENT', 209695), (True, 'SEGMENT', 'SEGMENT', 209696), (True, 'TRIANGLE', 'TRIANGLE', 209697), (True, 'SEGMENT', 'SEGMENT', 209698), (True, 'SEGMENT', 'SEGMENT', 209699), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209700), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209701), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209702), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209703), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209704), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209705), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209706), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209707), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209708), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209709), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209710), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209711), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209712), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209713), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209714), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209715), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209716), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209717), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209718), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209719), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209720), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209721), (True, 'SEGMENT', 'SEGMENT', 209722), (True, 'SEGMENT', 'SEGMENT', 209723), (True, 'SEGMENT', 'SEGMENT', 209724), (True, 'SEGMENT', 'SEGMENT', 209725), (False, 'IMPOSSIBLE', 'SEGMENT', 209726), (True, 'SEGMENT', 'SEGMENT', 209727), (True, 'SEGMENT', 'SEGMENT', 209728), (True, 'SEGMENT', 'SEGMENT', 209729), (True, 'SEGMENT', 'SEGMENT', 209730), (True, 'SEGMENT', 'SEGMENT', 209731), (True, 'SEGMENT', 'SEGMENT', 209732), (True, 'SEGMENT', 'SEGMENT', 209733), (True, 'SEGMENT', 'SEGMENT', 209734), (True, 'SEGMENT', 'SEGMENT', 209735), (True, 'SEGMENT', 'SEGMENT', 209736), (True, 'SEGMENT', 'SEGMENT', 209737), (True, 'SEGMENT', 'SEGMENT', 209738), (True, 'SEGMENT', 'SEGMENT', 209739), (True, 'SEGMENT', 'SEGMENT', 209740), (True, 'SEGMENT', 'SEGMENT', 209741), (True, 'TRIANGLE', 'TRIANGLE', 209742), (True, 'TRIANGLE', 'TRIANGLE', 209743), (True, 'TRIANGLE', 'TRIANGLE', 209744), (True, 'TRIANGLE', 'TRIANGLE', 209745), (True, 'TRIANGLE', 'TRIANGLE', 209746), (True, 'TRIANGLE', 'TRIANGLE', 209747), (True, 'TRIANGLE', 'TRIANGLE', 209748), (True, 'TRIANGLE', 'TRIANGLE', 209749), (True, 'TRIANGLE', 'TRIANGLE', 209750), (True, 'TRIANGLE', 'TRIANGLE', 209751), (True, 'TRIANGLE', 'TRIANGLE', 209752), (True, 'TRIANGLE', 'TRIANGLE', 209753), (True, 'TRIANGLE', 'TRIANGLE', 209754), (True, 'TRIANGLE', 'TRIANGLE', 209755), (True, 'TRIANGLE', 'TRIANGLE', 209756), (True, 'TRIANGLE', 'TRIANGLE', 209757), (True, 'TRIANGLE', 'TRIANGLE', 209758), (True, 'TRIANGLE', 'TRIANGLE', 209759), (True, 'TRIANGLE', 'TRIANGLE', 209760), (True, 'TRIANGLE', 'TRIANGLE', 209761)]",False,Wrong Answer,0.9469534546310188,0.985480943738657,False,0.0240963855421686,False,"def func(*args):
	
	
	def tri(a, b, c, d):
	    if ((((a + b) > c) and ((a + c) > b) and ((b + c) > a)) or (((d + b) > c) and ((d + c) > b) and ((b + c) > d)) or (((a + d) > c) and ((a + c) > d) and ((d + c) > a)) or (((a + b) > d) and ((a + d) > b) and ((b + d) > a))):
	        print('TRIANGLE')
	    elif (((a + b) == c) or ((a + c) == b) or ((b + c) == a) or ((d + b) == c) or ((d + c) == b) or ((b + c) == d) or ((a + d) == c) or ((a + c) == d) or ((d + c) == a) or ((a + b) == d) or ((b + d) == a)):
	        print('SEGMENT')
	    else:
	        print('IMPOSSIBLE')
	(a, b, c, d) = map(int, args[0].split(' '))
	tri(a, b, c, d)
"
1110362,27980982,"n = int(input())
n -= 10
a = [1,2,3,4,5,6,7,8,9,10,10,10,10]
cnt = 0
for i in range(13):
    if a[i] == n:
        cnt += 1

cnt *= 4
if n == 10:
    cnt -= 1

print(cnt)",2016,5420,124,6/23/17 12:00,13,1027,2,8,"[(True, '4', '4', 129046), (True, '15', '15', 129047), (True, '0', '0', 129048), (True, '4', '4', 129049), (True, '4', '4', 129050), (True, '4', '4', 129051), (True, '0', '0', 129052), (True, '0', '0', 129053), (True, '0', '0', 129054), (True, '0', '0', 129055), (True, '0', '0', 129056), (True, '0', '0', 129057), (True, '0', '0', 129058), (True, '0', '0', 129059), (True, '0', '0', 129060), (True, '0', '0', 129061), (True, '0', '0', 129062), (True, '4', '4', 129063), (True, '4', '4', 129064), (True, '4', '4', 129065), (True, '4', '4', 129066), (True, '4', '4', 129067), (False, '0', '4', 129068), (True, '0', '0', 129069), (True, '0', '0', 129070)]",False,Wrong Answer,0.8403034716144353,0.9854227405247812,False,0.04,False,"def func(*args):
	
	n = int(args[0])
	n -= 10
	a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
	cnt = 0
	for i in range(13):
	    if (a[i] == n):
	        cnt += 1
	cnt *= 4
	if (n == 10):
	    cnt -= 1
	print(cnt)
"
1110363,27981026,"n = int(input())
n -= 10
a = [1,2,3,4,5,6,7,8,9,10,10,10,10,11]
cnt = 0
for i in range(14):
    if a[i] == n:
        cnt += 1

cnt *= 4
if n == 10:
    cnt -= 1

print(cnt)",2016,5432,124,6/23/17 12:02,13,1027,1,8,"[(True, '4', '4', 129046), (True, '15', '15', 129047), (True, '0', '0', 129048), (True, '4', '4', 129049), (True, '4', '4', 129050), (True, '4', '4', 129051), (True, '0', '0', 129052), (True, '0', '0', 129053), (True, '0', '0', 129054), (True, '0', '0', 129055), (True, '0', '0', 129056), (True, '0', '0', 129057), (True, '0', '0', 129058), (True, '0', '0', 129059), (True, '0', '0', 129060), (True, '0', '0', 129061), (True, '0', '0', 129062), (True, '4', '4', 129063), (True, '4', '4', 129064), (True, '4', '4', 129065), (True, '4', '4', 129066), (True, '4', '4', 129067), (True, '4', '4', 129068), (True, '0', '0', 129069), (True, '0', '0', 129070)]",True,Accecpted,0.8403034716144353,0.9854227405247812,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	n -= 10
	a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11]
	cnt = 0
	for i in range(14):
	    if (a[i] == n):
	        cnt += 1
	cnt *= 4
	if (n == 10):
	    cnt -= 1
	print(cnt)
"
2435214,23670382,"n = int(input())
pres = [""Washington"",""Adams"",""Jefferson"",""Madison"",""Monroe"",""Adams"",""Jackson"",""Van Buren"",""Harrison"",""Tyler"",""Polk"",""Taylor"",""Fillmore"",""Pierce"",""Buchanan"",""Lincoln"",""Johnson"",""Grant"",""Hayes"",""Garfield"",""Arthur"",""Cleveland"",""Harrison"",""Cleveland"",""McKinley"",""Roosevelt"",""Taft"",""Wilson"",""Harding"",""Coolidge"",""Hoover"",""Roosevelt"",""Truman"",""Eisenhower"",""Kennedy"",""Johnson"",""Nixon"",""Ford"",""Carter"",""Reagan""]
print(pres[n-1])",11387,4524,124,1/9/17 23:05,3,2111,1,8,"[(True, 'Adams', 'Adams', 196355), (True, 'Van Buren', 'Van Buren', 196356), (True, 'Harding', 'Harding', 196357), (True, 'Washington', 'Washington', 196358), (True, 'Jefferson', 'Jefferson', 196359), (True, 'Madison', 'Madison', 196360), (True, 'Monroe', 'Monroe', 196361), (True, 'Adams', 'Adams', 196362), (True, 'Jackson', 'Jackson', 196363), (True, 'Harrison', 'Harrison', 196364), (True, 'Tyler', 'Tyler', 196365), (True, 'Polk', 'Polk', 196366), (True, 'Taylor', 'Taylor', 196367), (True, 'Fillmore', 'Fillmore', 196368), (True, 'Pierce', 'Pierce', 196369), (True, 'Buchanan', 'Buchanan', 196370), (True, 'Lincoln', 'Lincoln', 196371), (True, 'Johnson', 'Johnson', 196372), (True, 'Grant', 'Grant', 196373), (True, 'Hayes', 'Hayes', 196374), (True, 'Garfield', 'Garfield', 196375), (True, 'Arthur', 'Arthur', 196376), (True, 'Cleveland', 'Cleveland', 196377), (True, 'Harrison', 'Harrison', 196378), (True, 'Cleveland', 'Cleveland', 196379), (True, 'McKinley', 'McKinley', 196380), (True, 'Roosevelt', 'Roosevelt', 196381), (True, 'Taft', 'Taft', 196382), (True, 'Wilson', 'Wilson', 196383), (True, 'Coolidge', 'Coolidge', 196384), (True, 'Hoover', 'Hoover', 196385), (True, 'Roosevelt', 'Roosevelt', 196386), (True, 'Truman', 'Truman', 196387), (True, 'Eisenhower', 'Eisenhower', 196388), (True, 'Kennedy', 'Kennedy', 196389), (True, 'Johnson', 'Johnson', 196390), (True, 'Nixon', 'Nixon', 196391), (True, 'Ford', 'Ford', 196392), (True, 'Carter', 'Carter', 196393), (True, 'Reagan', 'Reagan', 196394)]",True,Accecpted,0.537284965911771,0.9854096520763188,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	pres = ['Washington', 'Adams', 'Jefferson', 'Madison', 'Monroe', 'Adams', 'Jackson', 'Van Buren', 'Harrison', 'Tyler', 'Polk', 'Taylor', 'Fillmore', 'Pierce', 'Buchanan', 'Lincoln', 'Johnson', 'Grant', 'Hayes', 'Garfield', 'Arthur', 'Cleveland', 'Harrison', 'Cleveland', 'McKinley', 'Roosevelt', 'Taft', 'Wilson', 'Harding', 'Coolidge', 'Hoover', 'Roosevelt', 'Truman', 'Eisenhower', 'Kennedy', 'Johnson', 'Nixon', 'Ford', 'Carter', 'Reagan']
	print(pres[(n - 1)])
"
2435213,23670364,"n = int(input())
pres = [""Washington"",""Adams"",""Jefferson"",""Madison"",""Monroe"",""Adams"",""Jackson"",""Van Buren"",""Henry Harrison"",""Tyler"",""Polk"",""Taylor"",""Fillmore"",""Pierce"",""Buchanan"",""Lincoln"",""Johnson"",""Grant"",""Hayes"",""Garfield"",""Arthur"",""Cleveland"",""Harrison"",""Cleveland"",""McKinley"",""Roosevelt"",""Howard Taft"",""Wilson"",""Harding"",""Coolidge"",""Hoover"",""Roosevelt"",""Truman"",""Eisenhower"",""Kennedy"",""Johnson"",""Nixon"",""Ford"",""Carter"",""Reagan""]
print(pres[n-1])",11387,4520,122,1/9/17 23:04,3,2111,2,8,"[(True, 'Adams', 'Adams', 196355), (True, 'Van Buren', 'Van Buren', 196356), (True, 'Harding', 'Harding', 196357), (True, 'Washington', 'Washington', 196358), (True, 'Jefferson', 'Jefferson', 196359), (True, 'Madison', 'Madison', 196360), (True, 'Monroe', 'Monroe', 196361), (True, 'Adams', 'Adams', 196362), (True, 'Jackson', 'Jackson', 196363), (False, 'Henry Harrison', 'Harrison', 196364), (True, 'Tyler', 'Tyler', 196365), (True, 'Polk', 'Polk', 196366), (True, 'Taylor', 'Taylor', 196367), (True, 'Fillmore', 'Fillmore', 196368), (True, 'Pierce', 'Pierce', 196369), (True, 'Buchanan', 'Buchanan', 196370), (True, 'Lincoln', 'Lincoln', 196371), (True, 'Johnson', 'Johnson', 196372), (True, 'Grant', 'Grant', 196373), (True, 'Hayes', 'Hayes', 196374), (True, 'Garfield', 'Garfield', 196375), (True, 'Arthur', 'Arthur', 196376), (True, 'Cleveland', 'Cleveland', 196377), (True, 'Harrison', 'Harrison', 196378), (True, 'Cleveland', 'Cleveland', 196379), (True, 'McKinley', 'McKinley', 196380), (True, 'Roosevelt', 'Roosevelt', 196381), (False, 'Howard Taft', 'Taft', 196382), (True, 'Wilson', 'Wilson', 196383), (True, 'Coolidge', 'Coolidge', 196384), (True, 'Hoover', 'Hoover', 196385), (True, 'Roosevelt', 'Roosevelt', 196386), (True, 'Truman', 'Truman', 196387), (True, 'Eisenhower', 'Eisenhower', 196388), (True, 'Kennedy', 'Kennedy', 196389), (True, 'Johnson', 'Johnson', 196390), (True, 'Nixon', 'Nixon', 196391), (True, 'Ford', 'Ford', 196392), (True, 'Carter', 'Carter', 196393), (True, 'Reagan', 'Reagan', 196394)]",False,Wrong Answer,0.537284965911771,0.9854096520763188,False,0.05,False,"def func(*args):
	
	n = int(args[0])
	pres = ['Washington', 'Adams', 'Jefferson', 'Madison', 'Monroe', 'Adams', 'Jackson', 'Van Buren', 'Henry Harrison', 'Tyler', 'Polk', 'Taylor', 'Fillmore', 'Pierce', 'Buchanan', 'Lincoln', 'Johnson', 'Grant', 'Hayes', 'Garfield', 'Arthur', 'Cleveland', 'Harrison', 'Cleveland', 'McKinley', 'Roosevelt', 'Howard Taft', 'Wilson', 'Harding', 'Coolidge', 'Hoover', 'Roosevelt', 'Truman', 'Eisenhower', 'Kennedy', 'Johnson', 'Nixon', 'Ford', 'Carter', 'Reagan']
	print(pres[(n - 1)])
"
753990,27831098,"#n = int(input())
#n, m = map(int, input().split())
s = input()
#c = list(map(int, input().split()))
l = 8
h = 0
if s[0] == '1' or s[0] == '8':
    h = 1
    l -= 3
if s[1] == 'a' or s[1] == 'h':
    if h == 1:
        l -= 2
    else:
        l -= 3
print(l)",153,0,46,6/16/17 21:10,15,694,2,8,"[(True, '8', '8', 103282), (False, '8', '3', 103283), (False, '8', '3', 103284), (False, '8', '5', 103285), (True, '8', '8', 103286), (False, '8', '5', 103287), (True, '8', '8', 103288), (True, '8', '8', 103289), (False, '8', '5', 103290), (False, '8', '5', 103291), (False, '8', '5', 103292), (False, '8', '5', 103293), (False, '8', '3', 103294), (False, '8', '5', 103295), (False, '8', '3', 103296), (True, '8', '8', 103297), (False, '8', '5', 103298), (False, '8', '5', 103299), (False, '8', '5', 103300), (False, '8', '5', 103301), (False, '8', '5', 103302), (False, '8', '5', 103303), (False, '8', '5', 103304), (False, '8', '5', 103305)]",False,Wrong Answer,0.8756064465032128,0.9853479853479854,False,0.7916666666666666,False,"def func(*args):
	
	s = args[0]
	l = 8
	h = 0
	if ((s[0] == '1') or (s[0] == '8')):
	    h = 1
	    l -= 3
	if ((s[1] == 'a') or (s[1] == 'h')):
	    if (h == 1):
	        l -= 2
	    else:
	        l -= 3
	print(l)
"
753991,27831107,"#n = int(input())
#n, m = map(int, input().split())
s = input()
#c = list(map(int, input().split()))
l = 8
h = 0
if s[1] == '1' or s[1] == '8':
    h = 1
    l -= 3
if s[0] == 'a' or s[0] == 'h':
    if h == 1:
        l -= 2
    else:
        l -= 3
print(l)",153,0,62,6/16/17 21:11,15,694,1,8,"[(True, '8', '8', 103282), (True, '3', '3', 103283), (True, '3', '3', 103284), (True, '5', '5', 103285), (True, '8', '8', 103286), (True, '5', '5', 103287), (True, '8', '8', 103288), (True, '8', '8', 103289), (True, '5', '5', 103290), (True, '5', '5', 103291), (True, '5', '5', 103292), (True, '5', '5', 103293), (True, '3', '3', 103294), (True, '5', '5', 103295), (True, '3', '3', 103296), (True, '8', '8', 103297), (True, '5', '5', 103298), (True, '5', '5', 103299), (True, '5', '5', 103300), (True, '5', '5', 103301), (True, '5', '5', 103302), (True, '5', '5', 103303), (True, '5', '5', 103304), (True, '5', '5', 103305)]",True,Accecpted,0.8756064465032128,0.9853479853479854,False,0.0,False,"def func(*args):
	
	s = args[0]
	l = 8
	h = 0
	if ((s[1] == '1') or (s[1] == '8')):
	    h = 1
	    l -= 3
	if ((s[0] == 'a') or (s[0] == 'h')):
	    if (h == 1):
	        l -= 2
	    else:
	        l -= 3
	print(l)
"
279208,23823329,"n = int(input())
a = int(input())
b = int(input())
c = int(input())
ans  = 0
if  a <= b - c:
    ans = n//a
else:
    ans = (n - c)// (b -c)
    rem = c + (n - c ) - (b -c) * ans
    while(rem >= b):
        rem = rem - (b -c)
        ans+=1;
    
    if rem >= a:
        ans += rem//a
    
print(ans)",1307,4532,62,1/15/17 0:52,35,233,2,8,"[(True, '2', '2', 67610), (True, '2', '2', 67611), (True, '1', '1', 67612), (True, '4', '4', 67613), (True, '10', '10', 67614), (True, '5', '5', 67615), (True, '4', '4', 67616), (True, '8', '8', 67617), (True, '0', '0', 67618), (True, '9', '9', 67619), (True, '999999999999999995', '999999999999999995', 67620), (True, '2', '2', 67621), (True, '10', '10', 67622), (True, '3', '3', 67623), (True, '2', '2', 67624), (True, '14', '14', 67625), (True, '37', '37', 67626), (True, '5', '5', 67627), (True, '91', '91', 67628), (True, '22', '22', 67629), (True, '178', '178', 67630), (True, '1', '1', 67631), (True, '121', '121', 67632), (True, '2', '2', 67633), (True, '500', '500', 67634), (True, '2', '2', 67635), (True, '9', '9', 67636), (True, '2', '2', 67637), (True, '55', '55', 67638), (True, '991', '991', 67639), (True, '995', '995', 67640), (True, '2', '2', 67641), (True, '1', '1', 67642), (True, '5500', '5500', 67643), (True, '3', '3', 67644), (True, '999999951', '999999951', 67645), (True, '999995010', '999995010', 67646), (True, '499999952', '499999952', 67647), (True, '999999950', '999999950', 67648), (True, '999999998', '999999998', 67649), (True, '3', '3', 67650), (True, '999999999', '999999999', 67651), (True, '499999999', '499999999', 67652), (True, '999999999999999998', '999999999999999998', 67653), (True, '999999999999999990', '999999999999999990', 67654), (True, '2', '2', 67655), (True, '1999999999999999', '1999999999999999', 67656), (True, '974999999999999999', '974999999999999999', 67657), (True, '5586592178770949', '5586592178770949', 67658), (True, '24999999999999999', '24999999999999999', 67659), (True, '25641025641025641', '25641025641025641', 67660), (True, '1333333333333333', '1333333333333333', 67661), (False, '-3', '0', 67662), (True, '999999999990000001', '999999999990000001', 67663), (True, '100000000000000000', '100000000000000000', 67664), (True, '1', '1', 67665), (False, '-3', '0', 67666), (True, '1', '1', 67667), (False, '-49997', '1', 67668), (True, '2', '2', 67669), (True, '1', '1', 67670), (True, '0', '0', 67671), (False, '-85', '0', 67672), (True, '1000000001', '1000000001', 67673), (False, '-7', '3', 67674), (True, '599999999999999', '599999999999999', 67675), (True, '999999999000000001', '999999999000000001', 67676), (False, '-999999998', '0', 67677), (True, '99999999000000001', '99999999000000001', 67678), (True, '99010000000000009', '99010000000000009', 67679), (True, '1', '1', 67680), (False, '0', '2', 67681), (True, '4', '4', 67682), (True, '333333332', '333333332', 67683), (True, '6', '6', 67684), (True, '100000000000000000', '100000000000000000', 67685), (True, '2', '2', 67686), (True, '56', '56', 67687), (False, '32', '33', 67688), (True, '99000000000000001', '99000000000000001', 67689), (True, '296116756', '296116756', 67690), (True, '2', '2', 67691), (True, '499999999600000000', '499999999600000000', 67692)]",False,Wrong Answer,0.8472465680558622,0.9853372434017597,False,0.0963855421686747,False,"def func(*args):
	
	n = int(args[0])
	a = int(args[1])
	b = int(args[2])
	c = int(args[3])
	ans = 0
	if (a <= (b - c)):
	    ans = (n // a)
	else:
	    ans = ((n - c) // (b - c))
	    rem = ((c + (n - c)) - ((b - c) * ans))
	    while (rem >= b):
	        rem = (rem - (b - c))
	        ans += 1
	    if (rem >= a):
	        ans += (rem // a)
	print(ans)
"
279209,23823356,"n = int(input())
a = int(input())
b = int(input())
c = int(input())
ans  = 0
if  a <= b - c or n < b:
    ans = n//a
else :
    ans = (n - c)// (b -c)
    rem = c + (n - c ) - (b -c) * ans
    while(rem >= b):
        rem = rem - (b -c)
        ans+=1;
    
    if rem >= a:
        ans += rem//a
    
print(ans)",1307,4540,77,1/15/17 0:55,35,233,1,8,"[(True, '2', '2', 67610), (True, '2', '2', 67611), (True, '1', '1', 67612), (True, '4', '4', 67613), (True, '10', '10', 67614), (True, '5', '5', 67615), (True, '4', '4', 67616), (True, '8', '8', 67617), (True, '0', '0', 67618), (True, '9', '9', 67619), (True, '999999999999999995', '999999999999999995', 67620), (True, '2', '2', 67621), (True, '10', '10', 67622), (True, '3', '3', 67623), (True, '2', '2', 67624), (True, '14', '14', 67625), (True, '37', '37', 67626), (True, '5', '5', 67627), (True, '91', '91', 67628), (True, '22', '22', 67629), (True, '178', '178', 67630), (True, '1', '1', 67631), (True, '121', '121', 67632), (True, '2', '2', 67633), (True, '500', '500', 67634), (True, '2', '2', 67635), (True, '9', '9', 67636), (True, '2', '2', 67637), (True, '55', '55', 67638), (True, '991', '991', 67639), (True, '995', '995', 67640), (True, '2', '2', 67641), (True, '1', '1', 67642), (True, '5500', '5500', 67643), (True, '3', '3', 67644), (True, '999999951', '999999951', 67645), (True, '999995010', '999995010', 67646), (True, '499999952', '499999952', 67647), (True, '999999950', '999999950', 67648), (True, '999999998', '999999998', 67649), (True, '3', '3', 67650), (True, '999999999', '999999999', 67651), (True, '499999999', '499999999', 67652), (True, '999999999999999998', '999999999999999998', 67653), (True, '999999999999999990', '999999999999999990', 67654), (True, '2', '2', 67655), (True, '1999999999999999', '1999999999999999', 67656), (True, '974999999999999999', '974999999999999999', 67657), (True, '5586592178770949', '5586592178770949', 67658), (True, '24999999999999999', '24999999999999999', 67659), (True, '25641025641025641', '25641025641025641', 67660), (True, '1333333333333333', '1333333333333333', 67661), (True, '0', '0', 67662), (True, '999999999990000001', '999999999990000001', 67663), (True, '100000000000000000', '100000000000000000', 67664), (True, '1', '1', 67665), (True, '0', '0', 67666), (True, '1', '1', 67667), (True, '1', '1', 67668), (True, '2', '2', 67669), (True, '1', '1', 67670), (True, '0', '0', 67671), (True, '0', '0', 67672), (True, '1000000001', '1000000001', 67673), (True, '3', '3', 67674), (True, '599999999999999', '599999999999999', 67675), (True, '999999999000000001', '999999999000000001', 67676), (True, '0', '0', 67677), (True, '99999999000000001', '99999999000000001', 67678), (True, '99010000000000009', '99010000000000009', 67679), (True, '1', '1', 67680), (True, '2', '2', 67681), (True, '4', '4', 67682), (True, '333333332', '333333332', 67683), (True, '6', '6', 67684), (True, '100000000000000000', '100000000000000000', 67685), (True, '2', '2', 67686), (True, '56', '56', 67687), (True, '33', '33', 67688), (True, '99000000000000001', '99000000000000001', 67689), (True, '296116756', '296116756', 67690), (True, '2', '2', 67691), (True, '499999999600000000', '499999999600000000', 67692)]",True,Accecpted,0.8472465680558622,0.9853372434017597,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	a = int(args[1])
	b = int(args[2])
	c = int(args[3])
	ans = 0
	if ((a <= (b - c)) or (n < b)):
	    ans = (n // a)
	else:
	    ans = ((n - c) // (b - c))
	    rem = ((c + (n - c)) - ((b - c) * ans))
	    while (rem >= b):
	        rem = (rem - (b - c))
	        ans += 1
	    if (rem >= a):
	        ans += (rem // a)
	print(ans)
"
1065817,24717755,"s = input().split()

n = int(s[0])
m = int(s[1])
z = int(s[2])
k = 0

for i in range(1,z+1):
    if i % n == 0 and i % m == 0:
        k += 1

print(k)",53912,4524,92,2/16/17 15:38,23,992,1,8,"[(True, '10', '10', 127383), (True, '2', '2', 127384), (True, '1', '1', 127385), (True, '1', '1', 127386), (True, '0', '0', 127387), (True, '1', '1', 127388), (True, '34', '34', 127389), (True, '1', '1', 127390), (True, '0', '0', 127391), (True, '1', '1', 127392), (True, '1', '1', 127393), (True, '2', '2', 127394), (True, '0', '0', 127395), (True, '3', '3', 127396), (True, '0', '0', 127397), (True, '2', '2', 127398), (True, '0', '0', 127399), (True, '1', '1', 127400), (True, '1', '1', 127401), (True, '1', '1', 127402), (True, '1', '1', 127403), (True, '10000', '10000', 127404), (True, '10', '10', 127405), (True, '4999', '4999', 127406), (True, '0', '0', 127407), (True, '3', '3', 127408), (True, '45', '45', 127409), (True, '4', '4', 127410), (True, '5', '5', 127411), (True, '50', '50', 127412), (True, '500', '500', 127413), (True, '0', '0', 127414)]",True,Accecpted,0.8644563298602335,0.9853372434017597,False,0.0,False,"def func(*args):
	
	s = args[0].split()
	n = int(s[0])
	m = int(s[1])
	z = int(s[2])
	k = 0
	for i in range(1, (z + 1)):
	    if (((i % n) == 0) and ((i % m) == 0)):
	        k += 1
	print(k)
"
1065816,24717738,"s = input().split()

n = int(s[0])
m = int(s[1])
z = int(s[2])
k = 0

for i in range(1,z+1):
    if i % n == 0 and i % m:
        k += 1

print(k)",53912,4512,30,2/16/17 15:37,23,992,2,8,"[(False, '0', '10', 127383), (False, '3', '2', 127384), (False, '3', '1', 127385), (True, '1', '1', 127386), (True, '0', '0', 127387), (False, '0', '1', 127388), (False, '350', '34', 127389), (False, '4', '1', 127390), (True, '0', '0', 127391), (False, '0', '1', 127392), (False, '0', '1', 127393), (False, '0', '2', 127394), (False, '6', '0', 127395), (False, '0', '3', 127396), (True, '0', '0', 127397), (False, '0', '2', 127398), (False, '1', '0', 127399), (False, '757', '1', 127400), (False, '9999', '1', 127401), (False, '0', '1', 127402), (False, '0', '1', 127403), (False, '0', '10000', 127404), (False, '284', '10', 127405), (False, '0', '4999', 127406), (True, '0', '0', 127407), (True, '3', '3', 127408), (False, '46', '45', 127409), (False, '0', '4', 127410), (True, '5', '5', 127411), (False, '0', '50', 127412), (True, '500', '500', 127413), (False, '1', '0', 127414)]",False,Wrong Answer,0.8644563298602335,0.9853372434017597,False,0.75,False,"def func(*args):
	
	s = args[0].split()
	n = int(s[0])
	m = int(s[1])
	z = int(s[2])
	k = 0
	for i in range(1, (z + 1)):
	    if (((i % n) == 0) and (i % m)):
	        k += 1
	print(k)
"
2033065,28942549,print('CIHGANTO RWEI THHI MH E R !'[len(set(input()))%2::2].strip()),1762,4512,92,7/28/17 7:20,1,1804,2,8,"[(True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178195), (False, 'IGNORE HIM', 'IGNORE HIM!', 178196), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178197), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178198), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178199), (False, 'IGNORE HIM', 'IGNORE HIM!', 178200), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178201), (False, 'IGNORE HIM', 'IGNORE HIM!', 178202), (False, 'IGNORE HIM', 'IGNORE HIM!', 178203), (False, 'IGNORE HIM', 'IGNORE HIM!', 178204), (False, 'IGNORE HIM', 'IGNORE HIM!', 178205), (False, 'IGNORE HIM', 'IGNORE HIM!', 178206), (False, 'IGNORE HIM', 'IGNORE HIM!', 178207), (False, 'IGNORE HIM', 'IGNORE HIM!', 178208), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178209), (False, 'IGNORE HIM', 'IGNORE HIM!', 178210), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178211), (False, 'IGNORE HIM', 'IGNORE HIM!', 178212), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178213), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178214), (False, 'IGNORE HIM', 'IGNORE HIM!', 178215), (False, 'IGNORE HIM', 'IGNORE HIM!', 178216), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178217), (False, 'IGNORE HIM', 'IGNORE HIM!', 178218), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178219), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178220), (False, 'IGNORE HIM', 'IGNORE HIM!', 178221), (False, 'IGNORE HIM', 'IGNORE HIM!', 178222), (False, 'IGNORE HIM', 'IGNORE HIM!', 178223), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178224), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178225), (False, 'IGNORE HIM', 'IGNORE HIM!', 178226), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178227), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178228), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178229), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178230), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178231), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178232), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178233), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178234), (False, 'IGNORE HIM', 'IGNORE HIM!', 178235), (False, 'IGNORE HIM', 'IGNORE HIM!', 178236), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178237), (False, 'IGNORE HIM', 'IGNORE HIM!', 178238), (False, 'IGNORE HIM', 'IGNORE HIM!', 178239), (False, 'IGNORE HIM', 'IGNORE HIM!', 178240), (False, 'IGNORE HIM', 'IGNORE HIM!', 178241), (False, 'IGNORE HIM', 'IGNORE HIM!', 178242), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178243), (False, 'IGNORE HIM', 'IGNORE HIM!', 178244), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178245), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178246), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178247), (False, 'IGNORE HIM', 'IGNORE HIM!', 178248), (False, 'IGNORE HIM', 'IGNORE HIM!', 178249), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178250), (False, 'IGNORE HIM', 'IGNORE HIM!', 178251), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178252), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178253), (False, 'IGNORE HIM', 'IGNORE HIM!', 178254), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178255), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178256), (False, 'IGNORE HIM', 'IGNORE HIM!', 178257), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178258), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178259), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178260), (False, 'IGNORE HIM', 'IGNORE HIM!', 178261), (False, 'IGNORE HIM', 'IGNORE HIM!', 178262), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178263), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178264), (False, 'IGNORE HIM', 'IGNORE HIM!', 178265), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178266), (False, 'IGNORE HIM', 'IGNORE HIM!', 178267), (False, 'IGNORE HIM', 'IGNORE HIM!', 178268), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178269), (False, 'IGNORE HIM', 'IGNORE HIM!', 178270), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178271), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178272), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178273), (False, 'IGNORE HIM', 'IGNORE HIM!', 178274), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178275), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178276), (False, 'IGNORE HIM', 'IGNORE HIM!', 178277), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178278), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178279)]",False,Wrong Answer,6.313993041533341e-78,0.9852941176470588,False,0.4588235294117647,False,"def func(*args):
	
	print('CIHGANTO RWEI THHI MH E R !'[(len(set(args[0])) % 2)::2].strip())
"
2026836,28374425,"n = int(input())

if n == 1:
  print(1)
elif n == 2:
  print(2)
elif n == 3:
  print(6)
elif (n % 2) == 1:
  print(n*(n-1)*(n-2))
elif (n % 3) == 0:
  print((n-1)*(n-2)*(n-3))
else:
  print(n*(n-1)*(n-2))",60305,5420,124,7/8/17 20:54,14,1803,2,8,"[(True, '504', '504', 178068), (True, '210', '210', 178069), (True, '1', '1', 178070), (True, '60', '60', 178071), (True, '60', '60', 178072), (True, '32736', '32736', 178073), (True, '7980', '7980', 178074), (True, '2', '2', 178075), (True, '63960', '63960', 178076), (True, '21924', '21924', 178077), (True, '1560780', '1560780', 178078), (True, '3241644', '3241644', 178079), (True, '392222436', '392222436', 178080), (True, '788888100', '788888100', 178081), (True, '131096004', '131096004', 178082), (True, '567662724', '567662724', 178083), (True, '1560780', '1560780', 178084), (True, '220348260', '220348260', 178085), (True, '14526540', '14526540', 178086), (True, '788888100', '788888100', 178087), (True, '9527916', '9527916', 178088), (True, '140556', '140556', 178089), (True, '39303660', '39303660', 178090), (True, '7980', '7980', 178091), (True, '220348260', '220348260', 178092), (True, '3241644', '3241644', 178093), (True, '392222436', '392222436', 178094), (True, '1560780', '1560780', 178095), (True, '140556', '140556', 178096), (True, '14526540', '14526540', 178097), (True, '567662724', '567662724', 178098), (True, '783776526', '783776526', 178099), (False, '130323336', '130065780', 178100), (False, '341531400', '341042100', 178101), (True, '254839470', '254839470', 178102), (False, '6840', '6460', 178103), (False, '219255624', '218891412', 178104), (False, '502459080', '501826260', 178105), (True, '389016270', '389016270', 178106), (False, '69426120', '69256788', 178107), (False, '341531400', '341042100', 178108), (False, '14348664', '14289372', 178109), (True, '563559150', '563559150', 178110), (False, '130323336', '130065780', 178111), (False, '502459080', '501826260', 178112), (True, '254839470', '254839470', 178113), (True, '783776526', '783776526', 178114), (True, '14526540', '14526540', 178115), (True, '563559150', '563559150', 178116), (True, '7980', '7980', 178117), (True, '220348260', '220348260', 178118), (True, '254839470', '254839470', 178119), (True, '783776526', '783776526', 178120), (False, '1520760', '1507420', 178121), (False, '341531400', '341042100', 178122), (True, '389016270', '389016270', 178123), (False, '6840', '6460', 178124), (False, '130323336', '130065780', 178125), (False, '3176376', '3154620', 178126), (True, '563559150', '563559150', 178127), (True, '444394078546562430', '444394078546562430', 178128), (False, '433115949507711624', '433115377058855412', 178129), (False, '89460362959610664', '89460162932862372', 178130), (True, '51742503205363470', '51742503205363470', 178131), (True, '163597318076822526', '163597318076822526', 178132), (False, '157823816520906120', '157823524476316788', 178133), (False, '365064433136159400', '365063922340784100', 178134), (True, '141201007712496270', '141201007712496270', 178135), (True, '335728459024850814', '335728459024850814', 178136), (True, '326379736779169710', '326379736779169710', 178137), (True, '642275489615199390', '642275489615199390', 178138), (True, '299184742915995150', '299184742915995150', 178139), (True, '532248411551110590', '532248411551110590', 178140), (True, '585540171302562606', '585540171302562606', 178141), (True, '935975171582120670', '935975171582120670', 178142), (True, '545182335484592526', '545182335484592526', 178143), (True, '880611813728059710', '880611813728059710', 178144), (True, '954792870629291694', '954792870629291694', 178145), (True, '265393998349453470', '265393998349453470', 178146), (True, '26092892528622606', '26092892528622606', 178147), (False, '999997000002000000', '999996000003000000', 178148), (False, '336', '280', 178149), (True, '6', '6', 178150), (False, '24', '12', 178151), (True, '21924', '21924', 178152), (True, '4080', '4080', 178153), (True, '990', '990', 178154)]",False,Wrong Answer,0.9691937043892332,0.9852941176470588,False,0.2528735632183908,False,"def func(*args):
	
	n = int(args[0])
	if (n == 1):
	    print(1)
	elif (n == 2):
	    print(2)
	elif (n == 3):
	    print(6)
	elif ((n % 2) == 1):
	    print(((n * (n - 1)) * (n - 2)))
	elif ((n % 3) == 0):
	    print((((n - 1) * (n - 2)) * (n - 3)))
	else:
	    print(((n * (n - 1)) * (n - 2)))
"
308355,25007622,"a=int(input())
if a>6:
    print('25')
else :
    print('5')",26400,4488,62,2/25/17 12:00,9,262,2,8,"[(False, '5', '25', 70189), (True, '25', '25', 70190), (True, '25', '25', 70191), (True, '25', '25', 70192), (True, '25', '25', 70193)]",False,Wrong Answer,0.488923022434901,0.9852941176470588,False,0.2,False,"def func(*args):
	
	a = int(args[0])
	if (a > 6):
	    print('25')
	else:
	    print('5')
"
2033066,28942554,print('CIHGANTO RWEI THHI MH!E R !'[len(set(input()))%2::2].strip()),1762,4512,124,7/28/17 7:20,1,1804,1,8,"[(True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178195), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178196), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178197), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178198), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178199), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178200), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178201), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178202), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178203), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178204), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178205), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178206), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178207), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178208), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178209), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178210), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178211), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178212), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178213), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178214), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178215), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178216), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178217), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178218), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178219), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178220), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178221), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178222), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178223), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178224), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178225), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178226), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178227), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178228), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178229), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178230), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178231), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178232), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178233), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178234), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178235), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178236), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178237), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178238), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178239), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178240), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178241), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178242), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178243), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178244), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178245), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178246), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178247), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178248), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178249), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178250), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178251), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178252), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178253), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178254), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178255), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178256), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178257), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178258), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178259), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178260), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178261), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178262), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178263), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178264), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178265), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178266), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178267), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178268), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178269), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178270), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178271), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178272), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178273), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178274), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178275), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178276), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178277), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178278), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178279)]",True,Accecpted,6.313993041533341e-78,0.9852941176470588,False,0.0,False,"def func(*args):
	
	print('CIHGANTO RWEI THHI MH!E R !'[(len(set(args[0])) % 2)::2].strip())
"
1816763,9335746,"x, t, a, b, da, db = map(int, input().split())
la = [0] + list(range(a, a - t * da, -da))
lb = [0] + list(range(b, b - t * db, -db))
print('YES' if any(pa + pb == x for pa in la for pb in lb) else 'NO')",2461,0,124,1/1/15 0:10,4,1602,1,8,"[(True, 'YES', 'YES', 164786), (True, 'NO', 'NO', 164787), (True, 'YES', 'YES', 164788), (True, 'YES', 'YES', 164789), (True, 'YES', 'YES', 164790), (True, 'YES', 'YES', 164791), (True, 'NO', 'NO', 164792), (True, 'YES', 'YES', 164793), (True, 'NO', 'NO', 164794), (True, 'YES', 'YES', 164795), (True, 'NO', 'NO', 164796), (True, 'NO', 'NO', 164797), (True, 'NO', 'NO', 164798), (True, 'YES', 'YES', 164799), (True, 'NO', 'NO', 164800), (True, 'NO', 'NO', 164801), (True, 'NO', 'NO', 164802), (True, 'YES', 'YES', 164803), (True, 'NO', 'NO', 164804), (True, 'NO', 'NO', 164805), (True, 'NO', 'NO', 164806), (True, 'NO', 'NO', 164807), (True, 'NO', 'NO', 164808), (True, 'NO', 'NO', 164809), (True, 'NO', 'NO', 164810), (True, 'YES', 'YES', 164811), (True, 'YES', 'YES', 164812), (True, 'YES', 'YES', 164813), (True, 'YES', 'YES', 164814), (True, 'YES', 'YES', 164815), (True, 'YES', 'YES', 164816), (True, 'YES', 'YES', 164817), (True, 'YES', 'YES', 164818), (True, 'YES', 'YES', 164819), (True, 'YES', 'YES', 164820), (True, 'YES', 'YES', 164821), (True, 'YES', 'YES', 164822), (True, 'YES', 'YES', 164823), (True, 'YES', 'YES', 164824), (True, 'YES', 'YES', 164825), (True, 'YES', 'YES', 164826), (True, 'YES', 'YES', 164827), (True, 'YES', 'YES', 164828), (True, 'NO', 'NO', 164829), (True, 'NO', 'NO', 164830), (True, 'YES', 'YES', 164831), (True, 'YES', 'YES', 164832), (True, 'NO', 'NO', 164833), (True, 'NO', 'NO', 164834), (True, 'NO', 'NO', 164835), (True, 'YES', 'YES', 164836)]",True,Accecpted,0.889804587487893,0.9852941176470588,False,0.0,False,"def func(*args):
	
	(x, t, a, b, da, db) = map(int, args[0].split())
	la = ([0] + list(range(a, (a - (t * da)), (- da))))
	lb = ([0] + list(range(b, (b - (t * db)), (- db))))
	print(('YES' if any((((pa + pb) == x) for pa in la for pb in lb)) else 'NO'))
"
1816762,9335742,"x, t, a, b, da, db = map(int, input().split())
la = [0] + list(range(a, a - t * da, -t))
lb = [0] + list(range(b, b - t * db, -t))
print('YES' if any(pa + pb == x for pa in la for pb in lb) else 'NO')",2461,0,122,1/1/15 0:07,4,1602,2,8,"[(True, 'YES', 'YES', 164786), (True, 'NO', 'NO', 164787), (True, 'YES', 'YES', 164788), (True, 'YES', 'YES', 164789), (True, 'YES', 'YES', 164790), (False, 'NO', 'YES', 164791), (True, 'NO', 'NO', 164792), (False, 'NO', 'YES', 164793), (True, 'NO', 'NO', 164794), (False, 'NO', 'YES', 164795), (True, 'NO', 'NO', 164796), (False, 'YES', 'NO', 164797), (True, 'NO', 'NO', 164798), (False, 'NO', 'YES', 164799), (True, 'NO', 'NO', 164800), (True, 'NO', 'NO', 164801), (True, 'NO', 'NO', 164802), (False, 'NO', 'YES', 164803), (True, 'NO', 'NO', 164804), (True, 'NO', 'NO', 164805), (False, 'YES', 'NO', 164806), (True, 'NO', 'NO', 164807), (True, 'NO', 'NO', 164808), (True, 'NO', 'NO', 164809), (True, 'NO', 'NO', 164810), (False, 'NO', 'YES', 164811), (False, 'NO', 'YES', 164812), (False, 'NO', 'YES', 164813), (True, 'YES', 'YES', 164814), (True, 'YES', 'YES', 164815), (True, 'YES', 'YES', 164816), (False, 'NO', 'YES', 164817), (False, 'NO', 'YES', 164818), (False, 'NO', 'YES', 164819), (True, 'YES', 'YES', 164820), (True, 'YES', 'YES', 164821), (False, 'NO', 'YES', 164822), (False, 'NO', 'YES', 164823), (False, 'NO', 'YES', 164824), (False, 'NO', 'YES', 164825), (True, 'YES', 'YES', 164826), (True, 'YES', 'YES', 164827), (True, 'YES', 'YES', 164828), (True, 'NO', 'NO', 164829), (True, 'NO', 'NO', 164830), (False, 'NO', 'YES', 164831), (False, 'NO', 'YES', 164832), (False, 'YES', 'NO', 164833), (True, 'NO', 'NO', 164834), (True, 'NO', 'NO', 164835), (False, 'NO', 'YES', 164836)]",False,Wrong Answer,0.889804587487893,0.9852941176470588,False,0.4117647058823529,False,"def func(*args):
	
	(x, t, a, b, da, db) = map(int, args[0].split())
	la = ([0] + list(range(a, (a - (t * da)), (- t))))
	lb = ([0] + list(range(b, (b - (t * db)), (- t))))
	print(('YES' if any((((pa + pb) == x) for pa in la for pb in lb)) else 'NO'))
"
2026837,28374450,"n = int(input())

if n == 1:
  print(1)
elif n == 2:
  print(2)
elif n == 3:
  print(6)
elif (n % 2) == 1:
  print(n*(n-1)*(n-2))
elif (n % 3) == 0:
  print((n-1)*(n-2)*(n-3))
else:
  print(n*(n-1)*(n-3))",60305,5444,124,7/8/17 20:56,14,1803,1,8,"[(True, '504', '504', 178068), (True, '210', '210', 178069), (True, '1', '1', 178070), (True, '60', '60', 178071), (True, '60', '60', 178072), (True, '32736', '32736', 178073), (True, '7980', '7980', 178074), (True, '2', '2', 178075), (True, '63960', '63960', 178076), (True, '21924', '21924', 178077), (True, '1560780', '1560780', 178078), (True, '3241644', '3241644', 178079), (True, '392222436', '392222436', 178080), (True, '788888100', '788888100', 178081), (True, '131096004', '131096004', 178082), (True, '567662724', '567662724', 178083), (True, '1560780', '1560780', 178084), (True, '220348260', '220348260', 178085), (True, '14526540', '14526540', 178086), (True, '788888100', '788888100', 178087), (True, '9527916', '9527916', 178088), (True, '140556', '140556', 178089), (True, '39303660', '39303660', 178090), (True, '7980', '7980', 178091), (True, '220348260', '220348260', 178092), (True, '3241644', '3241644', 178093), (True, '392222436', '392222436', 178094), (True, '1560780', '1560780', 178095), (True, '140556', '140556', 178096), (True, '14526540', '14526540', 178097), (True, '567662724', '567662724', 178098), (True, '783776526', '783776526', 178099), (True, '130065780', '130065780', 178100), (True, '341042100', '341042100', 178101), (True, '254839470', '254839470', 178102), (True, '6460', '6460', 178103), (True, '218891412', '218891412', 178104), (True, '501826260', '501826260', 178105), (True, '389016270', '389016270', 178106), (True, '69256788', '69256788', 178107), (True, '341042100', '341042100', 178108), (True, '14289372', '14289372', 178109), (True, '563559150', '563559150', 178110), (True, '130065780', '130065780', 178111), (True, '501826260', '501826260', 178112), (True, '254839470', '254839470', 178113), (True, '783776526', '783776526', 178114), (True, '14526540', '14526540', 178115), (True, '563559150', '563559150', 178116), (True, '7980', '7980', 178117), (True, '220348260', '220348260', 178118), (True, '254839470', '254839470', 178119), (True, '783776526', '783776526', 178120), (True, '1507420', '1507420', 178121), (True, '341042100', '341042100', 178122), (True, '389016270', '389016270', 178123), (True, '6460', '6460', 178124), (True, '130065780', '130065780', 178125), (True, '3154620', '3154620', 178126), (True, '563559150', '563559150', 178127), (True, '444394078546562430', '444394078546562430', 178128), (True, '433115377058855412', '433115377058855412', 178129), (True, '89460162932862372', '89460162932862372', 178130), (True, '51742503205363470', '51742503205363470', 178131), (True, '163597318076822526', '163597318076822526', 178132), (True, '157823524476316788', '157823524476316788', 178133), (True, '365063922340784100', '365063922340784100', 178134), (True, '141201007712496270', '141201007712496270', 178135), (True, '335728459024850814', '335728459024850814', 178136), (True, '326379736779169710', '326379736779169710', 178137), (True, '642275489615199390', '642275489615199390', 178138), (True, '299184742915995150', '299184742915995150', 178139), (True, '532248411551110590', '532248411551110590', 178140), (True, '585540171302562606', '585540171302562606', 178141), (True, '935975171582120670', '935975171582120670', 178142), (True, '545182335484592526', '545182335484592526', 178143), (True, '880611813728059710', '880611813728059710', 178144), (True, '954792870629291694', '954792870629291694', 178145), (True, '265393998349453470', '265393998349453470', 178146), (True, '26092892528622606', '26092892528622606', 178147), (True, '999996000003000000', '999996000003000000', 178148), (True, '280', '280', 178149), (True, '6', '6', 178150), (True, '12', '12', 178151), (True, '21924', '21924', 178152), (True, '4080', '4080', 178153), (True, '990', '990', 178154)]",True,Accecpted,0.9691937043892332,0.9852941176470588,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	if (n == 1):
	    print(1)
	elif (n == 2):
	    print(2)
	elif (n == 3):
	    print(6)
	elif ((n % 2) == 1):
	    print(((n * (n - 1)) * (n - 2)))
	elif ((n % 3) == 0):
	    print((((n - 1) * (n - 2)) * (n - 3)))
	else:
	    print(((n * (n - 1)) * (n - 3)))
"
308356,25007644,"a=int(input())
if a>1:
    print('25')
else :
    print('5')",26400,4528,46,2/25/17 12:01,9,262,1,8,"[(True, '25', '25', 70189), (True, '25', '25', 70190), (True, '25', '25', 70191), (True, '25', '25', 70192), (True, '25', '25', 70193)]",True,Accecpted,0.488923022434901,0.9852941176470588,False,0.0,False,"def func(*args):
	
	a = int(args[0])
	if (a > 1):
	    print('25')
	else:
	    print('5')
"
1764250,21069900,"from math import log, ceil

k,b,n,t = map(int, input().split())

if k == 1:
    print(max(0, ceil((t+bn-1)/b)))
else:
    print(max(0, ceil(n-log((t-t*k-b)/(1-k-b),k))))",79611,0,92,10/1/16 16:20,8,1570,5,8,"[(True, '2', '2', 19376), (False, '', '3', 19377), (True, '0', '0', 19378), (False, '', '0', 19379), (True, '6', '6', 19380), (True, '282', '282', 19381), (True, '283473', '283473', 19382), (False, '', '1', 19383), (False, '', '0', 19384), (False, '', '1000000', 19385), (False, '', '1', 19386), (False, '', '1', 19387), (False, '', '1', 19388), (False, '', '1000000', 19389), (False, '', '1000000', 19390), (True, '1', '1', 19391), (True, '1', '1', 19392), (True, '1000000', '1000000', 19393), (True, '1000000', '1000000', 19394), (True, '1', '1', 19395), (True, '1', '1', 19396), (True, '1000000', '1000000', 19397), (True, '1000000', '1000000', 19398), (False, '', '748', 19399), (False, '', '4415', 19400), (False, '', '229', 19401), (False, '', '53193', 19402), (False, '', '99008', 19403), (False, '', '823829', 19404), (False, '', '2348', 19405), (True, '1', '1', 19406), (True, '665', '665', 19407), (True, '311', '311', 19408), (True, '37847', '37847', 19409), (True, '377067', '377067', 19410), (True, '80', '80', 19411), (True, '141', '141', 19412), (True, '3196', '3196', 19413), (True, '5825', '5825', 19414), (True, '141720', '141720', 19415), (True, '441824', '441824', 19416), (True, '579472', '579472', 19417), (True, '41606', '41606', 19418), (True, '965711', '965711', 19419), (True, '3238', '3238', 19420), (True, '646043', '646043', 19421), (True, '362586', '362586', 19422), (True, '622448', '622448', 19423), (True, '490126', '490126', 19424), (True, '296123', '296123', 19425), (True, '501006', '501006', 19426), (True, '420067', '420067', 19427), (True, '822777', '822777', 19428), (True, '968592', '968592', 19429), (True, '371301', '371301', 19430), (True, '942766', '942766', 19431), (True, '312772', '312772', 19432), (True, '715483', '715483', 19433), (True, '410353', '410353', 19434), (True, '780359', '780359', 19435), (False, '', '0', 19436), (False, '', '0', 19437), (True, '0', '0', 19438), (True, '56', '56', 19439), (True, '55', '55', 19440), (True, '14', '14', 19441), (True, '2', '2', 19442), (True, '7', '7', 19443), (True, '55', '55', 19444), (True, '61', '61', 19445), (False, '', '500001', 19446), (True, '99', '99', 19447), (True, '2', '2', 19448), (True, '829273', '829273', 19449), (True, '999999', '999999', 19450), (True, '999999', '999999', 19451), (True, '1', '1', 19452), (False, '', '1', 19453), (True, '9', '9', 19454), (True, '4', '4', 19455), (True, '99999', '99999', 19456), (True, '98', '98', 19457), (False, '', '0', 19458), (False, '', '999535', 19459), (True, '9', '9', 19460), (True, '999999', '999999', 19461), (False, '', '9', 19462), (False, '', '0', 19463), (False, '', '446790', 19464), (False, '', '10', 19465), (True, '3', '3', 19466), (True, '3', '3', 19467), (True, '8', '8', 19468), (False, '', '99', 19469), (True, '2', '2', 19470), (True, '1336', '1336', 19471), (True, '908764', '908764', 19472), (False, '', '15', 19473), (True, '19342', '19342', 19474), (True, '1', '1', 19475), (True, '0', '0', 19476), (True, '5', '5', 19477), (True, '118215', '118215', 19478), (True, '1', '1', 19479), (True, '99', '99', 19480), (True, '1', '1', 19481), (True, '999999', '999999', 19482), (True, '999999', '999999', 19483), (True, '4', '4', 19484), (False, '', '7', 19485), (True, '3', '3', 19486), (True, '0', '0', 19487), (False, '', '1', 19488), (True, '1000000', '1000000', 19489)]",False,Runtime Error,0.8394327083733336,0.9852507374631267,False,0.2719298245614035,False,"def func(*args):
	
	from math import log, ceil
	(k, b, n, t) = map(int, args[0].split())
	if (k == 1):
	    print(max(0, ceil((((t + bn) - 1) / b))))
	else:
	    print(max(0, ceil((n - log((((t - (t * k)) - b) / ((1 - k) - b)), k)))))
"
1764251,21070066,"from math import log, ceil

k,b,n,t = map(int, input().split())

if k == 1:
    print(max(0, ceil((1+b*n-t)/b)))
else:
    print(max(0, ceil(n-log((t-t*k-b)/(1-k-b),k))))",79611,44,124,10/1/16 16:26,8,1570,1,8,"[(True, '2', '2', 19376), (True, '3', '3', 19377), (True, '0', '0', 19378), (True, '0', '0', 19379), (True, '6', '6', 19380), (True, '282', '282', 19381), (True, '283473', '283473', 19382), (True, '1', '1', 19383), (True, '0', '0', 19384), (True, '1000000', '1000000', 19385), (True, '1', '1', 19386), (True, '1', '1', 19387), (True, '1', '1', 19388), (True, '1000000', '1000000', 19389), (True, '1000000', '1000000', 19390), (True, '1', '1', 19391), (True, '1', '1', 19392), (True, '1000000', '1000000', 19393), (True, '1000000', '1000000', 19394), (True, '1', '1', 19395), (True, '1', '1', 19396), (True, '1000000', '1000000', 19397), (True, '1000000', '1000000', 19398), (True, '748', '748', 19399), (True, '4415', '4415', 19400), (True, '229', '229', 19401), (True, '53193', '53193', 19402), (True, '99008', '99008', 19403), (True, '823829', '823829', 19404), (True, '2348', '2348', 19405), (True, '1', '1', 19406), (True, '665', '665', 19407), (True, '311', '311', 19408), (True, '37847', '37847', 19409), (True, '377067', '377067', 19410), (True, '80', '80', 19411), (True, '141', '141', 19412), (True, '3196', '3196', 19413), (True, '5825', '5825', 19414), (True, '141720', '141720', 19415), (True, '441824', '441824', 19416), (True, '579472', '579472', 19417), (True, '41606', '41606', 19418), (True, '965711', '965711', 19419), (True, '3238', '3238', 19420), (True, '646043', '646043', 19421), (True, '362586', '362586', 19422), (True, '622448', '622448', 19423), (True, '490126', '490126', 19424), (True, '296123', '296123', 19425), (True, '501006', '501006', 19426), (True, '420067', '420067', 19427), (True, '822777', '822777', 19428), (True, '968592', '968592', 19429), (True, '371301', '371301', 19430), (True, '942766', '942766', 19431), (True, '312772', '312772', 19432), (True, '715483', '715483', 19433), (True, '410353', '410353', 19434), (True, '780359', '780359', 19435), (True, '0', '0', 19436), (True, '0', '0', 19437), (True, '0', '0', 19438), (True, '56', '56', 19439), (True, '55', '55', 19440), (True, '14', '14', 19441), (True, '2', '2', 19442), (True, '7', '7', 19443), (True, '55', '55', 19444), (True, '61', '61', 19445), (True, '500001', '500001', 19446), (True, '99', '99', 19447), (True, '2', '2', 19448), (True, '829273', '829273', 19449), (True, '999999', '999999', 19450), (True, '999999', '999999', 19451), (True, '1', '1', 19452), (True, '1', '1', 19453), (True, '9', '9', 19454), (True, '4', '4', 19455), (True, '99999', '99999', 19456), (True, '98', '98', 19457), (True, '0', '0', 19458), (True, '999535', '999535', 19459), (True, '9', '9', 19460), (True, '999999', '999999', 19461), (True, '9', '9', 19462), (True, '0', '0', 19463), (True, '446790', '446790', 19464), (True, '10', '10', 19465), (True, '3', '3', 19466), (True, '3', '3', 19467), (True, '8', '8', 19468), (True, '99', '99', 19469), (True, '2', '2', 19470), (True, '1336', '1336', 19471), (True, '908764', '908764', 19472), (True, '15', '15', 19473), (True, '19342', '19342', 19474), (True, '1', '1', 19475), (True, '0', '0', 19476), (True, '5', '5', 19477), (True, '118215', '118215', 19478), (True, '1', '1', 19479), (True, '99', '99', 19480), (True, '1', '1', 19481), (True, '999999', '999999', 19482), (True, '999999', '999999', 19483), (True, '4', '4', 19484), (True, '7', '7', 19485), (True, '3', '3', 19486), (True, '0', '0', 19487), (True, '1', '1', 19488), (True, '1000000', '1000000', 19489)]",True,Accecpted,0.8394327083733336,0.9852507374631267,False,0.0,False,"def func(*args):
	
	from math import log, ceil
	(k, b, n, t) = map(int, args[0].split())
	if (k == 1):
	    print(max(0, ceil((((1 + (b * n)) - t) / b))))
	else:
	    print(max(0, ceil((n - log((((t - (t * k)) - b) / ((1 - k) - b)), k)))))
"
586058,26475802,"#n = int(input()) 
#n, m = map(int, input().split())
#s = input()
c = list(map(int, input().split()))
s = sum(c)
a = [0] * 101
for i in range(5):
    a[c[i]] += 1
l = 0
for i in range(100, 0, -1):
    if a[i] > 1:
        l = i * min(a[i], 3)
print(s - l)",153,4468,31,4/18/17 15:41,13,538,2,8,"[(False, '34', '26', 90562), (True, '28', '28', 90563), (True, '20', '20', 90564), (False, '17', '15', 90565), (True, '16', '16', 90566), (False, '24', '4', 90567), (False, '16', '6', 90568), (True, '110', '110', 90569), (True, '200', '200', 90570), (True, '2', '2', 90571), (True, '58', '58', 90572), (True, '58', '58', 90573), (False, '62', '60', 90574), (False, '62', '60', 90575), (False, '62', '60', 90576), (True, '60', '60', 90577), (True, '60', '60', 90578), (True, '9', '9', 90579), (True, '9', '9', 90580), (True, '15', '15', 90581), (True, '490', '490', 90582), (False, '300', '2', 90583), (False, '298', '296', 90584), (False, '298', '296', 90585), (True, '181', '181', 90586), (True, '227', '227', 90587), (False, '195', '95', 90588), (False, '55', '17', 90589), (False, '112', '110', 90590), (True, '110', '110', 90591), (True, '199', '199', 90592), (True, '13', '13', 90593), (False, '9', '2', 90594), (True, '11', '11', 90595), (True, '101', '101', 90596), (False, '200', '6', 90597), (True, '3', '3', 90598), (False, '9', '7', 90599), (True, '9', '9', 90600), (True, '21', '21', 90601), (False, '20', '6', 90602), (True, '5', '5', 90603), (True, '121', '121', 90604), (True, '6', '6', 90605), (False, '25', '9', 90606), (False, '9', '4', 90607), (True, '3', '3', 90608), (False, '24', '21', 90609)]",False,Wrong Answer,0.8869634816894617,0.985239852398524,False,0.4166666666666667,False,"def func(*args):
	
	c = list(map(int, args[0].split()))
	s = sum(c)
	a = ([0] * 101)
	for i in range(5):
	    a[c[i]] += 1
	l = 0
	for i in range(100, 0, (- 1)):
	    if (a[i] > 1):
	        l = (i * min(a[i], 3))
	print((s - l))
"
586059,26475836,"#n = int(input()) 
#n, m = map(int, input().split())
#s = input()
c = list(map(int, input().split()))
s = sum(c)
a = [0] * 101
for i in range(5):
    a[c[i]] += 1
l = 0
for i in range(100, 0, -1):
    if a[i] > 1:
        l = max(i * min(a[i], 3), l)
print(s - l)",153,5412,62,4/18/17 15:43,13,538,1,8,"[(True, '26', '26', 90562), (True, '28', '28', 90563), (True, '20', '20', 90564), (True, '15', '15', 90565), (True, '16', '16', 90566), (True, '4', '4', 90567), (True, '6', '6', 90568), (True, '110', '110', 90569), (True, '200', '200', 90570), (True, '2', '2', 90571), (True, '58', '58', 90572), (True, '58', '58', 90573), (True, '60', '60', 90574), (True, '60', '60', 90575), (True, '60', '60', 90576), (True, '60', '60', 90577), (True, '60', '60', 90578), (True, '9', '9', 90579), (True, '9', '9', 90580), (True, '15', '15', 90581), (True, '490', '490', 90582), (True, '2', '2', 90583), (True, '296', '296', 90584), (True, '296', '296', 90585), (True, '181', '181', 90586), (True, '227', '227', 90587), (True, '95', '95', 90588), (True, '17', '17', 90589), (True, '110', '110', 90590), (True, '110', '110', 90591), (True, '199', '199', 90592), (True, '13', '13', 90593), (True, '2', '2', 90594), (True, '11', '11', 90595), (True, '101', '101', 90596), (True, '6', '6', 90597), (True, '3', '3', 90598), (True, '7', '7', 90599), (True, '9', '9', 90600), (True, '21', '21', 90601), (True, '6', '6', 90602), (True, '5', '5', 90603), (True, '121', '121', 90604), (True, '6', '6', 90605), (True, '9', '9', 90606), (True, '4', '4', 90607), (True, '3', '3', 90608), (True, '21', '21', 90609)]",True,Accecpted,0.8869634816894617,0.985239852398524,False,0.0,False,"def func(*args):
	
	c = list(map(int, args[0].split()))
	s = sum(c)
	a = ([0] * 101)
	for i in range(5):
	    a[c[i]] += 1
	l = 0
	for i in range(100, 0, (- 1)):
	    if (a[i] > 1):
	        l = max((i * min(a[i], 3)), l)
	print((s - l))
"
2110434,28688518,"n = int(input())
if n == 1:
    print(-1)
else:
    numbers = [x for x in range(n, 0, -1)]
    print("" "".join(map(str, numbers)))",1633,4512,61,7/19/17 10:36,6,1867,2,8,"[(True, '-1', '-1', 181617), (False, '2 1', '-1', 181618), (True, '3 2 1', '3 2 1', 181619), (True, '4 3 2 1', '4 3 2 1', 181620), (True, '5 4 3 2 1', '5 4 3 2 1', 181621), (True, '6 5 4 3 2 1', '6 5 4 3 2 1', 181622), (True, '7 6 5 4 3 2 1', '7 6 5 4 3 2 1', 181623), (True, '8 7 6 5 4 3 2 1', '8 7 6 5 4 3 2 1', 181624), (True, '9 8 7 6 5 4 3 2 1', '9 8 7 6 5 4 3 2 1', 181625), (True, '50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181626), (True, '22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181627), (True, '34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181628), (True, '50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181629), (True, '12 11 10 9 8 7 6 5 4 3 2 1', '12 11 10 9 8 7 6 5 4 3 2 1', 181630), (True, '26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181631), (True, '38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181632), (True, '4 3 2 1', '4 3 2 1', 181633), (True, '18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181634), (True, '30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181635), (True, '46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181636), (True, '32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181637)]",False,Wrong Answer,0.8137489370974955,0.9850746268656716,False,0.0476190476190476,False,"def func(*args):
	
	n = int(args[0])
	if (n == 1):
	    print((- 1))
	else:
	    numbers = [x for x in range(n, 0, (- 1))]
	    print(' '.join(map(str, numbers)))
"
2110436,28688564,"n = int(input())
if n <= 2:
    print(-1)
else:
    numbers = [x for x in range(n, 0, -1)]
    print("" "".join(map(str, numbers)))",1633,4516,61,7/19/17 10:37,6,1867,1,8,"[(True, '-1', '-1', 181617), (True, '-1', '-1', 181618), (True, '3 2 1', '3 2 1', 181619), (True, '4 3 2 1', '4 3 2 1', 181620), (True, '5 4 3 2 1', '5 4 3 2 1', 181621), (True, '6 5 4 3 2 1', '6 5 4 3 2 1', 181622), (True, '7 6 5 4 3 2 1', '7 6 5 4 3 2 1', 181623), (True, '8 7 6 5 4 3 2 1', '8 7 6 5 4 3 2 1', 181624), (True, '9 8 7 6 5 4 3 2 1', '9 8 7 6 5 4 3 2 1', 181625), (True, '50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181626), (True, '22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181627), (True, '34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181628), (True, '50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181629), (True, '12 11 10 9 8 7 6 5 4 3 2 1', '12 11 10 9 8 7 6 5 4 3 2 1', 181630), (True, '26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181631), (True, '38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181632), (True, '4 3 2 1', '4 3 2 1', 181633), (True, '18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181634), (True, '30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181635), (True, '46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181636), (True, '32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', '32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1', 181637)]",True,Accecpted,0.8137489370974955,0.9850746268656716,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	if (n <= 2):
	    print((- 1))
	else:
	    numbers = [x for x in range(n, 0, (- 1))]
	    print(' '.join(map(str, numbers)))
"
1041721,24453992,"m,d=map(int, input().split())
if m==2:
    k=28
elif m==1 or m==3 or m==5 or m==7 or m==8 or m==10 or m==12:
    k=31
else:
    k=30
broj_tjedana=1
nedjelja=7-d+1

while nedjelja<k:
    broj_tjedana+=1
    nedjelja+=7
print(broj_tjedana)",53330,4512,77,2/5/17 18:08,27,968,1,8,"[(True, '6', '6', 125746), (True, '5', '5', 125747), (True, '5', '5', 125748), (True, '5', '5', 125749), (True, '4', '4', 125750), (True, '6', '6', 125751), (True, '5', '5', 125752), (True, '5', '5', 125753), (True, '5', '5', 125754), (True, '5', '5', 125755), (True, '5', '5', 125756), (True, '6', '6', 125757), (True, '6', '6', 125758), (True, '4', '4', 125759), (True, '5', '5', 125760), (True, '5', '5', 125761), (True, '5', '5', 125762), (True, '5', '5', 125763), (True, '5', '5', 125764), (True, '5', '5', 125765), (True, '5', '5', 125766), (True, '5', '5', 125767), (True, '5', '5', 125768), (True, '5', '5', 125769), (True, '5', '5', 125770), (True, '6', '6', 125771), (True, '6', '6', 125772), (True, '5', '5', 125773), (True, '5', '5', 125774), (True, '5', '5', 125775), (True, '5', '5', 125776), (True, '5', '5', 125777), (True, '5', '5', 125778), (True, '6', '6', 125779), (True, '5', '5', 125780), (True, '5', '5', 125781), (True, '5', '5', 125782), (True, '5', '5', 125783), (True, '5', '5', 125784), (True, '6', '6', 125785), (True, '6', '6', 125786), (True, '5', '5', 125787), (True, '5', '5', 125788), (True, '5', '5', 125789), (True, '5', '5', 125790), (True, '5', '5', 125791), (True, '5', '5', 125792), (True, '6', '6', 125793), (True, '5', '5', 125794), (True, '5', '5', 125795), (True, '5', '5', 125796), (True, '5', '5', 125797), (True, '5', '5', 125798), (True, '6', '6', 125799), (True, '6', '6', 125800), (True, '5', '5', 125801), (True, '5', '5', 125802), (True, '5', '5', 125803), (True, '5', '5', 125804), (True, '5', '5', 125805), (True, '6', '6', 125806), (True, '6', '6', 125807), (True, '5', '5', 125808), (True, '5', '5', 125809), (True, '5', '5', 125810), (True, '5', '5', 125811), (True, '5', '5', 125812), (True, '5', '5', 125813), (True, '6', '6', 125814), (True, '5', '5', 125815), (True, '5', '5', 125816), (True, '5', '5', 125817), (True, '5', '5', 125818), (True, '5', '5', 125819), (True, '6', '6', 125820), (True, '6', '6', 125821), (True, '5', '5', 125822), (True, '5', '5', 125823), (True, '5', '5', 125824), (True, '5', '5', 125825), (True, '5', '5', 125826), (True, '5', '5', 125827), (True, '6', '6', 125828), (True, '5', '5', 125829), (True, '5', '5', 125830), (True, '5', '5', 125831), (True, '5', '5', 125832), (True, '5', '5', 125833), (True, '6', '6', 125834), (True, '6', '6', 125835), (True, '5', '5', 125836), (True, '5', '5', 125837), (True, '6', '6', 125838), (True, '5', '5', 125839), (True, '6', '6', 125840), (True, '5', '5', 125841), (True, '6', '6', 125842), (True, '6', '6', 125843), (True, '5', '5', 125844), (True, '6', '6', 125845), (True, '5', '5', 125846), (True, '6', '6', 125847), (True, '6', '6', 125848), (True, '5', '5', 125849)]",True,Accecpted,0.9095930632220222,0.9850187265917604,False,0.0,False,"def func(*args):
	
	(m, d) = map(int, args[0].split())
	if (m == 2):
	    k = 28
	elif ((m == 1) or (m == 3) or (m == 5) or (m == 7) or (m == 8) or (m == 10) or (m == 12)):
	    k = 31
	else:
	    k = 30
	broj_tjedana = 1
	nedjelja = ((7 - d) + 1)
	while (nedjelja < k):
	    broj_tjedana += 1
	    nedjelja += 7
	print(broj_tjedana)
"
1145674,20405800,"n=int(input())
for i in range(n//7+1):
    t=n-(i*7)
    if (t)%4==0:
        l=''.join(['7'*i])
        ll=''.join(['4'*(t//4)])
        print(''.join([ll,l]))
        break
else: print(-1)",4088,0,92,9/5/16 21:39,9,1053,2,8,"[(True, '47', '47', 130501), (True, '-1', '-1', 130502), (False, '4444444444444444', '4477777777', 130503), (True, '-1', '-1', 130504), (True, '4', '4', 130505), (True, '7', '7', 130506), (True, '444', '444', 130507), (False, '44444444447', '44477777', 130509), (False, '4444444444444444444444444', '4444777777777777', 130510), (False, '4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444', '7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', 130511), (False, '44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444777', '44447777777777777777777777777777777777777777777777777777777777777777777', 130512), (False, '444444444444444444444444447', '444447777777777777', 130513), (False, '4444444444444444777', '4477777777777', 130514), (False, '444444444444444444444444477', '444477777777777777', 130515), (False, '444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444477', '444777777777777777777777777777777777777777777777777777777777777777777', 130516), (False, '44444444444444477', '47777777777', 130517), (False, '4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444', '4444477777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', 130518), (False, '4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444', '4444777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', 130519), (False, '444444444444444444444444444444444444444444477', '477777777777777777777777777', 130524), (True, '-1', '-1', 130540), (True, '-1', '-1', 130541), (True, '-1', '-1', 130542), (True, '44', '44', 130543), (True, '-1', '-1', 130544), (True, '-1', '-1', 130545)]",False,Wrong Answer,0.7825422900366437,0.985,False,0.52,False,"def func(*args):
	
	n = int(args[0])
	for i in range(((n // 7) + 1)):
	    t = (n - (i * 7))
	    if ((t % 4) == 0):
	        l = ''.join([('7' * i)])
	        ll = ''.join([('4' * (t // 4))])
	        print(''.join([ll, l]))
	        break
	else:
	    print((- 1))
"
1145675,20405820,"n=int(input())
for i in range(n//7,-1,-1):
    t=n-(i*7)
    if (t)%4==0:
        l=''.join(['7'*i])
        ll=''.join(['4'*(t//4)])
        print(''.join([ll,l]))
        break
else: print(-1)",4088,416,154,9/5/16 21:40,9,1053,1,8,"[(True, '47', '47', 130501), (True, '-1', '-1', 130502), (True, '4477777777', '4477777777', 130503), (True, '-1', '-1', 130504), (True, '4', '4', 130505), (True, '7', '7', 130506), (True, '444', '444', 130507), (True, '44477777', '44477777', 130509), (True, '4444777777777777', '4444777777777777', 130510), (True, '7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', '7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', 130511), (True, '44447777777777777777777777777777777777777777777777777777777777777777777', '44447777777777777777777777777777777777777777777777777777777777777777777', 130512), (True, '444447777777777777', '444447777777777777', 130513), (True, '4477777777777', '4477777777777', 130514), (True, '444477777777777777', '444477777777777777', 130515), (True, '444777777777777777777777777777777777777777777777777777777777777777777', '444777777777777777777777777777777777777777777777777777777777777777777', 130516), (True, '47777777777', '47777777777', 130517), (True, '4444477777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', '4444477777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', 130518), (True, '4444777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', '4444777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', 130519), (True, '477777777777777777777777777', '477777777777777777777777777', 130524), (True, '-1', '-1', 130540), (True, '-1', '-1', 130541), (True, '-1', '-1', 130542), (True, '44', '44', 130543), (True, '-1', '-1', 130544), (True, '-1', '-1', 130545)]",True,Accecpted,0.7825422900366437,0.985,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	for i in range((n // 7), (- 1), (- 1)):
	    t = (n - (i * 7))
	    if ((t % 4) == 0):
	        l = ''.join([('7' * i)])
	        ll = ''.join([('4' * (t // 4))])
	        print(''.join([ll, l]))
	        break
	else:
	    print((- 1))
"
2731144,20793429,"list=input().split()
a=[]
for i in range(0, len(list)):
    a.append(int(list[i]))
    
q=2
for i in range(0, 4):
    if (a[i] + a[(i+1)%4] >= a[(i+2)%4]) and (a[(i+1)%4]+a[(i+2)%4] >= a[i]) and (a[(i+2)%4]+a[i] >=a[(i+1)%4]):
        if (a[i] + a[(i+1)%4] ==a[(i+2)%4]) or (a[(i+1)%4] + a[(i+2)%4] == a[i]) or (a[(i+2)%4]+ a[i] == a[(i+1)%4]):
            if q > 1:
                q = 1
        else:
            q = 0
            break
    
	

if q == 0 :
    print(""TRIANGLE"")
elif q == 1:
    print(""SEGMENT"")
else:
    print(""IMPOSSIBLE"")",28709,8,154,9/21/16 14:44,23,2346,1,8,"[(True, 'TRIANGLE', 'TRIANGLE', 209679), (True, 'SEGMENT', 'SEGMENT', 209680), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209681), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209682), (True, 'TRIANGLE', 'TRIANGLE', 209683), (True, 'TRIANGLE', 'TRIANGLE', 209684), (True, 'TRIANGLE', 'TRIANGLE', 209685), (True, 'TRIANGLE', 'TRIANGLE', 209686), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209687), (True, 'TRIANGLE', 'TRIANGLE', 209688), (True, 'SEGMENT', 'SEGMENT', 209689), (True, 'TRIANGLE', 'TRIANGLE', 209690), (True, 'SEGMENT', 'SEGMENT', 209691), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209692), (True, 'TRIANGLE', 'TRIANGLE', 209693), (True, 'TRIANGLE', 'TRIANGLE', 209694), (True, 'SEGMENT', 'SEGMENT', 209695), (True, 'SEGMENT', 'SEGMENT', 209696), (True, 'TRIANGLE', 'TRIANGLE', 209697), (True, 'SEGMENT', 'SEGMENT', 209698), (True, 'SEGMENT', 'SEGMENT', 209699), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209700), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209701), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209702), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209703), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209704), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209705), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209706), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209707), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209708), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209709), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209710), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209711), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209712), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209713), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209714), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209715), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209716), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209717), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209718), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209719), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209720), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209721), (True, 'SEGMENT', 'SEGMENT', 209722), (True, 'SEGMENT', 'SEGMENT', 209723), (True, 'SEGMENT', 'SEGMENT', 209724), (True, 'SEGMENT', 'SEGMENT', 209725), (True, 'SEGMENT', 'SEGMENT', 209726), (True, 'SEGMENT', 'SEGMENT', 209727), (True, 'SEGMENT', 'SEGMENT', 209728), (True, 'SEGMENT', 'SEGMENT', 209729), (True, 'SEGMENT', 'SEGMENT', 209730), (True, 'SEGMENT', 'SEGMENT', 209731), (True, 'SEGMENT', 'SEGMENT', 209732), (True, 'SEGMENT', 'SEGMENT', 209733), (True, 'SEGMENT', 'SEGMENT', 209734), (True, 'SEGMENT', 'SEGMENT', 209735), (True, 'SEGMENT', 'SEGMENT', 209736), (True, 'SEGMENT', 'SEGMENT', 209737), (True, 'SEGMENT', 'SEGMENT', 209738), (True, 'SEGMENT', 'SEGMENT', 209739), (True, 'SEGMENT', 'SEGMENT', 209740), (True, 'SEGMENT', 'SEGMENT', 209741), (True, 'TRIANGLE', 'TRIANGLE', 209742), (True, 'TRIANGLE', 'TRIANGLE', 209743), (True, 'TRIANGLE', 'TRIANGLE', 209744), (True, 'TRIANGLE', 'TRIANGLE', 209745), (True, 'TRIANGLE', 'TRIANGLE', 209746), (True, 'TRIANGLE', 'TRIANGLE', 209747), (True, 'TRIANGLE', 'TRIANGLE', 209748), (True, 'TRIANGLE', 'TRIANGLE', 209749), (True, 'TRIANGLE', 'TRIANGLE', 209750), (True, 'TRIANGLE', 'TRIANGLE', 209751), (True, 'TRIANGLE', 'TRIANGLE', 209752), (True, 'TRIANGLE', 'TRIANGLE', 209753), (True, 'TRIANGLE', 'TRIANGLE', 209754), (True, 'TRIANGLE', 'TRIANGLE', 209755), (True, 'TRIANGLE', 'TRIANGLE', 209756), (True, 'TRIANGLE', 'TRIANGLE', 209757), (True, 'TRIANGLE', 'TRIANGLE', 209758), (True, 'TRIANGLE', 'TRIANGLE', 209759), (True, 'TRIANGLE', 'TRIANGLE', 209760), (True, 'TRIANGLE', 'TRIANGLE', 209761)]",True,Accecpted,0.9619541754104972,0.9848078641644326,False,0.0,False,"def func(*args):
	
	list = args[0].split()
	a = []
	for i in range(0, len(list)):
	    a.append(int(list[i]))
	q = 2
	for i in range(0, 4):
	    if (((a[i] + a[((i + 1) % 4)]) >= a[((i + 2) % 4)]) and ((a[((i + 1) % 4)] + a[((i + 2) % 4)]) >= a[i]) and ((a[((i + 2) % 4)] + a[i]) >= a[((i + 1) % 4)])):
	        if (((a[i] + a[((i + 1) % 4)]) == a[((i + 2) % 4)]) or ((a[((i + 1) % 4)] + a[((i + 2) % 4)]) == a[i]) or ((a[((i + 2) % 4)] + a[i]) == a[((i + 1) % 4)])):
	            if (q > 1):
	                q = 1
	        else:
	            q = 0
	            break
	if (q == 0):
	    print('TRIANGLE')
	elif (q == 1):
	    print('SEGMENT')
	else:
	    print('IMPOSSIBLE')
"
2731143,20793324,"list=input().split()
a=[]
for i in range(0, len(list)):
    a.append(int())
q=2
for i in range(0, 4):
    if (a[i] + a[(i+1)%4] >= a[(i+2)%4]) and (a[(i+1)%4]+a[(i+2)%4] >= a[i]) and (a[(i+2)%4]+a[i] >=a[(i+1)%4]):
        if (a[i] + a[(i+1)%4] ==a[(i+2)%4]) or (a[(i+1)%4] + a[(i+2)%4] == a[i]) or (a[(i+2)%4]+ a[i] == a[(i+1)%4]):
            if q > 1:
                q = 1
        else:
            q = 0
            break
    
	

if q == 0 :
    print(""TRIANGLE"")
elif q == 1:
    print(""SEGMENT"")
else:
    print(""IMPOSSIBLE"")",28709,0,92,9/21/16 14:38,22,2346,2,8,"[(False, 'SEGMENT', 'TRIANGLE', 209679), (True, 'SEGMENT', 'SEGMENT', 209680), (False, 'SEGMENT', 'IMPOSSIBLE', 209681), (False, 'SEGMENT', 'IMPOSSIBLE', 209682), (False, 'SEGMENT', 'TRIANGLE', 209683), (False, 'SEGMENT', 'TRIANGLE', 209684), (False, 'SEGMENT', 'TRIANGLE', 209685), (False, 'SEGMENT', 'TRIANGLE', 209686), (False, 'SEGMENT', 'IMPOSSIBLE', 209687), (False, 'SEGMENT', 'TRIANGLE', 209688), (True, 'SEGMENT', 'SEGMENT', 209689), (False, 'SEGMENT', 'TRIANGLE', 209690), (True, 'SEGMENT', 'SEGMENT', 209691), (False, 'SEGMENT', 'IMPOSSIBLE', 209692), (False, 'SEGMENT', 'TRIANGLE', 209693), (False, 'SEGMENT', 'TRIANGLE', 209694), (True, 'SEGMENT', 'SEGMENT', 209695), (True, 'SEGMENT', 'SEGMENT', 209696), (False, 'SEGMENT', 'TRIANGLE', 209697), (True, 'SEGMENT', 'SEGMENT', 209698), (True, 'SEGMENT', 'SEGMENT', 209699), (False, 'SEGMENT', 'IMPOSSIBLE', 209700), (False, 'SEGMENT', 'IMPOSSIBLE', 209701), (False, 'SEGMENT', 'IMPOSSIBLE', 209702), (False, 'SEGMENT', 'IMPOSSIBLE', 209703), (False, 'SEGMENT', 'IMPOSSIBLE', 209704), (False, 'SEGMENT', 'IMPOSSIBLE', 209705), (False, 'SEGMENT', 'IMPOSSIBLE', 209706), (False, 'SEGMENT', 'IMPOSSIBLE', 209707), (False, 'SEGMENT', 'IMPOSSIBLE', 209708), (False, 'SEGMENT', 'IMPOSSIBLE', 209709), (False, 'SEGMENT', 'IMPOSSIBLE', 209710), (False, 'SEGMENT', 'IMPOSSIBLE', 209711), (False, 'SEGMENT', 'IMPOSSIBLE', 209712), (False, 'SEGMENT', 'IMPOSSIBLE', 209713), (False, 'SEGMENT', 'IMPOSSIBLE', 209714), (False, 'SEGMENT', 'IMPOSSIBLE', 209715), (False, 'SEGMENT', 'IMPOSSIBLE', 209716), (False, 'SEGMENT', 'IMPOSSIBLE', 209717), (False, 'SEGMENT', 'IMPOSSIBLE', 209718), (False, 'SEGMENT', 'IMPOSSIBLE', 209719), (False, 'SEGMENT', 'IMPOSSIBLE', 209720), (False, 'SEGMENT', 'IMPOSSIBLE', 209721), (True, 'SEGMENT', 'SEGMENT', 209722), (True, 'SEGMENT', 'SEGMENT', 209723), (True, 'SEGMENT', 'SEGMENT', 209724), (True, 'SEGMENT', 'SEGMENT', 209725), (True, 'SEGMENT', 'SEGMENT', 209726), (True, 'SEGMENT', 'SEGMENT', 209727), (True, 'SEGMENT', 'SEGMENT', 209728), (True, 'SEGMENT', 'SEGMENT', 209729), (True, 'SEGMENT', 'SEGMENT', 209730), (True, 'SEGMENT', 'SEGMENT', 209731), (True, 'SEGMENT', 'SEGMENT', 209732), (True, 'SEGMENT', 'SEGMENT', 209733), (True, 'SEGMENT', 'SEGMENT', 209734), (True, 'SEGMENT', 'SEGMENT', 209735), (True, 'SEGMENT', 'SEGMENT', 209736), (True, 'SEGMENT', 'SEGMENT', 209737), (True, 'SEGMENT', 'SEGMENT', 209738), (True, 'SEGMENT', 'SEGMENT', 209739), (True, 'SEGMENT', 'SEGMENT', 209740), (True, 'SEGMENT', 'SEGMENT', 209741), (False, 'SEGMENT', 'TRIANGLE', 209742), (False, 'SEGMENT', 'TRIANGLE', 209743), (False, 'SEGMENT', 'TRIANGLE', 209744), (False, 'SEGMENT', 'TRIANGLE', 209745), (False, 'SEGMENT', 'TRIANGLE', 209746), (False, 'SEGMENT', 'TRIANGLE', 209747), (False, 'SEGMENT', 'TRIANGLE', 209748), (False, 'SEGMENT', 'TRIANGLE', 209749), (False, 'SEGMENT', 'TRIANGLE', 209750), (False, 'SEGMENT', 'TRIANGLE', 209751), (False, 'SEGMENT', 'TRIANGLE', 209752), (False, 'SEGMENT', 'TRIANGLE', 209753), (False, 'SEGMENT', 'TRIANGLE', 209754), (False, 'SEGMENT', 'TRIANGLE', 209755), (False, 'SEGMENT', 'TRIANGLE', 209756), (False, 'SEGMENT', 'TRIANGLE', 209757), (False, 'SEGMENT', 'TRIANGLE', 209758), (False, 'SEGMENT', 'TRIANGLE', 209759), (False, 'SEGMENT', 'TRIANGLE', 209760), (False, 'SEGMENT', 'TRIANGLE', 209761)]",False,Wrong Answer,0.9619541754104972,0.9848078641644326,False,0.6746987951807228,False,"def func(*args):
	
	list = args[0].split()
	a = []
	for i in range(0, len(list)):
	    a.append(int())
	q = 2
	for i in range(0, 4):
	    if (((a[i] + a[((i + 1) % 4)]) >= a[((i + 2) % 4)]) and ((a[((i + 1) % 4)] + a[((i + 2) % 4)]) >= a[i]) and ((a[((i + 2) % 4)] + a[i]) >= a[((i + 1) % 4)])):
	        if (((a[i] + a[((i + 1) % 4)]) == a[((i + 2) % 4)]) or ((a[((i + 1) % 4)] + a[((i + 2) % 4)]) == a[i]) or ((a[((i + 2) % 4)] + a[i]) == a[((i + 1) % 4)])):
	            if (q > 1):
	                q = 1
	        else:
	            q = 0
	            break
	if (q == 0):
	    print('TRIANGLE')
	elif (q == 1):
	    print('SEGMENT')
	else:
	    print('IMPOSSIBLE')
"
584136,23490794,"l = list(map(int, input().split()))
l.append(0)
l.sort(reverse = True)
if l[0] == l[2]: 
    print(sum(l[3:]))
    exit(0)
elif l[1] == l[3]: 
    print(sum(l[0], l[4]))
    exit(0)
elif l[2] == l[4] and l[0] == l[1]: 
    print(min(sum(l[:2]), sum(l[2:])))
    exit(0)
elif l[2] == l[4]:
    print(l[0] + l[1])
    exit(0)
else:
    for i in range(4): 
        if l[i] == l[i + 1]:
            l.pop(i)
            l.pop(i)
            print(sum(l))
            exit(0)
print(sum(l))",34,4536,62,1/2/17 1:07,45,538,5,8,"[(True, '26', '26', 90562), (True, '28', '28', 90563), (True, '20', '20', 90564), (True, '15', '15', 90565), (True, '16', '16', 90566), (True, '4', '4', 90567), (True, '6', '6', 90568), (True, '110', '110', 90569), (True, '200', '200', 90570), (True, '2', '2', 90571), (True, '58', '58', 90572), (True, '58', '58', 90573), (True, '60', '60', 90574), (True, '60', '60', 90575), (True, '60', '60', 90576), (True, '60', '60', 90577), (True, '60', '60', 90578), (True, '9', '9', 90579), (False, '', '9', 90580), (True, '15', '15', 90581), (True, '490', '490', 90582), (True, '2', '2', 90583), (True, '296', '296', 90584), (True, '296', '296', 90585), (True, '181', '181', 90586), (True, '227', '227', 90587), (True, '95', '95', 90588), (True, '17', '17', 90589), (True, '110', '110', 90590), (True, '110', '110', 90591), (True, '199', '199', 90592), (False, '', '13', 90593), (True, '2', '2', 90594), (False, '', '11', 90595), (False, '', '101', 90596), (True, '6', '6', 90597), (True, '3', '3', 90598), (True, '7', '7', 90599), (True, '9', '9', 90600), (False, '', '21', 90601), (True, '6', '6', 90602), (False, '', '5', 90603), (True, '121', '121', 90604), (True, '6', '6', 90605), (True, '9', '9', 90606), (True, '4', '4', 90607), (False, '', '3', 90608), (True, '21', '21', 90609)]",False,Runtime Error,0.9185266073273524,0.9847908745247148,False,0.1458333333333333,False,"def func(*args):
	
	l = list(map(int, args[0].split()))
	l.append(0)
	l.sort(reverse=True)
	if (l[0] == l[2]):
	    print(sum(l[3:]))
	    exit(0)
	elif (l[1] == l[3]):
	    print(sum(l[0], l[4]))
	    exit(0)
	elif ((l[2] == l[4]) and (l[0] == l[1])):
	    print(min(sum(l[:2]), sum(l[2:])))
	    exit(0)
	elif (l[2] == l[4]):
	    print((l[0] + l[1]))
	    exit(0)
	else:
	    for i in range(4):
	        if (l[i] == l[(i + 1)]):
	            l.pop(i)
	            l.pop(i)
	            print(sum(l))
	            exit(0)
	print(sum(l))
"
584137,23490821,"l = list(map(int, input().split()))
l.append(0)
l.sort(reverse = True)
if l[0] == l[2]: 
    print(sum(l[3:]))
    exit(0)
elif l[1] == l[3]: 
    print(l[0] + l[4])
    exit(0)
elif l[2] == l[4] and l[0] == l[1]: 
    print(min(sum(l[:2]), sum(l[2:])))
    exit(0)
elif l[2] == l[4]:
    print(l[0] + l[1])
    exit(0)
else:
    for i in range(4): 
        if l[i] == l[i + 1]:
            l.pop(i)
            l.pop(i)
            print(sum(l))
            exit(0)
print(sum(l))",34,4528,62,1/2/17 1:10,45,538,1,8,"[(True, '26', '26', 90562), (True, '28', '28', 90563), (True, '20', '20', 90564), (True, '15', '15', 90565), (True, '16', '16', 90566), (True, '4', '4', 90567), (True, '6', '6', 90568), (True, '110', '110', 90569), (True, '200', '200', 90570), (True, '2', '2', 90571), (True, '58', '58', 90572), (True, '58', '58', 90573), (True, '60', '60', 90574), (True, '60', '60', 90575), (True, '60', '60', 90576), (True, '60', '60', 90577), (True, '60', '60', 90578), (True, '9', '9', 90579), (True, '9', '9', 90580), (True, '15', '15', 90581), (True, '490', '490', 90582), (True, '2', '2', 90583), (True, '296', '296', 90584), (True, '296', '296', 90585), (True, '181', '181', 90586), (True, '227', '227', 90587), (True, '95', '95', 90588), (True, '17', '17', 90589), (True, '110', '110', 90590), (True, '110', '110', 90591), (True, '199', '199', 90592), (True, '13', '13', 90593), (True, '2', '2', 90594), (True, '11', '11', 90595), (True, '101', '101', 90596), (True, '6', '6', 90597), (True, '3', '3', 90598), (True, '7', '7', 90599), (True, '9', '9', 90600), (True, '21', '21', 90601), (True, '6', '6', 90602), (True, '5', '5', 90603), (True, '121', '121', 90604), (True, '6', '6', 90605), (True, '9', '9', 90606), (True, '4', '4', 90607), (True, '3', '3', 90608), (True, '21', '21', 90609)]",True,Accecpted,0.9185266073273524,0.9847908745247148,False,0.0,False,"def func(*args):
	
	l = list(map(int, args[0].split()))
	l.append(0)
	l.sort(reverse=True)
	if (l[0] == l[2]):
	    print(sum(l[3:]))
	    exit(0)
	elif (l[1] == l[3]):
	    print((l[0] + l[4]))
	    exit(0)
	elif ((l[2] == l[4]) and (l[0] == l[1])):
	    print(min(sum(l[:2]), sum(l[2:])))
	    exit(0)
	elif (l[2] == l[4]):
	    print((l[0] + l[1]))
	    exit(0)
	else:
	    for i in range(4):
	        if (l[i] == l[(i + 1)]):
	            l.pop(i)
	            l.pop(i)
	            print(sum(l))
	            exit(0)
	print(sum(l))
"
3055203,28315895,"n=int(input())
R = lambda: map(int,input().split())
l= list(R())
l.sort()
print(l[(n-1)//2])",28839,5444,62,7/6/17 7:24,9,2600,1,8,"[(True, '2015', '2015', 37867), (True, '2050', '2050', 37868), (True, '2010', '2010', 37869), (True, '2011', '2011', 37870), (True, '2011', '2011', 37871), (True, '2048', '2048', 37872), (True, '2042', '2042', 37873), (True, '2014', '2014', 37874), (True, '2045', '2045', 37875), (True, '2046', '2046', 37876), (True, '2099', '2099', 37877), (True, '2100', '2100', 37878), (True, '2011', '2011', 37879), (True, '2011', '2011', 37880), (True, '2011', '2011', 37881), (True, '2011', '2011', 37882), (True, '2011', '2011', 37883), (True, '2048', '2048', 37884), (True, '2048', '2048', 37885), (True, '2048', '2048', 37886), (True, '2048', '2048', 37887), (True, '2048', '2048', 37888), (True, '2012', '2012', 37889), (True, '2013', '2013', 37890), (True, '2022', '2022', 37891), (True, '2079', '2079', 37892), (True, '2097', '2097', 37893), (True, '2098', '2098', 37894), (True, '2012', '2012', 37895), (True, '2013', '2013', 37896), (True, '2022', '2022', 37897), (True, '2079', '2079', 37898), (True, '2097', '2097', 37899), (True, '2098', '2098', 37900), (True, '2012', '2012', 37901), (True, '2013', '2013', 37902), (True, '2022', '2022', 37903), (True, '2079', '2079', 37904), (True, '2097', '2097', 37905), (True, '2098', '2098', 37906), (True, '2034', '2034', 37907), (True, '2031', '2031', 37908), (True, '2094', '2094', 37909), (True, '2013', '2013', 37910), (True, '2058', '2058', 37911)]",True,Accecpted,0.8633400213704505,0.9847715736040608,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	R = (lambda : map(int, args[1].split()))
	l = list(R())
	l.sort()
	print(l[((n - 1) // 2)])
"
2417019,3671751,"import string

rd = lambda: list(map(int, input().split()))

n, k = rd()
if k>26 or k>n or k==1 and n>1:
  print(-1)
elif k==1 and n==1:
  print('a')
else:
  print(('ab'*((n+1)/2))[:n-k+2]+string.ascii_lowercase[2:k])",58788,268,46,5/5/13 12:28,11,2093,5,8,"[(False, '', 'ababacd', 195413), (True, '-1', '-1', 195414), (False, '', 'abababacde', 195415), (False, '', 'abababababababababababababababababababababababa', 195416), (False, '', 'ababacdefg', 195417), (False, '', 'abababababababacdefg', 195418), (False, '', 'abcdefghijklmnopqrstuvwxyz', 195419), (True, '-1', '-1', 195420), (False, '', 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstuvwxyz', 195421), (True, '-1', '-1', 195423), (True, '-1', '-1', 195428), (True, '-1', '-1', 195436), (True, '-1', '-1', 195437), (True, 'a', 'a', 195438), (False, '', 'ab', 195439), (True, '-1', '-1', 195440), (True, '-1', '-1', 195441), (False, '', 'ababababababababababababab', 195442), (False, '', 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstu', 195443), (False, '', 'abc', 195444)]",False,Runtime Error,0.960707139034002,0.9845474613686536,False,0.55,False,"def func(*args):
	
	import string
	rd = (lambda : list(map(int, args[0].split())))
	(n, k) = rd()
	if ((k > 26) or (k > n) or ((k == 1) and (n > 1))):
	    print((- 1))
	elif ((k == 1) and (n == 1)):
	    print('a')
	else:
	    print((('ab' * ((n + 1) / 2))[:((n - k) + 2)] + string.ascii_lowercase[2:k]))
"
2417020,3671760,"import string

rd = lambda: list(map(int, input().split()))

n, k = rd()
if k>26 or k>n or k==1 and n>1:
  print(-1)
elif k==1 and n==1:
  print('a')
else:
  print(('ab'*(n+1>>1))[:n-k+2]+string.ascii_lowercase[2:k])",58788,2336,93,5/5/13 12:29,11,2093,1,8,"[(True, 'ababacd', 'ababacd', 195413), (True, '-1', '-1', 195414), (True, 'abababacde', 'abababacde', 195415), (True, 'abababababababababababababababababababababababa', 'abababababababababababababababababababababababa', 195416), (True, 'ababacdefg', 'ababacdefg', 195417), (True, 'abababababababacdefg', 'abababababababacdefg', 195418), (True, 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz', 195419), (True, '-1', '-1', 195420), (True, 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstuvwxyz', 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstuvwxyz', 195421), (True, '-1', '-1', 195423), (True, '-1', '-1', 195428), (True, '-1', '-1', 195436), (True, '-1', '-1', 195437), (True, 'a', 'a', 195438), (True, 'ab', 'ab', 195439), (True, '-1', '-1', 195440), (True, '-1', '-1', 195441), (True, 'ababababababababababababab', 'ababababababababababababab', 195442), (True, 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstu', 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstu', 195443), (True, 'abc', 'abc', 195444)]",True,Accecpted,0.960707139034002,0.9845474613686536,False,0.0,False,"def func(*args):
	
	import string
	rd = (lambda : list(map(int, args[0].split())))
	(n, k) = rd()
	if ((k > 26) or (k > n) or ((k == 1) and (n > 1))):
	    print((- 1))
	elif ((k == 1) and (n == 1)):
	    print('a')
	else:
	    print((('ab' * ((n + 1) >> 1))[:((n - k) + 2)] + string.ascii_lowercase[2:k]))
"
718065,22853470,"n=int(input())
s=""""
for i in range(1,n):
	if i%2==0:
		s=s+""I love""
	else:
		s=s+""I hate""
	s=s+"" that ""
if n%2==0:
	s=s+""I love it""
else:
	s=s+""I hate it""
print (s)",11867,136,62,12/10/16 14:13,25,668,1,8,"[(True, 'I hate it', 'I hate it', 100802), (True, 'I hate that I love it', 'I hate that I love it', 100803), (True, 'I hate that I love that I hate it', 'I hate that I love that I hate it', 100804), (True, 'I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love it', 100805), (True, 'I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate it', 100806), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100807), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100808), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100809), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100819), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100820)]",True,Accecpted,0.7471675769928026,0.9842931937172776,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	s = ''
	for i in range(1, n):
	    if ((i % 2) == 0):
	        s = (s + 'I love')
	    else:
	        s = (s + 'I hate')
	    s = (s + ' that ')
	if ((n % 2) == 0):
	    s = (s + 'I love it')
	else:
	    s = (s + 'I hate it')
	print(s)
"
1328672,29492555,"s = input()
L = ['H','Q','9','+']
for i in range(len(s)):
    if s[i] in L:
        print(""YES"")
        exit()
print(""NO"")",54595,4508,122,8/16/17 0:58,7,1198,2,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (False, 'YES', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (False, 'YES', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (False, 'YES', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (False, 'YES', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (False, 'YES', 'NO', 142090), (False, 'YES', 'NO', 142091), (False, 'YES', 'NO', 142092), (False, 'YES', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (False, 'YES', 'NO', 142096), (False, 'YES', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (False, 'YES', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (False, 'YES', 'NO', 142105)]",False,Wrong Answer,0.8282477531331041,0.984251968503937,False,0.1411764705882353,False,"def func(*args):
	
	s = args[0]
	L = ['H', 'Q', '9', '+']
	for i in range(len(s)):
	    if (s[i] in L):
	        print('YES')
	        exit()
	print('NO')
"
1328673,29492569,"s = input()
L = ['H','Q','9']
for i in range(len(s)):
    if s[i] in L:
        print(""YES"")
        exit()
print(""NO"")",54595,4520,154,8/16/17 0:59,7,1198,1,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (True, 'NO', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (True, 'NO', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (True, 'NO', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (True, 'NO', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (True, 'NO', 'NO', 142090), (True, 'NO', 'NO', 142091), (True, 'NO', 'NO', 142092), (True, 'NO', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (True, 'NO', 'NO', 142096), (True, 'NO', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (True, 'NO', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (True, 'NO', 'NO', 142105)]",True,Accecpted,0.8282477531331041,0.984251968503937,False,0.0,False,"def func(*args):
	
	s = args[0]
	L = ['H', 'Q', '9']
	for i in range(len(s)):
	    if (s[i] in L):
	        print('YES')
	        exit()
	print('NO')
"
886274,27714939,"last, res = -1, 0
s = input()
for i, c in enumerate(s):
	if c in ""AEIOUY"":
		res = max(res, i - last)
		last = i
res = max(res, len(s) - last)
print(res)",1189,16,62,6/11/17 7:45,8,819,1,8,"[(True, '4', '4', 113942), (True, '1', '1', 113943), (True, '1', '1', 113944), (True, '2', '2', 113945), (True, '39', '39', 113946), (True, '1', '1', 113947), (True, '85', '85', 113948), (True, '18', '18', 113949), (True, '11', '11', 113950), (True, '12', '12', 113951), (True, '9', '9', 113952), (True, '4', '4', 113953), (True, '101', '101', 113954), (True, '76', '76', 113955), (True, '45', '45', 113956), (True, '48', '48', 113957), (True, '47', '47', 113958), (True, '65', '65', 113959), (True, '28', '28', 113960), (True, '35', '35', 113961), (True, '30', '30', 113962), (True, '19', '19', 113963), (True, '30', '30', 113964), (True, '34', '34', 113965), (True, '17', '17', 113966), (True, '15', '15', 113967), (True, '9', '9', 113968), (True, '5', '5', 113969), (True, '4', '4', 113970), (True, '5', '5', 113971), (True, '5', '5', 113972), (True, '3', '3', 113973), (True, '3', '3', 113974), (True, '2', '2', 113975), (True, '2', '2', 113976), (True, '2', '2', 113977), (True, '2', '2', 113978), (True, '1', '1', 113979), (True, '4', '4', 113980), (True, '4', '4', 113981), (True, '3', '3', 113982), (True, '1', '1', 113983), (True, '8', '8', 113984), (True, '1', '1', 113985), (True, '1', '1', 113986), (True, '4', '4', 113987), (True, '1', '1', 113988), (True, '4', '4', 113989), (True, '1', '1', 113990), (True, '2', '2', 113991), (True, '5', '5', 113992), (True, '5', '5', 113993), (True, '3', '3', 113994), (True, '2', '2', 113995), (True, '1', '1', 113996), (True, '7', '7', 113997), (True, '3', '3', 113998), (True, '16', '16', 113999), (True, '3', '3', 114000), (True, '3', '3', 114001), (True, '6', '6', 114002), (True, '1', '1', 114003), (True, '3', '3', 114004), (True, '1', '1', 114005), (True, '3', '3', 114006), (True, '4', '4', 114007), (True, '8', '8', 114008), (True, '5', '5', 114009), (True, '1', '1', 114010), (True, '13', '13', 114011)]",True,Accecpted,0.9438872047706456,0.9842271293375394,False,0.0,False,"def func(*args):
	
	(last, res) = ((- 1), 0)
	s = args[0]
	for (i, c) in enumerate(s):
	    if (c in 'AEIOUY'):
	        res = max(res, (i - last))
	        last = i
	res = max(res, (len(s) - last))
	print(res)
"
886273,27714921,"last, res = -1, 0
s = input()
for i, c in enumerate(s):
	if c in ""AEIOUY"":
		res = max(res, i - last)
		last = i
res = max(res, len(s) - i)
print(res)",1189,0,62,6/11/17 7:43,8,819,2,8,"[(True, '4', '4', 113942), (True, '1', '1', 113943), (True, '1', '1', 113944), (False, '1', '2', 113945), (True, '39', '39', 113946), (True, '1', '1', 113947), (False, '1', '85', 113948), (True, '18', '18', 113949), (False, '1', '11', 113950), (False, '9', '12', 113951), (True, '9', '9', 113952), (True, '4', '4', 113953), (False, '1', '101', 113954), (False, '25', '76', 113955), (True, '45', '45', 113956), (True, '48', '48', 113957), (True, '47', '47', 113958), (True, '65', '65', 113959), (True, '28', '28', 113960), (True, '35', '35', 113961), (True, '30', '30', 113962), (True, '19', '19', 113963), (True, '30', '30', 113964), (True, '34', '34', 113965), (True, '17', '17', 113966), (True, '15', '15', 113967), (True, '9', '9', 113968), (True, '5', '5', 113969), (True, '4', '4', 113970), (True, '5', '5', 113971), (True, '5', '5', 113972), (True, '3', '3', 113973), (True, '3', '3', 113974), (True, '2', '2', 113975), (True, '2', '2', 113976), (True, '2', '2', 113977), (True, '2', '2', 113978), (True, '1', '1', 113979), (False, '3', '4', 113980), (False, '1', '4', 113981), (True, '3', '3', 113982), (True, '1', '1', 113983), (False, '2', '8', 113984), (True, '1', '1', 113985), (True, '1', '1', 113986), (False, '1', '4', 113987), (True, '1', '1', 113988), (False, '2', '4', 113989), (True, '1', '1', 113990), (True, '2', '2', 113991), (False, '4', '5', 113992), (False, '4', '5', 113993), (True, '3', '3', 113994), (True, '2', '2', 113995), (True, '1', '1', 113996), (False, '1', '7', 113997), (True, '3', '3', 113998), (False, '2', '16', 113999), (True, '3', '3', 114000), (False, '1', '3', 114001), (False, '4', '6', 114002), (True, '1', '1', 114003), (True, '3', '3', 114004), (True, '1', '1', 114005), (True, '3', '3', 114006), (True, '4', '4', 114007), (False, '4', '8', 114008), (True, '5', '5', 114009), (True, '1', '1', 114010), (False, '2', '13', 114011)]",False,Wrong Answer,0.9438872047706456,0.9842271293375394,False,0.2714285714285714,False,"def func(*args):
	
	(last, res) = ((- 1), 0)
	s = args[0]
	for (i, c) in enumerate(s):
	    if (c in 'AEIOUY'):
	        res = max(res, (i - last))
	        last = i
	res = max(res, (len(s) - i))
	print(res)
"
722496,27506336,"feeling_number = int(input().strip())

even = ""I hate""
odd = ""I love""

final_feeling = "" ""
for i in range(feeling_number):
	if i == 0:
		final_feeling = even
	elif (i%2)!=0:
		final_feeling = final_feeling + "" that "" + odd
	elif (i%2) ==0:
		final_feeling = final_feeling + "" that "" + even

final_feeling = final_feeling+"" it""
print(final_feeling)",24986,0,62,6/1/17 20:22,31,668,1,8,"[(True, 'I hate it', 'I hate it', 100802), (True, 'I hate that I love it', 'I hate that I love it', 100803), (True, 'I hate that I love that I hate it', 'I hate that I love that I hate it', 100804), (True, 'I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love it', 100805), (True, 'I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate it', 100806), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100807), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100808), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100809), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100819), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100820)]",True,Accecpted,0.8644632791574429,0.984126984126984,False,0.0,False,"def func(*args):
	
	feeling_number = int(args[0].strip())
	even = 'I hate'
	odd = 'I love'
	final_feeling = ' '
	for i in range(feeling_number):
	    if (i == 0):
	        final_feeling = even
	    elif ((i % 2) != 0):
	        final_feeling = ((final_feeling + ' that ') + odd)
	    elif ((i % 2) == 0):
	        final_feeling = ((final_feeling + ' that ') + even)
	final_feeling = (final_feeling + ' it')
	print(final_feeling)
"
1436979,28955476,"# coding=utf-8


from sys import stdin, stdout


def nod(a, b):
    while b != 0:
        a %= b
        a, b = b, a
    return a


def nok(a, b):
    return a * b / nod(a, b)


k, l, m, n, d = [int(x) for x in stdin.read().rstrip().split()]

result = 0
result += d // k + d // l + d // m + d // n
result -= d // nok(k, l) + d // nok(k, m) + d // nok(k, n) + d // nok(l, m) + d // nok(l, n) + d // nok(m, n)
result += d // nok(nok(k, l), m) + d // nok(nok(l, m), n) + d // nok(nok(k, m), n) + d // nok(nok(k, l), n)
result -= d // nok(nok(nok(k, l), m), n)

print(int(result))",2045,4516,124,7/28/17 17:10,26,1274,1,8,"[(True, '12', '12', 147720), (True, '17', '17', 147721), (True, '100000', '100000', 147722), (True, '0', '0', 147723), (True, '32718', '32718', 147724), (True, '59392', '59392', 147725), (True, '44835', '44835', 147726), (True, '62982', '62982', 147727), (True, '35246', '35246', 147728), (True, '75083', '75083', 147729), (True, '24656', '24656', 147730), (True, '36320', '36320', 147731), (True, '28244', '28244', 147732), (True, '16540', '16540', 147733), (True, '36302', '36302', 147734), (True, '15539', '15539', 147735), (True, '39901', '39901', 147736), (True, '58048', '58048', 147737), (True, '21956', '21956', 147738), (True, '32736', '32736', 147739), (True, '11118', '11118', 147740), (True, '49547', '49547', 147741), (True, '36019', '36019', 147742), (True, '63537', '63537', 147743), (True, '53678', '53678', 147744), (True, '99831', '99831', 147745), (True, '20360', '20360', 147746), (True, '29931', '29931', 147747), (True, '89535', '89535', 147748), (True, '7682', '7682', 147749), (True, '9224', '9224', 147750), (True, '43539', '43539', 147751), (True, '2438', '2438', 147752), (True, '415', '415', 147753), (True, '10000', '10000', 147754), (True, '1', '1', 147755), (True, '0', '0', 147756), (True, '10', '10', 147757), (True, '100', '100', 147758), (True, '0', '0', 147759)]",True,Accecpted,0.9922173073328444,0.984126984126984,False,0.0,False,"def func(*args):
	
	from sys import stdin, stdout
	
	def nod(a, b):
	    while (b != 0):
	        a %= b
	        (a, b) = (b, a)
	    return a
	
	def nok(a, b):
	    return ((a * b) / nod(a, b))
	(k, l, m, n, d) = [int(x) for x in stdin.read().rstrip().split()]
	result = 0
	result += ((((d // k) + (d // l)) + (d // m)) + (d // n))
	result -= ((((((d // nok(k, l)) + (d // nok(k, m))) + (d // nok(k, n))) + (d // nok(l, m))) + (d // nok(l, n))) + (d // nok(m, n)))
	result += ((((d // nok(nok(k, l), m)) + (d // nok(nok(l, m), n))) + (d // nok(nok(k, m), n))) + (d // nok(nok(k, l), n)))
	result -= (d // nok(nok(nok(k, l), m), n))
	print(int(result))
"
77897,26968860,"a=int(input())
print((a-2)**2)",9162,0,62,5/9/17 10:02,3,69,1,8,"[(True, '9', '9', 53450), (True, '1', '1', 53451), (True, '2950553761', '2950553761', 53452), (True, '4', '4', 53453), (True, '16', '16', 53454), (True, '25', '25', 53455), (True, '36', '36', 53456), (True, '49', '49', 53457), (True, '64', '64', 53458), (True, '2950445124', '2950445124', 53459), (True, '2950336489', '2950336489', 53460), (True, '2950227856', '2950227856', 53461), (True, '2950119225', '2950119225', 53462), (True, '2950010596', '2950010596', 53463), (True, '2949901969', '2949901969', 53464), (True, '2949793344', '2949793344', 53465), (True, '66438801', '66438801', 53466), (True, '2671545969', '2671545969', 53467), (True, '277455649', '277455649', 53468), (True, '2245527769', '2245527769', 53469), (True, '97344', '97344', 53470), (True, '551263441', '551263441', 53471), (True, '415262884', '415262884', 53472), (True, '3968064', '3968064', 53473)]",True,Accecpted,1.5319719891192393e-231,0.984126984126984,False,0.0,False,"def func(*args):
	
	a = int(args[0])
	print(((a - 2) ** 2))
"
232482,26588381,"x=int(input())
print((x+4)//5)",22861,5420,62,4/22/17 19:42,3,194,1,8,"[(True, '1', '1', 63841), (True, '3', '3', 63842), (True, '200000', '200000', 63843), (True, '9', '9', 63844), (True, '200000', '200000', 63845), (True, '1', '1', 63846), (True, '1', '1', 63847), (True, '1', '1', 63848), (True, '1', '1', 63849), (True, '106841', '106841', 63850), (True, '93914', '93914', 63851), (True, '100576', '100576', 63852), (True, '188443', '188443', 63853), (True, '20', '20', 63854), (True, '11', '11', 63855), (True, '18', '18', 63856), (True, '115', '115', 63857), (True, '144', '144', 63858), (True, '146', '146', 63859), (True, '1781', '1781', 63860), (True, '729', '729', 63861), (True, '886', '886', 63862), (True, '9315', '9315', 63863), (True, '17276', '17276', 63864), (True, '18838', '18838', 63865), (True, '199998', '199998', 63866), (True, '199999', '199999', 63867), (True, '199999', '199999', 63868), (True, '199999', '199999', 63869), (True, '199999', '199999', 63870), (True, '199999', '199999', 63871), (True, '200000', '200000', 63872), (True, '200000', '200000', 63873), (True, '200000', '200000', 63874)]",True,Accecpted,1.5319719891192393e-231,0.984126984126984,False,0.0,False,"def func(*args):
	
	x = int(args[0])
	print(((x + 4) // 5))
"
2980702,11918315,"import sys
sys.setrecursionlimit(10000000)


def solve():
    n, m, a, b, = rv()
    a -= 1
    b -= 1
    if a // m == b // m or m == 1:
        print(1)
        return
    # now only way it is one is if it is one big square
    first = m - (a - (a // m) * m)
    last = b - (b // m) * m + 1
    if b + 1 == n: last = m
    # print(first, last)
    if first == m and last == m:
        print(1)
        return
    if a // m + 1 == b // m or first + last == m:
        print(2)
        return
    if first == m or last == m:
        print(2)
        return
    print(3)

    # print(a, b)
    # firstrow = m - a % m
    # lastrow = b - ()
    # print(firstrow, lastrow)

def prt(l): return print(' '.join(l))
def rv(): return map(int, input().split())
def rl(n): return [list(map(int, input().split())) for _ in range(n)]
if sys.hexversion == 50594544 : sys.stdin = open(""test.txt"")
solve()",2970,0,124,7/4/15 6:41,37,2542,1,8,"[(True, '3', '3', 35451), (True, '2', '2', 35452), (True, '1', '1', 35453), (True, '3', '3', 35454), (True, '1', '1', 35455), (True, '1', '1', 35456), (True, '2', '2', 35457), (True, '1', '1', 35458), (True, '2', '2', 35459), (True, '2', '2', 35460), (True, '2', '2', 35461), (True, '2', '2', 35462), (True, '2', '2', 35463), (True, '2', '2', 35464), (True, '2', '2', 35465), (True, '3', '3', 35466), (True, '3', '3', 35467), (True, '2', '2', 35468), (True, '2', '2', 35469), (True, '1', '1', 35470), (True, '2', '2', 35471), (True, '2', '2', 35472), (True, '1', '1', 35473), (True, '1', '1', 35474), (True, '2', '2', 35475), (True, '1', '1', 35476), (True, '1', '1', 35477), (True, '2', '2', 35478), (True, '2', '2', 35479), (True, '1', '1', 35480), (True, '2', '2', 35481), (True, '3', '3', 35482), (True, '2', '2', 35483), (True, '1', '1', 35484), (True, '3', '3', 35485), (True, '3', '3', 35486), (True, '2', '2', 35487), (True, '1', '1', 35488), (True, '1', '1', 35489), (True, '2', '2', 35490), (True, '1', '1', 35491), (True, '3', '3', 35492), (True, '1', '1', 35493), (True, '2', '2', 35494), (True, '2', '2', 35495), (True, '1', '1', 35496), (True, '1', '1', 35497), (True, '1', '1', 35498), (True, '1', '1', 35499), (True, '1', '1', 35500), (True, '2', '2', 35501), (True, '2', '2', 35502), (True, '2', '2', 35503), (True, '3', '3', 35504), (True, '2', '2', 35505), (True, '3', '3', 35506), (True, '3', '3', 35507), (True, '3', '3', 35508), (True, '3', '3', 35509), (True, '3', '3', 35510), (True, '1', '1', 35511), (True, '3', '3', 35512), (True, '1', '1', 35513), (True, '1', '1', 35514), (True, '1', '1', 35515), (True, '1', '1', 35516), (True, '2', '2', 35517), (True, '1', '1', 35518), (True, '1', '1', 35519), (True, '1', '1', 35520), (True, '3', '3', 35521), (True, '3', '3', 35522), (True, '3', '3', 35523), (True, '3', '3', 35524), (True, '3', '3', 35525), (True, '3', '3', 35526), (True, '3', '3', 35527), (True, '3', '3', 35528), (True, '3', '3', 35529), (True, '3', '3', 35530), (True, '1', '1', 35531), (True, '1', '1', 35532), (True, '1', '1', 35533), (True, '2', '2', 35534), (True, '3', '3', 35535), (True, '1', '1', 35536), (True, '1', '1', 35537), (True, '1', '1', 35538), (True, '1', '1', 35539), (True, '1', '1', 35540), (True, '2', '2', 35541), (True, '2', '2', 35542), (True, '2', '2', 35543), (True, '2', '2', 35544), (True, '1', '1', 35545), (True, '1', '1', 35546), (True, '1', '1', 35547), (True, '2', '2', 35548), (True, '2', '2', 35549), (True, '1', '1', 35550), (True, '1', '1', 35551), (True, '1', '1', 35552), (True, '1', '1', 35553), (True, '1', '1', 35554), (True, '2', '2', 35555), (True, '1', '1', 35556), (True, '1', '1', 35557), (True, '1', '1', 35558), (True, '1', '1', 35559), (True, '2', '2', 35560), (True, '2', '2', 35561), (True, '1', '1', 35562), (True, '1', '1', 35563), (True, '1', '1', 35564), (True, '1', '1', 35565), (True, '2', '2', 35566), (True, '2', '2', 35567), (True, '2', '2', 35568), (True, '2', '2', 35569), (True, '1', '1', 35570), (True, '2', '2', 35571), (True, '2', '2', 35572), (True, '2', '2', 35573), (True, '2', '2', 35574), (True, '1', '1', 35575), (True, '1', '1', 35576), (True, '1', '1', 35577), (True, '1', '1', 35578), (True, '1', '1', 35579), (True, '1', '1', 35580), (True, '2', '2', 35581), (True, '1', '1', 35582), (True, '2', '2', 35583), (True, '1', '1', 35584), (True, '1', '1', 35585), (True, '1', '1', 35586), (True, '1', '1', 35587), (True, '2', '2', 35588), (True, '2', '2', 35589), (True, '1', '1', 35590), (True, '2', '2', 35591), (True, '1', '1', 35592), (True, '1', '1', 35593), (True, '1', '1', 35594), (True, '2', '2', 35595), (True, '2', '2', 35596), (True, '2', '2', 35597), (True, '2', '2', 35598), (True, '2', '2', 35599), (True, '1', '1', 35600), (True, '2', '2', 35601), (True, '2', '2', 35602), (True, '2', '2', 35603), (True, '3', '3', 35604), (True, '2', '2', 35605), (True, '1', '1', 35606), (True, '1', '1', 35607), (True, '1', '1', 35608), (True, '2', '2', 35609), (True, '1', '1', 35610), (True, '1', '1', 35611), (True, '1', '1', 35612), (True, '2', '2', 35613), (True, '2', '2', 35614), (True, '1', '1', 35615), (True, '2', '2', 35616), (True, '2', '2', 35617), (True, '1', '1', 35618), (True, '1', '1', 35619), (True, '1', '1', 35620)]",True,Accecpted,0.9351039741015796,0.9840182648401826,False,0.0,False,"def func(*args):
	
	import sys
	sys.setrecursionlimit(10000000)
	
	def solve():
	    (n, m, a, b) = rv()
	    a -= 1
	    b -= 1
	    if (((a // m) == (b // m)) or (m == 1)):
	        print(1)
	        return
	    first = (m - (a - ((a // m) * m)))
	    last = ((b - ((b // m) * m)) + 1)
	    if ((b + 1) == n):
	        last = m
	    if ((first == m) and (last == m)):
	        print(1)
	        return
	    if ((((a // m) + 1) == (b // m)) or ((first + last) == m)):
	        print(2)
	        return
	    if ((first == m) or (last == m)):
	        print(2)
	        return
	    print(3)
	
	def prt(l):
	    return print(' '.join(l))
	
	def rv():
	    return map(int, args[0].split())
	
	def rl(n):
	    return [list(map(int, args[1].split())) for _ in range(n)]
	if (sys.hexversion == 50594544):
	    sys.stdin = open('test.txt')
	solve()
"
2980701,11918280,"import sys
sys.setrecursionlimit(10000000)


def solve():
    n, m, a, b, = rv()
    a -= 1
    b -= 1
    if a // m == b // m or m == 1:
        print(1)
        return
    # now only way it is one is if it is one big square
    first = m - (a - (a // m) * m)
    last = b - (b // m) * m + 1
    # print(first, last)
    if first == m and last == m:
        print(1)
        return
    if a // m + 1 == b // m or first + last == m:
        print(2)
        return
    if first == m or last == m:
        print(2)
        return
    print(3)

    # print(a, b)
    # firstrow = m - a % m
    # lastrow = b - ()
    # print(firstrow, lastrow)

def prt(l): return print(' '.join(l))
def rv(): return map(int, input().split())
def rl(n): return [list(map(int, input().split())) for _ in range(n)]
if sys.hexversion == 50594544 : sys.stdin = open(""test.txt"")
solve()",2970,0,92,7/4/15 6:37,36,2542,2,8,"[(True, '3', '3', 35451), (True, '2', '2', 35452), (True, '1', '1', 35453), (True, '3', '3', 35454), (True, '1', '1', 35455), (False, '2', '1', 35456), (True, '2', '2', 35457), (True, '1', '1', 35458), (True, '2', '2', 35459), (True, '2', '2', 35460), (True, '2', '2', 35461), (False, '3', '2', 35462), (True, '2', '2', 35463), (True, '2', '2', 35464), (True, '2', '2', 35465), (True, '3', '3', 35466), (True, '3', '3', 35467), (True, '2', '2', 35468), (False, '3', '2', 35469), (False, '2', '1', 35470), (True, '2', '2', 35471), (True, '2', '2', 35472), (True, '1', '1', 35473), (True, '1', '1', 35474), (True, '2', '2', 35475), (True, '1', '1', 35476), (True, '1', '1', 35477), (True, '2', '2', 35478), (False, '3', '2', 35479), (True, '1', '1', 35480), (True, '2', '2', 35481), (True, '3', '3', 35482), (True, '2', '2', 35483), (True, '1', '1', 35484), (True, '3', '3', 35485), (True, '3', '3', 35486), (True, '2', '2', 35487), (True, '1', '1', 35488), (True, '1', '1', 35489), (True, '2', '2', 35490), (True, '1', '1', 35491), (True, '3', '3', 35492), (True, '1', '1', 35493), (True, '2', '2', 35494), (True, '2', '2', 35495), (True, '1', '1', 35496), (True, '1', '1', 35497), (True, '1', '1', 35498), (True, '1', '1', 35499), (True, '1', '1', 35500), (True, '2', '2', 35501), (True, '2', '2', 35502), (True, '2', '2', 35503), (True, '3', '3', 35504), (True, '2', '2', 35505), (True, '3', '3', 35506), (True, '3', '3', 35507), (True, '3', '3', 35508), (True, '3', '3', 35509), (True, '3', '3', 35510), (True, '1', '1', 35511), (True, '3', '3', 35512), (True, '1', '1', 35513), (True, '1', '1', 35514), (True, '1', '1', 35515), (True, '1', '1', 35516), (True, '2', '2', 35517), (True, '1', '1', 35518), (True, '1', '1', 35519), (True, '1', '1', 35520), (True, '3', '3', 35521), (True, '3', '3', 35522), (True, '3', '3', 35523), (True, '3', '3', 35524), (True, '3', '3', 35525), (True, '3', '3', 35526), (True, '3', '3', 35527), (True, '3', '3', 35528), (True, '3', '3', 35529), (True, '3', '3', 35530), (True, '1', '1', 35531), (True, '1', '1', 35532), (True, '1', '1', 35533), (True, '2', '2', 35534), (True, '3', '3', 35535), (True, '1', '1', 35536), (True, '1', '1', 35537), (True, '1', '1', 35538), (True, '1', '1', 35539), (True, '1', '1', 35540), (True, '2', '2', 35541), (True, '2', '2', 35542), (True, '2', '2', 35543), (True, '2', '2', 35544), (True, '1', '1', 35545), (True, '1', '1', 35546), (True, '1', '1', 35547), (True, '2', '2', 35548), (True, '2', '2', 35549), (True, '1', '1', 35550), (False, '2', '1', 35551), (True, '1', '1', 35552), (True, '1', '1', 35553), (True, '1', '1', 35554), (True, '2', '2', 35555), (False, '2', '1', 35556), (True, '1', '1', 35557), (True, '1', '1', 35558), (True, '1', '1', 35559), (True, '2', '2', 35560), (True, '2', '2', 35561), (True, '1', '1', 35562), (False, '2', '1', 35563), (True, '1', '1', 35564), (True, '1', '1', 35565), (True, '2', '2', 35566), (True, '2', '2', 35567), (True, '2', '2', 35568), (True, '2', '2', 35569), (True, '1', '1', 35570), (True, '2', '2', 35571), (True, '2', '2', 35572), (True, '2', '2', 35573), (False, '3', '2', 35574), (True, '1', '1', 35575), (True, '1', '1', 35576), (True, '1', '1', 35577), (False, '2', '1', 35578), (True, '1', '1', 35579), (True, '1', '1', 35580), (True, '2', '2', 35581), (True, '1', '1', 35582), (True, '2', '2', 35583), (True, '1', '1', 35584), (True, '1', '1', 35585), (True, '1', '1', 35586), (True, '1', '1', 35587), (True, '2', '2', 35588), (True, '2', '2', 35589), (True, '1', '1', 35590), (True, '2', '2', 35591), (False, '2', '1', 35592), (True, '1', '1', 35593), (True, '1', '1', 35594), (True, '2', '2', 35595), (True, '2', '2', 35596), (True, '2', '2', 35597), (True, '2', '2', 35598), (False, '3', '2', 35599), (True, '1', '1', 35600), (True, '2', '2', 35601), (True, '2', '2', 35602), (True, '2', '2', 35603), (True, '3', '3', 35604), (True, '2', '2', 35605), (True, '1', '1', 35606), (True, '1', '1', 35607), (True, '1', '1', 35608), (True, '2', '2', 35609), (False, '2', '1', 35610), (True, '1', '1', 35611), (True, '1', '1', 35612), (True, '2', '2', 35613), (True, '2', '2', 35614), (True, '1', '1', 35615), (True, '2', '2', 35616), (True, '2', '2', 35617), (True, '1', '1', 35618), (True, '1', '1', 35619), (True, '1', '1', 35620)]",False,Wrong Answer,0.9351039741015796,0.9840182648401826,False,0.0764705882352941,False,"def func(*args):
	
	import sys
	sys.setrecursionlimit(10000000)
	
	def solve():
	    (n, m, a, b) = rv()
	    a -= 1
	    b -= 1
	    if (((a // m) == (b // m)) or (m == 1)):
	        print(1)
	        return
	    first = (m - (a - ((a // m) * m)))
	    last = ((b - ((b // m) * m)) + 1)
	    if ((first == m) and (last == m)):
	        print(1)
	        return
	    if ((((a // m) + 1) == (b // m)) or ((first + last) == m)):
	        print(2)
	        return
	    if ((first == m) or (last == m)):
	        print(2)
	        return
	    print(3)
	
	def prt(l):
	    return print(' '.join(l))
	
	def rv():
	    return map(int, args[0].split())
	
	def rl(n):
	    return [list(map(int, args[1].split())) for _ in range(n)]
	if (sys.hexversion == 50594544):
	    sys.stdin = open('test.txt')
	solve()
"
2030016,27101501,"string = input("""")
chars = ""abcdefghijklmnopqrstuvwxyz""
total = len(string)
for char in chars:
  count = string.count(char)
  if count > 1:
      total -= (count-1)
if(total % 2 == 0):
    print(""CHAT WITH HER!"")
else:
    print(""IGNORE HIM!"")",23076,0,124,5/14/17 9:13,11,1804,1,8,"[(True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178195), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178196), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178197), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178198), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178199), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178200), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178201), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178202), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178203), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178204), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178205), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178206), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178207), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178208), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178209), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178210), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178211), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178212), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178213), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178214), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178215), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178216), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178217), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178218), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178219), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178220), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178221), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178222), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178223), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178224), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178225), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178226), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178227), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178228), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178229), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178230), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178231), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178232), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178233), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178234), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178235), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178236), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178237), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178238), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178239), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178240), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178241), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178242), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178243), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178244), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178245), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178246), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178247), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178248), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178249), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178250), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178251), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178252), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178253), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178254), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178255), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178256), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178257), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178258), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178259), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178260), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178261), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178262), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178263), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178264), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178265), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178266), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178267), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178268), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178269), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178270), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178271), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178272), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178273), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178274), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178275), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178276), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178277), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178278), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178279)]",True,Accecpted,0.9210500207490828,0.9839357429718876,False,0.0,False,"def func(*args):
	
	string = args[0]
	chars = 'abcdefghijklmnopqrstuvwxyz'
	total = len(string)
	for char in chars:
	    count = string.count(char)
	    if (count > 1):
	        total -= (count - 1)
	if ((total % 2) == 0):
	    print('CHAT WITH HER!')
	else:
	    print('IGNORE HIM!')
"
2030015,27101361,"string = input("""")
chars = ""abcdefghijklmnopqrstuvwxyz""
total = len(string)
for char in chars:
  count = string.count(char)
  if count > 1:
      total -= 1
if(total % 2 == 0):
    print(""CHAT WITH HER!"")
else:
    print(""IGNORE HIM!"")",23076,0,122,5/14/17 8:59,11,1804,2,8,"[(True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178195), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178196), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178197), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178198), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178199), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178200), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178201), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178202), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178203), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178204), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178205), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178206), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178207), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178208), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178209), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178210), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178211), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178212), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178213), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178214), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178215), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178216), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178217), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178218), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178219), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178220), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178221), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178222), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178223), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178224), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178225), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178226), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178227), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178228), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178229), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178230), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178231), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178232), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178233), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178234), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178235), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178236), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178237), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178238), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178239), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178240), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178241), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178242), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178243), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178244), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178245), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178246), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178247), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178248), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178249), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178250), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178251), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178252), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178253), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178254), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178255), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178256), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178257), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178258), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178259), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178260), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178261), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178262), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178263), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178264), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178265), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178266), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178267), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178268), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178269), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178270), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178271), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178272), (False, 'IGNORE HIM!', 'CHAT WITH HER!', 178273), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178274), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178275), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178276), (False, 'CHAT WITH HER!', 'IGNORE HIM!', 178277), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178278), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178279)]",False,Wrong Answer,0.9210500207490828,0.9839357429718876,False,0.4352941176470588,False,"def func(*args):
	
	string = args[0]
	chars = 'abcdefghijklmnopqrstuvwxyz'
	total = len(string)
	for char in chars:
	    count = string.count(char)
	    if (count > 1):
	        total -= 1
	if ((total % 2) == 0):
	    print('CHAT WITH HER!')
	else:
	    print('IGNORE HIM!')
"
1049000,26188658,"p, n = input().split()
p = int(p)
n = int(n)
if p==0 or n==0:
    print(""NO"")
elif p==n or n-p==1 or p-n==1:
    print(""YES"")
else:
    print(""NO"")",40435,5436,61,4/7/17 12:31,9,972,2,8,"[(True, 'YES', 'YES', 125942), (True, 'NO', 'NO', 125943), (True, 'YES', 'YES', 125944), (True, 'YES', 'YES', 125945), (True, 'NO', 'NO', 125946), (False, 'NO', 'YES', 125947), (True, 'NO', 'NO', 125948), (True, 'YES', 'YES', 125949), (True, 'NO', 'NO', 125950), (True, 'YES', 'YES', 125951), (True, 'YES', 'YES', 125952), (True, 'NO', 'NO', 125953), (True, 'NO', 'NO', 125954), (True, 'YES', 'YES', 125955), (False, 'NO', 'YES', 125956), (True, 'NO', 'NO', 125957), (True, 'NO', 'NO', 125958), (True, 'NO', 'NO', 125959), (True, 'YES', 'YES', 125960), (True, 'NO', 'NO', 125961), (True, 'YES', 'YES', 125962)]",False,Wrong Answer,0.8843865924896842,0.9839228295819936,False,0.0952380952380952,False,"def func(*args):
	
	(p, n) = args[0].split()
	p = int(p)
	n = int(n)
	if ((p == 0) or (n == 0)):
	    print('NO')
	elif ((p == n) or ((n - p) == 1) or ((p - n) == 1)):
	    print('YES')
	else:
	    print('NO')
"
1049001,26188686,"p, n = input().split()
p = int(p)
n = int(n)
if p==0 and n==0:
    print(""NO"")
elif p==n or n-p==1 or p-n==1:
    print(""YES"")
else:
    print(""NO"")",40435,5432,62,4/7/17 12:32,9,972,1,8,"[(True, 'YES', 'YES', 125942), (True, 'NO', 'NO', 125943), (True, 'YES', 'YES', 125944), (True, 'YES', 'YES', 125945), (True, 'NO', 'NO', 125946), (True, 'YES', 'YES', 125947), (True, 'NO', 'NO', 125948), (True, 'YES', 'YES', 125949), (True, 'NO', 'NO', 125950), (True, 'YES', 'YES', 125951), (True, 'YES', 'YES', 125952), (True, 'NO', 'NO', 125953), (True, 'NO', 'NO', 125954), (True, 'YES', 'YES', 125955), (True, 'YES', 'YES', 125956), (True, 'NO', 'NO', 125957), (True, 'NO', 'NO', 125958), (True, 'NO', 'NO', 125959), (True, 'YES', 'YES', 125960), (True, 'NO', 'NO', 125961), (True, 'YES', 'YES', 125962)]",True,Accecpted,0.8843865924896842,0.9839228295819936,False,0.0,False,"def func(*args):
	
	(p, n) = args[0].split()
	p = int(p)
	n = int(n)
	if ((p == 0) and (n == 0)):
	    print('NO')
	elif ((p == n) or ((n - p) == 1) or ((p - n) == 1)):
	    print('YES')
	else:
	    print('NO')
"
2956839,27096296,"Y, W = map(int, input().split())
best = len([x for x in range(max(Y, W), 7)])
total = 6

def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(a, b%a)

numerator = best // gcd(best, total)
denominator = total // gcd(best, total)

print(str(numerator) + ""/"" + str(denominator))",39610,604,372,5/13/17 22:31,14,2520,5,8,"[(True, '1/2', '1/2', 218095), (True, '1/1', '1/1', 218096), (False, '', '5/6', 218097), (False, '', '2/3', 218098), (True, '1/2', '1/2', 218099), (True, '1/3', '1/3', 218100), (True, '1/6', '1/6', 218101), (False, '', '5/6', 218102), (False, '', '5/6', 218103), (False, '', '2/3', 218104), (True, '1/2', '1/2', 218105), (True, '1/3', '1/3', 218106), (True, '1/6', '1/6', 218107), (False, '', '2/3', 218108), (False, '', '2/3', 218109), (False, '', '2/3', 218110), (True, '1/2', '1/2', 218111), (True, '1/3', '1/3', 218112), (True, '1/6', '1/6', 218113), (True, '1/2', '1/2', 218114), (True, '1/2', '1/2', 218115), (True, '1/2', '1/2', 218116), (True, '1/3', '1/3', 218117), (True, '1/6', '1/6', 218118), (True, '1/3', '1/3', 218119), (True, '1/3', '1/3', 218120), (True, '1/3', '1/3', 218121), (True, '1/3', '1/3', 218122), (True, '1/3', '1/3', 218123), (True, '1/6', '1/6', 218124), (True, '1/6', '1/6', 218125), (True, '1/6', '1/6', 218126), (True, '1/6', '1/6', 218127), (True, '1/6', '1/6', 218128), (True, '1/6', '1/6', 218129), (True, '1/6', '1/6', 218130)]",False,Runtime Error,0.922045044975196,0.9839228295819936,False,0.2222222222222222,False,"def func(*args):
	
	(Y, W) = map(int, args[0].split())
	best = len([x for x in range(max(Y, W), 7)])
	total = 6
	
	def gcd(a, b):
	    if (b == 0):
	        return a
	    else:
	        return gcd(a, (b % a))
	numerator = (best // gcd(best, total))
	denominator = (total // gcd(best, total))
	print(((str(numerator) + '/') + str(denominator)))
"
2956840,27096332,"Y, W = map(int, input().split())
best = len([x for x in range(max(Y, W), 7)])
total = 6

def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a%b)

numerator = best // gcd(best, total)
denominator = total // gcd(best, total)

print(str(numerator) + ""/"" + str(denominator))",39610,0,124,5/13/17 22:35,14,2520,1,8,"[(True, '1/2', '1/2', 218095), (True, '1/1', '1/1', 218096), (True, '5/6', '5/6', 218097), (True, '2/3', '2/3', 218098), (True, '1/2', '1/2', 218099), (True, '1/3', '1/3', 218100), (True, '1/6', '1/6', 218101), (True, '5/6', '5/6', 218102), (True, '5/6', '5/6', 218103), (True, '2/3', '2/3', 218104), (True, '1/2', '1/2', 218105), (True, '1/3', '1/3', 218106), (True, '1/6', '1/6', 218107), (True, '2/3', '2/3', 218108), (True, '2/3', '2/3', 218109), (True, '2/3', '2/3', 218110), (True, '1/2', '1/2', 218111), (True, '1/3', '1/3', 218112), (True, '1/6', '1/6', 218113), (True, '1/2', '1/2', 218114), (True, '1/2', '1/2', 218115), (True, '1/2', '1/2', 218116), (True, '1/3', '1/3', 218117), (True, '1/6', '1/6', 218118), (True, '1/3', '1/3', 218119), (True, '1/3', '1/3', 218120), (True, '1/3', '1/3', 218121), (True, '1/3', '1/3', 218122), (True, '1/3', '1/3', 218123), (True, '1/6', '1/6', 218124), (True, '1/6', '1/6', 218125), (True, '1/6', '1/6', 218126), (True, '1/6', '1/6', 218127), (True, '1/6', '1/6', 218128), (True, '1/6', '1/6', 218129), (True, '1/6', '1/6', 218130)]",True,Accecpted,0.922045044975196,0.9839228295819936,False,0.0,False,"def func(*args):
	
	(Y, W) = map(int, args[0].split())
	best = len([x for x in range(max(Y, W), 7)])
	total = 6
	
	def gcd(a, b):
	    if (b == 0):
	        return a
	    else:
	        return gcd(b, (a % b))
	numerator = (best // gcd(best, total))
	denominator = (total // gcd(best, total))
	print(((str(numerator) + '/') + str(denominator)))
"
3332874,28581060,"x1,y1,x2,y2 = map(int,input().split())
a = abs(x1-x2)
b = abs(y1-y2)
x,y = map(int,input().split())
if(a%x!=0 or b%y!=0):
    print(""NO"")
else:
    par1 = a/x
    par2 = b/y
    par1 = par1%1
    par2 = par2%1
    if par1!=par2:
        print(""NO"")
    else:
        print(""YES"")",3527,4472,46,7/15/17 22:30,29,2883,2,8,"[(True, 'YES', 'YES', 243357), (False, 'YES', 'NO', 243358), (False, 'YES', 'NO', 243359), (False, 'YES', 'NO', 243360), (True, 'YES', 'YES', 243361), (True, 'YES', 'YES', 243362), (True, 'NO', 'NO', 243363), (True, 'NO', 'NO', 243364), (True, 'YES', 'YES', 243365), (True, 'NO', 'NO', 243366), (True, 'YES', 'YES', 243367), (True, 'YES', 'YES', 243368), (False, 'YES', 'NO', 243369), (True, 'YES', 'YES', 243370), (True, 'YES', 'YES', 243371), (False, 'YES', 'NO', 243372), (True, 'NO', 'NO', 243373), (True, 'NO', 'NO', 243374), (False, 'YES', 'NO', 243375), (True, 'YES', 'YES', 243376), (False, 'YES', 'NO', 243377), (True, 'YES', 'YES', 243378), (False, 'YES', 'NO', 243379), (False, 'YES', 'NO', 243380), (True, 'YES', 'YES', 243381), (True, 'NO', 'NO', 243382), (True, 'NO', 'NO', 243383), (True, 'YES', 'YES', 243384), (False, 'YES', 'NO', 243385), (True, 'YES', 'YES', 243386), (True, 'NO', 'NO', 243387), (True, 'NO', 'NO', 243388), (False, 'YES', 'NO', 243389), (True, 'YES', 'YES', 243390), (True, 'NO', 'NO', 243391), (True, 'NO', 'NO', 243392), (True, 'NO', 'NO', 243393), (False, 'YES', 'NO', 243394), (True, 'NO', 'NO', 243395), (True, 'NO', 'NO', 243396), (True, 'NO', 'NO', 243397), (True, 'YES', 'YES', 243398), (True, 'NO', 'NO', 243399), (True, 'NO', 'NO', 243400), (True, 'NO', 'NO', 243401), (True, 'YES', 'YES', 243402), (True, 'NO', 'NO', 243403), (False, 'YES', 'NO', 243404), (True, 'YES', 'YES', 243405), (False, 'YES', 'NO', 243406), (False, 'YES', 'NO', 243407), (True, 'NO', 'NO', 243408), (True, 'YES', 'YES', 243409), (True, 'NO', 'NO', 243410), (True, 'NO', 'NO', 243411), (True, 'NO', 'NO', 243412), (False, 'YES', 'NO', 243413), (True, 'YES', 'YES', 243414), (True, 'NO', 'NO', 243415), (True, 'NO', 'NO', 243416), (False, 'YES', 'NO', 243417)]",False,Wrong Answer,0.8492919530422433,0.9838709677419356,False,0.2786885245901639,False,"def func(*args):
	
	(x1, y1, x2, y2) = map(int, args[0].split())
	a = abs((x1 - x2))
	b = abs((y1 - y2))
	(x, y) = map(int, args[1].split())
	if (((a % x) != 0) or ((b % y) != 0)):
	    print('NO')
	else:
	    par1 = (a / x)
	    par2 = (b / y)
	    par1 = (par1 % 1)
	    par2 = (par2 % 1)
	    if (par1 != par2):
	        print('NO')
	    else:
	        print('YES')
"
1261810,27316676,"line = input().split()
n = int(line[0])
a = int(line[1])
b = int(line[2])

n -= a
if n > b:
  n = b + 1

print(n)",65369,8,122,5/24/17 11:26,10,1142,1,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (True, '1', '1', 138320), (True, '1', '1', 138321), (True, '4', '4', 138322), (True, '7', '7', 138323), (True, '5', '5', 138324), (True, '6', '6', 138325), (True, '10', '10', 138326), (True, '7', '7', 138327), (True, '9', '9', 138328), (True, '15', '15', 138329), (True, '8', '8', 138330), (True, '2', '2', 138331), (True, '24', '24', 138332), (True, '5', '5', 138333), (True, '6', '6', 138334), (True, '16', '16', 138335), (True, '5', '5', 138336), (True, '12', '12', 138337), (True, '17', '17', 138338), (True, '38', '38', 138339), (True, '18', '18', 138340), (True, '38', '38', 138341), (True, '13', '13', 138342), (True, '8', '8', 138343), (True, '13', '13', 138344), (True, '1', '1', 138345), (True, '40', '40', 138346), (True, '53', '53', 138347), (True, '34', '34', 138348), (True, '23', '23', 138349), (True, '39', '39', 138350), (True, '38', '38', 138351), (True, '13', '13', 138352), (True, '36', '36', 138353), (True, '7', '7', 138354), (True, '21', '21', 138355), (True, '21', '21', 138356), (True, '2', '2', 138357), (True, '43', '43', 138358), (True, '9', '9', 138359), (True, '14', '14', 138360), (True, '23', '23', 138361), (True, '89', '89', 138362), (True, '32', '32', 138363), (True, '73', '73', 138364), (True, '89', '89', 138365), (True, '19', '19', 138366), (True, '1', '1', 138367)]",True,Accecpted,0.8590888738245122,0.9838709677419356,False,0.0,False,"def func(*args):
	
	line = args[0].split()
	n = int(line[0])
	a = int(line[1])
	b = int(line[2])
	n -= a
	if (n > b):
	    n = (b + 1)
	print(n)
"
1261808,27316505,"line = input().split()
n = int(line[0])
a = int(line[1])
b = int(line[2])

n -= a
if n > b:
  n = n - b + 1

print(n)",65369,0,122,5/24/17 11:15,10,1142,2,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (False, '2', '1', 138320), (True, '1', '1', 138321), (False, '3', '4', 138322), (False, '2', '7', 138323), (True, '5', '5', 138324), (False, '5', '6', 138325), (False, '2', '10', 138326), (True, '7', '7', 138327), (False, '11', '9', 138328), (False, '2', '15', 138329), (True, '8', '8', 138330), (False, '22', '2', 138331), (False, '2', '24', 138332), (True, '5', '5', 138333), (False, '18', '6', 138334), (False, '2', '16', 138335), (True, '5', '5', 138336), (False, '4', '12', 138337), (False, '2', '17', 138338), (True, '38', '38', 138339), (False, '15', '18', 138340), (False, '2', '38', 138341), (True, '13', '13', 138342), (False, '17', '8', 138343), (False, '2', '13', 138344), (True, '1', '1', 138345), (False, '9', '40', 138346), (False, '2', '53', 138347), (True, '34', '34', 138348), (False, '14', '23', 138349), (False, '2', '39', 138350), (True, '38', '38', 138351), (False, '48', '13', 138352), (False, '2', '36', 138353), (True, '7', '7', 138354), (False, '35', '21', 138355), (False, '2', '21', 138356), (True, '2', '2', 138357), (True, '43', '43', 138358), (False, '2', '9', 138359), (True, '14', '14', 138360), (False, '69', '23', 138361), (False, '2', '89', 138362), (True, '32', '32', 138363), (False, '3', '73', 138364), (False, '2', '89', 138365), (True, '19', '19', 138366), (False, '2', '1', 138367)]",False,Wrong Answer,0.8590888738245122,0.9838709677419356,False,0.62,False,"def func(*args):
	
	line = args[0].split()
	n = int(line[0])
	a = int(line[1])
	b = int(line[2])
	n -= a
	if (n > b):
	    n = ((n - b) + 1)
	print(n)
"
3332875,28581077,"x1,y1,x2,y2 = map(int,input().split())
a = abs(x1-x2)
b = abs(y1-y2)
x,y = map(int,input().split())


if(a%x!=0 or b%y!=0):
    print(""NO"")
else:
    par1 = a/x
    par2 = b/y
    par1 = par1%2
    par2 = par2%2
    if par1!=par2:
        print(""NO"")
    else:
        print(""YES"")",3527,5416,92,7/15/17 22:32,33,2883,1,8,"[(True, 'YES', 'YES', 243357), (True, 'NO', 'NO', 243358), (True, 'NO', 'NO', 243359), (True, 'NO', 'NO', 243360), (True, 'YES', 'YES', 243361), (True, 'YES', 'YES', 243362), (True, 'NO', 'NO', 243363), (True, 'NO', 'NO', 243364), (True, 'YES', 'YES', 243365), (True, 'NO', 'NO', 243366), (True, 'YES', 'YES', 243367), (True, 'YES', 'YES', 243368), (True, 'NO', 'NO', 243369), (True, 'YES', 'YES', 243370), (True, 'YES', 'YES', 243371), (True, 'NO', 'NO', 243372), (True, 'NO', 'NO', 243373), (True, 'NO', 'NO', 243374), (True, 'NO', 'NO', 243375), (True, 'YES', 'YES', 243376), (True, 'NO', 'NO', 243377), (True, 'YES', 'YES', 243378), (True, 'NO', 'NO', 243379), (True, 'NO', 'NO', 243380), (True, 'YES', 'YES', 243381), (True, 'NO', 'NO', 243382), (True, 'NO', 'NO', 243383), (True, 'YES', 'YES', 243384), (True, 'NO', 'NO', 243385), (True, 'YES', 'YES', 243386), (True, 'NO', 'NO', 243387), (True, 'NO', 'NO', 243388), (True, 'NO', 'NO', 243389), (True, 'YES', 'YES', 243390), (True, 'NO', 'NO', 243391), (True, 'NO', 'NO', 243392), (True, 'NO', 'NO', 243393), (True, 'NO', 'NO', 243394), (True, 'NO', 'NO', 243395), (True, 'NO', 'NO', 243396), (True, 'NO', 'NO', 243397), (True, 'YES', 'YES', 243398), (True, 'NO', 'NO', 243399), (True, 'NO', 'NO', 243400), (True, 'NO', 'NO', 243401), (True, 'YES', 'YES', 243402), (True, 'NO', 'NO', 243403), (True, 'NO', 'NO', 243404), (True, 'YES', 'YES', 243405), (True, 'NO', 'NO', 243406), (True, 'NO', 'NO', 243407), (True, 'NO', 'NO', 243408), (True, 'YES', 'YES', 243409), (True, 'NO', 'NO', 243410), (True, 'NO', 'NO', 243411), (True, 'NO', 'NO', 243412), (True, 'NO', 'NO', 243413), (True, 'YES', 'YES', 243414), (True, 'NO', 'NO', 243415), (True, 'NO', 'NO', 243416), (True, 'NO', 'NO', 243417)]",True,Accecpted,0.8492919530422433,0.9838709677419356,False,0.0,False,"def func(*args):
	
	(x1, y1, x2, y2) = map(int, args[0].split())
	a = abs((x1 - x2))
	b = abs((y1 - y2))
	(x, y) = map(int, args[1].split())
	if (((a % x) != 0) or ((b % y) != 0)):
	    print('NO')
	else:
	    par1 = (a / x)
	    par2 = (b / y)
	    par1 = (par1 % 2)
	    par2 = (par2 % 2)
	    if (par1 != par2):
	        print('NO')
	    else:
	        print('YES')
"
2903495,27994425,"import math
x=int(input())
n= int(math.log(((x/5)+1),2))
size=int(math.pow(2,n))
rem=x-5*(size-1)-1
p=rem//size
if  p==0:
    print(""Sheldon"")
elif p==1:
    print(""Leonard"")
elif p==2:
    print(""Penny"")
elif p==3:
    print(""Rajesh"")
elif p==4:
    print(""Howard"")",71088,5396,92,6/24/17 3:52,16,2481,2,8,"[(True, 'Sheldon', 'Sheldon', 216610), (True, 'Sheldon', 'Sheldon', 216611), (True, 'Penny', 'Penny', 216612), (True, 'Sheldon', 'Sheldon', 216613), (True, 'Leonard', 'Leonard', 216614), (True, 'Penny', 'Penny', 216615), (True, 'Rajesh', 'Rajesh', 216616), (False, '', 'Howard', 216617), (True, 'Penny', 'Penny', 216618), (True, 'Rajesh', 'Rajesh', 216619), (True, 'Howard', 'Howard', 216620), (True, 'Howard', 'Howard', 216621), (True, 'Penny', 'Penny', 216622), (True, 'Rajesh', 'Rajesh', 216623), (True, 'Leonard', 'Leonard', 216624), (True, 'Penny', 'Penny', 216625), (True, 'Howard', 'Howard', 216626), (True, 'Rajesh', 'Rajesh', 216627), (True, 'Rajesh', 'Rajesh', 216628), (True, 'Leonard', 'Leonard', 216629), (True, 'Penny', 'Penny', 216630), (False, '', 'Howard', 216631), (True, 'Howard', 'Howard', 216632), (True, 'Leonard', 'Leonard', 216633), (True, 'Rajesh', 'Rajesh', 216634), (True, 'Sheldon', 'Sheldon', 216635), (True, 'Rajesh', 'Rajesh', 216636), (True, 'Leonard', 'Leonard', 216637), (True, 'Howard', 'Howard', 216638), (True, 'Penny', 'Penny', 216639), (True, 'Penny', 'Penny', 216640), (True, 'Rajesh', 'Rajesh', 216641), (True, 'Sheldon', 'Sheldon', 216642), (True, 'Penny', 'Penny', 216643), (True, 'Penny', 'Penny', 216644), (True, 'Leonard', 'Leonard', 216645), (True, 'Howard', 'Howard', 216646), (True, 'Penny', 'Penny', 216647), (True, 'Penny', 'Penny', 216648), (True, 'Penny', 'Penny', 216649), (False, '', 'Howard', 216650)]",False,Wrong Answer,0.8706099548745285,0.9838420107719928,False,0.073170731707317,False,"def func(*args):
	
	import math
	x = int(args[0])
	n = int(math.log(((x / 5) + 1), 2))
	size = int(math.pow(2, n))
	rem = ((x - (5 * (size - 1))) - 1)
	p = (rem // size)
	if (p == 0):
	    print('Sheldon')
	elif (p == 1):
	    print('Leonard')
	elif (p == 2):
	    print('Penny')
	elif (p == 3):
	    print('Rajesh')
	elif (p == 4):
	    print('Howard')
"
2903497,27994469,"import math
x=int(input())
n= int(math.log(((x/5)+1),2))
size=int(math.pow(2,n))
rem=x-5*(size-1)-1
p=rem//size
if  p==0:
    print(""Sheldon"")
elif p==1:
    print(""Leonard"")
elif p==2:
    print(""Penny"")
elif p==3:
    print(""Rajesh"")
else:
    print(""Howard"")",71088,5420,62,6/24/17 3:56,16,2481,1,8,"[(True, 'Sheldon', 'Sheldon', 216610), (True, 'Sheldon', 'Sheldon', 216611), (True, 'Penny', 'Penny', 216612), (True, 'Sheldon', 'Sheldon', 216613), (True, 'Leonard', 'Leonard', 216614), (True, 'Penny', 'Penny', 216615), (True, 'Rajesh', 'Rajesh', 216616), (True, 'Howard', 'Howard', 216617), (True, 'Penny', 'Penny', 216618), (True, 'Rajesh', 'Rajesh', 216619), (True, 'Howard', 'Howard', 216620), (True, 'Howard', 'Howard', 216621), (True, 'Penny', 'Penny', 216622), (True, 'Rajesh', 'Rajesh', 216623), (True, 'Leonard', 'Leonard', 216624), (True, 'Penny', 'Penny', 216625), (True, 'Howard', 'Howard', 216626), (True, 'Rajesh', 'Rajesh', 216627), (True, 'Rajesh', 'Rajesh', 216628), (True, 'Leonard', 'Leonard', 216629), (True, 'Penny', 'Penny', 216630), (True, 'Howard', 'Howard', 216631), (True, 'Howard', 'Howard', 216632), (True, 'Leonard', 'Leonard', 216633), (True, 'Rajesh', 'Rajesh', 216634), (True, 'Sheldon', 'Sheldon', 216635), (True, 'Rajesh', 'Rajesh', 216636), (True, 'Leonard', 'Leonard', 216637), (True, 'Howard', 'Howard', 216638), (True, 'Penny', 'Penny', 216639), (True, 'Penny', 'Penny', 216640), (True, 'Rajesh', 'Rajesh', 216641), (True, 'Sheldon', 'Sheldon', 216642), (True, 'Penny', 'Penny', 216643), (True, 'Penny', 'Penny', 216644), (True, 'Leonard', 'Leonard', 216645), (True, 'Howard', 'Howard', 216646), (True, 'Penny', 'Penny', 216647), (True, 'Penny', 'Penny', 216648), (True, 'Penny', 'Penny', 216649), (True, 'Howard', 'Howard', 216650)]",True,Accecpted,0.8706099548745285,0.9838420107719928,False,0.0,False,"def func(*args):
	
	import math
	x = int(args[0])
	n = int(math.log(((x / 5) + 1), 2))
	size = int(math.pow(2, n))
	rem = ((x - (5 * (size - 1))) - 1)
	p = (rem // size)
	if (p == 0):
	    print('Sheldon')
	elif (p == 1):
	    print('Leonard')
	elif (p == 2):
	    print('Penny')
	elif (p == 3):
	    print('Rajesh')
	else:
	    print('Howard')
"
942467,28177911,"n = input()
n = int(n)

if n==0 :
    print(1)
else :
    a = [0,8,4,2,6]
    
    n = n%4
    print(a[n])",14651,4500,46,6/30/17 20:42,19,868,2,8,"[(True, '8', '8', 5205), (True, '4', '4', 5206), (False, '0', '6', 5207), (True, '2', '2', 5208), (False, '0', '6', 5209), (False, '0', '6', 5210), (True, '8', '8', 5211), (True, '4', '4', 5212), (True, '2', '2', 5213), (True, '4', '4', 5214), (True, '4', '4', 5215), (True, '4', '4', 5216), (True, '4', '4', 5217), (True, '8', '8', 5218), (True, '8', '8', 5219), (True, '1', '1', 5220), (True, '8', '8', 5221), (True, '2', '2', 5222), (False, '0', '6', 5223), (True, '8', '8', 5224), (True, '4', '4', 5225), (True, '2', '2', 5226), (False, '0', '6', 5227), (True, '8', '8', 5228), (True, '4', '4', 5229), (True, '2', '2', 5230), (False, '0', '6', 5231), (False, '0', '6', 5232), (True, '2', '2', 5233), (True, '4', '4', 5234)]",False,Wrong Answer,0.8492326635760689,0.983739837398374,False,0.2333333333333333,False,"def func(*args):
	
	n = args[0]
	n = int(n)
	if (n == 0):
	    print(1)
	else:
	    a = [0, 8, 4, 2, 6]
	    n = (n % 4)
	    print(a[n])
"
942468,28177929,"n = input()
n = int(n)

if n==0 :
    print(1)
else :
    a = [6,8,4,2]
    
    n = n%4
    print(a[n])",14651,5432,77,6/30/17 20:43,19,868,1,8,"[(True, '8', '8', 5205), (True, '4', '4', 5206), (True, '6', '6', 5207), (True, '2', '2', 5208), (True, '6', '6', 5209), (True, '6', '6', 5210), (True, '8', '8', 5211), (True, '4', '4', 5212), (True, '2', '2', 5213), (True, '4', '4', 5214), (True, '4', '4', 5215), (True, '4', '4', 5216), (True, '4', '4', 5217), (True, '8', '8', 5218), (True, '8', '8', 5219), (True, '1', '1', 5220), (True, '8', '8', 5221), (True, '2', '2', 5222), (True, '6', '6', 5223), (True, '8', '8', 5224), (True, '4', '4', 5225), (True, '2', '2', 5226), (True, '6', '6', 5227), (True, '8', '8', 5228), (True, '4', '4', 5229), (True, '2', '2', 5230), (True, '6', '6', 5231), (True, '6', '6', 5232), (True, '2', '2', 5233), (True, '4', '4', 5234)]",True,Accecpted,0.8492326635760689,0.983739837398374,False,0.0,False,"def func(*args):
	
	n = args[0]
	n = int(n)
	if (n == 0):
	    print(1)
	else:
	    a = [6, 8, 4, 2]
	    n = (n % 4)
	    print(a[n])
"
2115529,27547806,"'''input
3
'''
n = int(input())
if n < 3:
	print(-1)
else:
	print(((10**(n-1))//210+1)*210)",531,368,1558,6/3/17 18:30,8,1876,1,8,"[(True, '-1', '-1', 182121), (True, '10080', '10080', 182122), (True, '100170', '100170', 182123), (True, '1050', '1050', 182124), (True, '100000000000110', '100000000000110', 182125), (True, '1000000000000050', '1000000000000050', 182126), (True, '10000000000000080', '10000000000000080', 182127), (True, '1000020', '1000020', 182128), (True, '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000170', '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000170', 182129), (True, '10000200', '10000200', 182130), (True, '210', '210', 182131), (True, '-1', '-1', 182132), (True, '100000110', '100000110', 182133), (True, '1000000050', '1000000050', 182134), (True, '10000000080', '10000000080', 182135), (True, '100000000170', '100000000170', 182136), (True, '1000000000020', '1000000000020', 182137), (True, '10000000000200', '10000000000200', 182138), (True, '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020', '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020', 182160), (True, '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200', '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200', 182161), (True, '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110', '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110', 182162), (True, '100000000000000170', '100000000000000170', 182163), (True, '1000000000000000020', '1000000000000000020', 182164), (True, '10000000000000000200', '10000000000000000200', 182165), (True, '100000000000000000110', '100000000000000000110', 182166), (True, '1000000000000000000050', '1000000000000000000050', 182167), (True, '10000000000000000000080', '10000000000000000000080', 182168), (True, '100000000000000000000170', '100000000000000000000170', 182169), (True, '1000000000000000000000020', '1000000000000000000000020', 182170), (True, '1000000000000000000000000000020', '1000000000000000000000000000020', 182171), (True, '100000000000000000000000000000110', '100000000000000000000000000000110', 182172), (True, '10000000000000000000000000000000000000000000000000000000000000080', '10000000000000000000000000000000000000000000000000000000000000080', 182173)]",True,Accecpted,0.5923033072023249,0.9836065573770492,False,0.0,False,"def func(*args):
	
	'input\n3\n'
	n = int(args[0])
	if (n < 3):
	    print((- 1))
	else:
	    print(((((10 ** (n - 1)) // 210) + 1) * 210))
"
2115528,27547794,"'''input
5
'''
n = int(input())
if n <= 3:
	print(-1)
else:
	print(((10**(n-1))//210+1)*210)",531,0,124,6/3/17 18:29,8,1876,2,8,"[(True, '-1', '-1', 182121), (True, '10080', '10080', 182122), (True, '100170', '100170', 182123), (True, '1050', '1050', 182124), (True, '100000000000110', '100000000000110', 182125), (True, '1000000000000050', '1000000000000050', 182126), (True, '10000000000000080', '10000000000000080', 182127), (True, '1000020', '1000020', 182128), (True, '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000170', '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000170', 182129), (True, '10000200', '10000200', 182130), (False, '-1', '210', 182131), (True, '-1', '-1', 182132), (True, '100000110', '100000110', 182133), (True, '1000000050', '1000000050', 182134), (True, '10000000080', '10000000080', 182135), (True, '100000000170', '100000000170', 182136), (True, '1000000000020', '1000000000020', 182137), (True, '10000000000200', '10000000000200', 182138), (True, '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020', '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020', 182160), (True, '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200', '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200', 182161), (True, '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110', '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110', 182162), (True, '100000000000000170', '100000000000000170', 182163), (True, '1000000000000000020', '1000000000000000020', 182164), (True, '10000000000000000200', '10000000000000000200', 182165), (True, '100000000000000000110', '100000000000000000110', 182166), (True, '1000000000000000000050', '1000000000000000000050', 182167), (True, '10000000000000000000080', '10000000000000000000080', 182168), (True, '100000000000000000000170', '100000000000000000000170', 182169), (True, '1000000000000000000000020', '1000000000000000000000020', 182170), (True, '1000000000000000000000000000020', '1000000000000000000000000000020', 182171), (True, '100000000000000000000000000000110', '100000000000000000000000000000110', 182172), (True, '10000000000000000000000000000000000000000000000000000000000000080', '10000000000000000000000000000000000000000000000000000000000000080', 182173)]",False,Wrong Answer,0.5923033072023249,0.9836065573770492,False,0.03125,False,"def func(*args):
	
	'input\n5\n'
	n = int(args[0])
	if (n <= 3):
	    print((- 1))
	else:
	    print(((((10 ** (n - 1)) // 210) + 1) * 210))
"
3006793,29308914,"arr = input()
it1 = 0
it2 = 0

for i in arr:
    if i == '1':
        it1 += 1
        it2 = 0
    else:
        it2 += 1
        it1 = 0

    if it1 == 7 or it2 == 7:
        break


if it1 == 7 or it2 == 7:
    print(""YES"")
else:
    print(""NO"")",63419,4512,124,8/9/17 18:22,20,2555,1,8,"[(True, 'NO', 'NO', 219615), (True, 'YES', 'YES', 219616), (True, 'YES', 'YES', 219617), (True, 'YES', 'YES', 219618), (True, 'NO', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (True, 'YES', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (True, 'NO', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (True, 'NO', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (True, 'YES', 'YES', 219634), (True, 'NO', 'NO', 219635), (True, 'NO', 'NO', 219636), (True, 'YES', 'YES', 219637), (True, 'NO', 'NO', 219638), (True, 'NO', 'NO', 219639), (True, 'YES', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (True, 'YES', 'YES', 219645), (True, 'NO', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (True, 'NO', 'NO', 219649), (True, 'YES', 'YES', 219650), (True, 'YES', 'YES', 219651), (True, 'YES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (True, 'YES', 'YES', 219655), (True, 'YES', 'YES', 219656), (True, 'YES', 'YES', 219657), (True, 'YES', 'YES', 219658)]",True,Accecpted,0.9327881503397272,0.9835390946502056,False,0.0,False,"def func(*args):
	
	arr = args[0]
	it1 = 0
	it2 = 0
	for i in arr:
	    if (i == '1'):
	        it1 += 1
	        it2 = 0
	    else:
	        it2 += 1
	        it1 = 0
	    if ((it1 == 7) or (it2 == 7)):
	        break
	if ((it1 == 7) or (it2 == 7)):
	    print('YES')
	else:
	    print('NO')
"
3006792,29308897,"arr = input()
it1 = 0

for i in arr:
    if i == '1':
        it1 += 1
        it2 = 0
    else:
        it2 += 1
        it1 = 0

    if it1 == 7 or it2 == 7:
        break


if it1 == 7 or it2 == 7:
    print(""YES"")
else:
    print(""NO"")",63419,4512,92,8/9/17 18:21,19,2555,5,8,"[(False, '', 'NO', 219615), (True, 'YES', 'YES', 219616), (False, '', 'YES', 219617), (True, 'YES', 'YES', 219618), (False, '', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (False, '', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (False, '', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (False, '', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (True, 'YES', 'YES', 219634), (False, '', 'NO', 219635), (False, '', 'NO', 219636), (True, 'YES', 'YES', 219637), (False, '', 'NO', 219638), (False, '', 'NO', 219639), (True, 'YES', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (False, '', 'YES', 219645), (True, 'NO', 'NO', 219646), (False, '', 'YES', 219647), (False, '', 'YES', 219648), (True, 'NO', 'NO', 219649), (True, 'YES', 'YES', 219650), (False, '', 'YES', 219651), (True, 'YES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (True, 'YES', 'YES', 219655), (False, '', 'YES', 219656), (False, '', 'YES', 219657), (True, 'YES', 'YES', 219658)]",False,Runtime Error,0.9327881503397272,0.9835390946502056,False,0.3636363636363636,False,"def func(*args):
	
	arr = args[0]
	it1 = 0
	for i in arr:
	    if (i == '1'):
	        it1 += 1
	        it2 = 0
	    else:
	        it2 += 1
	        it1 = 0
	    if ((it1 == 7) or (it2 == 7)):
	        break
	if ((it1 == 7) or (it2 == 7)):
	    print('YES')
	else:
	    print('NO')
"
1443556,28392258,"k = int(input())
a = input()
b = list(map(int,a.split()))
b.sort()
sum = 0
if k == 0:
	print (0)
else:
	for i in range(12):
		sum = sum + b[12 - i - 1]
		if sum >= k:
			print(i + 1)
			break
		if sum < k and i == 12:
			print(-1)",16398,5436,92,7/9/17 21:06,15,1280,2,8,"[(True, '2', '2', 148162), (True, '0', '0', 148163), (True, '3', '3', 148164), (True, '1', '1', 148165), (True, '1', '1', 148166), (True, '6', '6', 148167), (False, '', '-1', 148168), (True, '0', '0', 148169), (True, '1', '1', 148170), (True, '2', '2', 148171), (True, '3', '3', 148172), (True, '4', '4', 148173), (True, '5', '5', 148174), (True, '6', '6', 148175), (True, '7', '7', 148176), (True, '8', '8', 148177), (True, '9', '9', 148178), (True, '9', '9', 148179), (True, '9', '9', 148180), (True, '11', '11', 148181), (True, '5', '5', 148182), (True, '6', '6', 148183), (True, '7', '7', 148184), (True, '6', '6', 148185), (True, '7', '7', 148186), (True, '9', '9', 148187), (True, '11', '11', 148188), (True, '11', '11', 148189), (False, '', '-1', 148190), (False, '', '-1', 148191), (False, '', '-1', 148192), (True, '0', '0', 148193), (False, '', '-1', 148194), (True, '0', '0', 148195), (True, '1', '1', 148196), (True, '12', '12', 148197), (True, '12', '12', 148198), (True, '6', '6', 148199), (False, '', '-1', 148200)]",False,Wrong Answer,0.8330851257772849,0.9834710743801652,False,0.1538461538461538,False,"def func(*args):
	
	k = int(args[0])
	a = args[1]
	b = list(map(int, a.split()))
	b.sort()
	sum = 0
	if (k == 0):
	    print(0)
	else:
	    for i in range(12):
	        sum = (sum + b[((12 - i) - 1)])
	        if (sum >= k):
	            print((i + 1))
	            break
	        if ((sum < k) and (i == 12)):
	            print((- 1))
"
1443557,28392677,"k = int(input())
a = input()
b = list(map(int,a.split()))
b.sort()
sum = 0
if k == 0:
	print (0)
else:
	for i in range(12):
		sum = sum + b[11 - i]
		if sum >= k:
			print(i + 1)
			break
		if sum < k and i == 11:
			print(-1)",16398,5436,124,7/9/17 21:37,15,1280,1,8,"[(True, '2', '2', 148162), (True, '0', '0', 148163), (True, '3', '3', 148164), (True, '1', '1', 148165), (True, '1', '1', 148166), (True, '6', '6', 148167), (True, '-1', '-1', 148168), (True, '0', '0', 148169), (True, '1', '1', 148170), (True, '2', '2', 148171), (True, '3', '3', 148172), (True, '4', '4', 148173), (True, '5', '5', 148174), (True, '6', '6', 148175), (True, '7', '7', 148176), (True, '8', '8', 148177), (True, '9', '9', 148178), (True, '9', '9', 148179), (True, '9', '9', 148180), (True, '11', '11', 148181), (True, '5', '5', 148182), (True, '6', '6', 148183), (True, '7', '7', 148184), (True, '6', '6', 148185), (True, '7', '7', 148186), (True, '9', '9', 148187), (True, '11', '11', 148188), (True, '11', '11', 148189), (True, '-1', '-1', 148190), (True, '-1', '-1', 148191), (True, '-1', '-1', 148192), (True, '0', '0', 148193), (True, '-1', '-1', 148194), (True, '0', '0', 148195), (True, '1', '1', 148196), (True, '12', '12', 148197), (True, '12', '12', 148198), (True, '6', '6', 148199), (True, '-1', '-1', 148200)]",True,Accecpted,0.8330851257772849,0.9834710743801652,False,0.0,False,"def func(*args):
	
	k = int(args[0])
	a = args[1]
	b = list(map(int, a.split()))
	b.sort()
	sum = 0
	if (k == 0):
	    print(0)
	else:
	    for i in range(12):
	        sum = (sum + b[(11 - i)])
	        if (sum >= k):
	            print((i + 1))
	            break
	        if ((sum < k) and (i == 11)):
	            print((- 1))
"
2201470,12405287,"def almostPrime(n):
    s=set()
    for i in range(2,int(n**.5)+1):
        if n%i==0:
            s.add(i)
        if len(s)>2:
            return False
        while n%i==0:
            n/=i
    if n>1:
        s.add(n)
    return len(s)==2
n=int(input())
cnt=0
for i in range(1,n+1):
    cnt+=almostPrime(i)
print(cnt)",70572,4,218,8/7/15 20:12,17,1940,1,8,"[(True, '2', '2', 186638), (True, '8', '8', 186639), (True, '0', '0', 186640), (True, '0', '0', 186641), (True, '0', '0', 186642), (True, '0', '0', 186643), (True, '1', '1', 186644), (True, '6', '6', 186645), (True, '19', '19', 186646), (True, '41', '41', 186647), (True, '125', '125', 186648), (True, '501', '501', 186649), (True, '508', '508', 186650), (True, '958', '958', 186651), (True, '1375', '1375', 186652), (True, '1375', '1375', 186653), (True, '1375', '1375', 186654), (True, '1374', '1374', 186655), (True, '706', '706', 186656), (True, '808', '808', 186657), (True, '732', '732', 186658), (True, '266', '266', 186659), (True, '439', '439', 186660)]",True,Accecpted,0.9095930632220222,0.9834586466165414,False,0.0,False,"def func(*args):
	
	
	def almostPrime(n):
	    s = set()
	    for i in range(2, (int((n ** 0.5)) + 1)):
	        if ((n % i) == 0):
	            s.add(i)
	        if (len(s) > 2):
	            return False
	        while ((n % i) == 0):
	            n /= i
	    if (n > 1):
	        s.add(n)
	    return (len(s) == 2)
	n = int(args[0])
	cnt = 0
	for i in range(1, (n + 1)):
	    cnt += almostPrime(i)
	print(cnt)
"
2201459,12403102,"def almostPrime(n):
    s=set()
    for i in range(2,n+1):
        if n%i==0:
            s.add(i)
        if len(s)>2:
            return False
        while n%i==0:
            n/=i
    if n>1:
        s.add(n)
    return len(s)==2
n=int(input())
cnt=0
for i in range(1,n+1):
    cnt+=almostPrime(i)
print(cnt)",70572,12,2000,8/7/15 16:40,17,1940,3,8,"[(True, '2', '2', 186638), (True, '8', '8', 186639), (True, '0', '0', 186640), (True, '0', '0', 186641), (True, '0', '0', 186642), (True, '0', '0', 186643), (True, '1', '1', 186644), (True, '6', '6', 186645), (True, '19', '19', 186646), (True, '41', '41', 186647), (True, '125', '125', 186648), (True, '501', '501', 186649), (True, '508', '508', 186650), (True, '958', '958', 186651), (True, '1375', '1375', 186652), (True, '1375', '1375', 186653), (True, '1375', '1375', 186654), (True, '1374', '1374', 186655), (True, '706', '706', 186656), (True, '808', '808', 186657), (True, '732', '732', 186658), (True, '266', '266', 186659), (True, '439', '439', 186660)]",True,Time Limit,0.9095930632220222,0.9834586466165414,False,0.0,False,"def func(*args):
	
	
	def almostPrime(n):
	    s = set()
	    for i in range(2, (n + 1)):
	        if ((n % i) == 0):
	            s.add(i)
	        if (len(s) > 2):
	            return False
	        while ((n % i) == 0):
	            n /= i
	    if (n > 1):
	        s.add(n)
	    return (len(s) == 2)
	n = int(args[0])
	cnt = 0
	for i in range(1, (n + 1)):
	    cnt += almostPrime(i)
	print(cnt)
"
2903119,27421840,"x=int(input())
y=5
z=1
while x>y*z:
    x-=y*z
    z+=1

if x-z*1<1:
    print(""Sheldon"")
elif x-z*2<1:
    print(""Leonard"")
elif x-z*3<1:
    print(""Penny"")
elif x-z*4<1:
    print(""Rajesh"")
elif x-z*5<1:
    print(""Howard"")",1460,0,46,5/29/17 4:51,17,2481,2,8,"[(True, 'Sheldon', 'Sheldon', 216610), (True, 'Sheldon', 'Sheldon', 216611), (False, 'Leonard', 'Penny', 216612), (True, 'Sheldon', 'Sheldon', 216613), (True, 'Leonard', 'Leonard', 216614), (True, 'Penny', 'Penny', 216615), (True, 'Rajesh', 'Rajesh', 216616), (True, 'Howard', 'Howard', 216617), (True, 'Penny', 'Penny', 216618), (False, 'Sheldon', 'Rajesh', 216619), (False, 'Leonard', 'Howard', 216620), (False, 'Rajesh', 'Howard', 216621), (False, 'Rajesh', 'Penny', 216622), (False, 'Penny', 'Rajesh', 216623), (False, 'Howard', 'Leonard', 216624), (False, 'Rajesh', 'Penny', 216625), (False, 'Rajesh', 'Howard', 216626), (False, 'Howard', 'Rajesh', 216627), (True, 'Rajesh', 'Rajesh', 216628), (True, 'Leonard', 'Leonard', 216629), (False, 'Sheldon', 'Penny', 216630), (True, 'Howard', 'Howard', 216631), (False, 'Penny', 'Howard', 216632), (False, 'Howard', 'Leonard', 216633), (False, 'Sheldon', 'Rajesh', 216634), (True, 'Sheldon', 'Sheldon', 216635), (False, 'Sheldon', 'Rajesh', 216636), (False, 'Penny', 'Leonard', 216637), (False, 'Sheldon', 'Howard', 216638), (True, 'Penny', 'Penny', 216639), (False, 'Rajesh', 'Penny', 216640), (False, 'Penny', 'Rajesh', 216641), (True, 'Sheldon', 'Sheldon', 216642), (False, 'Howard', 'Penny', 216643), (False, 'Leonard', 'Penny', 216644), (False, 'Sheldon', 'Leonard', 216645), (False, 'Rajesh', 'Howard', 216646), (True, 'Penny', 'Penny', 216647), (True, 'Penny', 'Penny', 216648), (True, 'Penny', 'Penny', 216649), (True, 'Howard', 'Howard', 216650)]",False,Wrong Answer,0.8725129388059689,0.9833333333333332,False,0.5609756097560976,False,"def func(*args):
	
	x = int(args[0])
	y = 5
	z = 1
	while (x > (y * z)):
	    x -= (y * z)
	    z += 1
	if ((x - (z * 1)) < 1):
	    print('Sheldon')
	elif ((x - (z * 2)) < 1):
	    print('Leonard')
	elif ((x - (z * 3)) < 1):
	    print('Penny')
	elif ((x - (z * 4)) < 1):
	    print('Rajesh')
	elif ((x - (z * 5)) < 1):
	    print('Howard')
"
2903120,27422007,"x=int(input())
y=5
z=1
while x>y*z:
    x-=y*z
    z*=2
if x-z*1<1:
    print(""Sheldon"")
elif x-z*2<1:
    print(""Leonard"")
elif x-z*3<1:
    print(""Penny"")
elif x-z*4<1:
    print(""Rajesh"")
elif x-z*5<1:
    print(""Howard"")",1460,0,62,5/29/17 5:12,16,2481,1,8,"[(True, 'Sheldon', 'Sheldon', 216610), (True, 'Sheldon', 'Sheldon', 216611), (True, 'Penny', 'Penny', 216612), (True, 'Sheldon', 'Sheldon', 216613), (True, 'Leonard', 'Leonard', 216614), (True, 'Penny', 'Penny', 216615), (True, 'Rajesh', 'Rajesh', 216616), (True, 'Howard', 'Howard', 216617), (True, 'Penny', 'Penny', 216618), (True, 'Rajesh', 'Rajesh', 216619), (True, 'Howard', 'Howard', 216620), (True, 'Howard', 'Howard', 216621), (True, 'Penny', 'Penny', 216622), (True, 'Rajesh', 'Rajesh', 216623), (True, 'Leonard', 'Leonard', 216624), (True, 'Penny', 'Penny', 216625), (True, 'Howard', 'Howard', 216626), (True, 'Rajesh', 'Rajesh', 216627), (True, 'Rajesh', 'Rajesh', 216628), (True, 'Leonard', 'Leonard', 216629), (True, 'Penny', 'Penny', 216630), (True, 'Howard', 'Howard', 216631), (True, 'Howard', 'Howard', 216632), (True, 'Leonard', 'Leonard', 216633), (True, 'Rajesh', 'Rajesh', 216634), (True, 'Sheldon', 'Sheldon', 216635), (True, 'Rajesh', 'Rajesh', 216636), (True, 'Leonard', 'Leonard', 216637), (True, 'Howard', 'Howard', 216638), (True, 'Penny', 'Penny', 216639), (True, 'Penny', 'Penny', 216640), (True, 'Rajesh', 'Rajesh', 216641), (True, 'Sheldon', 'Sheldon', 216642), (True, 'Penny', 'Penny', 216643), (True, 'Penny', 'Penny', 216644), (True, 'Leonard', 'Leonard', 216645), (True, 'Howard', 'Howard', 216646), (True, 'Penny', 'Penny', 216647), (True, 'Penny', 'Penny', 216648), (True, 'Penny', 'Penny', 216649), (True, 'Howard', 'Howard', 216650)]",True,Accecpted,0.8725129388059689,0.9833333333333332,False,0.0,False,"def func(*args):
	
	x = int(args[0])
	y = 5
	z = 1
	while (x > (y * z)):
	    x -= (y * z)
	    z *= 2
	if ((x - (z * 1)) < 1):
	    print('Sheldon')
	elif ((x - (z * 2)) < 1):
	    print('Leonard')
	elif ((x - (z * 3)) < 1):
	    print('Penny')
	elif ((x - (z * 4)) < 1):
	    print('Rajesh')
	elif ((x - (z * 5)) < 1):
	    print('Howard')
"
569064,22022013,"i = input().split("" "");
i = [int(a) for a in i]

def gcd(a,b):
	return a if b == 0 else gcd(b, a%b)

print (i[0]//i[1] * i[3] + (i[0]//i[2]) * i[4] - i[0]//(i[1]*i[2]) * gcd(i[1], i[2]) * min(i[3], i[4]))",28710,8,62,11/3/16 23:11,7,530,2,8,"[(True, '39', '39', 89736), (True, '51', '51', 89737), (True, '1', '1', 89738), (True, '0', '0', 89739), (True, '6', '6', 89740), (True, '9', '9', 89741), (True, '16', '16', 89742), (True, '8', '8', 89743), (True, '65', '65', 89744), (True, '2732', '2732', 89745), (True, '10431', '10431', 89746), (True, '0', '0', 89747), (True, '0', '0', 89748), (True, '9653757', '9653757', 89749), (True, '0', '0', 89750), (True, '0', '0', 89751), (True, '1000000000000000000', '1000000000000000000', 89752), (False, '14', '12', 89753), (False, '633', '625', 89754), (False, '19', '17', 89755), (False, '5', '4', 89756), (True, '100', '100', 89757), (True, '20', '20', 89758), (False, '125394325', '125391842', 89759), (True, '8', '8', 89760), (True, '1500000000', '1500000000', 89761), (True, '48', '48', 89762), (True, '900', '900', 89763), (False, '162', '160', 89764), (False, '1003', '1000', 89765), (True, '21', '21', 89766), (False, '2000000000', '1000000000', 89767), (False, '7', '5', 89768), (False, '44446', '44444', 89769), (True, '203', '203', 89770), (False, '21', '19', 89771), (False, '681', '675', 89772), (False, '30', '23', 89773), (True, '100', '100', 89774), (True, '375', '375', 89775), (True, '444', '444', 89776), (False, '422670', '422502', 89777), (False, '36672', '36662', 89778), (False, '43', '40', 89779), (True, '440', '440', 89780), (False, '38', '33', 89781), (False, '2526', '2525', 89782), (False, '16700', '16650', 89783), (False, '210', '150', 89784), (True, '2750', '2750', 89785), (True, '9999000000000', '9999000000000', 89786), (False, '129', '125', 89787), (False, '23', '21', 89788), (False, '46', '44', 89789), (False, '166666666166666668', '166666666166666667', 89790), (False, '184', '180', 89791), (False, '47', '42', 89792), (True, '500000000000000000', '500000000000000000', 89793), (False, '76', '66', 89794), (False, '54', '48', 89795), (True, '5000', '5000', 89796), (True, '400', '400', 89797), (False, '56', '55', 89798), (True, '30', '30', 89799), (False, '56', '51', 89800), (True, '7', '7', 89801), (False, '36', '30', 89802), (True, '337', '337', 89803), (False, '47', '38', 89804), (True, '1999999997', '1999999997', 89805), (False, '160', '150', 89806), (False, '66', '54', 89807), (False, '70', '60', 89808), (False, '7', '6', 89809), (False, '18760', '18750', 89810), (False, '4', '3', 89811), (False, '399129136129296', '399129078526502', 89812), (False, '5', '4', 89813), (True, '50', '50', 89814), (False, '4333340', '4333328', 89815), (False, '540', '531', 89816), (True, '1000000000', '1000000000', 89817), (False, '106', '100', 89818), (True, '25250', '25250', 89819), (False, '54', '30', 89820), (True, '8', '8', 89821), (False, '45', '41', 89822), (False, '1555555560', '1555555550', 89823), (True, '12', '12', 89824), (False, '433340', '433328', 89825), (True, '8', '8', 89826), (False, '4500006', '4499994', 89827), (False, '280', '275', 89828), (False, '51', '39', 89829), (True, '999999999000000000', '999999999000000000', 89830), (False, '9', '7', 89831), (False, '4', '2', 89832), (False, '4', '3', 89833), (False, '253', '250', 89834), (False, '312504', '312500', 89835), (False, '400', '375', 89836), (True, '117', '117', 89837), (True, '330', '330', 89838), (True, '30792960', '30792960', 89839), (True, '1034131504', '1034131504', 89840), (False, '4774414620', '4369119072', 89841), (True, '22476810678', '22476810678', 89842), (True, '0', '0', 89843), (False, '1272', '1188', 89844), (True, '17000', '17000', 89845), (True, '31415899685841', '31415899685841', 89846), (True, '8701', '8701', 89847), (False, '8', '6', 89848), (True, '1000000000000000000', '1000000000000000000', 89849), (True, '202', '202', 89850), (False, '3', '2', 89851), (True, '1337898227', '1337898227', 89852), (False, '9953', '9952', 89853), (False, '2002', '1999', 89854), (False, '1492318412', '1492318410', 89855), (True, '577', '577', 89856), (False, '21', '16', 89857), (True, '40', '40', 89858), (True, '15', '15', 89859), (False, '2000', '1000', 89860), (True, '1408198792', '1408198792', 89861), (True, '199800000000', '199800000000', 89862), (False, '605', '600', 89863), (True, '112', '112', 89864), (True, '1732', '1732', 89865), (False, '690', '660', 89866), (True, '108', '108', 89867), (False, '14194', '14016', 89868), (True, '224', '224', 89869), (False, '28', '22', 89870), (False, '1538', '1488', 89871), (False, '4373737', '4101909', 89872), (True, '100000000000', '100000000000', 89873), (True, '125', '125', 89874), (False, '720', '366', 89875), (True, '75', '75', 89876), (False, '938', '913', 89877), (False, '240', '216', 89878), (False, '600', '300', 89879), (True, '2', '2', 89880), (False, '278', '200', 89881), (True, '25000', '25000', 89882), (False, '276', '275', 89883), (False, '501000000', '500999999', 89884), (True, '36', '36', 89885), (True, '72', '72', 89886), (False, '4092', '3936', 89887), (False, '39', '27', 89888), (False, '402', '400', 89889), (False, '1610', '1600', 89890), (False, '12300003', '12300000', 89891), (True, '30', '30', 89892), (True, '317', '317', 89893), (True, '375000000', '375000000', 89894), (False, '250000002', '249999998', 89895), (False, '123002', '123000', 89896), (False, '117769347166', '117768531682', 89897), (True, '16', '16', 89898), (True, '66219333', '66219333', 89899), (False, '25026', '25025', 89900), (True, '12013', '12013', 89901), (True, '1500000000', '1500000000', 89902), (True, '13446', '13446', 89903), (True, '2', '2', 89904), (True, '999999999000', '999999999000', 89905), (True, '44', '44', 89906), (True, '1000000000000000000', '1000000000000000000', 89907), (True, '27', '27', 89908), (False, '3762', '2079', 89909), (False, '34', '32', 89910), (True, '1000000000', '1000000000', 89911), (True, '88999999992', '88999999992', 89912), (True, '50000000100000000', '50000000100000000', 89913), (True, '1000000000000000000', '1000000000000000000', 89914), (True, '299980', '299980', 89915), (True, '333333334', '333333334', 89916), (True, '130278', '130278', 89917), (False, '14', '12', 89918), (False, '11', '10', 89919), (True, '88', '88', 89920)]",False,Wrong Answer,0.8474968231198384,0.9832935560859188,False,0.4918918918918919,False,"def func(*args):
	
	i = args[0].split(' ')
	i = [int(a) for a in i]
	
	def gcd(a, b):
	    return (a if (b == 0) else gcd(b, (a % b)))
	print(((((i[0] // i[1]) * i[3]) + ((i[0] // i[2]) * i[4])) - (((i[0] // (i[1] * i[2])) * gcd(i[1], i[2])) * min(i[3], i[4]))))
"
569065,22022088,"i = input().split("" "");
i = [int(a) for a in i]

def gcd(a,b):
	return a if b == 0 else gcd(b, a%b)

print (i[0]//i[1] * i[3] + (i[0]//i[2]) * i[4] - i[0]//(i[1]*i[2]//gcd(i[1], i[2])) * min(i[3], i[4]))",28710,12,62,11/3/16 23:16,7,530,1,8,"[(True, '39', '39', 89736), (True, '51', '51', 89737), (True, '1', '1', 89738), (True, '0', '0', 89739), (True, '6', '6', 89740), (True, '9', '9', 89741), (True, '16', '16', 89742), (True, '8', '8', 89743), (True, '65', '65', 89744), (True, '2732', '2732', 89745), (True, '10431', '10431', 89746), (True, '0', '0', 89747), (True, '0', '0', 89748), (True, '9653757', '9653757', 89749), (True, '0', '0', 89750), (True, '0', '0', 89751), (True, '1000000000000000000', '1000000000000000000', 89752), (True, '12', '12', 89753), (True, '625', '625', 89754), (True, '17', '17', 89755), (True, '4', '4', 89756), (True, '100', '100', 89757), (True, '20', '20', 89758), (True, '125391842', '125391842', 89759), (True, '8', '8', 89760), (True, '1500000000', '1500000000', 89761), (True, '48', '48', 89762), (True, '900', '900', 89763), (True, '160', '160', 89764), (True, '1000', '1000', 89765), (True, '21', '21', 89766), (True, '1000000000', '1000000000', 89767), (True, '5', '5', 89768), (True, '44444', '44444', 89769), (True, '203', '203', 89770), (True, '19', '19', 89771), (True, '675', '675', 89772), (True, '23', '23', 89773), (True, '100', '100', 89774), (True, '375', '375', 89775), (True, '444', '444', 89776), (True, '422502', '422502', 89777), (True, '36662', '36662', 89778), (True, '40', '40', 89779), (True, '440', '440', 89780), (True, '33', '33', 89781), (True, '2525', '2525', 89782), (True, '16650', '16650', 89783), (True, '150', '150', 89784), (True, '2750', '2750', 89785), (True, '9999000000000', '9999000000000', 89786), (True, '125', '125', 89787), (True, '21', '21', 89788), (True, '44', '44', 89789), (True, '166666666166666667', '166666666166666667', 89790), (True, '180', '180', 89791), (True, '42', '42', 89792), (True, '500000000000000000', '500000000000000000', 89793), (True, '66', '66', 89794), (True, '48', '48', 89795), (True, '5000', '5000', 89796), (True, '400', '400', 89797), (True, '55', '55', 89798), (True, '30', '30', 89799), (True, '51', '51', 89800), (True, '7', '7', 89801), (True, '30', '30', 89802), (True, '337', '337', 89803), (True, '38', '38', 89804), (True, '1999999997', '1999999997', 89805), (True, '150', '150', 89806), (True, '54', '54', 89807), (True, '60', '60', 89808), (True, '6', '6', 89809), (True, '18750', '18750', 89810), (True, '3', '3', 89811), (True, '399129078526502', '399129078526502', 89812), (True, '4', '4', 89813), (True, '50', '50', 89814), (True, '4333328', '4333328', 89815), (True, '531', '531', 89816), (True, '1000000000', '1000000000', 89817), (True, '100', '100', 89818), (True, '25250', '25250', 89819), (True, '30', '30', 89820), (True, '8', '8', 89821), (True, '41', '41', 89822), (True, '1555555550', '1555555550', 89823), (True, '12', '12', 89824), (True, '433328', '433328', 89825), (True, '8', '8', 89826), (True, '4499994', '4499994', 89827), (True, '275', '275', 89828), (True, '39', '39', 89829), (True, '999999999000000000', '999999999000000000', 89830), (True, '7', '7', 89831), (True, '2', '2', 89832), (True, '3', '3', 89833), (True, '250', '250', 89834), (True, '312500', '312500', 89835), (True, '375', '375', 89836), (True, '117', '117', 89837), (True, '330', '330', 89838), (True, '30792960', '30792960', 89839), (True, '1034131504', '1034131504', 89840), (True, '4369119072', '4369119072', 89841), (True, '22476810678', '22476810678', 89842), (True, '0', '0', 89843), (True, '1188', '1188', 89844), (True, '17000', '17000', 89845), (True, '31415899685841', '31415899685841', 89846), (True, '8701', '8701', 89847), (True, '6', '6', 89848), (True, '1000000000000000000', '1000000000000000000', 89849), (True, '202', '202', 89850), (True, '2', '2', 89851), (True, '1337898227', '1337898227', 89852), (True, '9952', '9952', 89853), (True, '1999', '1999', 89854), (True, '1492318410', '1492318410', 89855), (True, '577', '577', 89856), (True, '16', '16', 89857), (True, '40', '40', 89858), (True, '15', '15', 89859), (True, '1000', '1000', 89860), (True, '1408198792', '1408198792', 89861), (True, '199800000000', '199800000000', 89862), (True, '600', '600', 89863), (True, '112', '112', 89864), (True, '1732', '1732', 89865), (True, '660', '660', 89866), (True, '108', '108', 89867), (True, '14016', '14016', 89868), (True, '224', '224', 89869), (True, '22', '22', 89870), (True, '1488', '1488', 89871), (True, '4101909', '4101909', 89872), (True, '100000000000', '100000000000', 89873), (True, '125', '125', 89874), (True, '366', '366', 89875), (True, '75', '75', 89876), (True, '913', '913', 89877), (True, '216', '216', 89878), (True, '300', '300', 89879), (True, '2', '2', 89880), (True, '200', '200', 89881), (True, '25000', '25000', 89882), (True, '275', '275', 89883), (True, '500999999', '500999999', 89884), (True, '36', '36', 89885), (True, '72', '72', 89886), (True, '3936', '3936', 89887), (True, '27', '27', 89888), (True, '400', '400', 89889), (True, '1600', '1600', 89890), (True, '12300000', '12300000', 89891), (True, '30', '30', 89892), (True, '317', '317', 89893), (True, '375000000', '375000000', 89894), (True, '249999998', '249999998', 89895), (True, '123000', '123000', 89896), (True, '117768531682', '117768531682', 89897), (True, '16', '16', 89898), (True, '66219333', '66219333', 89899), (True, '25025', '25025', 89900), (True, '12013', '12013', 89901), (True, '1500000000', '1500000000', 89902), (True, '13446', '13446', 89903), (True, '2', '2', 89904), (True, '999999999000', '999999999000', 89905), (True, '44', '44', 89906), (True, '1000000000000000000', '1000000000000000000', 89907), (True, '27', '27', 89908), (True, '2079', '2079', 89909), (True, '32', '32', 89910), (True, '1000000000', '1000000000', 89911), (True, '88999999992', '88999999992', 89912), (True, '50000000100000000', '50000000100000000', 89913), (True, '1000000000000000000', '1000000000000000000', 89914), (True, '299980', '299980', 89915), (True, '333333334', '333333334', 89916), (True, '130278', '130278', 89917), (True, '12', '12', 89918), (True, '10', '10', 89919), (True, '88', '88', 89920)]",True,Accecpted,0.8474968231198384,0.9832935560859188,False,0.0,False,"def func(*args):
	
	i = args[0].split(' ')
	i = [int(a) for a in i]
	
	def gcd(a, b):
	    return (a if (b == 0) else gcd(b, (a % b)))
	print(((((i[0] // i[1]) * i[3]) + ((i[0] // i[2]) * i[4])) - ((i[0] // ((i[1] * i[2]) // gcd(i[1], i[2]))) * min(i[3], i[4]))))
"
187401,22467369,"n=int(input())
a=n//4
b=n%4
if n%2==0 and n//4>=1 :
    if b==2 :
        print(a)
    else :
        print(a-1)
else :
    print(0)",4061,8,77,11/24/16 16:17,19,153,1,8,"[(True, '1', '1', 60601), (True, '4', '4', 60602), (True, '0', '0', 60603), (True, '0', '0', 60604), (True, '0', '0', 60605), (True, '0', '0', 60606), (True, '499999999', '499999999', 60607), (True, '481176017', '481176017', 60608), (True, '18435146', '18435146', 60609), (True, '481272204', '481272204', 60610), (True, '148267747', '148267747', 60611), (True, '481368392', '481368392', 60612), (True, '157372546', '157372546', 60613), (True, '495162277', '495162277', 60614), (True, '9165330', '9165330', 60615), (True, '0', '0', 60616), (True, '17801758', '17801758', 60617), (True, '439394348', '439394348', 60618), (True, '42076323', '42076323', 60619), (True, '483724055', '483724055', 60620), (True, '74287271', '74287271', 60621), (True, '474500408', '474500408', 60622), (True, '44102424', '44102424', 60623), (True, '468256380', '468256380', 60624), (True, '1428690', '1428690', 60625), (True, '457387797', '457387797', 60626), (True, '4067359', '4067359', 60627), (True, '415820847', '415820847', 60628), (True, '0', '0', 60629), (True, '491836400', '491836400', 60630), (True, '213499', '213499', 60631), (True, '498971656', '498971656', 60632), (True, '0', '0', 60633), (True, '499048408', '499048408', 60634), (True, '2401294', '2401294', 60635), (True, '499114934', '499114934', 60636), (True, '8172986', '8172986', 60637), (True, '493975826', '493975826', 60638), (True, '494159283', '494159283', 60639), (True, '7450759', '7450759', 60640), (True, '494494922', '494494922', 60641), (True, '494648833', '494648833', 60642), (True, '6844835', '6844835', 60643), (True, '494932477', '494932477', 60644), (True, '495063444', '495063444', 60645), (True, '495187895', '495187895', 60646), (True, '13306219', '13306219', 60647), (True, '0', '0', 60648), (True, '0', '0', 60649), (True, '1', '1', 60650), (True, '0', '0', 60651), (True, '2', '2', 60652), (True, '0', '0', 60653), (True, '2', '2', 60654), (True, '0', '0', 60655), (True, '3', '3', 60656), (True, '0', '0', 60657), (True, '3', '3', 60658), (True, '0', '0', 60659), (True, '4', '4', 60660), (True, '0', '0', 60661), (True, '0', '0', 60662), (True, '5', '5', 60663), (True, '0', '0', 60664), (True, '5', '5', 60665), (True, '0', '0', 60666), (True, '6', '6', 60667), (True, '0', '0', 60668), (True, '6', '6', 60669), (True, '0', '0', 60670), (True, '7', '7', 60671), (True, '0', '0', 60672), (True, '0', '0', 60673), (True, '0', '0', 60674), (True, '0', '0', 60675), (True, '0', '0', 60676)]",True,Accecpted,0.8394327083733336,0.9832775919732442,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	a = (n // 4)
	b = (n % 4)
	if (((n % 2) == 0) and ((n // 4) >= 1)):
	    if (b == 2):
	        print(a)
	    else:
	        print((a - 1))
	else:
	    print(0)
"
187400,22467336,"n=int(input())
a=n//4
b=n%4
if n%2==0 or n//4>=1 :
    if b==2 :
        print(a)
    else :
        print(a-1)
else :
    print(0)",4061,0,62,11/24/16 16:16,19,153,2,8,"[(True, '1', '1', 60601), (True, '4', '4', 60602), (True, '0', '0', 60603), (True, '0', '0', 60604), (True, '0', '0', 60605), (True, '0', '0', 60606), (True, '499999999', '499999999', 60607), (True, '481176017', '481176017', 60608), (True, '18435146', '18435146', 60609), (True, '481272204', '481272204', 60610), (True, '148267747', '148267747', 60611), (True, '481368392', '481368392', 60612), (True, '157372546', '157372546', 60613), (True, '495162277', '495162277', 60614), (True, '9165330', '9165330', 60615), (False, '485897697', '0', 60616), (True, '17801758', '17801758', 60617), (True, '439394348', '439394348', 60618), (True, '42076323', '42076323', 60619), (True, '483724055', '483724055', 60620), (True, '74287271', '74287271', 60621), (True, '474500408', '474500408', 60622), (True, '44102424', '44102424', 60623), (True, '468256380', '468256380', 60624), (True, '1428690', '1428690', 60625), (True, '457387797', '457387797', 60626), (True, '4067359', '4067359', 60627), (True, '415820847', '415820847', 60628), (False, '10637484', '0', 60629), (True, '491836400', '491836400', 60630), (True, '213499', '213499', 60631), (True, '498971656', '498971656', 60632), (False, '2582503', '0', 60633), (True, '499048408', '499048408', 60634), (True, '2401294', '2401294', 60635), (True, '499114934', '499114934', 60636), (True, '8172986', '8172986', 60637), (True, '493975826', '493975826', 60638), (True, '494159283', '494159283', 60639), (True, '7450759', '7450759', 60640), (True, '494494922', '494494922', 60641), (True, '494648833', '494648833', 60642), (True, '6844835', '6844835', 60643), (True, '494932477', '494932477', 60644), (True, '495063444', '495063444', 60645), (True, '495187895', '495187895', 60646), (True, '13306219', '13306219', 60647), (True, '0', '0', 60648), (True, '0', '0', 60649), (True, '1', '1', 60650), (False, '1', '0', 60651), (True, '2', '2', 60652), (False, '1', '0', 60653), (True, '2', '2', 60654), (False, '2', '0', 60655), (True, '3', '3', 60656), (False, '2', '0', 60657), (True, '3', '3', 60658), (False, '3', '0', 60659), (True, '4', '4', 60660), (False, '3', '0', 60661), (False, '4', '0', 60662), (True, '5', '5', 60663), (False, '4', '0', 60664), (True, '5', '5', 60665), (False, '5', '0', 60666), (True, '6', '6', 60667), (False, '5', '0', 60668), (True, '6', '6', 60669), (False, '6', '0', 60670), (True, '7', '7', 60671), (False, '26', '0', 60672), (False, '12', '0', 60673), (False, '25', '0', 60674), (False, '48', '0', 60675), (False, '36', '0', 60676)]",False,Wrong Answer,0.8394327083733336,0.9832775919732442,False,0.25,False,"def func(*args):
	
	n = int(args[0])
	a = (n // 4)
	b = (n % 4)
	if (((n % 2) == 0) or ((n // 4) >= 1)):
	    if (b == 2):
	        print(a)
	    else:
	        print((a - 1))
	else:
	    print(0)
"
2846727,28425906,"i = input
a = i()
b = i()
c = str(int(a) + int(b))
a = a.replace('0', '')
b = b.replace('0', '')
c = c.replace('0', '')
print('YES' if int(a) + int(b) == int(c) else 'NO')",1865,5448,124,7/11/17 15:19,8,2439,1,8,"[(True, 'YES', 'YES', 214611), (True, 'NO', 'NO', 214612), (True, 'YES', 'YES', 214613), (True, 'NO', 'NO', 214614), (True, 'NO', 'NO', 214615), (True, 'NO', 'NO', 214616), (True, 'NO', 'NO', 214617), (True, 'YES', 'YES', 214618), (True, 'YES', 'YES', 214619), (True, 'YES', 'YES', 214620), (True, 'YES', 'YES', 214621), (True, 'NO', 'NO', 214622), (True, 'YES', 'YES', 214623), (True, 'YES', 'YES', 214624), (True, 'NO', 'NO', 214625), (True, 'YES', 'YES', 214626), (True, 'NO', 'NO', 214627), (True, 'NO', 'NO', 214628), (True, 'YES', 'YES', 214629), (True, 'YES', 'YES', 214630), (True, 'YES', 'YES', 214631), (True, 'YES', 'YES', 214632), (True, 'NO', 'NO', 214633), (True, 'YES', 'YES', 214634), (True, 'NO', 'NO', 214635), (True, 'NO', 'NO', 214636), (True, 'NO', 'NO', 214637), (True, 'NO', 'NO', 214638), (True, 'NO', 'NO', 214639), (True, 'NO', 'NO', 214640), (True, 'NO', 'NO', 214641), (True, 'NO', 'NO', 214642), (True, 'NO', 'NO', 214643), (True, 'YES', 'YES', 214644), (True, 'YES', 'YES', 214645), (True, 'NO', 'NO', 214646), (True, 'YES', 'YES', 214647), (True, 'NO', 'NO', 214648), (True, 'YES', 'YES', 214649), (True, 'YES', 'YES', 214650), (True, 'NO', 'NO', 214651), (True, 'NO', 'NO', 214652), (True, 'NO', 'NO', 214653)]",True,Accecpted,0.7019373395364499,0.9831460674157304,False,0.0,False,"def func(*args):
	
	i = input
	a = i()
	b = i()
	c = str((int(a) + int(b)))
	a = a.replace('0', '')
	b = b.replace('0', '')
	c = c.replace('0', '')
	print(('YES' if ((int(a) + int(b)) == int(c)) else 'NO'))
"
2846723,28425615,"i = input
a = i()
b = i()
c = str(int(a) + int(b))
a = a.replace(' ', '')
b = b.replace(' ', '')
c = c.replace(' ', '')
print('YES' if int(a) + int(b) == int(c) else 'NO')",1865,5404,92,7/11/17 15:02,8,2439,2,8,"[(True, 'YES', 'YES', 214611), (False, 'YES', 'NO', 214612), (True, 'YES', 'YES', 214613), (False, 'YES', 'NO', 214614), (False, 'YES', 'NO', 214615), (False, 'YES', 'NO', 214616), (False, 'YES', 'NO', 214617), (True, 'YES', 'YES', 214618), (True, 'YES', 'YES', 214619), (True, 'YES', 'YES', 214620), (True, 'YES', 'YES', 214621), (False, 'YES', 'NO', 214622), (True, 'YES', 'YES', 214623), (True, 'YES', 'YES', 214624), (False, 'YES', 'NO', 214625), (True, 'YES', 'YES', 214626), (False, 'YES', 'NO', 214627), (False, 'YES', 'NO', 214628), (True, 'YES', 'YES', 214629), (True, 'YES', 'YES', 214630), (True, 'YES', 'YES', 214631), (True, 'YES', 'YES', 214632), (False, 'YES', 'NO', 214633), (True, 'YES', 'YES', 214634), (False, 'YES', 'NO', 214635), (False, 'YES', 'NO', 214636), (False, 'YES', 'NO', 214637), (False, 'YES', 'NO', 214638), (False, 'YES', 'NO', 214639), (False, 'YES', 'NO', 214640), (False, 'YES', 'NO', 214641), (False, 'YES', 'NO', 214642), (False, 'YES', 'NO', 214643), (True, 'YES', 'YES', 214644), (True, 'YES', 'YES', 214645), (False, 'YES', 'NO', 214646), (True, 'YES', 'YES', 214647), (False, 'YES', 'NO', 214648), (True, 'YES', 'YES', 214649), (True, 'YES', 'YES', 214650), (False, 'YES', 'NO', 214651), (False, 'YES', 'NO', 214652), (False, 'YES', 'NO', 214653)]",False,Wrong Answer,0.7019373395364499,0.9831460674157304,False,0.5581395348837209,False,"def func(*args):
	
	i = input
	a = i()
	b = i()
	c = str((int(a) + int(b)))
	a = a.replace(' ', '')
	b = b.replace(' ', '')
	c = c.replace(' ', '')
	print(('YES' if ((int(a) + int(b)) == int(c)) else 'NO'))
"
1256595,17288719,"n,a,b = map(int,input().split())
print(n - max(a+b,n-b)+1)",59141,0,122,4/12/16 14:11,2,1142,2,8,"[(True, '2', '2', 138318), (False, '1', '3', 138319), (True, '1', '1', 138320), (False, '-3', '1', 138321), (False, '3', '4', 138322), (False, '2', '7', 138323), (False, '-1', '5', 138324), (False, '5', '6', 138325), (False, '2', '10', 138326), (False, '-9', '7', 138327), (True, '9', '9', 138328), (False, '2', '15', 138329), (False, '-13', '8', 138330), (True, '2', '2', 138331), (False, '2', '24', 138332), (False, '-9', '5', 138333), (True, '6', '6', 138334), (False, '2', '16', 138335), (False, '-27', '5', 138336), (False, '4', '12', 138337), (False, '2', '17', 138338), (False, '-4', '38', 138339), (False, '15', '18', 138340), (False, '2', '38', 138341), (False, '-25', '13', 138342), (True, '8', '8', 138343), (False, '2', '13', 138344), (False, '-26', '1', 138345), (False, '9', '40', 138346), (False, '2', '53', 138347), (False, '-9', '34', 138348), (False, '14', '23', 138349), (False, '2', '39', 138350), (False, '-14', '38', 138351), (True, '13', '13', 138352), (False, '2', '36', 138353), (False, '-36', '7', 138354), (True, '21', '21', 138355), (False, '2', '21', 138356), (False, '-11', '2', 138357), (True, '43', '43', 138358), (False, '2', '9', 138359), (False, '-44', '14', 138360), (True, '23', '23', 138361), (False, '2', '89', 138362), (False, '-15', '32', 138363), (False, '3', '73', 138364), (False, '2', '89', 138365), (False, '-71', '19', 138366), (True, '1', '1', 138367)]",False,Wrong Answer,0.7598356856515925,0.9830508474576272,False,0.78,False,"def func(*args):
	
	(n, a, b) = map(int, args[0].split())
	print(((n - max((a + b), (n - b))) + 1))
"
440804,18287601,"n,k = [int(i) for i in input().split()]
ans = 0
for i in range(k):
    if n >= 2:
        ans +=  2 * n  - 3
        n -= 2
print(ans)",7295,4716,77,6/7/16 19:56,13,394,1,8,"[(True, '10', '10', 79338), (True, '0', '0', 79339), (True, '399990', '399990', 79340), (True, '0', '0', 79341), (True, '27', '27', 79342), (True, '11', '11', 79343), (True, '4799960000', '4799960000', 79344), (True, '0', '0', 79345), (True, '4905', '4905', 79346), (True, '26', '26', 79347), (True, '58890', '58890', 79348), (True, '4999950000', '4999950000', 79349), (True, '4999950000', '4999950000', 79350), (True, '4999950000', '4999950000', 79351), (True, '4999950000', '4999950000', 79352), (True, '4999949994', '4999949994', 79353), (True, '4999949985', '4999949985', 79354), (True, '4999849998', '4999849998', 79355), (True, '4999849991', '4999849991', 79356), (True, '4999849980', '4999849980', 79357), (True, '4999850001', '4999850001', 79358), (True, '4999850001', '4999850001', 79359), (True, '4999850001', '4999850001', 79360), (True, '540945', '540945', 79361), (True, '80895', '80895', 79362), (True, '414491', '414491', 79363), (True, '208472', '208472', 79364), (True, '1157466', '1157466', 79365), (True, '255346101', '255346101', 79366), (True, '88410', '88410', 79367), (True, '2654180511', '2654180511', 79368), (True, '342494109', '342494109', 79369), (True, '879423804', '879423804', 79370), (True, '2725458111', '2725458111', 79371), (True, '2481847831', '2481847831', 79372), (True, '3779759985', '3779759985', 79373), (True, '1330260828', '1330260828', 79374), (True, '1063089105', '1063089105', 79375), (True, '1063089105', '1063089105', 79376), (True, '1596096750', '1596096750', 79377), (True, '1806455778', '1806455778', 79378), (True, '0', '0', 79379), (True, '0', '0', 79380), (True, '0', '0', 79381), (True, '0', '0', 79382), (True, '0', '0', 79383), (True, '1', '1', 79384), (True, '1', '1', 79385), (True, '1', '1', 79386), (True, '1', '1', 79387), (True, '1', '1', 79388), (True, '3', '3', 79389), (True, '3', '3', 79390), (True, '3', '3', 79391), (True, '3', '3', 79392), (True, '3', '3', 79393), (True, '5', '5', 79394), (True, '6', '6', 79395), (True, '6', '6', 79396), (True, '6', '6', 79397), (True, '6', '6', 79398), (True, '7', '7', 79399), (True, '10', '10', 79400), (True, '10', '10', 79401), (True, '10', '10', 79402), (True, '9', '9', 79403), (True, '14', '14', 79404), (True, '15', '15', 79405), (True, '18', '18', 79406), (True, '21', '21', 79407), (True, '21', '21', 79408), (True, '30', '30', 79409), (True, '243918', '243918', 79410), (True, '1076515', '1076515', 79411), (True, '2643', '2643', 79412), (True, '15374531', '15374531', 79413), (True, '23767065', '23767065', 79414), (True, '1513297456', '1513297456', 79415), (True, '382917573', '382917573', 79416), (True, '351981971', '351981971', 79417), (True, '4974183411', '4974183411', 79418), (True, '2599096851', '2599096851', 79419), (True, '751762306', '751762306', 79420), (True, '3066847464', '3066847464', 79421), (True, '51726307', '51726307', 79422), (True, '898455660', '898455660', 79423), (True, '4999850001', '4999850001', 79424), (True, '4999949999', '4999949999', 79425), (True, '4999950000', '4999950000', 79426), (True, '199997', '199997', 79427), (True, '6', '6', 79428), (True, '243753254', '243753254', 79429)]",True,Accecpted,0.9061874434879644,0.9830508474576272,False,0.0,False,"def func(*args):
	
	(n, k) = [int(i) for i in args[0].split()]
	ans = 0
	for i in range(k):
	    if (n >= 2):
	        ans += ((2 * n) - 3)
	        n -= 2
	print(ans)
"
440803,18287554,"n,k = [int(i) for i in input().split()]
ans = 0
for i in range(k):
    while n >= 2:
        ans +=  2 * n  - 3
        n -= 2
print(ans)",7295,4472,62,6/7/16 19:53,13,394,2,8,"[(True, '10', '10', 79338), (True, '0', '0', 79339), (False, '4999950000', '399990', 79340), (True, '0', '0', 79341), (False, '28', '27', 79342), (False, '21', '11', 79343), (False, '4999950000', '4799960000', 79344), (True, '0', '0', 79345), (False, '4950', '4905', 79346), (False, '36', '26', 79347), (False, '103740', '58890', 79348), (True, '4999950000', '4999950000', 79349), (True, '4999950000', '4999950000', 79350), (True, '4999950000', '4999950000', 79351), (True, '4999950000', '4999950000', 79352), (False, '4999950000', '4999949994', 79353), (False, '4999950000', '4999949985', 79354), (False, '4999850001', '4999849998', 79355), (False, '4999850001', '4999849991', 79356), (False, '4999850001', '4999849980', 79357), (True, '4999850001', '4999850001', 79358), (True, '4999850001', '4999850001', 79359), (True, '4999850001', '4999850001', 79360), (False, '451846891', '540945', 79361), (False, '90929355', '80895', 79362), (False, '438479691', '414491', 79363), (False, '84988203', '208472', 79364), (False, '4652410491', '1157466', 79365), (True, '255346101', '255346101', 79366), (True, '88410', '88410', 79367), (True, '2654180511', '2654180511', 79368), (False, '718792570', '342494109', 79369), (False, '1107580645', '879423804', 79370), (False, '3530646496', '2725458111', 79371), (True, '2481847831', '2481847831', 79372), (True, '3779759985', '3779759985', 79373), (False, '2529560628', '1330260828', 79374), (True, '1063089105', '1063089105', 79375), (True, '1063089105', '1063089105', 79376), (True, '1596096750', '1596096750', 79377), (True, '1806455778', '1806455778', 79378), (True, '0', '0', 79379), (True, '0', '0', 79380), (True, '0', '0', 79381), (True, '0', '0', 79382), (True, '0', '0', 79383), (True, '1', '1', 79384), (True, '1', '1', 79385), (True, '1', '1', 79386), (True, '1', '1', 79387), (True, '1', '1', 79388), (True, '3', '3', 79389), (True, '3', '3', 79390), (True, '3', '3', 79391), (True, '3', '3', 79392), (True, '3', '3', 79393), (False, '6', '5', 79394), (True, '6', '6', 79395), (True, '6', '6', 79396), (True, '6', '6', 79397), (True, '6', '6', 79398), (False, '10', '7', 79399), (True, '10', '10', 79400), (True, '10', '10', 79401), (True, '10', '10', 79402), (False, '15', '9', 79403), (False, '15', '14', 79404), (True, '15', '15', 79405), (False, '21', '18', 79406), (True, '21', '21', 79407), (True, '21', '21', 79408), (False, '45', '30', 79409), (False, '1859371671', '243918', 79410), (False, '274377025', '1076515', 79411), (False, '98346', '2643', 79412), (False, '165374391', '15374531', 79413), (True, '23767065', '23767065', 79414), (False, '1579416706', '1513297456', 79415), (False, '881013276', '382917573', 79416), (False, '3053437731', '351981971', 79417), (True, '4974183411', '4974183411', 79418), (True, '2599096851', '2599096851', 79419), (False, '3405724246', '751762306', 79420), (False, '3152934345', '3066847464', 79421), (False, '60725710', '51726307', 79422), (False, '2237771550', '898455660', 79423), (True, '4999850001', '4999850001', 79424), (False, '4999950000', '4999949999', 79425), (True, '4999950000', '4999950000', 79426), (False, '4999950000', '199997', 79427), (True, '6', '6', 79428), (False, '4999950000', '243753254', 79429)]",False,Wrong Answer,0.9061874434879644,0.9830508474576272,False,0.4456521739130434,False,"def func(*args):
	
	(n, k) = [int(i) for i in args[0].split()]
	ans = 0
	for i in range(k):
	    while (n >= 2):
	        ans += ((2 * n) - 3)
	        n -= 2
	print(ans)
"
111940,29087790,"c,a,b=map(int,input().split())
if a%c==0:
    d=int(b//c)-int(a//c)+1
else:
    d=int(b//c)-int(a//c)
print(d)",1977,4532,62,8/1/17 7:52,11,93,1,8,"[(True, '10', '10', 55235), (True, '5', '5', 55236), (True, '1', '1', 55237), (True, '1', '1', 55238), (True, '2', '2', 55239), (True, '2', '2', 55240), (True, '2', '2', 55241), (True, '1203', '1203', 55242), (True, '1', '1', 55243), (True, '1', '1', 55244), (True, '1', '1', 55245), (True, '1', '1', 55246), (True, '1', '1', 55247), (True, '1', '1', 55248), (True, '1', '1', 55249), (True, '1', '1', 55250), (True, '1', '1', 55251), (True, '2', '2', 55252), (True, '10', '10', 55253), (True, '10541', '10541', 55254), (True, '112', '112', 55255), (True, '111', '111', 55256), (True, '111', '111', 55257), (True, '93844', '93844', 55258), (True, '93844', '93844', 55259), (True, '93845', '93845', 55260), (True, '93843', '93843', 55261), (True, '93843', '93843', 55262), (True, '93844', '93844', 55263), (True, '93843', '93843', 55264), (True, '93843', '93843', 55265), (True, '93844', '93844', 55266), (True, '94098', '94098', 55267), (True, '94098', '94098', 55268), (True, '94099', '94099', 55269), (True, '94097', '94097', 55270), (True, '94097', '94097', 55271), (True, '94098', '94098', 55272), (True, '94097', '94097', 55273), (True, '94097', '94097', 55274), (True, '94098', '94098', 55275), (True, '63157', '63157', 55276), (True, '63157', '63157', 55277), (True, '63157', '63157', 55278), (True, '63157', '63157', 55279), (True, '63157', '63157', 55280), (True, '63157', '63157', 55281), (True, '63157', '63157', 55282), (True, '63157', '63157', 55283), (True, '63157', '63157', 55284), (True, '936724', '936724', 55285), (True, '9701', '9701', 55286), (True, '936724', '936724', 55287), (True, '9701', '9701', 55288), (True, '936724', '936724', 55289), (True, '9702', '9702', 55290), (True, '2000000000000000001', '2000000000000000001', 55291), (True, '1000000000000000001', '1000000000000000001', 55292), (True, '666666666666666667', '666666666666666667', 55293), (True, '500000000000000001', '500000000000000001', 55294), (True, '400000000000000001', '400000000000000001', 55295), (True, '333333333333333333', '333333333333333333', 55296), (True, '285714285714285715', '285714285714285715', 55297), (True, '900000000000000001', '900000000000000001', 55298), (True, '495000000000000001', '495000000000000001', 55299), (True, '329927333333333334', '329927333333333334', 55300), (True, '249919972454520226', '249919972454520226', 55301), (True, '199999919457965617', '199999919457965617', 55302), (True, '166666665555555556', '166666665555555556', 55303), (True, '142846031746031746', '142846031746031746', 55304), (True, '3', '3', 55305), (True, '2', '2', 55306), (True, '1', '1', 55307), (True, '0', '0', 55308), (True, '19', '19', 55309), (True, '1', '1', 55310), (True, '0', '0', 55311), (True, '0', '0', 55312), (True, '0', '0', 55313), (True, '0', '0', 55314), (True, '1000000000000000000', '1000000000000000000', 55315)]",True,Accecpted,5.705336763108155e-78,0.9830508474576272,False,0.0,False,"def func(*args):
	
	(c, a, b) = map(int, args[0].split())
	if ((a % c) == 0):
	    d = ((int((b // c)) - int((a // c))) + 1)
	else:
	    d = (int((b // c)) - int((a // c)))
	print(d)
"
111939,29087736,"c,a,b=map(int,input().split())
if a%c==0:
    d=int(b/c)-int(a/c)+1
else:
    d=int(b/c)-int(a/c)
print(d)",1977,4504,61,8/1/17 7:48,11,93,2,8,"[(True, '10', '10', 55235), (True, '5', '5', 55236), (True, '1', '1', 55237), (True, '1', '1', 55238), (True, '2', '2', 55239), (True, '2', '2', 55240), (True, '2', '2', 55241), (True, '1203', '1203', 55242), (True, '1', '1', 55243), (True, '1', '1', 55244), (True, '1', '1', 55245), (True, '1', '1', 55246), (False, '0', '1', 55247), (False, '0', '1', 55248), (False, '0', '1', 55249), (True, '1', '1', 55250), (True, '1', '1', 55251), (True, '2', '2', 55252), (True, '10', '10', 55253), (False, '10540', '10541', 55254), (True, '112', '112', 55255), (True, '111', '111', 55256), (True, '111', '111', 55257), (True, '93844', '93844', 55258), (True, '93844', '93844', 55259), (True, '93845', '93845', 55260), (True, '93843', '93843', 55261), (True, '93843', '93843', 55262), (True, '93844', '93844', 55263), (True, '93843', '93843', 55264), (True, '93843', '93843', 55265), (True, '93844', '93844', 55266), (True, '94098', '94098', 55267), (True, '94098', '94098', 55268), (True, '94099', '94099', 55269), (False, '94096', '94097', 55270), (False, '94096', '94097', 55271), (False, '94097', '94098', 55272), (False, '94096', '94097', 55273), (False, '94096', '94097', 55274), (False, '94097', '94098', 55275), (False, '63156', '63157', 55276), (True, '63157', '63157', 55277), (True, '63157', '63157', 55278), (False, '63156', '63157', 55279), (True, '63157', '63157', 55280), (True, '63157', '63157', 55281), (True, '63157', '63157', 55282), (False, '63158', '63157', 55283), (False, '63158', '63157', 55284), (False, '936723', '936724', 55285), (True, '9701', '9701', 55286), (False, '936723', '936724', 55287), (True, '9701', '9701', 55288), (True, '936724', '936724', 55289), (True, '9702', '9702', 55290), (True, '2000000000000000001', '2000000000000000001', 55291), (True, '1000000000000000001', '1000000000000000001', 55292), (False, '666666666666666624', '666666666666666667', 55293), (True, '500000000000000001', '500000000000000001', 55294), (True, '400000000000000001', '400000000000000001', 55295), (False, '333333333333333312', '333333333333333333', 55296), (False, '285714285714285728', '285714285714285715', 55297), (True, '900000000000000001', '900000000000000001', 55298), (True, '495000000000000001', '495000000000000001', 55299), (False, '329927333333333312', '329927333333333334', 55300), (True, '249919972454520226', '249919972454520226', 55301), (False, '199999919457965618', '199999919457965617', 55302), (False, '166666665555555545', '166666665555555556', 55303), (False, '142846031746031753', '142846031746031746', 55304), (True, '3', '3', 55305), (True, '2', '2', 55306), (True, '1', '1', 55307), (True, '0', '0', 55308), (False, '18', '19', 55309), (True, '1', '1', 55310), (True, '0', '0', 55311), (True, '0', '0', 55312), (True, '0', '0', 55313), (True, '0', '0', 55314), (True, '1000000000000000000', '1000000000000000000', 55315)]",False,Wrong Answer,5.705336763108155e-78,0.9830508474576272,False,0.2962962962962963,False,"def func(*args):
	
	(c, a, b) = map(int, args[0].split())
	if ((a % c) == 0):
	    d = ((int((b / c)) - int((a / c))) + 1)
	else:
	    d = (int((b / c)) - int((a / c)))
	print(d)
"
2815283,4819583,"n = int(input())
print(pow(3, n - 1, 1000003) if n else 0)",55480,44,92,10/18/13 17:02,2,2410,2,8,"[(True, '9', '9', 30576), (True, '1', '1', 30577), (True, '3', '3', 30578), (True, '27', '27', 30579), (True, '243', '243', 30580), (True, '59049', '59049', 30581), (True, '594320', '594320', 30582), (True, '782957', '782957', 30583), (True, '729', '729', 30584), (False, '0', '1', 30585), (True, '691074', '691074', 30586), (True, '874011', '874011', 30587), (True, '842553', '842553', 30588), (True, '858672', '858672', 30589), (True, '557186', '557186', 30590), (True, '999535', '999535', 30591), (True, '946384', '946384', 30592), (True, '678945', '678945', 30593), (True, '247876', '247876', 30594), (True, '562128', '562128', 30595), (True, '327984', '327984', 30596), (True, '889192', '889192', 30597), (True, '794863', '794863', 30598), (True, '695035', '695035', 30599), (True, '376094', '376094', 30600)]",False,Wrong Answer,0.9036020036098448,0.9830508474576272,False,0.04,False,"def func(*args):
	
	n = int(args[0])
	print((pow(3, (n - 1), 1000003) if n else 0))
"
1256596,17288729,"n,a,b = map(int,input().split())
print(n - max(a+1,n-b)+1)",59141,4,124,4/12/16 14:11,2,1142,1,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (True, '1', '1', 138320), (True, '1', '1', 138321), (True, '4', '4', 138322), (True, '7', '7', 138323), (True, '5', '5', 138324), (True, '6', '6', 138325), (True, '10', '10', 138326), (True, '7', '7', 138327), (True, '9', '9', 138328), (True, '15', '15', 138329), (True, '8', '8', 138330), (True, '2', '2', 138331), (True, '24', '24', 138332), (True, '5', '5', 138333), (True, '6', '6', 138334), (True, '16', '16', 138335), (True, '5', '5', 138336), (True, '12', '12', 138337), (True, '17', '17', 138338), (True, '38', '38', 138339), (True, '18', '18', 138340), (True, '38', '38', 138341), (True, '13', '13', 138342), (True, '8', '8', 138343), (True, '13', '13', 138344), (True, '1', '1', 138345), (True, '40', '40', 138346), (True, '53', '53', 138347), (True, '34', '34', 138348), (True, '23', '23', 138349), (True, '39', '39', 138350), (True, '38', '38', 138351), (True, '13', '13', 138352), (True, '36', '36', 138353), (True, '7', '7', 138354), (True, '21', '21', 138355), (True, '21', '21', 138356), (True, '2', '2', 138357), (True, '43', '43', 138358), (True, '9', '9', 138359), (True, '14', '14', 138360), (True, '23', '23', 138361), (True, '89', '89', 138362), (True, '32', '32', 138363), (True, '73', '73', 138364), (True, '89', '89', 138365), (True, '19', '19', 138366), (True, '1', '1', 138367)]",True,Accecpted,0.7598356856515925,0.9830508474576272,False,0.0,False,"def func(*args):
	
	(n, a, b) = map(int, args[0].split())
	print(((n - max((a + 1), (n - b))) + 1))
"
2917076,5864661,"n=int(input())
print(3*(n//2))",6411,0,124,2/1/14 22:37,2,2490,1,8,"[(True, '3', '3', 216989), (True, '6', '6', 216990), (True, '9', '9', 216991), (True, '12', '12', 216992), (True, '15', '15', 216993), (True, '210', '210', 216994), (True, '750', '750', 216995), (True, '1500', '1500', 216996), (True, '3000', '3000', 216997), (True, '75000', '75000', 216998), (True, '15000', '15000', 216999), (True, '38190', '38190', 217000), (True, '81969', '81969', 217001), (True, '89685', '89685', 217002), (True, '867684', '867684', 217003), (True, '85197084', '85197084', 217004), (True, '12686970', '12686970', 217005), (True, '8531979', '8531979', 217006), (True, '16477398', '16477398', 217007), (True, '149999991', '149999991', 217008), (True, '149999994', '149999994', 217009), (True, '149999997', '149999997', 217010), (True, '150000000', '150000000', 217011)]",True,Accecpted,1.5319719891192393e-231,0.9830508474576272,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	print((3 * (n // 2)))
"
2815284,4819585,"n = int(input())
print(pow(3, n - 1, 1000003) if n else 1)",55480,44,92,10/18/13 17:03,2,2410,1,8,"[(True, '9', '9', 30576), (True, '1', '1', 30577), (True, '3', '3', 30578), (True, '27', '27', 30579), (True, '243', '243', 30580), (True, '59049', '59049', 30581), (True, '594320', '594320', 30582), (True, '782957', '782957', 30583), (True, '729', '729', 30584), (True, '1', '1', 30585), (True, '691074', '691074', 30586), (True, '874011', '874011', 30587), (True, '842553', '842553', 30588), (True, '858672', '858672', 30589), (True, '557186', '557186', 30590), (True, '999535', '999535', 30591), (True, '946384', '946384', 30592), (True, '678945', '678945', 30593), (True, '247876', '247876', 30594), (True, '562128', '562128', 30595), (True, '327984', '327984', 30596), (True, '889192', '889192', 30597), (True, '794863', '794863', 30598), (True, '695035', '695035', 30599), (True, '376094', '376094', 30600)]",True,Accecpted,0.9036020036098448,0.9830508474576272,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	print((pow(3, (n - 1), 1000003) if n else 1))
"
570504,23533864,"a,b,n,x= map(int,input().split()) 
e = 10**9 + 7
if a==1:
    ans = (x + b*n)%e
else :
    ans = (pow(a,n,e)*x + (b*pow(a,n,e)*pow(a-1,e-2,e))%e)%e
print(int(ans))",5155,4472,46,1/4/17 14:10,13,529,2,8,"[(False, '9', '7', 89673), (False, '27', '25', 89674), (False, '81', '79', 89675), (True, '2', '2', 89676), (False, '443623222', '443623217', 89677), (False, '369908902', '908370438', 89678), (False, '905142243', '621999403', 89679), (False, '739298667', '83709654', 89680), (False, '140613447', '505858307', 89681), (False, '382153830', '230360736', 89682), (True, '45212126', '45212126', 89683), (False, '282315949', '154788991', 89684), (False, '342605039', '221036825', 89685), (True, '42838179', '42838179', 89686), (True, '999999665', '999999665', 89687), (True, '999999657', '999999657', 89688), (True, '48993', '48993', 89689), (True, '57392869', '57392869', 89690), (True, '899999965', '899999965', 89691), (True, '490010000', '490010000', 89692), (True, '129054389', '129054389', 89693), (True, '490001', '490001', 89694), (True, '49010000', '49010000', 89695), (True, '502', '502', 89696), (True, '12345294', '12345294', 89697), (True, '49100000', '49100000', 89698), (True, '49012', '49012', 89699), (True, '490005', '490005', 89700), (True, '500000', '500000', 89701), (True, '490012', '490012', 89702), (True, '49000012', '49000012', 89703), (True, '999999676', '999999676', 89704), (True, '49100000', '49100000', 89705), (False, '647963048', '623380685', 89706), (False, '2', '1', 89707), (True, '12349', '12349', 89708)]",False,Wrong Answer,0.9132027013286008,0.9829545454545454,False,0.3611111111111111,False,"def func(*args):
	
	(a, b, n, x) = map(int, args[0].split())
	e = ((10 ** 9) + 7)
	if (a == 1):
	    ans = ((x + (b * n)) % e)
	else:
	    ans = (((pow(a, n, e) * x) + (((b * pow(a, n, e)) * pow((a - 1), (e - 2), e)) % e)) % e)
	print(int(ans))
"
570505,23533948,"a,b,n,x= map(int,input().split()) 
e = 10**9 + 7
if a==1:
    ans = (x + b*n)%e
else :
    ans = (pow(a,n,e)*x + (b*(pow(a,n,e)-1)*pow(a-1,e-2,e)))%e
print(int(ans))",5155,4532,62,1/4/17 14:15,13,529,1,8,"[(True, '7', '7', 89673), (True, '25', '25', 89674), (True, '79', '79', 89675), (True, '2', '2', 89676), (True, '443623217', '443623217', 89677), (True, '908370438', '908370438', 89678), (True, '621999403', '621999403', 89679), (True, '83709654', '83709654', 89680), (True, '505858307', '505858307', 89681), (True, '230360736', '230360736', 89682), (True, '45212126', '45212126', 89683), (True, '154788991', '154788991', 89684), (True, '221036825', '221036825', 89685), (True, '42838179', '42838179', 89686), (True, '999999665', '999999665', 89687), (True, '999999657', '999999657', 89688), (True, '48993', '48993', 89689), (True, '57392869', '57392869', 89690), (True, '899999965', '899999965', 89691), (True, '490010000', '490010000', 89692), (True, '129054389', '129054389', 89693), (True, '490001', '490001', 89694), (True, '49010000', '49010000', 89695), (True, '502', '502', 89696), (True, '12345294', '12345294', 89697), (True, '49100000', '49100000', 89698), (True, '49012', '49012', 89699), (True, '490005', '490005', 89700), (True, '500000', '500000', 89701), (True, '490012', '490012', 89702), (True, '49000012', '49000012', 89703), (True, '999999676', '999999676', 89704), (True, '49100000', '49100000', 89705), (True, '623380685', '623380685', 89706), (True, '1', '1', 89707), (True, '12349', '12349', 89708)]",True,Accecpted,0.9132027013286008,0.9829545454545454,False,0.0,False,"def func(*args):
	
	(a, b, n, x) = map(int, args[0].split())
	e = ((10 ** 9) + 7)
	if (a == 1):
	    ans = ((x + (b * n)) % e)
	else:
	    ans = (((pow(a, n, e) * x) + ((b * (pow(a, n, e) - 1)) * pow((a - 1), (e - 2), e))) % e)
	print(int(ans))
"
1047924,25757931,"a, b = map(int, input().split())
for l in range(1, 111):
    for r in range(l, 111):
        o, e = 0, 0
        for x in range(l, r + 1):
            o += x % 2
            e += 1 - x % 2
        if o == b and e == a:
            print(""YES"")
            exit()
print(""NO"")",5346,4520,140,3/23/17 23:34,21,972,2,8,"[(True, 'YES', 'YES', 125942), (True, 'NO', 'NO', 125943), (True, 'YES', 'YES', 125944), (True, 'YES', 'YES', 125945), (True, 'NO', 'NO', 125946), (True, 'YES', 'YES', 125947), (True, 'NO', 'NO', 125948), (False, 'NO', 'YES', 125949), (True, 'NO', 'NO', 125950), (False, 'NO', 'YES', 125951), (False, 'NO', 'YES', 125952), (True, 'NO', 'NO', 125953), (True, 'NO', 'NO', 125954), (False, 'NO', 'YES', 125955), (True, 'YES', 'YES', 125956), (True, 'NO', 'NO', 125957), (True, 'NO', 'NO', 125958), (True, 'NO', 'NO', 125959), (False, 'NO', 'YES', 125960), (True, 'NO', 'NO', 125961), (True, 'YES', 'YES', 125962)]",False,Wrong Answer,0.8944696664691558,0.9829351535836176,False,0.238095238095238,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	for l in range(1, 111):
	    for r in range(l, 111):
	        (o, e) = (0, 0)
	        for x in range(l, (r + 1)):
	            o += (x % 2)
	            e += (1 - (x % 2))
	        if ((o == b) and (e == a)):
	            print('YES')
	            exit()
	print('NO')
"
1047926,25757945,"a, b = map(int, input().split())
for l in range(1, 3):
    for r in range(l, 555):
        o, e = 0, 0
        for x in range(l, r + 1):
            o += x % 2
            e += 1 - x % 2
        if o == b and e == a:
            print(""YES"")
            exit()
print(""NO"")",5346,4520,171,3/23/17 23:35,21,972,1,8,"[(True, 'YES', 'YES', 125942), (True, 'NO', 'NO', 125943), (True, 'YES', 'YES', 125944), (True, 'YES', 'YES', 125945), (True, 'NO', 'NO', 125946), (True, 'YES', 'YES', 125947), (True, 'NO', 'NO', 125948), (True, 'YES', 'YES', 125949), (True, 'NO', 'NO', 125950), (True, 'YES', 'YES', 125951), (True, 'YES', 'YES', 125952), (True, 'NO', 'NO', 125953), (True, 'NO', 'NO', 125954), (True, 'YES', 'YES', 125955), (True, 'YES', 'YES', 125956), (True, 'NO', 'NO', 125957), (True, 'NO', 'NO', 125958), (True, 'NO', 'NO', 125959), (True, 'YES', 'YES', 125960), (True, 'NO', 'NO', 125961), (True, 'YES', 'YES', 125962)]",True,Accecpted,0.8944696664691558,0.9829351535836176,False,0.0,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	for l in range(1, 3):
	    for r in range(l, 555):
	        (o, e) = (0, 0)
	        for x in range(l, (r + 1)):
	            o += (x % 2)
	            e += (1 - (x % 2))
	        if ((o == b) and (e == a)):
	            print('YES')
	            exit()
	print('NO')
"
833189,26434432,"import sys

x = list(map(int, sys.stdin.readline().split()))
vmax = x[0]
vmin = 100
for i in x[1:]:
    if(i < vmin):
        vmin = i
    if(i > vmax):
        vmax = i
print(vmax - vmin)",13267,5420,46,4/16/17 20:35,21,764,2,8,"[(True, '6', '6', 109988), (True, '20', '20', 109989), (False, '96', '99', 109990), (True, '99', '99', 109991), (False, '55', '99', 109992), (False, '1', '2', 109993), (False, '3', '17', 109994), (False, '61', '69', 109995), (False, '13', '72', 109996), (False, '6', '25', 109997), (False, '17', '85', 109998), (False, '2', '52', 109999), (False, '4', '72', 110000), (False, '2', '11', 110001), (False, '2', '15', 110002), (True, '88', '88', 110003), (True, '62', '62', 110004), (True, '70', '70', 110005), (True, '36', '36', 110006), (True, '61', '61', 110007), (True, '5', '5', 110008), (True, '29', '29', 110009), (True, '62', '62', 110010), (True, '69', '69', 110011), (True, '27', '27', 110012), (True, '33', '33', 110013), (True, '61', '61', 110014), (True, '67', '67', 110015), (True, '51', '51', 110016), (True, '55', '55', 110017), (True, '75', '75', 110018), (True, '67', '67', 110019), (True, '61', '61', 110020), (True, '49', '49', 110021), (True, '50', '50', 110022), (False, '1', '2', 110023), (True, '4', '4', 110024), (True, '6', '6', 110025), (True, '8', '8', 110026), (True, '10', '10', 110027), (False, '33', '49', 110028), (True, '10', '10', 110029), (True, '8', '8', 110030), (False, '1', '2', 110031), (True, '2', '2', 110032), (False, '6', '7', 110033), (False, '98', '99', 110034), (False, '2', '5', 110035)]",False,Wrong Answer,0.8232325806433648,0.982885085574572,False,0.375,False,"def func(*args):
	
	import sys
	x = list(map(int, sys.stdin.readline().split()))
	vmax = x[0]
	vmin = 100
	for i in x[1:]:
	    if (i < vmin):
	        vmin = i
	    if (i > vmax):
	        vmax = i
	print((vmax - vmin))
"
833190,26434443,"import sys

x = list(map(int, sys.stdin.readline().split()))
vmax = 0
vmin = 100
for i in x:
    if(i < vmin):
        vmin = i
    if(i > vmax):
        vmax = i
print(vmax - vmin)",13267,5432,61,4/16/17 20:37,21,764,1,8,"[(True, '6', '6', 109988), (True, '20', '20', 109989), (True, '99', '99', 109990), (True, '99', '99', 109991), (True, '99', '99', 109992), (True, '2', '2', 109993), (True, '17', '17', 109994), (True, '69', '69', 109995), (True, '72', '72', 109996), (True, '25', '25', 109997), (True, '85', '85', 109998), (True, '52', '52', 109999), (True, '72', '72', 110000), (True, '11', '11', 110001), (True, '15', '15', 110002), (True, '88', '88', 110003), (True, '62', '62', 110004), (True, '70', '70', 110005), (True, '36', '36', 110006), (True, '61', '61', 110007), (True, '5', '5', 110008), (True, '29', '29', 110009), (True, '62', '62', 110010), (True, '69', '69', 110011), (True, '27', '27', 110012), (True, '33', '33', 110013), (True, '61', '61', 110014), (True, '67', '67', 110015), (True, '51', '51', 110016), (True, '55', '55', 110017), (True, '75', '75', 110018), (True, '67', '67', 110019), (True, '61', '61', 110020), (True, '49', '49', 110021), (True, '50', '50', 110022), (True, '2', '2', 110023), (True, '4', '4', 110024), (True, '6', '6', 110025), (True, '8', '8', 110026), (True, '10', '10', 110027), (True, '49', '49', 110028), (True, '10', '10', 110029), (True, '8', '8', 110030), (True, '2', '2', 110031), (True, '2', '2', 110032), (True, '7', '7', 110033), (True, '99', '99', 110034), (True, '5', '5', 110035)]",True,Accecpted,0.8232325806433648,0.982885085574572,False,0.0,False,"def func(*args):
	
	import sys
	x = list(map(int, sys.stdin.readline().split()))
	vmax = 0
	vmin = 100
	for i in x:
	    if (i < vmin):
	        vmin = i
	    if (i > vmax):
	        vmax = i
	print((vmax - vmin))
"
2254494,28866182,"n, t = [int(x) for x in input().split()]
seq = list(input())
currentTime = 0
i = 0
while currentTime < t:
    while i < n - 1:
        if seq[i] == 'B' and seq[i + 1] == 'G':
            seq[i] = 'G'
            seq[i + 1] = 'B'
            i += 1
        i += 1
    currentTime += 1
    i = 0
print(''.join(seq))",2072,4524,124,7/25/17 8:25,14,1975,1,8,"[(True, 'GBGGB', 'GBGGB', 188827), (True, 'GGBGB', 'GGBGB', 188828), (True, 'GGGB', 'GGGB', 188829), (True, 'BB', 'BB', 188830), (True, 'GB', 'GB', 188831), (True, 'GBBGBB', 'GBBGBB', 188832), (True, 'GGBGBBBB', 'GGBGBBBB', 188833), (True, 'GBBBBBGBBB', 'GBBBBBGBBB', 188834), (True, 'GGGGGGGGBGGBGGBBBBBBBB', 'GGGGGGGGBGGBGGBBBBBBBB', 188835), (True, 'GGBGBGBGBGBGGGBBGBGBGBGBBBGBGBGBGBGBGBGBGBGBGGBGBB', 'GGBGBGBGBGBGGGBBGBGBGBGBBBGBGBGBGBGBGBGBGBGBGGBGBB', 188836), (True, 'GGGGGGGGGGGGBGGBGBGBGBGBGGGGGGBGBGBGBGBGBGGBGGBGBB', 'GGGGGGGGGGGGBGGBGBGBGBGBGGGGGGBGBGBGBGBGBGGBGGBGBB', 188837), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBBBBB', 188838), (True, 'GGGGGGGGGGBBBBBBBBBB', 'GGGGGGGGGGBBBBBBBBBB', 188839), (True, 'GGGGGGGBGBGBGGGGGBGBBBBBBBB', 'GGGGGGGBGBGBGGGGGBGBBBBBBBB', 188840), (True, 'GGGGGGGGGGGBGGGGGBBGBGBGBGBGBGBGBGBGBGBGBBBBBB', 'GGGGGGGGGGGBGGGGGBBGBGBGBGBGBGBGBGBGBGBGBBBBBB', 188841), (True, 'GGGGBBBBBGBGBGBGBBBGBBBBBBGBBBBBBBBBBBBBBBBBBBBBBB', 'GGGGBBBBBGBGBGBGBBBGBBBBBBGBBBBBBBBBBBBBBBBBBBBBBB', 188842), (True, 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188843), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 188844), (True, 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBB', 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBB', 188845), (True, 'GGGGGGGGGGGGGGGGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 'GGGGGGGGGGGGGGGGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 188846), (True, 'B', 'B', 188847), (True, 'G', 'G', 188848), (True, 'B', 'B', 188849), (True, 'G', 'G', 188850), (True, 'GGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'GGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188851), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBB', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBB', 188852), (True, 'GGGBBB', 'GGGBBB', 188853), (True, 'GGBBBBGBGBGBGGGBGBGGGBGBBB', 'GGBBBBGBGBGBGGGBGBGGGBGBBB', 188854), (True, 'GGGGBGBGGGBBBBBGBGBGBGGGBGGBGBGBGBGBGBGBGBBBBB', 'GGGGBGBGGGBBBBBGBGBGBGGGBGGBGBGBGBGBGBGBGBBBBB', 188855), (True, 'GBBGBGBGBGBGBGBBBBGBBGBBBBBBBBBGBBGBBBBBBBBB', 'GBBGBGBGBGBGBGBBBBGBBGBBBBBBBBBGBBGBBBBBBBBB', 188856), (True, 'GGGGGGGGGGBBBBBBBBBB', 'GGGGGGGGGGBBBBBBBBBB', 188857), (True, 'GGGGGGGGGGGGGGGBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGBBBBBBBBBBBBBBB', 188858), (True, 'GGGGGGGGGGGBBBBBB', 'GGGGGGGGGGGBBBBBB', 188859), (True, 'GGGGGGGGGGGGGGGGGGBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGBBBBBBBBBBBB', 188860), (True, 'GGGGGGGGGGGGBBBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGBBBBBBBBBBBBBBBBBBB', 188861), (True, 'GB', 'GB', 188862), (True, 'GGGGGBBB', 'GGGGGBBB', 188863), (True, 'GGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBB', 188864), (True, 'GGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBB', 188865), (True, 'GGGGGGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188866), (True, 'GGGGGGGGGG', 'GGGGGGGGGG', 188867), (True, 'BBBBBBBBBB', 'BBBBBBBBBB', 188868), (True, 'GGGGGBBBBB', 'GGGGGBBBBB', 188869), (True, 'B', 'B', 188870)]",True,Accecpted,0.933480637539065,0.982839313572543,False,0.0,False,"def func(*args):
	
	(n, t) = [int(x) for x in args[0].split()]
	seq = list(args[1])
	currentTime = 0
	i = 0
	while (currentTime < t):
	    while (i < (n - 1)):
	        if ((seq[i] == 'B') and (seq[(i + 1)] == 'G')):
	            seq[i] = 'G'
	            seq[(i + 1)] = 'B'
	            i += 1
	        i += 1
	    currentTime += 1
	    i = 0
	print(''.join(seq))
"
2254493,28866160,"n, t = [int(x) for x in input().split()]
seq = list(input())
currentTime = 0
i = 0
while currentTime < t:
    while i < n - 1:
        if seq[i] == 'B' and seq[i + 1] == 'G':
            seq[i] = 'G'
            seq[i + 1] = 'B'
            i += 1
        i += 1
    currentTime += 1
print(''.join(seq))",2072,4484,122,7/25/17 8:24,13,1975,2,8,"[(True, 'GBGGB', 'GBGGB', 188827), (False, 'GBGGB', 'GGBGB', 188828), (True, 'GGGB', 'GGGB', 188829), (True, 'BB', 'BB', 188830), (True, 'GB', 'GB', 188831), (False, 'BGBBGB', 'GBBGBB', 188832), (False, 'BGBGBGBB', 'GGBGBBBB', 188833), (False, 'BGBBBBBBGB', 'GBBBBBGBBB', 188834), (False, 'GGBGGBGGGGBBGBGGBGBBBB', 'GGGGGGGGBGGBGGBBBBBBBB', 188835), (False, 'GBGBBBGBGGGGBGBGBBBGBGGBBGBBBGBGGBGGBBBGBGGBGGBGGB', 'GGBGBGBGBGBGGGBBGBGBGBGBBBGBGBGBGBGBGBGBGBGBGGBGBB', 188836), (False, 'GGGGGBGGBGGGBBBGBGGGGGGGBGBGBGBBGBGGBGGBGGGGGGGBGB', 'GGGGGGGGGGGGBGGBGBGBGBGBGGGGGGBGBGBGBGBGBGGBGGBGBB', 188837), (False, 'GBGGGGGGBGGBGBGGGGBBGBBBGBGBBGBGBGBGGGGGBBGBGBGBGG', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBBBBB', 188838), (False, 'BGBGGBGGGBBGBBGBGGBB', 'GGGGGGGGGGBBBBBBBBBB', 188839), (False, 'GGBGBGBGGGGGGBGGBGBGBBBGBBB', 'GGGGGGGBGBGBGGGGGBGBBBBBBBB', 188840), (False, 'GBGGGGGBGBGGBGGBGBBGBBGBGBGBBGBGBGGGGGGGBGBGBB', 'GGGGGGGGGGGBGGGGGBBGBGBGBGBGBGBGBGBGBGBGBBBBBB', 188841), (False, 'GBGBBBGBGBBBBBGBGGBGBBBBGBBBBBBGBBBBBBBBBBBBBBBBBB', 'GGGGBBBBBGBGBGBGBBBGBBBBBBGBBBBBBBBBBBBBBBBBBBBBBB', 188842), (True, 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188843), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 188844), (False, 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBB', 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBB', 188845), (False, 'GGGGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 'GGGGGGGGGGGGGGGGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 188846), (True, 'B', 'B', 188847), (True, 'G', 'G', 188848), (True, 'B', 'B', 188849), (True, 'G', 'G', 188850), (False, 'BBBBBBBGBGBBBBBGBBBBBBBBBBBGBBBBBBBBBBBBBBGBBBBBBB', 'GGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188851), (False, 'GGBGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBGBGGGGGGB', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBB', 188852), (False, 'GGBBGB', 'GGGBBB', 188853), (False, 'GBGBBBBBGBGGGBGBGGGBGBGBGB', 'GGBBBBGBGBGBGGGBGBGGGBGBBB', 188854), (False, 'GGBGBGGGBGBGBBBBBGBGGGBGGBGBGGBBGBGGBGBBGBGBBB', 'GGGGBGBGGGBBBBBGBGBGBGGGBGGBGBGBGBGBGBGBGBBBBB', 188855), (False, 'GBBBBBBBBBGBGBGBGBGBGBBBBGBBGBBBBBBBBBGBBGBB', 'GBBGBGBGBGBGBGBBBBGBBGBBBBBBBBBGBBGBBBBBBBBB', 188856), (False, 'BGBGGBGGGBBGBBGBGGBB', 'GGGGGGGGGGBBBBBBBBBB', 188857), (False, 'GBGBGBGBGGBGBBGBGBGGGGBGBGBBBB', 'GGGGGGGGGGGGGGGBBBBBBBBBBBBBBB', 188858), (False, 'BGBGBGBGGGGGBGBGG', 'GGGGGGGGGGGBBBBBB', 188859), (False, 'GBGBGBGGGGGGGBGBGGBGBGBBGBBGBG', 'GGGGGGGGGGGGGGGGGGBBBBBBBBBBBB', 188860), (False, 'BGBGBGBGGBBBBGBGGBBBGBGBGBGBBBB', 'GGGGGGGGGGGGBBBBBBBBBBBBBBBBBBB', 188861), (True, 'GB', 'GB', 188862), (False, 'GGGGBGBB', 'GGGGGBBB', 188863), (False, 'GBGBBBGBGBGBGBGGGGGBGBGGGGGBGGBGGB', 'GGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBB', 188864), (False, 'BBBGBGBGGGBGGGBGBGBBBGBGBGBGGGBBGB', 'GGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBB', 188865), (False, 'BGBBBBBBBBBBBBGBBBGBBBBBBBGBBBBBBGBBBGBBGBBGBBBGBG', 'GGGGGGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188866), (True, 'GGGGGGGGGG', 'GGGGGGGGGG', 188867), (True, 'BBBBBBBBBB', 'BBBBBBBBBB', 188868), (False, 'GBGBGBGBGB', 'GGGGGBBBBB', 188869), (True, 'B', 'B', 188870)]",False,Wrong Answer,0.933480637539065,0.982839313572543,False,0.6818181818181818,False,"def func(*args):
	
	(n, t) = [int(x) for x in args[0].split()]
	seq = list(args[1])
	currentTime = 0
	i = 0
	while (currentTime < t):
	    while (i < (n - 1)):
	        if ((seq[i] == 'B') and (seq[(i + 1)] == 'G')):
	            seq[i] = 'G'
	            seq[(i + 1)] = 'B'
	            i += 1
	        i += 1
	    currentTime += 1
	print(''.join(seq))
"
159032,16802477,"'''
Created on 2016年3月19日

@author: HaoGe
'''
start = list(map(int, input().split()))
end = list(map(int, input().split()))
mylist=[]
for i in range(3):
    if start[i]<end[i]:
        end[i]-=start[i]
        start[i]=0
    else:
        start[i]-=end[i]
        end[i]=0
    mylist.append([start[i],end[i]])
mylist.sort(key=lambda my:my[0], reverse=True)
i=0 #初始剩余资源
j=0 #目标资源量
while j<3 and i<3:
    while mylist[j][1]>0 and i<3:
        if mylist[i][0]<=mylist[j][1]*2:
            mylist[j][1]-=mylist[i][0]//2
            i+=1
        else:
            mylist[i][0]-=mylist[j][1]*2
            mylist[j][1]=0
    j+=1
if mylist[2][1]>0:
    print(""No"")
else:
    print(""Yes"")",7361,16,62,3/19/16 9:05,63,133,2,8,"[(True, 'Yes', 'Yes', 58989), (True, 'No', 'No', 58990), (True, 'Yes', 'Yes', 58991), (True, 'Yes', 'Yes', 58992), (True, 'No', 'No', 58993), (True, 'Yes', 'Yes', 58994), (True, 'Yes', 'Yes', 58995), (True, 'No', 'No', 58996), (True, 'Yes', 'Yes', 58997), (True, 'Yes', 'Yes', 58998), (True, 'Yes', 'Yes', 58999), (True, 'No', 'No', 59000), (True, 'No', 'No', 59001), (True, 'Yes', 'Yes', 59002), (True, 'No', 'No', 59003), (True, 'Yes', 'Yes', 59004), (True, 'No', 'No', 59005), (True, 'No', 'No', 59006), (True, 'Yes', 'Yes', 59007), (True, 'No', 'No', 59008), (False, 'Yes', 'No', 59009), (True, 'Yes', 'Yes', 59010), (True, 'Yes', 'Yes', 59011), (True, 'Yes', 'Yes', 59012), (True, 'Yes', 'Yes', 59013), (True, 'No', 'No', 59014), (True, 'No', 'No', 59015), (True, 'Yes', 'Yes', 59016), (True, 'No', 'No', 59017), (True, 'Yes', 'Yes', 59018), (True, 'Yes', 'Yes', 59019), (True, 'Yes', 'Yes', 59020), (True, 'No', 'No', 59021), (True, 'No', 'No', 59022), (True, 'Yes', 'Yes', 59023), (True, 'Yes', 'Yes', 59024), (True, 'No', 'No', 59025), (True, 'Yes', 'Yes', 59026), (True, 'No', 'No', 59027), (True, 'Yes', 'Yes', 59028), (True, 'No', 'No', 59029), (True, 'No', 'No', 59030), (True, 'No', 'No', 59031), (True, 'No', 'No', 59032), (True, 'No', 'No', 59033), (True, 'No', 'No', 59034), (True, 'No', 'No', 59035), (True, 'Yes', 'Yes', 59036), (True, 'Yes', 'Yes', 59037), (True, 'Yes', 'Yes', 59038), (True, 'No', 'No', 59039), (True, 'No', 'No', 59040), (True, 'No', 'No', 59041), (True, 'No', 'No', 59042), (True, 'No', 'No', 59043), (True, 'No', 'No', 59044), (True, 'Yes', 'Yes', 59045), (True, 'Yes', 'Yes', 59046), (True, 'Yes', 'Yes', 59047), (True, 'Yes', 'Yes', 59048), (True, 'Yes', 'Yes', 59049), (True, 'Yes', 'Yes', 59050), (True, 'No', 'No', 59051), (True, 'Yes', 'Yes', 59052), (True, 'Yes', 'Yes', 59053), (True, 'Yes', 'Yes', 59054), (True, 'Yes', 'Yes', 59055), (True, 'Yes', 'Yes', 59056), (True, 'Yes', 'Yes', 59057), (True, 'Yes', 'Yes', 59058), (True, 'Yes', 'Yes', 59059), (True, 'Yes', 'Yes', 59060), (True, 'Yes', 'Yes', 59061), (True, 'Yes', 'Yes', 59062), (True, 'Yes', 'Yes', 59063), (True, 'Yes', 'Yes', 59064), (True, 'Yes', 'Yes', 59065), (True, 'Yes', 'Yes', 59066), (True, 'Yes', 'Yes', 59067)]",False,Wrong Answer,0.9534460356445504,0.9828042328042328,False,0.0126582278481012,False,"def func(*args):
	
	'\n\nCreated on 2016年3月19日\n\n\n\n@author: HaoGe\n\n'
	start = list(map(int, args[0].split()))
	end = list(map(int, args[1].split()))
	mylist = []
	for i in range(3):
	    if (start[i] < end[i]):
	        end[i] -= start[i]
	        start[i] = 0
	    else:
	        start[i] -= end[i]
	        end[i] = 0
	    mylist.append([start[i], end[i]])
	mylist.sort(key=(lambda my: my[0]), reverse=True)
	i = 0
	j = 0
	while ((j < 3) and (i < 3)):
	    while ((mylist[j][1] > 0) and (i < 3)):
	        if (mylist[i][0] <= (mylist[j][1] * 2)):
	            mylist[j][1] -= (mylist[i][0] // 2)
	            i += 1
	        else:
	            mylist[i][0] -= (mylist[j][1] * 2)
	            mylist[j][1] = 0
	    j += 1
	if (mylist[2][1] > 0):
	    print('No')
	else:
	    print('Yes')
"
159033,16802588,"'''
Created on 2016年3月19日

@author: HaoGe
'''
start = list(map(int, input().split()))
end = list(map(int, input().split()))
mylist=[]
for i in range(3):
    if start[i]<end[i]:
        end[i]-=start[i]
        start[i]=0
    else:
        start[i]-=end[i]
        end[i]=0
    mylist.append([start[i],end[i]])
mylist.sort(key=lambda my:my[0], reverse=True)
i=0 #初始剩余资源
j=0 #目标资源量
while j<3 and i<3:
    while mylist[j][1]>0 and i<3:
        if mylist[i][0]<=mylist[j][1]*2:
            mylist[j][1]-=mylist[i][0]//2
            i+=1
        else:
            mylist[i][0]-=mylist[j][1]*2
            mylist[j][1]=0
    j+=1
if mylist[2][1]+mylist[1][1]+mylist[0][1]>0:
    print(""No"")
else:
    print(""Yes"")",7361,296,77,3/19/16 9:11,63,133,1,8,"[(True, 'Yes', 'Yes', 58989), (True, 'No', 'No', 58990), (True, 'Yes', 'Yes', 58991), (True, 'Yes', 'Yes', 58992), (True, 'No', 'No', 58993), (True, 'Yes', 'Yes', 58994), (True, 'Yes', 'Yes', 58995), (True, 'No', 'No', 58996), (True, 'Yes', 'Yes', 58997), (True, 'Yes', 'Yes', 58998), (True, 'Yes', 'Yes', 58999), (True, 'No', 'No', 59000), (True, 'No', 'No', 59001), (True, 'Yes', 'Yes', 59002), (True, 'No', 'No', 59003), (True, 'Yes', 'Yes', 59004), (True, 'No', 'No', 59005), (True, 'No', 'No', 59006), (True, 'Yes', 'Yes', 59007), (True, 'No', 'No', 59008), (True, 'No', 'No', 59009), (True, 'Yes', 'Yes', 59010), (True, 'Yes', 'Yes', 59011), (True, 'Yes', 'Yes', 59012), (True, 'Yes', 'Yes', 59013), (True, 'No', 'No', 59014), (True, 'No', 'No', 59015), (True, 'Yes', 'Yes', 59016), (True, 'No', 'No', 59017), (True, 'Yes', 'Yes', 59018), (True, 'Yes', 'Yes', 59019), (True, 'Yes', 'Yes', 59020), (True, 'No', 'No', 59021), (True, 'No', 'No', 59022), (True, 'Yes', 'Yes', 59023), (True, 'Yes', 'Yes', 59024), (True, 'No', 'No', 59025), (True, 'Yes', 'Yes', 59026), (True, 'No', 'No', 59027), (True, 'Yes', 'Yes', 59028), (True, 'No', 'No', 59029), (True, 'No', 'No', 59030), (True, 'No', 'No', 59031), (True, 'No', 'No', 59032), (True, 'No', 'No', 59033), (True, 'No', 'No', 59034), (True, 'No', 'No', 59035), (True, 'Yes', 'Yes', 59036), (True, 'Yes', 'Yes', 59037), (True, 'Yes', 'Yes', 59038), (True, 'No', 'No', 59039), (True, 'No', 'No', 59040), (True, 'No', 'No', 59041), (True, 'No', 'No', 59042), (True, 'No', 'No', 59043), (True, 'No', 'No', 59044), (True, 'Yes', 'Yes', 59045), (True, 'Yes', 'Yes', 59046), (True, 'Yes', 'Yes', 59047), (True, 'Yes', 'Yes', 59048), (True, 'Yes', 'Yes', 59049), (True, 'Yes', 'Yes', 59050), (True, 'No', 'No', 59051), (True, 'Yes', 'Yes', 59052), (True, 'Yes', 'Yes', 59053), (True, 'Yes', 'Yes', 59054), (True, 'Yes', 'Yes', 59055), (True, 'Yes', 'Yes', 59056), (True, 'Yes', 'Yes', 59057), (True, 'Yes', 'Yes', 59058), (True, 'Yes', 'Yes', 59059), (True, 'Yes', 'Yes', 59060), (True, 'Yes', 'Yes', 59061), (True, 'Yes', 'Yes', 59062), (True, 'Yes', 'Yes', 59063), (True, 'Yes', 'Yes', 59064), (True, 'Yes', 'Yes', 59065), (True, 'Yes', 'Yes', 59066), (True, 'Yes', 'Yes', 59067)]",True,Accecpted,0.9534460356445504,0.9828042328042328,False,0.0,False,"def func(*args):
	
	'\n\nCreated on 2016年3月19日\n\n\n\n@author: HaoGe\n\n'
	start = list(map(int, args[0].split()))
	end = list(map(int, args[1].split()))
	mylist = []
	for i in range(3):
	    if (start[i] < end[i]):
	        end[i] -= start[i]
	        start[i] = 0
	    else:
	        start[i] -= end[i]
	        end[i] = 0
	    mylist.append([start[i], end[i]])
	mylist.sort(key=(lambda my: my[0]), reverse=True)
	i = 0
	j = 0
	while ((j < 3) and (i < 3)):
	    while ((mylist[j][1] > 0) and (i < 3)):
	        if (mylist[i][0] <= (mylist[j][1] * 2)):
	            mylist[j][1] -= (mylist[i][0] // 2)
	            i += 1
	        else:
	            mylist[i][0] -= (mylist[j][1] * 2)
	            mylist[j][1] = 0
	    j += 1
	if (((mylist[2][1] + mylist[1][1]) + mylist[0][1]) > 0):
	    print('No')
	else:
	    print('Yes')
"
3278797,29292588,"n = int(input())


def happy(n):
    numbers = [0] * 10
    while n != 0:
        mod = n % 10
        numbers[mod] += 1
        n //= 10
    count = 0
    for i in range(1, 10):
        if numbers[i] > 0:
            count += numbers[i]
            if count > 1:
                return False
                break
    return True


def isHappy(n):
    if len(str(n)) == 1:
        return 1
    if happy(n) == True:
        return 10 ** (len(str(n)) - 1)
    else:
        return 10 ** (len(str(n)) - 1) - n % (10 ** (len(str(n)) - 1))

print(isHappy(n))",105783,4528,77,8/8/17 22:25,55,2837,1,8,"[(True, '1', '1', 239696), (True, '99', '99', 239697), (True, '1000', '1000', 239698), (True, '1', '1', 239699), (True, '10', '10', 239700), (True, '1', '1', 239701), (True, '100000000', '100000000', 239702), (True, '100000000', '100000000', 239703), (True, '1', '1', 239704), (True, '1000000000', '1000000000', 239705), (True, '1', '1', 239706), (True, '99999999', '99999999', 239707), (True, '340', '340', 239708), (True, '9', '9', 239709), (True, '99999999', '99999999', 239710), (True, '7089', '7089', 239711), (True, '9', '9', 239712), (True, '59697990', '59697990', 239713), (True, '9', '9', 239714), (True, '99', '99', 239715), (True, '910', '910', 239716), (True, '12345679', '12345679', 239717), (True, '96549526', '96549526', 239718), (True, '909', '909', 239719), (True, '1', '1', 239720), (True, '91', '91', 239721), (True, '10', '10', 239722), (True, '1', '1', 239723), (True, '1', '1', 239724), (True, '18', '18', 239725), (True, '1', '1', 239726), (True, '1', '1', 239727), (True, '1', '1', 239728), (True, '1', '1', 239729), (True, '1', '1', 239730), (True, '1', '1', 239731), (True, '1', '1', 239732), (True, '1', '1', 239733), (True, '1', '1', 239734), (True, '10', '10', 239735), (True, '9', '9', 239736), (True, '8', '8', 239737), (True, '7', '7', 239738), (True, '6', '6', 239739), (True, '5', '5', 239740), (True, '4', '4', 239741), (True, '3', '3', 239742), (True, '2', '2', 239743), (True, '1', '1', 239744), (True, '10', '10', 239745), (True, '9', '9', 239746), (True, '8', '8', 239747), (True, '7', '7', 239748), (True, '6', '6', 239749), (True, '5', '5', 239750), (True, '4', '4', 239751), (True, '3', '3', 239752), (True, '2', '2', 239753), (True, '1', '1', 239754), (True, '10', '10', 239755), (True, '9', '9', 239756), (True, '8', '8', 239757), (True, '7', '7', 239758), (True, '6', '6', 239759), (True, '5', '5', 239760), (True, '4', '4', 239761), (True, '3', '3', 239762), (True, '2', '2', 239763), (True, '1', '1', 239764), (True, '10', '10', 239765), (True, '9', '9', 239766), (True, '8', '8', 239767), (True, '7', '7', 239768), (True, '6', '6', 239769), (True, '5', '5', 239770), (True, '4', '4', 239771), (True, '3', '3', 239772), (True, '2', '2', 239773), (True, '1', '1', 239774), (True, '10', '10', 239775), (True, '9', '9', 239776), (True, '8', '8', 239777), (True, '7', '7', 239778), (True, '6', '6', 239779), (True, '5', '5', 239780), (True, '4', '4', 239781), (True, '3', '3', 239782), (True, '2', '2', 239783), (True, '1', '1', 239784), (True, '10', '10', 239785), (True, '9', '9', 239786), (True, '8', '8', 239787), (True, '7', '7', 239788), (True, '6', '6', 239789), (True, '5', '5', 239790), (True, '4', '4', 239791), (True, '3', '3', 239792), (True, '2', '2', 239793), (True, '1', '1', 239794), (True, '10', '10', 239795), (True, '9', '9', 239796), (True, '8', '8', 239797), (True, '7', '7', 239798), (True, '6', '6', 239799), (True, '5', '5', 239800), (True, '4', '4', 239801), (True, '3', '3', 239802), (True, '2', '2', 239803), (True, '1', '1', 239804), (True, '10', '10', 239805), (True, '9', '9', 239806), (True, '8', '8', 239807), (True, '7', '7', 239808), (True, '6', '6', 239809), (True, '5', '5', 239810), (True, '4', '4', 239811), (True, '3', '3', 239812), (True, '2', '2', 239813), (True, '1', '1', 239814), (True, '10', '10', 239815), (True, '9', '9', 239816), (True, '8', '8', 239817), (True, '7', '7', 239818), (True, '6', '6', 239819), (True, '5', '5', 239820), (True, '4', '4', 239821), (True, '3', '3', 239822), (True, '2', '2', 239823), (True, '1', '1', 239824), (True, '100', '100', 239825), (True, '100', '100', 239826), (True, '100', '100', 239827), (True, '1000', '1000', 239828), (True, '1000', '1000', 239829), (True, '1000', '1000', 239830), (True, '10000', '10000', 239831), (True, '10000', '10000', 239832), (True, '99', '99', 239833), (True, '90', '90', 239834), (True, '999', '999', 239835), (True, '900', '900', 239836), (True, '990', '990', 239837), (True, '9990', '9990', 239838), (True, '9900', '9900', 239839), (True, '98', '98', 239840), (True, '80', '80', 239841), (True, '998', '998', 239842), (True, '800', '800', 239843), (True, '980', '980', 239844), (True, '9980', '9980', 239845), (True, '9800', '9800', 239846), (True, '92', '92', 239847), (True, '20', '20', 239848), (True, '992', '992', 239849), (True, '200', '200', 239850), (True, '920', '920', 239851), (True, '9920', '9920', 239852), (True, '9200', '9200', 239853), (True, '91', '91', 239854), (True, '10', '10', 239855), (True, '991', '991', 239856), (True, '100', '100', 239857), (True, '910', '910', 239858), (True, '9910', '9910', 239859), (True, '9100', '9100', 239860), (True, '100', '100', 239861), (True, '100', '100', 239862), (True, '1000', '1000', 239863), (True, '1000', '1000', 239864), (True, '1000', '1000', 239865), (True, '10000', '10000', 239866), (True, '10000', '10000', 239867), (True, '99', '99', 239868), (True, '90', '90', 239869), (True, '999', '999', 239870), (True, '900', '900', 239871), (True, '990', '990', 239872), (True, '9990', '9990', 239873), (True, '9900', '9900', 239874), (True, '98', '98', 239875), (True, '80', '80', 239876), (True, '998', '998', 239877), (True, '800', '800', 239878), (True, '980', '980', 239879), (True, '9980', '9980', 239880), (True, '9800', '9800', 239881), (True, '92', '92', 239882), (True, '20', '20', 239883), (True, '992', '992', 239884), (True, '200', '200', 239885), (True, '920', '920', 239886), (True, '9920', '9920', 239887), (True, '9200', '9200', 239888), (True, '91', '91', 239889), (True, '10', '10', 239890), (True, '991', '991', 239891), (True, '100', '100', 239892), (True, '910', '910', 239893), (True, '9910', '9910', 239894), (True, '9100', '9100', 239895), (True, '100', '100', 239896), (True, '100', '100', 239897), (True, '1000', '1000', 239898), (True, '1000', '1000', 239899), (True, '1000', '1000', 239900), (True, '10000', '10000', 239901), (True, '10000', '10000', 239902), (True, '99', '99', 239903), (True, '90', '90', 239904), (True, '999', '999', 239905), (True, '900', '900', 239906), (True, '990', '990', 239907), (True, '9990', '9990', 239908), (True, '9900', '9900', 239909), (True, '98', '98', 239910), (True, '80', '80', 239911), (True, '998', '998', 239912), (True, '800', '800', 239913), (True, '980', '980', 239914), (True, '9980', '9980', 239915), (True, '9800', '9800', 239916), (True, '92', '92', 239917), (True, '20', '20', 239918), (True, '992', '992', 239919), (True, '200', '200', 239920), (True, '920', '920', 239921), (True, '9920', '9920', 239922), (True, '9200', '9200', 239923), (True, '91', '91', 239924), (True, '10', '10', 239925), (True, '991', '991', 239926), (True, '100', '100', 239927), (True, '910', '910', 239928), (True, '9910', '9910', 239929), (True, '9100', '9100', 239930), (True, '100', '100', 239931), (True, '100', '100', 239932), (True, '1000', '1000', 239933), (True, '1000', '1000', 239934), (True, '1000', '1000', 239935), (True, '10000', '10000', 239936), (True, '10000', '10000', 239937), (True, '99', '99', 239938), (True, '90', '90', 239939), (True, '999', '999', 239940), (True, '900', '900', 239941), (True, '990', '990', 239942), (True, '9990', '9990', 239943), (True, '9900', '9900', 239944), (True, '98', '98', 239945), (True, '80', '80', 239946), (True, '998', '998', 239947), (True, '800', '800', 239948), (True, '980', '980', 239949), (True, '9980', '9980', 239950), (True, '9800', '9800', 239951), (True, '92', '92', 239952), (True, '20', '20', 239953), (True, '992', '992', 239954), (True, '200', '200', 239955), (True, '920', '920', 239956), (True, '9920', '9920', 239957), (True, '9200', '9200', 239958), (True, '91', '91', 239959), (True, '10', '10', 239960), (True, '991', '991', 239961), (True, '100', '100', 239962), (True, '910', '910', 239963), (True, '9910', '9910', 239964), (True, '9100', '9100', 239965), (True, '7348759', '7348759', 239966)]",True,Accecpted,0.907260968270364,0.9828009828009828,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	
	def happy(n):
	    numbers = ([0] * 10)
	    while (n != 0):
	        mod = (n % 10)
	        numbers[mod] += 1
	        n //= 10
	    count = 0
	    for i in range(1, 10):
	        if (numbers[i] > 0):
	            count += numbers[i]
	            if (count > 1):
	                return False
	                break
	    return True
	
	def isHappy(n):
	    if (len(str(n)) == 1):
	        return 1
	    if (happy(n) == True):
	        return (10 ** (len(str(n)) - 1))
	    else:
	        return ((10 ** (len(str(n)) - 1)) - (n % (10 ** (len(str(n)) - 1))))
	print(isHappy(n))
"
3278796,29292417,"n = int(input())


def happy(n):
    numbers = [0] * 10
    while n != 0:
        mod = n % 10
        numbers[mod] += 1
        n //= 10
    count = 0
    for i in range(1, 10):
        if numbers[i] > 0:
            count += len(str(numbers[i]))
            if count > 1:
                return False
                break
    return True


def isHappy(n):
    if len(str(n)) == 1:
        return 1
    if happy(n) == True:
        return 10 ** (len(str(n)) - 1)
    else:
        return 10 ** (len(str(n)) - 1) - n % (len(str(n)) - 1)


print(isHappy(n))",105783,4516,61,8/8/17 22:11,57,2837,2,8,"[(True, '1', '1', 239696), (True, '99', '99', 239697), (True, '1000', '1000', 239698), (True, '1', '1', 239699), (True, '10', '10', 239700), (True, '1', '1', 239701), (True, '100000000', '100000000', 239702), (True, '100000000', '100000000', 239703), (False, '100000000', '1', 239704), (True, '1000000000', '1000000000', 239705), (False, '1000000', '1', 239706), (False, '100000000', '99999999', 239707), (False, '1000', '340', 239708), (False, '10', '9', 239709), (True, '99999999', '99999999', 239710), (False, '9997', '7089', 239711), (False, '10', '9', 239712), (False, '99999998', '59697990', 239713), (False, '10', '9', 239714), (False, '100', '99', 239715), (False, '999', '910', 239716), (False, '99999999', '12345679', 239717), (False, '99999998', '96549526', 239718), (False, '998', '909', 239719), (False, '10', '1', 239720), (False, '99', '91', 239721), (False, '100', '10', 239722), (False, '10', '1', 239723), (True, '1', '1', 239724), (False, '100', '18', 239725), (True, '1', '1', 239726), (True, '1', '1', 239727), (True, '1', '1', 239728), (True, '1', '1', 239729), (True, '1', '1', 239730), (True, '1', '1', 239731), (True, '1', '1', 239732), (True, '1', '1', 239733), (True, '1', '1', 239734), (True, '10', '10', 239735), (False, '10', '9', 239736), (False, '10', '8', 239737), (False, '10', '7', 239738), (False, '10', '6', 239739), (False, '10', '5', 239740), (False, '10', '4', 239741), (False, '10', '3', 239742), (False, '10', '2', 239743), (False, '10', '1', 239744), (True, '10', '10', 239745), (False, '10', '9', 239746), (False, '10', '8', 239747), (False, '10', '7', 239748), (False, '10', '6', 239749), (False, '10', '5', 239750), (False, '10', '4', 239751), (False, '10', '3', 239752), (False, '10', '2', 239753), (False, '10', '1', 239754), (True, '10', '10', 239755), (False, '10', '9', 239756), (False, '10', '8', 239757), (False, '10', '7', 239758), (False, '10', '6', 239759), (False, '10', '5', 239760), (False, '10', '4', 239761), (False, '10', '3', 239762), (False, '10', '2', 239763), (False, '10', '1', 239764), (True, '10', '10', 239765), (False, '10', '9', 239766), (False, '10', '8', 239767), (False, '10', '7', 239768), (False, '10', '6', 239769), (False, '10', '5', 239770), (False, '10', '4', 239771), (False, '10', '3', 239772), (False, '10', '2', 239773), (False, '10', '1', 239774), (True, '10', '10', 239775), (False, '10', '9', 239776), (False, '10', '8', 239777), (False, '10', '7', 239778), (False, '10', '6', 239779), (False, '10', '5', 239780), (False, '10', '4', 239781), (False, '10', '3', 239782), (False, '10', '2', 239783), (False, '10', '1', 239784), (True, '10', '10', 239785), (False, '10', '9', 239786), (False, '10', '8', 239787), (False, '10', '7', 239788), (False, '10', '6', 239789), (False, '10', '5', 239790), (False, '10', '4', 239791), (False, '10', '3', 239792), (False, '10', '2', 239793), (False, '10', '1', 239794), (True, '10', '10', 239795), (False, '10', '9', 239796), (False, '10', '8', 239797), (False, '10', '7', 239798), (False, '10', '6', 239799), (False, '10', '5', 239800), (False, '10', '4', 239801), (False, '10', '3', 239802), (False, '10', '2', 239803), (False, '10', '1', 239804), (True, '10', '10', 239805), (False, '10', '9', 239806), (False, '10', '8', 239807), (False, '10', '7', 239808), (False, '10', '6', 239809), (False, '10', '5', 239810), (False, '10', '4', 239811), (False, '10', '3', 239812), (False, '10', '2', 239813), (False, '10', '1', 239814), (True, '10', '10', 239815), (False, '10', '9', 239816), (False, '10', '8', 239817), (False, '10', '7', 239818), (False, '10', '6', 239819), (False, '10', '5', 239820), (False, '10', '4', 239821), (False, '10', '3', 239822), (False, '10', '2', 239823), (False, '10', '1', 239824), (True, '100', '100', 239825), (True, '100', '100', 239826), (True, '100', '100', 239827), (True, '1000', '1000', 239828), (True, '1000', '1000', 239829), (True, '1000', '1000', 239830), (True, '10000', '10000', 239831), (True, '10000', '10000', 239832), (False, '100', '99', 239833), (False, '100', '90', 239834), (False, '1000', '999', 239835), (False, '1000', '900', 239836), (False, '1000', '990', 239837), (False, '10000', '9990', 239838), (False, '10000', '9900', 239839), (False, '100', '98', 239840), (False, '100', '80', 239841), (False, '1000', '998', 239842), (False, '1000', '800', 239843), (False, '1000', '980', 239844), (False, '10000', '9980', 239845), (False, '10000', '9800', 239846), (False, '100', '92', 239847), (False, '100', '20', 239848), (False, '1000', '992', 239849), (False, '1000', '200', 239850), (False, '1000', '920', 239851), (False, '10000', '9920', 239852), (False, '10000', '9200', 239853), (False, '99', '91', 239854), (False, '100', '10', 239855), (False, '999', '991', 239856), (False, '999', '100', 239857), (False, '999', '910', 239858), (False, '9998', '9910', 239859), (False, '10000', '9100', 239860), (True, '100', '100', 239861), (True, '100', '100', 239862), (True, '1000', '1000', 239863), (True, '1000', '1000', 239864), (True, '1000', '1000', 239865), (True, '10000', '10000', 239866), (True, '10000', '10000', 239867), (True, '99', '99', 239868), (False, '100', '90', 239869), (False, '1000', '999', 239870), (False, '1000', '900', 239871), (False, '1000', '990', 239872), (False, '9998', '9990', 239873), (False, '10000', '9900', 239874), (False, '100', '98', 239875), (False, '100', '80', 239876), (False, '1000', '998', 239877), (False, '1000', '800', 239878), (False, '1000', '980', 239879), (False, '10000', '9980', 239880), (False, '10000', '9800', 239881), (False, '100', '92', 239882), (False, '100', '20', 239883), (False, '999', '992', 239884), (False, '999', '200', 239885), (False, '999', '920', 239886), (False, '10000', '9920', 239887), (False, '10000', '9200', 239888), (False, '99', '91', 239889), (False, '100', '10', 239890), (False, '998', '991', 239891), (False, '998', '100', 239892), (False, '998', '910', 239893), (False, '9998', '9910', 239894), (False, '10000', '9100', 239895), (True, '100', '100', 239896), (True, '100', '100', 239897), (True, '1000', '1000', 239898), (True, '1000', '1000', 239899), (True, '1000', '1000', 239900), (True, '10000', '10000', 239901), (True, '10000', '10000', 239902), (True, '99', '99', 239903), (False, '100', '90', 239904), (False, '1000', '999', 239905), (False, '1000', '900', 239906), (False, '1000', '990', 239907), (False, '9998', '9990', 239908), (False, '10000', '9900', 239909), (False, '100', '98', 239910), (False, '100', '80', 239911), (False, '999', '998', 239912), (False, '999', '800', 239913), (False, '999', '980', 239914), (False, '10000', '9980', 239915), (False, '10000', '9800', 239916), (False, '100', '92', 239917), (False, '100', '20', 239918), (False, '1000', '992', 239919), (False, '1000', '200', 239920), (False, '1000', '920', 239921), (False, '10000', '9920', 239922), (False, '10000', '9200', 239923), (False, '99', '91', 239924), (False, '100', '10', 239925), (False, '998', '991', 239926), (False, '998', '100', 239927), (False, '998', '910', 239928), (False, '9998', '9910', 239929), (False, '10000', '9100', 239930), (True, '100', '100', 239931), (True, '100', '100', 239932), (True, '1000', '1000', 239933), (True, '1000', '1000', 239934), (True, '1000', '1000', 239935), (True, '10000', '10000', 239936), (True, '10000', '10000', 239937), (True, '99', '99', 239938), (False, '100', '90', 239939), (True, '999', '999', 239940), (False, '999', '900', 239941), (False, '999', '990', 239942), (False, '9998', '9990', 239943), (False, '10000', '9900', 239944), (False, '100', '98', 239945), (False, '100', '80', 239946), (True, '998', '998', 239947), (False, '998', '800', 239948), (False, '998', '980', 239949), (False, '10000', '9980', 239950), (False, '10000', '9800', 239951), (False, '100', '92', 239952), (False, '100', '20', 239953), (False, '998', '992', 239954), (False, '998', '200', 239955), (False, '998', '920', 239956), (False, '10000', '9920', 239957), (False, '10000', '9200', 239958), (False, '100', '91', 239959), (False, '100', '10', 239960), (False, '1000', '991', 239961), (False, '1000', '100', 239962), (False, '1000', '910', 239963), (False, '10000', '9910', 239964), (False, '10000', '9100', 239965), (False, '9999996', '7348759', 239966)]",False,Wrong Answer,0.907260968270364,0.9828009828009828,False,0.7675276752767528,False,"def func(*args):
	
	n = int(args[0])
	
	def happy(n):
	    numbers = ([0] * 10)
	    while (n != 0):
	        mod = (n % 10)
	        numbers[mod] += 1
	        n //= 10
	    count = 0
	    for i in range(1, 10):
	        if (numbers[i] > 0):
	            count += len(str(numbers[i]))
	            if (count > 1):
	                return False
	                break
	    return True
	
	def isHappy(n):
	    if (len(str(n)) == 1):
	        return 1
	    if (happy(n) == True):
	        return (10 ** (len(str(n)) - 1))
	    else:
	        return ((10 ** (len(str(n)) - 1)) - (n % (len(str(n)) - 1)))
	print(isHappy(n))
"
312601,28371410,"def f(n):
    res = 1
    for i in range(1,n+1):
        res *= i
    return res


def choose(n, k):
    return f(n) // (f(k) * f(n - k))

N = int(input())
print(int(choose(N, 5) + choose(N, 6) + choose(N, 7)))",5186,5456,61,7/8/17 17:34,23,264,1,8,"[(True, '29', '29', 70211), (True, '92', '92', 70212), (True, '246', '246', 70213), (True, '582', '582', 70214), (True, '66715035255088', '66715035255088', 70215), (True, '7147161340917624', '7147161340917624', 70216), (True, '11292070960994226', '11292070960994226', 70217), (True, '16017044425409540', '16017044425409540', 70218), (True, '33019955679376860', '33019955679376860', 70219), (True, '33319741730082870', '33319741730082870', 70220)]",True,Accecpted,0.8207515273873133,0.9827586206896552,False,0.0,False,"def func(*args):
	
	
	def f(n):
	    res = 1
	    for i in range(1, (n + 1)):
	        res *= i
	    return res
	
	def choose(n, k):
	    return (f(n) // (f(k) * f((n - k))))
	N = int(args[0])
	print(int(((choose(N, 5) + choose(N, 6)) + choose(N, 7))))
"
3044805,26441024,"def sz(n):
    if n < 2:
        return 1
    return 2 * sz(n // 2) + 1

def f(n, l, r):
    if l > r or n == 0:
        return 0
    if n == 1:
        return 1
    x = sz(n // 2)
    md = 0
    if l <= x + 1 <= r:
        md = n % 2
    return md + f(n // 2, l, min(r, x)) + f(n // 2, max(1, l - (x + 1)), r - (x + 1))

n, l, r = map(int, input().split())
print(f(n, l, r))",3645,5436,171,4/17/17 1:04,35,2596,1,8,"[(True, '4', '4', 222389), (True, '5', '5', 222390), (True, '20', '20', 222391), (True, '67', '67', 222392), (True, '78355', '78355', 222393), (True, '22239', '22239', 222394), (True, '42439', '42439', 222395), (True, '16565', '16565', 222396), (True, '336', '336', 222397), (True, '2124', '2124', 222398), (True, '311', '311', 222399), (True, '13253', '13253', 222400), (True, '88609', '88609', 222401), (True, '73585', '73585', 222402), (True, '64965', '64965', 222403), (True, '41868', '41868', 222404), (True, '36004', '36004', 222405), (True, '44142', '44142', 222406), (True, '69369', '69369', 222407), (True, '2618', '2618', 222408), (True, '80707', '80707', 222409), (True, '47105', '47105', 222410), (True, '46933', '46933', 222411), (True, '0', '0', 222412), (True, '1', '1', 222413), (True, '2', '2', 222414), (True, '5', '5', 222415), (True, '100001', '100001', 222416), (True, '100001', '100001', 222417), (True, '1000', '1000', 222418), (True, '1', '1', 222419), (True, '0', '0', 222420), (True, '1', '1', 222421)]",True,Accecpted,0.926048750034305,0.9827586206896552,False,0.0,False,"def func(*args):
	
	
	def sz(n):
	    if (n < 2):
	        return 1
	    return ((2 * sz((n // 2))) + 1)
	
	def f(n, l, r):
	    if ((l > r) or (n == 0)):
	        return 0
	    if (n == 1):
	        return 1
	    x = sz((n // 2))
	    md = 0
	    if (l <= (x + 1) <= r):
	        md = (n % 2)
	    return ((md + f((n // 2), l, min(r, x))) + f((n // 2), max(1, (l - (x + 1))), (r - (x + 1))))
	(n, l, r) = map(int, args[0].split())
	print(f(n, l, r))
"
3044804,26441009,"def sz(n):
    if n < 2:
        return 1
    return 2 * sz(n // 2) + 1

def f(n, l, r):
    if l > r:
        return 0
    if n == 1:
        return 1
    x = sz(n // 2)
    md = 0
    if l <= x + 1 <= r:
        md = n % 2
    return md + f(n // 2, l, min(r, x)) + f(n // 2, max(1, l - (x + 1)), r - (x + 1))    

n, l, r = map(int, input().split())
print(f(n, l, r))",3645,5436,202,4/17/17 1:03,35,2596,5,8,"[(True, '4', '4', 222389), (True, '5', '5', 222390), (True, '20', '20', 222391), (True, '67', '67', 222392), (True, '78355', '78355', 222393), (True, '22239', '22239', 222394), (True, '42439', '42439', 222395), (True, '16565', '16565', 222396), (True, '336', '336', 222397), (True, '2124', '2124', 222398), (True, '311', '311', 222399), (True, '13253', '13253', 222400), (True, '88609', '88609', 222401), (True, '73585', '73585', 222402), (True, '64965', '64965', 222403), (True, '41868', '41868', 222404), (True, '36004', '36004', 222405), (True, '44142', '44142', 222406), (True, '69369', '69369', 222407), (True, '2618', '2618', 222408), (True, '80707', '80707', 222409), (True, '47105', '47105', 222410), (True, '46933', '46933', 222411), (False, '', '0', 222412), (True, '1', '1', 222413), (True, '2', '2', 222414), (True, '5', '5', 222415), (True, '100001', '100001', 222416), (True, '100001', '100001', 222417), (True, '1000', '1000', 222418), (True, '1', '1', 222419), (True, '0', '0', 222420), (True, '1', '1', 222421)]",False,Runtime Error,0.926048750034305,0.9827586206896552,False,0.0303030303030303,False,"def func(*args):
	
	
	def sz(n):
	    if (n < 2):
	        return 1
	    return ((2 * sz((n // 2))) + 1)
	
	def f(n, l, r):
	    if (l > r):
	        return 0
	    if (n == 1):
	        return 1
	    x = sz((n // 2))
	    md = 0
	    if (l <= (x + 1) <= r):
	        md = (n % 2)
	    return ((md + f((n // 2), l, min(r, x))) + f((n // 2), max(1, (l - (x + 1))), (r - (x + 1))))
	(n, l, r) = map(int, args[0].split())
	print(f(n, l, r))
"
119976,24187181,"# 599A
# θ(1) time
# θ(1) space

__author__ = 'artyom'


# SOLUTION

def main():
    d1, d2, d3 = read(3)
    return min(2 * (d1 + d2), d1 + d2 + d3)


# HELPERS


def read(mode=1, size=None):
    # 0: String
    # 1: Integer
    # 2: List of strings
    # 3: List of integers
    # 4: Matrix of integers
    if mode == 0: return input().strip()
    if mode == 1: return int(input().strip())
    if mode == 2: return input().strip().split()
    if mode == 3: return list(map(int, input().strip().split()))
    a = []
    for _ in range(size):
        a.append(read(3))
    return a


def write(s=""\n""):
    if s is None: s = ''
    if isinstance(s, tuple) or isinstance(s, list): s = ' '.join(map(str, s))
    s = str(s)
    print(s, end=""\n"")


res = main()
write(res)",227,4500,46,1/27/17 15:48,83,102,2,8,"[(True, '60', '60', 55884), (True, '4', '4', 55885), (False, '167', '134', 55886), (True, '2331', '2331', 55887), (True, '8', '8', 55888), (True, '92', '92', 55889), (True, '203802', '203802', 55890), (False, '127520897', '55041796', 55891), (False, '293554', '12', 55892), (True, '543828', '543828', 55893), (True, '305580', '305580', 55894), (False, '13552', '7326', 55895), (True, '601800', '601800', 55896), (True, '955428', '955428', 55897), (True, '54676', '54676', 55898), (True, '2836', '2836', 55899), (True, '243848', '243848', 55900), (True, '300000000', '300000000', 55901), (False, '9', '8', 55902), (False, '1002', '4', 55903), (False, '100000002', '4', 55904)]",False,Wrong Answer,0.9089981644434352,0.9826789838337182,False,0.3333333333333333,False,"def func(*args):
	
	__author__ = 'artyom'
	
	def main():
	    (d1, d2, d3) = read(3)
	    return min((2 * (d1 + d2)), ((d1 + d2) + d3))
	
	def read(mode=1, size=None):
	    if (mode == 0):
	        return args[0].strip()
	    if (mode == 1):
	        return int(args[1].strip())
	    if (mode == 2):
	        return args[2].strip().split()
	    if (mode == 3):
	        return list(map(int, args[3].strip().split()))
	    a = []
	    for _ in range(size):
	        a.append(read(3))
	    return a
	
	def write(s='\n'):
	    if (s is None):
	        s = ''
	    if (isinstance(s, tuple) or isinstance(s, list)):
	        s = ' '.join(map(str, s))
	    s = str(s)
	    print(s, end='\n')
	res = main()
	write(res)
"
119977,24187250,"# 599A
# θ(1) time
# θ(1) space

__author__ = 'artyom'


# SOLUTION

def main():
    d1, d2, d3 = read(3)
    return min(2 * (d1 + d2), 2 * (d1 + d3), 2 * (d2 + d3), d1 + d2 + d3)


# HELPERS


def read(mode=1, size=None):
    # 0: String
    # 1: Integer
    # 2: List of strings
    # 3: List of integers
    # 4: Matrix of integers
    if mode == 0: return input().strip()
    if mode == 1: return int(input().strip())
    if mode == 2: return input().strip().split()
    if mode == 3: return list(map(int, input().strip().split()))
    a = []
    for _ in range(size):
        a.append(read(3))
    return a


def write(s=""\n""):
    if s is None: s = ''
    if isinstance(s, tuple) or isinstance(s, list): s = ' '.join(map(str, s))
    s = str(s)
    print(s, end=""\n"")


res = main()
write(res)",227,4488,93,1/27/17 15:52,83,102,1,8,"[(True, '60', '60', 55884), (True, '4', '4', 55885), (True, '134', '134', 55886), (True, '2331', '2331', 55887), (True, '8', '8', 55888), (True, '92', '92', 55889), (True, '203802', '203802', 55890), (True, '55041796', '55041796', 55891), (True, '12', '12', 55892), (True, '543828', '543828', 55893), (True, '305580', '305580', 55894), (True, '7326', '7326', 55895), (True, '601800', '601800', 55896), (True, '955428', '955428', 55897), (True, '54676', '54676', 55898), (True, '2836', '2836', 55899), (True, '243848', '243848', 55900), (True, '300000000', '300000000', 55901), (True, '8', '8', 55902), (True, '4', '4', 55903), (True, '4', '4', 55904)]",True,Accecpted,0.9089981644434352,0.9826789838337182,False,0.0,False,"def func(*args):
	
	__author__ = 'artyom'
	
	def main():
	    (d1, d2, d3) = read(3)
	    return min((2 * (d1 + d2)), (2 * (d1 + d3)), (2 * (d2 + d3)), ((d1 + d2) + d3))
	
	def read(mode=1, size=None):
	    if (mode == 0):
	        return args[0].strip()
	    if (mode == 1):
	        return int(args[1].strip())
	    if (mode == 2):
	        return args[2].strip().split()
	    if (mode == 3):
	        return list(map(int, args[3].strip().split()))
	    a = []
	    for _ in range(size):
	        a.append(read(3))
	    return a
	
	def write(s='\n'):
	    if (s is None):
	        s = ''
	    if (isinstance(s, tuple) or isinstance(s, list)):
	        s = ' '.join(map(str, s))
	    s = str(s)
	    print(s, end='\n')
	res = main()
	write(res)
"
1070674,29264218,"n,m,a = map(int, input().split())
s = n / a
q = m / a

if s % 1 > 0:
    s = int(s + 1)
if q % 1 > 0:
    q = int(q + 1)
print(int(s * q))",54164,4516,46,8/7/17 15:08,9,994,1,8,"[(True, '4', '4', 127509), (True, '1', '1', 127510), (True, '2', '2', 127511), (True, '2', '2', 127512), (True, '4', '4', 127513), (True, '1', '1', 127514), (True, '1', '1', 127515), (True, '1', '1', 127516), (True, '1000000000000000000', '1000000000000000000', 127517), (True, '12', '12', 127518), (True, '3015', '3015', 127519), (True, '10000', '10000', 127520), (True, '10100', '10100', 127521), (True, '1', '1', 127522), (True, '1', '1', 127523), (True, '4', '4', 127524), (True, '27126743055556', '27126743055556', 127525), (True, '987654321000000000', '987654321000000000', 127526), (True, '175618850864484', '175618850864484', 127527), (True, '3295710', '3295710', 127528)]",True,Accecpted,0.9262485672653988,0.9825783972125436,False,0.0,False,"def func(*args):
	
	(n, m, a) = map(int, args[0].split())
	s = (n / a)
	q = (m / a)
	if ((s % 1) > 0):
	    s = int((s + 1))
	if ((q % 1) > 0):
	    q = int((q + 1))
	print(int((s * q)))
"
1070673,29264183,"n,m,a = map(int, input().split())
s = n / a
q = m / a

if s % 1 > 0:
    s = int(s + 1)
if q % 1 > 0:
    q = int(q + 1)
print(s * q)",54164,4504,62,8/7/17 15:06,9,994,2,8,"[(True, '4', '4', 127509), (False, '1.0', '1', 127510), (False, '2.0', '2', 127511), (False, '2.0', '2', 127512), (False, '4.0', '4', 127513), (False, '1.0', '1', 127514), (True, '1', '1', 127515), (True, '1', '1', 127516), (False, '1e+18', '1000000000000000000', 127517), (False, '12.0', '12', 127518), (True, '3015', '3015', 127519), (False, '10000.0', '10000', 127520), (False, '10100.0', '10100', 127521), (True, '1', '1', 127522), (False, '1.0', '1', 127523), (True, '4', '4', 127524), (True, '27126743055556', '27126743055556', 127525), (False, '9.87654321e+17', '987654321000000000', 127526), (True, '175618850864484', '175618850864484', 127527), (False, '3295710.0', '3295710', 127528)]",False,Wrong Answer,0.9262485672653988,0.9825783972125436,False,0.6,False,"def func(*args):
	
	(n, m, a) = map(int, args[0].split())
	s = (n / a)
	q = (m / a)
	if ((s % 1) > 0):
	    s = int((s + 1))
	if ((q % 1) > 0):
	    q = int((q + 1))
	print((s * q))
"
1147734,28664403,"n = int(input())
a = n // 7
for x in range(a + 1):
    if (n - x * 7) % 4 == 0:
        print(""4"" * ((n - x * 7) // 4) + ""7"" * x)
        break
else:
    print(-1)",1633,4528,92,7/18/17 12:57,8,1053,2,8,"[(True, '47', '47', 130501), (True, '-1', '-1', 130502), (False, '4444444444444444', '4477777777', 130503), (True, '-1', '-1', 130504), (True, '4', '4', 130505), (True, '7', '7', 130506), (True, '444', '444', 130507), (False, '44444444447', '44477777', 130509), (False, '4444444444444444444444444', '4444777777777777', 130510), (False, '4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444', '7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', 130511), (False, '44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444777', '44447777777777777777777777777777777777777777777777777777777777777777777', 130512), (False, '444444444444444444444444447', '444447777777777777', 130513), (False, '4444444444444444777', '4477777777777', 130514), (False, '444444444444444444444444477', '444477777777777777', 130515), (False, '444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444477', '444777777777777777777777777777777777777777777777777777777777777777777', 130516), (False, '44444444444444477', '47777777777', 130517), (False, '4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444', '4444477777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', 130518), (False, '4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444', '4444777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', 130519), (False, '444444444444444444444444444444444444444444477', '477777777777777777777777777', 130524), (True, '-1', '-1', 130540), (True, '-1', '-1', 130541), (True, '-1', '-1', 130542), (True, '44', '44', 130543), (True, '-1', '-1', 130544), (True, '-1', '-1', 130545)]",False,Wrong Answer,0.8815741981066073,0.9825581395348836,False,0.52,False,"def func(*args):
	
	n = int(args[0])
	a = (n // 7)
	for x in range((a + 1)):
	    if (((n - (x * 7)) % 4) == 0):
	        print((('4' * ((n - (x * 7)) // 4)) + ('7' * x)))
	        break
	else:
	    print((- 1))
"
1147735,28664462,"n = int(input())
a = n // 7
for x in range(a, -1, -1):
    if (n - x * 7) % 4 == 0:
        print(""4"" * ((n - x * 7) // 4) + ""7"" * x)
        break
else:
    print(-1)",1633,4808,124,7/18/17 13:00,8,1053,1,8,"[(True, '47', '47', 130501), (True, '-1', '-1', 130502), (True, '4477777777', '4477777777', 130503), (True, '-1', '-1', 130504), (True, '4', '4', 130505), (True, '7', '7', 130506), (True, '444', '444', 130507), (True, '44477777', '44477777', 130509), (True, '4444777777777777', '4444777777777777', 130510), (True, '7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', '7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', 130511), (True, '44447777777777777777777777777777777777777777777777777777777777777777777', '44447777777777777777777777777777777777777777777777777777777777777777777', 130512), (True, '444447777777777777', '444447777777777777', 130513), (True, '4477777777777', '4477777777777', 130514), (True, '444477777777777777', '444477777777777777', 130515), (True, '444777777777777777777777777777777777777777777777777777777777777777777', '444777777777777777777777777777777777777777777777777777777777777777777', 130516), (True, '47777777777', '47777777777', 130517), (True, '4444477777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', '4444477777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', 130518), (True, '4444777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', '4444777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', 130519), (True, '477777777777777777777777777', '477777777777777777777777777', 130524), (True, '-1', '-1', 130540), (True, '-1', '-1', 130541), (True, '-1', '-1', 130542), (True, '44', '44', 130543), (True, '-1', '-1', 130544), (True, '-1', '-1', 130545)]",True,Accecpted,0.8815741981066073,0.9825581395348836,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	a = (n // 7)
	for x in range(a, (- 1), (- 1)):
	    if (((n - (x * 7)) % 4) == 0):
	        print((('4' * ((n - (x * 7)) // 4)) + ('7' * x)))
	        break
	else:
	    print((- 1))
"
3003814,27933269,"a = input()
print(['NO','YES']['0'*7 in a or '1'*7 in a])",61866,5444,124,6/21/17 1:32,2,2555,1,8,"[(True, 'NO', 'NO', 219615), (True, 'YES', 'YES', 219616), (True, 'YES', 'YES', 219617), (True, 'YES', 'YES', 219618), (True, 'NO', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (True, 'YES', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (True, 'NO', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (True, 'NO', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (True, 'YES', 'YES', 219634), (True, 'NO', 'NO', 219635), (True, 'NO', 'NO', 219636), (True, 'YES', 'YES', 219637), (True, 'NO', 'NO', 219638), (True, 'NO', 'NO', 219639), (True, 'YES', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (True, 'YES', 'YES', 219645), (True, 'NO', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (True, 'NO', 'NO', 219649), (True, 'YES', 'YES', 219650), (True, 'YES', 'YES', 219651), (True, 'YES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (True, 'YES', 'YES', 219655), (True, 'YES', 'YES', 219656), (True, 'YES', 'YES', 219657), (True, 'YES', 'YES', 219658)]",True,Accecpted,0.7071067811865475,0.9824561403508772,False,0.0,False,"def func(*args):
	
	a = args[0]
	print(['NO', 'YES'][((('0' * 7) in a) or (('1' * 7) in a))])
"
2955097,24484028,"l = input().split()
n=0
for i in range(len(l)):
    l[i] = int(l[i])
    if (l[i])>n:
        n=(l[i])
a=(6-n)+1
if a==1:
    print('1/6')
if a==2:
    print('1/3')
if a==3:
    print('1/2')
if a==4:
    print('2/3')
if a==5:
    print('5/6')
if a==6:
    print(('1/1'))",9162,4512,124,2/7/17 11:32,19,2520,1,8,"[(True, '1/2', '1/2', 218095), (True, '1/1', '1/1', 218096), (True, '5/6', '5/6', 218097), (True, '2/3', '2/3', 218098), (True, '1/2', '1/2', 218099), (True, '1/3', '1/3', 218100), (True, '1/6', '1/6', 218101), (True, '5/6', '5/6', 218102), (True, '5/6', '5/6', 218103), (True, '2/3', '2/3', 218104), (True, '1/2', '1/2', 218105), (True, '1/3', '1/3', 218106), (True, '1/6', '1/6', 218107), (True, '2/3', '2/3', 218108), (True, '2/3', '2/3', 218109), (True, '2/3', '2/3', 218110), (True, '1/2', '1/2', 218111), (True, '1/3', '1/3', 218112), (True, '1/6', '1/6', 218113), (True, '1/2', '1/2', 218114), (True, '1/2', '1/2', 218115), (True, '1/2', '1/2', 218116), (True, '1/3', '1/3', 218117), (True, '1/6', '1/6', 218118), (True, '1/3', '1/3', 218119), (True, '1/3', '1/3', 218120), (True, '1/3', '1/3', 218121), (True, '1/3', '1/3', 218122), (True, '1/3', '1/3', 218123), (True, '1/6', '1/6', 218124), (True, '1/6', '1/6', 218125), (True, '1/6', '1/6', 218126), (True, '1/6', '1/6', 218127), (True, '1/6', '1/6', 218128), (True, '1/6', '1/6', 218129), (True, '1/6', '1/6', 218130)]",True,Accecpted,0.9682132340352988,0.9824561403508772,False,0.0,False,"def func(*args):
	
	l = args[0].split()
	n = 0
	for i in range(len(l)):
	    l[i] = int(l[i])
	    if (l[i] > n):
	        n = l[i]
	a = ((6 - n) + 1)
	if (a == 1):
	    print('1/6')
	if (a == 2):
	    print('1/3')
	if (a == 3):
	    print('1/2')
	if (a == 4):
	    print('2/3')
	if (a == 5):
	    print('5/6')
	if (a == 6):
	    print('1/1')
"
2955096,24483994,"l = input().split()
n=0
for i in range(len(l)):
    l[i] = int(l[i])
    if (l[i])>n:
        n=(l[i])
a=(6-n)+1
if a==1:
    print('1/6')
if a==2:
    print('1/3')
if a==3:
    print('1/2')
if a==4:
    print('2/3')
if a==5:
    print('5/6')
if a==6:
    print(1)",9162,4480,122,2/7/17 11:30,19,2520,2,8,"[(True, '1/2', '1/2', 218095), (False, '1', '1/1', 218096), (True, '5/6', '5/6', 218097), (True, '2/3', '2/3', 218098), (True, '1/2', '1/2', 218099), (True, '1/3', '1/3', 218100), (True, '1/6', '1/6', 218101), (True, '5/6', '5/6', 218102), (True, '5/6', '5/6', 218103), (True, '2/3', '2/3', 218104), (True, '1/2', '1/2', 218105), (True, '1/3', '1/3', 218106), (True, '1/6', '1/6', 218107), (True, '2/3', '2/3', 218108), (True, '2/3', '2/3', 218109), (True, '2/3', '2/3', 218110), (True, '1/2', '1/2', 218111), (True, '1/3', '1/3', 218112), (True, '1/6', '1/6', 218113), (True, '1/2', '1/2', 218114), (True, '1/2', '1/2', 218115), (True, '1/2', '1/2', 218116), (True, '1/3', '1/3', 218117), (True, '1/6', '1/6', 218118), (True, '1/3', '1/3', 218119), (True, '1/3', '1/3', 218120), (True, '1/3', '1/3', 218121), (True, '1/3', '1/3', 218122), (True, '1/3', '1/3', 218123), (True, '1/6', '1/6', 218124), (True, '1/6', '1/6', 218125), (True, '1/6', '1/6', 218126), (True, '1/6', '1/6', 218127), (True, '1/6', '1/6', 218128), (True, '1/6', '1/6', 218129), (True, '1/6', '1/6', 218130)]",False,Wrong Answer,0.9682132340352988,0.9824561403508772,False,0.0277777777777777,False,"def func(*args):
	
	l = args[0].split()
	n = 0
	for i in range(len(l)):
	    l[i] = int(l[i])
	    if (l[i] > n):
	        n = l[i]
	a = ((6 - n) + 1)
	if (a == 1):
	    print('1/6')
	if (a == 2):
	    print('1/3')
	if (a == 3):
	    print('1/2')
	if (a == 4):
	    print('2/3')
	if (a == 5):
	    print('5/6')
	if (a == 6):
	    print(1)
"
3003813,27933238,"a = input()
print(['NO','YES']['0'*7 in a or '1' in a])",61866,4516,92,6/21/17 1:29,2,2555,2,8,"[(False, 'YES', 'NO', 219615), (True, 'YES', 'YES', 219616), (True, 'YES', 'YES', 219617), (True, 'YES', 'YES', 219618), (False, 'YES', 'NO', 219619), (False, 'YES', 'NO', 219620), (True, 'YES', 'YES', 219621), (False, 'YES', 'NO', 219622), (True, 'YES', 'YES', 219623), (False, 'YES', 'NO', 219624), (False, 'YES', 'NO', 219625), (False, 'YES', 'NO', 219626), (True, 'YES', 'YES', 219627), (False, 'YES', 'NO', 219628), (False, 'YES', 'NO', 219629), (False, 'YES', 'NO', 219630), (False, 'YES', 'NO', 219631), (False, 'YES', 'NO', 219632), (False, 'YES', 'NO', 219633), (True, 'YES', 'YES', 219634), (False, 'YES', 'NO', 219635), (False, 'YES', 'NO', 219636), (True, 'YES', 'YES', 219637), (False, 'YES', 'NO', 219638), (False, 'YES', 'NO', 219639), (True, 'YES', 'YES', 219640), (False, 'YES', 'NO', 219641), (False, 'YES', 'NO', 219642), (False, 'YES', 'NO', 219643), (False, 'YES', 'NO', 219644), (True, 'YES', 'YES', 219645), (False, 'YES', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (False, 'YES', 'NO', 219649), (True, 'YES', 'YES', 219650), (True, 'YES', 'YES', 219651), (True, 'YES', 'YES', 219652), (False, 'YES', 'NO', 219653), (False, 'YES', 'NO', 219654), (True, 'YES', 'YES', 219655), (True, 'YES', 'YES', 219656), (True, 'YES', 'YES', 219657), (True, 'YES', 'YES', 219658)]",False,Wrong Answer,0.7071067811865475,0.9824561403508772,False,0.5681818181818182,False,"def func(*args):
	
	a = args[0]
	print(['NO', 'YES'][((('0' * 7) in a) or ('1' in a))])
"
903723,22578653,"n = int(input())
f1 = 1
f2 = 1
ans = 0
while f2 < n:
    f1, f2 = f2, f1+f2
    ans += 1
print(ans)",25092,0,46,11/28/16 17:23,15,836,2,8,"[(True, '1', '1', 115557), (True, '2', '2', 115558), (False, '3', '2', 115559), (False, '5', '4', 115560), (False, '15', '14', 115561), (False, '16', '15', 115562), (False, '28', '27', 115563), (False, '46', '45', 115564), (False, '82', '81', 115565), (True, '3', '3', 115566), (False, '10', '9', 115567), (True, '10', '10', 115568), (False, '11', '10', 115569), (False, '11', '10', 115570), (True, '11', '11', 115571), (False, '12', '11', 115572), (False, '85', '84', 115573), (True, '85', '85', 115574), (False, '86', '85', 115575), (False, '86', '85', 115576), (False, '48', '47', 115577), (False, '44', '43', 115578), (False, '67', '66', 115579), (False, '69', '68', 115580), (False, '63', '62', 115581), (False, '63', '62', 115582), (False, '64', '63', 115583), (False, '57', '56', 115584), (False, '71', '70', 115585), (False, '72', '71', 115586), (False, '68', '67', 115587), (False, '48', '47', 115588), (False, '62', '61', 115589), (False, '59', '58', 115590), (False, '57', '56', 115591), (False, '52', '51', 115592), (False, '66', '65', 115593), (False, '76', '75', 115594), (False, '66', '65', 115595), (False, '72', '71', 115596), (False, '4', '3', 115597), (False, '4', '3', 115598), (True, '4', '4', 115599), (False, '5', '4', 115600), (False, '5', '4', 115601), (False, '5', '4', 115602), (True, '5', '5', 115603), (False, '6', '5', 115604), (False, '6', '5', 115605), (False, '6', '5', 115606), (False, '6', '5', 115607), (False, '6', '5', 115608), (False, '6', '5', 115609), (False, '6', '5', 115610), (True, '6', '6', 115611), (False, '7', '6', 115612), (False, '7', '6', 115613), (False, '70', '69', 115614), (False, '85', '84', 115615), (False, '50', '49', 115616), (False, '64', '63', 115617), (False, '57', '56', 115618), (False, '55', '54', 115619)]",False,Wrong Answer,0.7884044396805875,0.9824561403508772,False,0.8571428571428571,False,"def func(*args):
	
	n = int(args[0])
	f1 = 1
	f2 = 1
	ans = 0
	while (f2 < n):
	    (f1, f2) = (f2, (f1 + f2))
	    ans += 1
	print(ans)
"
903724,22578683,"n = int(input())
f1 = 1
f2 = 1
ans = -1
while f2 <= n:
    f1, f2 = f2, f1+f2
    ans += 1
print(ans)",25092,8,62,11/28/16 17:24,15,836,1,8,"[(True, '1', '1', 115557), (True, '2', '2', 115558), (True, '2', '2', 115559), (True, '4', '4', 115560), (True, '14', '14', 115561), (True, '15', '15', 115562), (True, '27', '27', 115563), (True, '45', '45', 115564), (True, '81', '81', 115565), (True, '3', '3', 115566), (True, '9', '9', 115567), (True, '10', '10', 115568), (True, '10', '10', 115569), (True, '10', '10', 115570), (True, '11', '11', 115571), (True, '11', '11', 115572), (True, '84', '84', 115573), (True, '85', '85', 115574), (True, '85', '85', 115575), (True, '85', '85', 115576), (True, '47', '47', 115577), (True, '43', '43', 115578), (True, '66', '66', 115579), (True, '68', '68', 115580), (True, '62', '62', 115581), (True, '62', '62', 115582), (True, '63', '63', 115583), (True, '56', '56', 115584), (True, '70', '70', 115585), (True, '71', '71', 115586), (True, '67', '67', 115587), (True, '47', '47', 115588), (True, '61', '61', 115589), (True, '58', '58', 115590), (True, '56', '56', 115591), (True, '51', '51', 115592), (True, '65', '65', 115593), (True, '75', '75', 115594), (True, '65', '65', 115595), (True, '71', '71', 115596), (True, '3', '3', 115597), (True, '3', '3', 115598), (True, '4', '4', 115599), (True, '4', '4', 115600), (True, '4', '4', 115601), (True, '4', '4', 115602), (True, '5', '5', 115603), (True, '5', '5', 115604), (True, '5', '5', 115605), (True, '5', '5', 115606), (True, '5', '5', 115607), (True, '5', '5', 115608), (True, '5', '5', 115609), (True, '5', '5', 115610), (True, '6', '6', 115611), (True, '6', '6', 115612), (True, '6', '6', 115613), (True, '69', '69', 115614), (True, '84', '84', 115615), (True, '49', '49', 115616), (True, '63', '63', 115617), (True, '56', '56', 115618), (True, '54', '54', 115619)]",True,Accecpted,0.7884044396805875,0.9824561403508772,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	f1 = 1
	f2 = 1
	ans = (- 1)
	while (f2 <= n):
	    (f1, f2) = (f2, (f1 + f2))
	    ans += 1
	print(ans)
"
1183728,15061725,"k = int(input())
l = int(input())
res = k
cnt = 0
while res < l:
    res *= k
    cnt += 1

if res == l:
    print('YES')
    print(cnt)
else:
    print('NO')",13301,0,124,12/27/15 23:33,13,1082,1,8,"[(True, 'YES\n1', 'YES\n1', 133227), (True, 'NO', 'NO', 133228), (True, 'YES\n0', 'YES\n0', 133229), (True, 'NO', 'NO', 133230), (True, 'NO', 'NO', 133231), (True, 'NO', 'NO', 133232), (True, 'NO', 'NO', 133233), (True, 'YES\n1', 'YES\n1', 133234), (True, 'YES\n5', 'YES\n5', 133235), (True, 'NO', 'NO', 133236), (True, 'NO', 'NO', 133237), (True, 'YES\n2', 'YES\n2', 133238), (True, 'NO', 'NO', 133239), (True, 'YES\n5', 'YES\n5', 133240), (True, 'YES\n2', 'YES\n2', 133241), (True, 'NO', 'NO', 133242), (True, 'NO', 'NO', 133243), (True, 'NO', 'NO', 133244), (True, 'NO', 'NO', 133245), (True, 'YES\n2', 'YES\n2', 133246), (True, 'NO', 'NO', 133247), (True, 'NO', 'NO', 133248), (True, 'NO', 'NO', 133249), (True, 'YES\n1', 'YES\n1', 133250), (True, 'YES\n3', 'YES\n3', 133251), (True, 'NO', 'NO', 133252), (True, 'NO', 'NO', 133253), (True, 'NO', 'NO', 133254), (True, 'NO', 'NO', 133255), (True, 'NO', 'NO', 133256), (True, 'NO', 'NO', 133257), (True, 'YES\n1', 'YES\n1', 133258), (True, 'NO', 'NO', 133259), (True, 'YES\n2', 'YES\n2', 133260), (True, 'NO', 'NO', 133261), (True, 'NO', 'NO', 133262), (True, 'YES\n1', 'YES\n1', 133263), (True, 'YES\n5', 'YES\n5', 133264), (True, 'YES\n3', 'YES\n3', 133265), (True, 'NO', 'NO', 133266), (True, 'NO', 'NO', 133267), (True, 'NO', 'NO', 133268), (True, 'NO', 'NO', 133269), (True, 'NO', 'NO', 133270), (True, 'NO', 'NO', 133271), (True, 'NO', 'NO', 133272), (True, 'YES\n1', 'YES\n1', 133273), (True, 'NO', 'NO', 133274), (True, 'YES\n1', 'YES\n1', 133275), (True, 'YES\n0', 'YES\n0', 133276), (True, 'NO', 'NO', 133277), (True, 'NO', 'NO', 133278), (True, 'NO', 'NO', 133279), (True, 'NO', 'NO', 133280), (True, 'YES\n29', 'YES\n29', 133281), (True, 'NO', 'NO', 133282), (True, 'YES\n3', 'YES\n3', 133283), (True, 'NO', 'NO', 133284), (True, 'YES\n8', 'YES\n8', 133285), (True, 'NO', 'NO', 133286), (True, 'NO', 'NO', 133287), (True, 'NO', 'NO', 133288), (True, 'NO', 'NO', 133289), (True, 'NO', 'NO', 133290)]",True,Accecpted,0.8841121363289183,0.9823529411764704,False,0.0,False,"def func(*args):
	
	k = int(args[0])
	l = int(args[1])
	res = k
	cnt = 0
	while (res < l):
	    res *= k
	    cnt += 1
	if (res == l):
	    print('YES')
	    print(cnt)
	else:
	    print('NO')
"
1326777,28142366,"n=input()
for i in n:
    if i in {'H','Q','9'}:
        print('YES')
        break
else:
    print('NO')",26940,5456,154,6/29/17 18:03,7,1198,1,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (True, 'NO', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (True, 'NO', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (True, 'NO', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (True, 'NO', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (True, 'NO', 'NO', 142090), (True, 'NO', 'NO', 142091), (True, 'NO', 'NO', 142092), (True, 'NO', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (True, 'NO', 'NO', 142096), (True, 'NO', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (True, 'NO', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (True, 'NO', 'NO', 142105)]",True,Accecpted,0.7611606003349892,0.9823008849557522,False,0.0,False,"def func(*args):
	
	n = args[0]
	for i in n:
	    if (i in {'H', 'Q', '9'}):
	        print('YES')
	        break
	else:
	    print('NO')
"
1326776,28142263,"n=input()
for i in n:
    if i in {'H','Q','+','9'}:
        print('YES')
        break
else:
    print('NO')",26940,5412,124,6/29/17 17:59,7,1198,2,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (False, 'YES', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (False, 'YES', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (False, 'YES', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (False, 'YES', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (False, 'YES', 'NO', 142090), (False, 'YES', 'NO', 142091), (False, 'YES', 'NO', 142092), (False, 'YES', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (False, 'YES', 'NO', 142096), (False, 'YES', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (False, 'YES', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (False, 'YES', 'NO', 142105)]",False,Wrong Answer,0.7611606003349892,0.9823008849557522,False,0.1411764705882353,False,"def func(*args):
	
	n = args[0]
	for i in n:
	    if (i in {'H', 'Q', '+', '9'}):
	        print('YES')
	        break
	else:
	    print('NO')
"
1215501,14858058,"def gcd(a,b):
    c=max(a,b)
    while c>0:
        if a%c==0 and b%c==0:
            return c
        elif c>min(a,b):
            c=min(a,b)
            continue
        else:
            c-=1
            continue


inp=[int(i) for i in input().split()]
n=inp[2]
win=0
lose=0
turn=True

while n>=inp[0] and n>=inp[1]:
    if turn==True: #Simon's Turn
        n = n-gcd(inp[0],n)
        win+=1
        turn=False
        continue
    elif turn==False: #Antisimon's Turn
        n = n-gcd(inp[1],n)
        lose+=1
        turn=True
        continue

if win>lose:
    print(0)
else:
    print(1)",18262,0,92,12/18/15 11:13,35,1107,2,8,"[(True, '0', '0', 136259), (True, '1', '1', 136260), (True, '1', '1', 136261), (True, '1', '1', 136262), (True, '1', '1', 136263), (True, '0', '0', 136264), (True, '1', '1', 136265), (True, '1', '1', 136266), (False, '1', '0', 136267), (True, '1', '1', 136268), (True, '1', '1', 136269), (False, '0', '1', 136270), (False, '0', '1', 136271), (False, '1', '0', 136272), (True, '1', '1', 136273), (True, '1', '1', 136274), (True, '1', '1', 136275), (True, '1', '1', 136276), (True, '1', '1', 136277), (True, '0', '0', 136278), (True, '1', '1', 136279), (False, '1', '0', 136280), (False, '1', '0', 136281), (True, '0', '0', 136282), (True, '0', '0', 136283), (False, '0', '1', 136284), (True, '1', '1', 136285), (False, '1', '0', 136286), (False, '0', '1', 136287), (False, '1', '0', 136288), (True, '0', '0', 136289), (False, '1', '0', 136290), (True, '0', '0', 136291), (True, '0', '0', 136292), (False, '0', '1', 136293), (True, '1', '1', 136294), (False, '0', '1', 136295), (True, '1', '1', 136296), (True, '1', '1', 136297), (False, '1', '0', 136298), (False, '1', '0', 136299), (True, '0', '0', 136300), (True, '1', '1', 136301), (False, '1', '0', 136302), (False, '1', '0', 136303)]",False,Wrong Answer,0.9167056528641924,0.9822580645161292,False,0.3777777777777777,False,"def func(*args):
	
	
	def gcd(a, b):
	    c = max(a, b)
	    while (c > 0):
	        if (((a % c) == 0) and ((b % c) == 0)):
	            return c
	        elif (c > min(a, b)):
	            c = min(a, b)
	            continue
	        else:
	            c -= 1
	            continue
	inp = [int(i) for i in args[0].split()]
	n = inp[2]
	win = 0
	lose = 0
	turn = True
	while ((n >= inp[0]) and (n >= inp[1])):
	    if (turn == True):
	        n = (n - gcd(inp[0], n))
	        win += 1
	        turn = False
	        continue
	    elif (turn == False):
	        n = (n - gcd(inp[1], n))
	        lose += 1
	        turn = True
	        continue
	if (win > lose):
	    print(0)
	else:
	    print(1)
"
1215502,14858086,"def gcd(a,b):
    c=max(a,b)
    while c>0:
        if a%c==0 and b%c==0:
            return c
        elif c>min(a,b):
            c=min(a,b)
            continue
        else:
            c-=1
            continue


inp=[int(i) for i in input().split()]
n=inp[2]
win=0
lose=0
turn=True

while n>0:
    if turn==True: #Simon's Turn
        n = n-gcd(inp[0],n)
        win+=1
        turn=False
        continue
    elif turn==False: #Antisimon's Turn
        n = n-gcd(inp[1],n)
        lose+=1
        turn=True
        continue

if win>lose:
    print(0)
else:
    print(1)",18262,4,216,12/18/15 11:18,35,1107,1,8,"[(True, '0', '0', 136259), (True, '1', '1', 136260), (True, '1', '1', 136261), (True, '1', '1', 136262), (True, '1', '1', 136263), (True, '0', '0', 136264), (True, '1', '1', 136265), (True, '1', '1', 136266), (True, '0', '0', 136267), (True, '1', '1', 136268), (True, '1', '1', 136269), (True, '1', '1', 136270), (True, '1', '1', 136271), (True, '0', '0', 136272), (True, '1', '1', 136273), (True, '1', '1', 136274), (True, '1', '1', 136275), (True, '1', '1', 136276), (True, '1', '1', 136277), (True, '0', '0', 136278), (True, '1', '1', 136279), (True, '0', '0', 136280), (True, '0', '0', 136281), (True, '0', '0', 136282), (True, '0', '0', 136283), (True, '1', '1', 136284), (True, '1', '1', 136285), (True, '0', '0', 136286), (True, '1', '1', 136287), (True, '0', '0', 136288), (True, '0', '0', 136289), (True, '0', '0', 136290), (True, '0', '0', 136291), (True, '0', '0', 136292), (True, '1', '1', 136293), (True, '1', '1', 136294), (True, '1', '1', 136295), (True, '1', '1', 136296), (True, '1', '1', 136297), (True, '0', '0', 136298), (True, '0', '0', 136299), (True, '0', '0', 136300), (True, '1', '1', 136301), (True, '0', '0', 136302), (True, '0', '0', 136303)]",True,Accecpted,0.9167056528641924,0.9822580645161292,False,0.0,False,"def func(*args):
	
	
	def gcd(a, b):
	    c = max(a, b)
	    while (c > 0):
	        if (((a % c) == 0) and ((b % c) == 0)):
	            return c
	        elif (c > min(a, b)):
	            c = min(a, b)
	            continue
	        else:
	            c -= 1
	            continue
	inp = [int(i) for i in args[0].split()]
	n = inp[2]
	win = 0
	lose = 0
	turn = True
	while (n > 0):
	    if (turn == True):
	        n = (n - gcd(inp[0], n))
	        win += 1
	        turn = False
	        continue
	    elif (turn == False):
	        n = (n - gcd(inp[1], n))
	        lose += 1
	        turn = True
	        continue
	if (win > lose):
	    print(0)
	else:
	    print(1)
"
1955404,21696171,"n,m  = map(int,input().split())
r = pow(3,n,m)
if r < 0 :
    r += m
print(r-1)",7544,8,124,10/23/16 4:04,5,1746,2,8,"[(True, '2', '2', 173763), (True, '2', '2', 173764), (True, '8', '8', 173765), (True, '80', '80', 173766), (True, '17', '17', 173767), (True, '2619146', '2619146', 173768), (True, '18', '18', 173769), (True, '0', '0', 173770), (True, '63', '63', 173771), (True, '44', '44', 173772), (True, '2', '2', 173773), (True, '3', '3', 173774), (True, '3', '3', 173775), (True, '2', '2', 173776), (True, '26', '26', 173777), (True, '8', '8', 173778), (True, '32', '32', 173779), (True, '60', '60', 173780), (True, '3', '3', 173781), (True, '26', '26', 173782), (True, '2', '2', 173783), (True, '10', '10', 173784), (True, '26', '26', 173785), (True, '2', '2', 173786), (True, '74', '74', 173787), (True, '2', '2', 173788), (True, '40746267', '40746267', 173789), (True, '40442298', '40442298', 173790), (True, '599793690', '599793690', 173791), (True, '182386349', '182386349', 173792), (True, '237749529', '237749529', 173793), (True, '641995841', '641995841', 173794), (True, '50540996', '50540996', 173795), (True, '239869294', '239869294', 173796), (True, '171150618', '171150618', 173797), (True, '2105846', '2105846', 173798), (True, '290288763', '290288763', 173799), (True, '448954191', '448954191', 173800), (True, '105935725', '105935725', 173801), (True, '193558859', '193558859', 173802), (True, '606909752', '606909752', 173803), (True, '210299666', '210299666', 173804), (True, '127493116', '127493116', 173805), (True, '134606022', '134606022', 173806), (True, '2923848', '2923848', 173807), (True, '28044795', '28044795', 173808), (False, '-1', '6560', 173809), (False, '-1', '8', 173810), (False, '-1', '728', 173811), (False, '-1', '6560', 173812), (False, '-1', '26', 173813), (False, '-1', '19682', 173814), (False, '-1', '2', 173815), (False, '-1', '19682', 173816), (False, '-1', '8', 173817), (False, '-1', '6560', 173818), (False, '-1', '59048', 173819), (False, '-1', '6560', 173820), (False, '-1', '728', 173821), (False, '-1', '8', 173822), (False, '-1', '728', 173823), (False, '-1', '2', 173824), (False, '-1', '6560', 173825), (False, '-1', '59048', 173826), (False, '-1', '2', 173827), (False, '-1', '8', 173828), (False, '-1', '0', 173829), (False, '-1', '8', 173830), (False, '-1', '26', 173831), (False, '-1', '2', 173832), (False, '-1', '2', 173833), (False, '-1', '8', 173834), (False, '-1', '2', 173835), (False, '-1', '80', 173836), (True, '0', '0', 173837), (False, '-1', '26', 173838), (False, '-1', '0', 173839), (False, '-1', '2', 173840)]",False,Wrong Answer,0.8003203203844999,0.9820359281437124,False,0.3974358974358974,False,"def func(*args):
	
	(n, m) = map(int, args[0].split())
	r = pow(3, n, m)
	if (r < 0):
	    r += m
	print((r - 1))
"
1955405,21696182,"n,m  = map(int,input().split())
r = pow(3,n,m)
if r == 0 :
    r += m
print(r-1)",7544,0,124,10/23/16 4:05,5,1746,1,8,"[(True, '2', '2', 173763), (True, '2', '2', 173764), (True, '8', '8', 173765), (True, '80', '80', 173766), (True, '17', '17', 173767), (True, '2619146', '2619146', 173768), (True, '18', '18', 173769), (True, '0', '0', 173770), (True, '63', '63', 173771), (True, '44', '44', 173772), (True, '2', '2', 173773), (True, '3', '3', 173774), (True, '3', '3', 173775), (True, '2', '2', 173776), (True, '26', '26', 173777), (True, '8', '8', 173778), (True, '32', '32', 173779), (True, '60', '60', 173780), (True, '3', '3', 173781), (True, '26', '26', 173782), (True, '2', '2', 173783), (True, '10', '10', 173784), (True, '26', '26', 173785), (True, '2', '2', 173786), (True, '74', '74', 173787), (True, '2', '2', 173788), (True, '40746267', '40746267', 173789), (True, '40442298', '40442298', 173790), (True, '599793690', '599793690', 173791), (True, '182386349', '182386349', 173792), (True, '237749529', '237749529', 173793), (True, '641995841', '641995841', 173794), (True, '50540996', '50540996', 173795), (True, '239869294', '239869294', 173796), (True, '171150618', '171150618', 173797), (True, '2105846', '2105846', 173798), (True, '290288763', '290288763', 173799), (True, '448954191', '448954191', 173800), (True, '105935725', '105935725', 173801), (True, '193558859', '193558859', 173802), (True, '606909752', '606909752', 173803), (True, '210299666', '210299666', 173804), (True, '127493116', '127493116', 173805), (True, '134606022', '134606022', 173806), (True, '2923848', '2923848', 173807), (True, '28044795', '28044795', 173808), (True, '6560', '6560', 173809), (True, '8', '8', 173810), (True, '728', '728', 173811), (True, '6560', '6560', 173812), (True, '26', '26', 173813), (True, '19682', '19682', 173814), (True, '2', '2', 173815), (True, '19682', '19682', 173816), (True, '8', '8', 173817), (True, '6560', '6560', 173818), (True, '59048', '59048', 173819), (True, '6560', '6560', 173820), (True, '728', '728', 173821), (True, '8', '8', 173822), (True, '728', '728', 173823), (True, '2', '2', 173824), (True, '6560', '6560', 173825), (True, '59048', '59048', 173826), (True, '2', '2', 173827), (True, '8', '8', 173828), (True, '0', '0', 173829), (True, '8', '8', 173830), (True, '26', '26', 173831), (True, '2', '2', 173832), (True, '2', '2', 173833), (True, '8', '8', 173834), (True, '2', '2', 173835), (True, '80', '80', 173836), (True, '0', '0', 173837), (True, '26', '26', 173838), (True, '0', '0', 173839), (True, '2', '2', 173840)]",True,Accecpted,0.8003203203844999,0.9820359281437124,False,0.0,False,"def func(*args):
	
	(n, m) = map(int, args[0].split())
	r = pow(3, n, m)
	if (r == 0):
	    r += m
	print((r - 1))
"
3094496,28488608,"n=int(input())
x=int(input())

shell=[0,0,0]
shell[x]=1

n=n%6

while n>0:
	if n%2==1:
		temp=shell[0]
		shell[0]=shell[1]
		shell[1]=temp
	else :
		temp=shell[1]
		shell[1]=shell[2]
		shell[2]=temp
	n-=1

i=0
while i<3:
	if shell[i]==1:
		print(i)
		break
	i+=1",102650,4512,77,7/13/17 6:58,49,2645,1,8,"[(True, '1', '1', 225050), (True, '0', '0', 225051), (True, '0', '0', 225052), (True, '1', '1', 225053), (True, '0', '0', 225054), (True, '2', '2', 225055), (True, '1', '1', 225056), (True, '1', '1', 225057), (True, '2', '2', 225058), (True, '2', '2', 225059), (True, '0', '0', 225060), (True, '0', '0', 225061), (True, '2', '2', 225062), (True, '1', '1', 225063), (True, '0', '0', 225064), (True, '1', '1', 225065), (True, '2', '2', 225066), (True, '1', '1', 225067), (True, '0', '0', 225068), (True, '2', '2', 225069), (True, '2', '2', 225070), (True, '0', '0', 225071), (True, '1', '1', 225072), (True, '1', '1', 225073), (True, '2', '2', 225074), (True, '0', '0', 225075), (True, '1', '1', 225076), (True, '2', '2', 225077), (True, '2', '2', 225078), (True, '1', '1', 225079), (True, '0', '0', 225080), (True, '2', '2', 225081), (True, '0', '0', 225082), (True, '1', '1', 225083), (True, '0', '0', 225084), (True, '2', '2', 225085), (True, '1', '1', 225086), (True, '0', '0', 225087), (True, '1', '1', 225088), (True, '2', '2', 225089), (True, '1', '1', 225090), (True, '0', '0', 225091), (True, '2', '2', 225092), (True, '2', '2', 225093), (True, '0', '0', 225094), (True, '0', '0', 225095), (True, '1', '1', 225096), (True, '2', '2', 225097), (True, '2', '2', 225098), (True, '1', '1', 225099), (True, '0', '0', 225100), (True, '2', '2', 225101), (True, '2', '2', 225102), (True, '2', '2', 225103), (True, '0', '0', 225104), (True, '0', '0', 225105), (True, '1', '1', 225106), (True, '0', '0', 225107), (True, '2', '2', 225108), (True, '2', '2', 225109), (True, '0', '0', 225110), (True, '2', '2', 225111), (True, '2', '2', 225112), (True, '0', '0', 225113), (True, '2', '2', 225114), (True, '0', '0', 225115), (True, '2', '2', 225116), (True, '2', '2', 225117)]",True,Accecpted,0.8958039312312598,0.9819376026272578,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	x = int(args[1])
	shell = [0, 0, 0]
	shell[x] = 1
	n = (n % 6)
	while (n > 0):
	    if ((n % 2) == 1):
	        temp = shell[0]
	        shell[0] = shell[1]
	        shell[1] = temp
	    else:
	        temp = shell[1]
	        shell[1] = shell[2]
	        shell[2] = temp
	    n -= 1
	i = 0
	while (i < 3):
	    if (shell[i] == 1):
	        print(i)
	        break
	    i += 1
"
3148702,26456899,"from math import inf
a, b = [int(x) for x in input().split()]
c, d = [int(x) for x in input().split()]
if a > c:
    a, c = c, a
    b, d = d, b
r1 = (d-b) % a
r2 = c % a
k2s = [(r1+k2*r2) % a for k2 in range(a)]
if 0 not in k2s:
    print(-1)
else:
    print(k2s.index(0)*c+d)",103186,5432,62,4/17/17 17:07,25,2697,2,8,"[(True, '82', '82', 227721), (True, '-1', '-1', 227722), (True, '1222', '1222', 227723), (True, '1748', '1748', 227724), (True, '211', '211', 227725), (True, '301', '301', 227726), (True, '3414', '3414', 227727), (True, '1014', '1014', 227728), (True, '718', '718', 227729), (True, '-1', '-1', 227730), (True, '1255', '1255', 227731), (True, '1278', '1278', 227732), (True, '209', '209', 227733), (True, '2321', '2321', 227734), (True, '-1', '-1', 227735), (True, '1156', '1156', 227736), (True, '-1', '-1', 227737), (True, '1346', '1346', 227738), (True, '789', '789', 227739), (True, '-1', '-1', 227740), (True, '674', '674', 227741), (True, '364', '364', 227742), (True, '48', '48', 227743), (True, '5967', '5967', 227744), (True, '317', '317', 227745), (True, '331', '331', 227746), (True, '1410', '1410', 227747), (True, '-1', '-1', 227748), (True, '427', '427', 227749), (True, '3483', '3483', 227750), (True, '-1', '-1', 227751), (True, '204', '204', 227752), (True, '100', '100', 227753), (True, '1', '1', 227754), (True, '100', '100', 227755), (False, '1', '101', 227756), (True, '9703', '9703', 227757), (True, '9605', '9605', 227758), (True, '4852', '4852', 227759), (True, '-1', '-1', 227760), (True, '2', '2', 227761), (True, '5', '5', 227762), (True, '3', '3', 227763), (True, '-1', '-1', 227764), (True, '-1', '-1', 227765), (True, '-1', '-1', 227766), (True, '-1', '-1', 227767), (True, '99', '99', 227768), (True, '5', '5', 227769), (False, '1', '100', 227770), (True, '-1', '-1', 227771), (True, '20', '20', 227772), (True, '10', '10', 227773), (True, '-1', '-1', 227774), (True, '100', '100', 227775), (True, '319', '319', 227776), (True, '82', '82', 227777), (True, '14', '14', 227778)]",False,Wrong Answer,0.927724472174572,0.9819376026272578,False,0.0344827586206896,False,"def func(*args):
	
	from math import inf
	(a, b) = [int(x) for x in args[0].split()]
	(c, d) = [int(x) for x in args[1].split()]
	if (a > c):
	    (a, c) = (c, a)
	    (b, d) = (d, b)
	r1 = ((d - b) % a)
	r2 = (c % a)
	k2s = [((r1 + (k2 * r2)) % a) for k2 in range(a)]
	if (0 not in k2s):
	    print((- 1))
	else:
	    print(((k2s.index(0) * c) + d))
"
3148703,26456951,"from math import inf
a, b = [int(x) for x in input().split()]
c, d = [int(x) for x in input().split()]
if b > d:
    a, c = c, a
    b, d = d, b
r1 = (d-b) % a
r2 = c % a
k2s = [(r1+k2*r2) % a for k2 in range(a)]
if 0 not in k2s:
    print(-1)
else:
    
    print(k2s.index(0)*c+d)",103186,5444,62,4/17/17 17:09,27,2697,1,8,"[(True, '82', '82', 227721), (True, '-1', '-1', 227722), (True, '1222', '1222', 227723), (True, '1748', '1748', 227724), (True, '211', '211', 227725), (True, '301', '301', 227726), (True, '3414', '3414', 227727), (True, '1014', '1014', 227728), (True, '718', '718', 227729), (True, '-1', '-1', 227730), (True, '1255', '1255', 227731), (True, '1278', '1278', 227732), (True, '209', '209', 227733), (True, '2321', '2321', 227734), (True, '-1', '-1', 227735), (True, '1156', '1156', 227736), (True, '-1', '-1', 227737), (True, '1346', '1346', 227738), (True, '789', '789', 227739), (True, '-1', '-1', 227740), (True, '674', '674', 227741), (True, '364', '364', 227742), (True, '48', '48', 227743), (True, '5967', '5967', 227744), (True, '317', '317', 227745), (True, '331', '331', 227746), (True, '1410', '1410', 227747), (True, '-1', '-1', 227748), (True, '427', '427', 227749), (True, '3483', '3483', 227750), (True, '-1', '-1', 227751), (True, '204', '204', 227752), (True, '100', '100', 227753), (True, '1', '1', 227754), (True, '100', '100', 227755), (True, '101', '101', 227756), (True, '9703', '9703', 227757), (True, '9605', '9605', 227758), (True, '4852', '4852', 227759), (True, '-1', '-1', 227760), (True, '2', '2', 227761), (True, '5', '5', 227762), (True, '3', '3', 227763), (True, '-1', '-1', 227764), (True, '-1', '-1', 227765), (True, '-1', '-1', 227766), (True, '-1', '-1', 227767), (True, '99', '99', 227768), (True, '5', '5', 227769), (True, '100', '100', 227770), (True, '-1', '-1', 227771), (True, '20', '20', 227772), (True, '10', '10', 227773), (True, '-1', '-1', 227774), (True, '100', '100', 227775), (True, '319', '319', 227776), (True, '82', '82', 227777), (True, '14', '14', 227778)]",True,Accecpted,0.927724472174572,0.9819376026272578,False,0.0,False,"def func(*args):
	
	from math import inf
	(a, b) = [int(x) for x in args[0].split()]
	(c, d) = [int(x) for x in args[1].split()]
	if (b > d):
	    (a, c) = (c, a)
	    (b, d) = (d, b)
	r1 = ((d - b) % a)
	r2 = (c % a)
	k2s = [((r1 + (k2 * r2)) % a) for k2 in range(a)]
	if (0 not in k2s):
	    print((- 1))
	else:
	    print(((k2s.index(0) * c) + d))
"
3094494,28488523,"n=int(input())
x=int(input())

shell=[0,0,0]
shell[x]=1

while n>0:
	if n%2==1:
		temp=shell[0]
		shell[0]=shell[1]
		shell[1]=temp
	else :
		temp=shell[1]
		shell[1]=shell[2]
		shell[2]=temp
	n-=1

i=0
while i<3:
	if shell[i]==1:
		print(i)
		break
	i+=1",102650,5412,500,7/13/17 6:52,45,2645,3,8,"[(True, '1', '1', 225050), (True, '0', '0', 225051), (True, '0', '0', 225052), (True, '1', '1', 225053), (True, '0', '0', 225054), (True, '2', '2', 225055)]",True,Time Limit,0.8958039312312598,0.9819376026272578,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	x = int(args[1])
	shell = [0, 0, 0]
	shell[x] = 1
	while (n > 0):
	    if ((n % 2) == 1):
	        temp = shell[0]
	        shell[0] = shell[1]
	        shell[1] = temp
	    else:
	        temp = shell[1]
	        shell[1] = shell[2]
	        shell[2] = temp
	    n -= 1
	i = 0
	while (i < 3):
	    if (shell[i] == 1):
	        print(i)
	        break
	    i += 1
"
1589092,21704345,"if __name__==""__main__"":
	n,k = map(int,input().split())
	prime = [2]

	
	for i in range(3,n):
		#check if i is prime
		i_is_prime = True
		for j in range(2,int(i**0.5)+1):
			if i%j==0:
				i_is_prime = False
				break
		if i_is_prime:
			prime.append(i)
		#check if i can be express as sum of two prime
	#print(prime)
	count = 0
	for i in prime:
		for j in range(len(prime)):
			if prime[j]<int(i/2):
				#print(prime[j],"" + "",prime[j+1])
				if prime[j]+prime[j+1]+1 == i:
					#print(prime[j],""+"",prime[j+1],""+1 ="",i,""!!!"")
					count+=1
					break
			else:
				break
	if(count>=k):
		print(""YES"")
	else:
		print(""NO"")",71281,0,154,10/23/16 12:12,31,1399,2,8,"[(True, 'YES', 'YES', 154157), (True, 'NO', 'NO', 154158), (True, 'YES', 'YES', 154159), (True, 'YES', 'YES', 154160), (True, 'YES', 'YES', 154161), (True, 'NO', 'NO', 154162), (False, 'NO', 'YES', 154163), (False, 'NO', 'YES', 154164), (True, 'NO', 'NO', 154165), (True, 'YES', 'YES', 154166), (True, 'YES', 'YES', 154167), (True, 'NO', 'NO', 154168), (True, 'YES', 'YES', 154169), (True, 'NO', 'NO', 154170), (True, 'YES', 'YES', 154171), (False, 'NO', 'YES', 154172), (True, 'YES', 'YES', 154173), (True, 'NO', 'NO', 154174), (True, 'NO', 'NO', 154175), (True, 'YES', 'YES', 154176), (True, 'YES', 'YES', 154177), (True, 'NO', 'NO', 154178), (True, 'YES', 'YES', 154179), (True, 'NO', 'NO', 154180), (True, 'YES', 'YES', 154181), (True, 'YES', 'YES', 154182), (True, 'YES', 'YES', 154183), (True, 'NO', 'NO', 154184), (True, 'NO', 'NO', 154185), (True, 'YES', 'YES', 154186), (True, 'YES', 'YES', 154187), (True, 'YES', 'YES', 154188), (True, 'NO', 'NO', 154189), (True, 'NO', 'NO', 154190), (True, 'YES', 'YES', 154191)]",False,Wrong Answer,0.9320740275675824,0.9819277108433736,False,0.0857142857142857,False,"def func(*args):
	
	if (__name__ == '__main__'):
	    (n, k) = map(int, args[0].split())
	    prime = [2]
	    for i in range(3, n):
	        i_is_prime = True
	        for j in range(2, (int((i ** 0.5)) + 1)):
	            if ((i % j) == 0):
	                i_is_prime = False
	                break
	        if i_is_prime:
	            prime.append(i)
	    count = 0
	    for i in prime:
	        for j in range(len(prime)):
	            if (prime[j] < int((i / 2))):
	                if (((prime[j] + prime[(j + 1)]) + 1) == i):
	                    count += 1
	                    break
	            else:
	                break
	    if (count >= k):
	        print('YES')
	    else:
	        print('NO')
"
1589093,21704496,"if __name__==""__main__"":
	n,k = map(int,input().split())
	prime = [2]

	
	for i in range(3,n+1):
		#check if i is prime
		i_is_prime = True
		for j in range(2,int(i**0.5)+1):
			if i%j==0:
				i_is_prime = False
				break
		if i_is_prime:
			prime.append(i)
		#check if i can be express as sum of two prime
	#print(prime)
	count = 0
	for i in prime:
		#print(""check:"",i)
		for j in range(len(prime)):
			if prime[j]<int(i/2):
				#print(prime[j],"" + "",prime[j+1])
				if prime[j]+prime[j+1]+1 == i:
					#print(prime[j],""+"",prime[j+1],""+1 ="",i,""!!!"")
					count+=1
					break
			else:
				break
	if(count>=k):
		print(""YES"")
	else:
		print(""NO"")",71281,12,154,10/23/16 12:15,32,1399,1,8,"[(True, 'YES', 'YES', 154157), (True, 'NO', 'NO', 154158), (True, 'YES', 'YES', 154159), (True, 'YES', 'YES', 154160), (True, 'YES', 'YES', 154161), (True, 'NO', 'NO', 154162), (True, 'YES', 'YES', 154163), (True, 'YES', 'YES', 154164), (True, 'NO', 'NO', 154165), (True, 'YES', 'YES', 154166), (True, 'YES', 'YES', 154167), (True, 'NO', 'NO', 154168), (True, 'YES', 'YES', 154169), (True, 'NO', 'NO', 154170), (True, 'YES', 'YES', 154171), (True, 'YES', 'YES', 154172), (True, 'YES', 'YES', 154173), (True, 'NO', 'NO', 154174), (True, 'NO', 'NO', 154175), (True, 'YES', 'YES', 154176), (True, 'YES', 'YES', 154177), (True, 'NO', 'NO', 154178), (True, 'YES', 'YES', 154179), (True, 'NO', 'NO', 154180), (True, 'YES', 'YES', 154181), (True, 'YES', 'YES', 154182), (True, 'YES', 'YES', 154183), (True, 'NO', 'NO', 154184), (True, 'NO', 'NO', 154185), (True, 'YES', 'YES', 154186), (True, 'YES', 'YES', 154187), (True, 'YES', 'YES', 154188), (True, 'NO', 'NO', 154189), (True, 'NO', 'NO', 154190), (True, 'YES', 'YES', 154191)]",True,Accecpted,0.9320740275675824,0.9819277108433736,False,0.0,False,"def func(*args):
	
	if (__name__ == '__main__'):
	    (n, k) = map(int, args[0].split())
	    prime = [2]
	    for i in range(3, (n + 1)):
	        i_is_prime = True
	        for j in range(2, (int((i ** 0.5)) + 1)):
	            if ((i % j) == 0):
	                i_is_prime = False
	                break
	        if i_is_prime:
	            prime.append(i)
	    count = 0
	    for i in prime:
	        for j in range(len(prime)):
	            if (prime[j] < int((i / 2))):
	                if (((prime[j] + prime[(j + 1)]) + 1) == i):
	                    count += 1
	                    break
	            else:
	                break
	    if (count >= k):
	        print('YES')
	    else:
	        print('NO')
"
2051587,21519924,"import math
inputs=[int(x) for x in input().split()]
y=inputs[0]
k=inputs[1]
n=inputs[2]
result=''
x=k-(y%k)
i=x
while i<n and i+y<n:
    result+=str(i)+' '
    i+=k
if len(result):
    print(result[0:len(result)-1])
else:
    print('-1')",57418,4480,122,10/17/16 16:20,15,1819,2,8,"[(True, '-1', '-1', 179398), (True, '2 8 14 20 26', '2 8 14 20 26', 179399), (False, '1 2 3 4 5 6 7 8 9', '1 2 3 4 5 6 7 8 9 10', 179400), (True, '-1', '-1', 179402), (True, '16 53', '16 53', 179403), (True, '-1', '-1', 179404), (True, '-1', '-1', 179405), (True, '-1', '-1', 179406), (True, '-1', '-1', 179407), (True, '-1', '-1', 179408), (True, '54 113 172 231 290', '54 113 172 231 290', 179409), (True, '8 77 146 215 284 353 422 491 560 629 698', '8 77 146 215 284 353 422 491 560 629 698', 179410), (False, '11 39 67 95 123 151 179 207 235 263 291 319 347 375 403 431 459 487', '11 39 67 95 123 151 179 207 235 263 291 319 347 375 403 431 459 487 515', 179411), (True, '-1', '-1', 179412), (True, '-1', '-1', 179413), (True, '-1', '-1', 179414), (True, '-1', '-1', 179415), (False, '-1', '500000000', 179427), (False, '-1', '999999999', 179428), (True, '-1', '-1', 179429), (True, '-1', '-1', 179430), (True, '100000006 200000013 300000020 400000027 500000034 600000041 700000048 800000055 900000062', '100000006 200000013 300000020 400000027 500000034 600000041 700000048 800000055 900000062', 179431), (True, '999999998', '999999998', 179432), (False, '-1', '900000000', 179433), (False, '-1', '1', 179434), (True, '-1', '-1', 179435), (True, '-1', '-1', 179436), (False, '-1', '500000000', 179437), (True, '-1', '-1', 179438), (False, '2 4', '2 4 6', 179439), (True, '-1', '-1', 179440), (True, '-1', '-1', 179441), (True, '-1', '-1', 179442), (True, '-1', '-1', 179443), (True, '499999998', '499999998', 179444), (True, '999999996', '999999996', 179445)]",False,Wrong Answer,0.80377750806414,0.9818913480885312,False,0.2222222222222222,False,"def func(*args):
	
	import math
	inputs = [int(x) for x in args[0].split()]
	y = inputs[0]
	k = inputs[1]
	n = inputs[2]
	result = ''
	x = (k - (y % k))
	i = x
	while ((i < n) and ((i + y) < n)):
	    result += (str(i) + ' ')
	    i += k
	if len(result):
	    print(result[0:(len(result) - 1)])
	else:
	    print('-1')
"
2051589,21519981,"import math
inputs=[int(x) for x in input().split()]
y=inputs[0]
k=inputs[1]
n=inputs[2]
result=''
x=k-(y%k)
i=x
while i+y<=n:
    result+=str(i)+' '
    i+=k
if len(result):
    print(result[0:len(result)-1])
else:
    print('-1')",57418,7528,340,10/17/16 16:22,15,1819,1,8,"[(True, '-1', '-1', 179398), (True, '2 8 14 20 26', '2 8 14 20 26', 179399), (True, '1 2 3 4 5 6 7 8 9 10', '1 2 3 4 5 6 7 8 9 10', 179400), (True, '-1', '-1', 179402), (True, '16 53', '16 53', 179403), (True, '-1', '-1', 179404), (True, '-1', '-1', 179405), (True, '-1', '-1', 179406), (True, '-1', '-1', 179407), (True, '-1', '-1', 179408), (True, '54 113 172 231 290', '54 113 172 231 290', 179409), (True, '8 77 146 215 284 353 422 491 560 629 698', '8 77 146 215 284 353 422 491 560 629 698', 179410), (True, '11 39 67 95 123 151 179 207 235 263 291 319 347 375 403 431 459 487 515', '11 39 67 95 123 151 179 207 235 263 291 319 347 375 403 431 459 487 515', 179411), (True, '-1', '-1', 179412), (True, '-1', '-1', 179413), (True, '-1', '-1', 179414), (True, '-1', '-1', 179415), (True, '500000000', '500000000', 179427), (True, '999999999', '999999999', 179428), (True, '-1', '-1', 179429), (True, '-1', '-1', 179430), (True, '100000006 200000013 300000020 400000027 500000034 600000041 700000048 800000055 900000062', '100000006 200000013 300000020 400000027 500000034 600000041 700000048 800000055 900000062', 179431), (True, '999999998', '999999998', 179432), (True, '900000000', '900000000', 179433), (True, '1', '1', 179434), (True, '-1', '-1', 179435), (True, '-1', '-1', 179436), (True, '500000000', '500000000', 179437), (True, '-1', '-1', 179438), (True, '2 4 6', '2 4 6', 179439), (True, '-1', '-1', 179440), (True, '-1', '-1', 179441), (True, '-1', '-1', 179442), (True, '-1', '-1', 179443), (True, '499999998', '499999998', 179444), (True, '999999996', '999999996', 179445)]",True,Accecpted,0.80377750806414,0.9818913480885312,False,0.0,False,"def func(*args):
	
	import math
	inputs = [int(x) for x in args[0].split()]
	y = inputs[0]
	k = inputs[1]
	n = inputs[2]
	result = ''
	x = (k - (y % k))
	i = x
	while ((i + y) <= n):
	    result += (str(i) + ' ')
	    i += k
	if len(result):
	    print(result[0:(len(result) - 1)])
	else:
	    print('-1')
"
2911390,10241965,print(int(input()) * 3 // 2),55521,0,92,3/12/15 0:49,1,2490,1,8,"[(True, '3', '3', 216989), (True, '6', '6', 216990), (True, '9', '9', 216991), (True, '12', '12', 216992), (True, '15', '15', 216993), (True, '210', '210', 216994), (True, '750', '750', 216995), (True, '1500', '1500', 216996), (True, '3000', '3000', 216997), (True, '75000', '75000', 216998), (True, '15000', '15000', 216999), (True, '38190', '38190', 217000), (True, '81969', '81969', 217001), (True, '89685', '89685', 217002), (True, '867684', '867684', 217003), (True, '85197084', '85197084', 217004), (True, '12686970', '12686970', 217005), (True, '8531979', '8531979', 217006), (True, '16477398', '16477398', 217007), (True, '149999991', '149999991', 217008), (True, '149999994', '149999994', 217009), (True, '149999997', '149999997', 217010), (True, '150000000', '150000000', 217011)]",True,Accecpted,7.380245217279165e-78,0.9818181818181818,False,0.0,False,"def func(*args):
	
	print(((int(args[0]) * 3) // 2))
"
1807297,21221866,"data = str(input())
list = []

length = len(data)

for i in range(length):
    list.append(ord(data[i]))

#print(list)

maximum = max(list)

#print(maximum)
count = 0

for i in range(length):
    if list[i] == maximum:
        count += 1

string = chr(maximum)

for k in range(count):
    print(string, end = """")",81014,36,154,10/6/16 0:02,23,1596,1,8,"[(True, 'rr', 'rr', 20294), (True, 'wwwww', 'wwwww', 20295), (True, 's', 's', 20296), (True, 'ssss', 'ssss', 20297), (True, 'u', 'u', 20298), (True, 'r', 'r', 20299), (True, 'w', 'w', 20300), (True, 'zzzzzzzzz', 'zzzzzzzzz', 20301), (True, 'tt', 'tt', 20302), (True, 'hhhhh', 'hhhhh', 20303), (True, 'bbbbbbbbb', 'bbbbbbbbb', 20304), (True, 'zz', 'zz', 20305), (True, 'z', 'z', 20306), (True, 'e', 'e', 20307), (True, 'e', 'e', 20308), (True, 'ee', 'ee', 20309), (True, 'b', 'b', 20310), (True, 'zzzzzz', 'zzzzzz', 20311), (True, 'zzzzzz', 'zzzzzz', 20312), (True, 'rrrrr', 'rrrrr', 20313), (True, 'zzz', 'zzz', 20314), (True, 'bbb', 'bbb', 20315), (True, 'zz', 'zz', 20316), (True, 'hh', 'hh', 20317), (True, 'hh', 'hh', 20318), (True, 'uu', 'uu', 20319), (True, 'uu', 'uu', 20320), (True, 'u', 'u', 20321), (True, 'v', 'v', 20322), (True, 'u', 'u', 20323), (True, 'u', 'u', 20324), (True, 'rr', 'rr', 20325), (True, 'o', 'o', 20326), (True, 'y', 'y', 20327), (True, 't', 't', 20328), (True, 'tt', 'tt', 20329), (True, 'mmm', 'mmm', 20330), (True, 'kk', 'kk', 20331), (True, 'zzzzzzzzzz', 'zzzzzzzzzz', 20332), (True, 'aaaaaaaaaa', 'aaaaaaaaaa', 20333), (True, 'zz', 'zz', 20334), (True, 'b', 'b', 20335), (True, 'y', 'y', 20336), (True, 'yy', 'yy', 20337), (True, 'zz', 'zz', 20338), (True, 'bb', 'bb', 20339), (True, 'aa', 'aa', 20340), (True, 'a', 'a', 20341), (True, 'z', 'z', 20342), (True, 'zz', 'zz', 20343), (True, 'zzzzzzz', 'zzzzzzz', 20344), (True, 'llll', 'llll', 20345), (True, 'oo', 'oo', 20346), (True, 'rr', 'rr', 20347)]",True,Accecpted,0.9058928290005828,0.9817629179331308,False,0.0,False,"def func(*args):
	
	data = str(args[0])
	list = []
	length = len(data)
	for i in range(length):
	    list.append(ord(data[i]))
	maximum = max(list)
	count = 0
	for i in range(length):
	    if (list[i] == maximum):
	        count += 1
	string = chr(maximum)
	for k in range(count):
	    print(string, end='')
"
1807296,21221842,"data = str(input())
list = []

length = len(data)

for i in range(length):
    list.append(ord(data[i]))

#print(list)

maximum = max(list)

#print(maximum)
count = 0

for i in range(length):
    if list[i] == maximum:
        count += 1

string = chr(maximum)

for k in range(count):
    print(string)",81014,0,62,10/6/16 0:00,23,1596,2,8,"[(False, 'r\nr', 'rr', 20294), (False, 'w\nw\nw\nw\nw', 'wwwww', 20295), (True, 's', 's', 20296), (False, 's\ns\ns\ns', 'ssss', 20297), (True, 'u', 'u', 20298), (True, 'r', 'r', 20299), (True, 'w', 'w', 20300), (False, 'z\nz\nz\nz\nz\nz\nz\nz\nz', 'zzzzzzzzz', 20301), (False, 't\nt', 'tt', 20302), (False, 'h\nh\nh\nh\nh', 'hhhhh', 20303), (False, 'b\nb\nb\nb\nb\nb\nb\nb\nb', 'bbbbbbbbb', 20304), (False, 'z\nz', 'zz', 20305), (True, 'z', 'z', 20306), (True, 'e', 'e', 20307), (True, 'e', 'e', 20308), (False, 'e\ne', 'ee', 20309), (True, 'b', 'b', 20310), (False, 'z\nz\nz\nz\nz\nz', 'zzzzzz', 20311), (False, 'z\nz\nz\nz\nz\nz', 'zzzzzz', 20312), (False, 'r\nr\nr\nr\nr', 'rrrrr', 20313), (False, 'z\nz\nz', 'zzz', 20314), (False, 'b\nb\nb', 'bbb', 20315), (False, 'z\nz', 'zz', 20316), (False, 'h\nh', 'hh', 20317), (False, 'h\nh', 'hh', 20318), (False, 'u\nu', 'uu', 20319), (False, 'u\nu', 'uu', 20320), (True, 'u', 'u', 20321), (True, 'v', 'v', 20322), (True, 'u', 'u', 20323), (True, 'u', 'u', 20324), (False, 'r\nr', 'rr', 20325), (True, 'o', 'o', 20326), (True, 'y', 'y', 20327), (True, 't', 't', 20328), (False, 't\nt', 'tt', 20329), (False, 'm\nm\nm', 'mmm', 20330), (False, 'k\nk', 'kk', 20331), (False, 'z\nz\nz\nz\nz\nz\nz\nz\nz\nz', 'zzzzzzzzzz', 20332), (False, 'a\na\na\na\na\na\na\na\na\na', 'aaaaaaaaaa', 20333), (False, 'z\nz', 'zz', 20334), (True, 'b', 'b', 20335), (True, 'y', 'y', 20336), (False, 'y\ny', 'yy', 20337), (False, 'z\nz', 'zz', 20338), (False, 'b\nb', 'bb', 20339), (False, 'a\na', 'aa', 20340), (True, 'a', 'a', 20341), (True, 'z', 'z', 20342), (False, 'z\nz', 'zz', 20343), (False, 'z\nz\nz\nz\nz\nz\nz', 'zzzzzzz', 20344), (False, 'l\nl\nl\nl', 'llll', 20345), (False, 'o\no', 'oo', 20346), (False, 'r\nr', 'rr', 20347)]",False,Wrong Answer,0.9058928290005828,0.9817629179331308,False,0.6481481481481481,False,"def func(*args):
	
	data = str(args[0])
	list = []
	length = len(data)
	for i in range(length):
	    list.append(ord(data[i]))
	maximum = max(list)
	count = 0
	for i in range(length):
	    if (list[i] == maximum):
	        count += 1
	string = chr(maximum)
	for k in range(count):
	    print(string)
"
1210541,27990536,"word = """"
arr_1 = [""A"", ""O"", ""Y"", ""E"", ""U"", ""I""]
arr_2 = [""a"", ""o"", ""y"", ""e"", ""u"", ""i""]
arr_3 =[]
string = input()
arr = []
arr_final = []
count = 0
for i in string:
    arr.append(i)
for i in arr:
    if i not in arr_1 and i not in arr_2:
        arr_final.append(i.lower())
print(""."" + ""."".join(arr_final))",54489,5416,124,6/23/17 21:16,14,1102,1,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (True, '.x.n.h.c.g.t.n.q.c.m', '.x.n.h.c.g.t.n.q.c.m', 135750), (True, '.j.f.m.t.b.j.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (True, '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (True, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (True, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (True, '.w.z.t.c.v.v.v.v.z.v', '.w.z.t.c.v.v.v.v.z.v', 135766), (True, '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (True, '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (True, '.l.t.g.m.g', '.l.t.g.m.g', 135770), (True, '.k.z.d.x.f', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (True, '.m.r.c.g.p', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (True, '.b', '.b', 135775), (True, '.f.l', '.f.l', 135776), (True, '.x.d.w.d.w.d.d.w.d.d.d.d', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",True,Accecpted,0.954297861697201,0.981651376146789,False,0.0,False,"def func(*args):
	
	word = ''
	arr_1 = ['A', 'O', 'Y', 'E', 'U', 'I']
	arr_2 = ['a', 'o', 'y', 'e', 'u', 'i']
	arr_3 = []
	string = args[0]
	arr = []
	arr_final = []
	count = 0
	for i in string:
	    arr.append(i)
	for i in arr:
	    if ((i not in arr_1) and (i not in arr_2)):
	        arr_final.append(i.lower())
	print(('.' + '.'.join(arr_final)))
"
718377,23167525,"N = int(input())
S = """"
for i in range(N,0,-1):
    if S!= """":
        S=S+"" that ""
    if i%2 == 0:
        S=S+""I love""
    else:
        S=S+""I hate""
S=S+"" it""
print(S)",44632,4488,46,12/20/16 4:33,21,668,2,8,"[(True, 'I hate it', 'I hate it', 100802), (False, 'I love that I hate it', 'I hate that I love it', 100803), (True, 'I hate that I love that I hate it', 'I hate that I love that I hate it', 100804), (False, 'I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love it', 100805), (True, 'I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate it', 100806), (False, 'I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100807), (False, 'I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100808), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100809), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100819), (False, 'I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100820)]",False,Wrong Answer,0.9025139799587886,0.9816272965879264,False,0.5,False,"def func(*args):
	
	N = int(args[0])
	S = ''
	for i in range(N, 0, (- 1)):
	    if (S != ''):
	        S = (S + ' that ')
	    if ((i % 2) == 0):
	        S = (S + 'I love')
	    else:
	        S = (S + 'I hate')
	S = (S + ' it')
	print(S)
"
718378,23167543,"N = int(input())
S = """"
for i in range(1,N+1):
    if S!= """":
        S=S+"" that ""
    if i%2 == 0:
        S=S+""I love""
    else:
        S=S+""I hate""
S=S+"" it""
print(S)",44632,4512,62,12/20/16 4:36,21,668,1,8,"[(True, 'I hate it', 'I hate it', 100802), (True, 'I hate that I love it', 'I hate that I love it', 100803), (True, 'I hate that I love that I hate it', 'I hate that I love that I hate it', 100804), (True, 'I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love it', 100805), (True, 'I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate it', 100806), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100807), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100808), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100809), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100819), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100820)]",True,Accecpted,0.9025139799587886,0.9816272965879264,False,0.0,False,"def func(*args):
	
	N = int(args[0])
	S = ''
	for i in range(1, (N + 1)):
	    if (S != ''):
	        S = (S + ' that ')
	    if ((i % 2) == 0):
	        S = (S + 'I love')
	    else:
	        S = (S + 'I hate')
	S = (S + ' it')
	print(S)
"
930238,27269069,"a,b,c,d=map(int,input().split())
s=a%4
h=0
if s==3:
    h=min(b,2*c+2*d)
elif s==2:
    h=min(2*b,c,2*d)
elif s==1:
    h=min(3*b,c+b,d)
print(h)",11930,0,62,5/21/17 17:33,19,858,2,8,"[(True, '3', '3', 116330), (True, '1', '1', 116331), (True, '0', '0', 116332), (True, '1000000000', '1000000000', 116333), (True, '0', '0', 116334), (True, '1', '1', 116335), (True, '5', '5', 116336), (True, '2', '2', 116337), (True, '1', '1', 116338), (True, '1000000000', '1000000000', 116339), (True, '999999990', '999999990', 116340), (True, '335918278', '335918278', 116341), (True, '1000000000', '1000000000', 116342), (True, '0', '0', 116343), (True, '524125987', '524125987', 116344), (True, '673102149', '673102149', 116345), (True, '585325539', '585325539', 116346), (True, '11774896', '11774896', 116347), (True, '0', '0', 116348), (True, '131116353', '131116353', 116349), (False, '782710197', '8075817', 116350), (True, '640274071', '640274071', 116351), (True, '405799987', '405799987', 116352), (True, '678092074', '678092074', 116353), (True, '0', '0', 116354), (False, '5', '3', 116355), (True, '2', '2', 116356), (True, '2', '2', 116357), (False, '4', '3', 116358), (True, '438793836', '438793836', 116359), (False, '454914823', '307539138', 116360), (True, '146086131', '146086131', 116361), (True, '347508634', '347508634', 116362), (True, '0', '0', 116363), (True, '764655030', '764655030', 116364), (True, '0', '0', 116365), (True, '335521569', '335521569', 116366), (True, '546879484', '546879484', 116367), (True, '691688417', '691688417', 116368), (True, '30527185', '30527185', 116369), (True, '0', '0', 116370), (True, '654916173', '654916173', 116371), (True, '216296044', '216296044', 116372), (True, '992170945', '992170945', 116373), (True, '48014511', '48014511', 116374), (True, '0', '0', 116375), (True, '0', '0', 116376), (False, '10000', '9', 116377), (False, '12', '7', 116378), (False, '10000', '3', 116379), (False, '1000', '3', 116380), (False, '10', '3', 116381), (False, '100', '3', 116382), (False, '20002', '3', 116383), (False, '10', '5', 116384), (False, '1000', '6', 116385), (True, '100000', '100000', 116386), (False, '4', '3', 116387), (False, '1000', '9', 116388), (False, '4', '2', 116389), (False, '4', '2', 116390), (False, '4', '2', 116391), (False, '4', '2', 116392), (False, '100000', '3', 116393), (False, '202', '101', 116394), (True, '1000000000', '1000000000', 116395), (False, '22', '11', 116396), (False, '200', '101', 116397), (False, '4', '2', 116398), (False, '4', '3', 116399), (False, '4', '2', 116400), (False, '2000002', '3', 116401), (False, '1000', '3', 116402), (False, '62', '31', 116403), (False, '6', '3', 116404), (False, '12', '3', 116405), (False, '2002', '1001', 116406), (False, '1000', '9', 116407), (False, '4', '3', 116408), (False, '200002', '100001', 116409), (False, '3', '2', 116410), (False, '10', '6', 116411), (False, '2000', '3', 116412), (False, '10000000', '3', 116413), (False, '4', '2', 116414), (False, '68', '34', 116415), (True, '9', '9', 116416), (True, '0', '0', 116417), (True, '0', '0', 116418)]",False,Wrong Answer,0.7611606003349892,0.98159509202454,False,0.4606741573033708,False,"def func(*args):
	
	(a, b, c, d) = map(int, args[0].split())
	s = (a % 4)
	h = 0
	if (s == 3):
	    h = min(b, ((2 * c) + (2 * d)))
	elif (s == 2):
	    h = min((2 * b), c, (2 * d))
	elif (s == 1):
	    h = min((3 * b), (c + b), d)
	print(h)
"
930240,27269176,"a,b,c,d=map(int,input().split())
s=a%4
h=0
if s==3:
    h=min(b,3*d,c+d)
elif s==2:
    h=min(2*b,c,2*d)
elif s==1:
    h=min(3*b,c+b,d)
print(h)",11930,0,62,5/21/17 17:40,19,858,1,8,"[(True, '3', '3', 116330), (True, '1', '1', 116331), (True, '0', '0', 116332), (True, '1000000000', '1000000000', 116333), (True, '0', '0', 116334), (True, '1', '1', 116335), (True, '5', '5', 116336), (True, '2', '2', 116337), (True, '1', '1', 116338), (True, '1000000000', '1000000000', 116339), (True, '999999990', '999999990', 116340), (True, '335918278', '335918278', 116341), (True, '1000000000', '1000000000', 116342), (True, '0', '0', 116343), (True, '524125987', '524125987', 116344), (True, '673102149', '673102149', 116345), (True, '585325539', '585325539', 116346), (True, '11774896', '11774896', 116347), (True, '0', '0', 116348), (True, '131116353', '131116353', 116349), (True, '8075817', '8075817', 116350), (True, '640274071', '640274071', 116351), (True, '405799987', '405799987', 116352), (True, '678092074', '678092074', 116353), (True, '0', '0', 116354), (True, '3', '3', 116355), (True, '2', '2', 116356), (True, '2', '2', 116357), (True, '3', '3', 116358), (True, '438793836', '438793836', 116359), (True, '307539138', '307539138', 116360), (True, '146086131', '146086131', 116361), (True, '347508634', '347508634', 116362), (True, '0', '0', 116363), (True, '764655030', '764655030', 116364), (True, '0', '0', 116365), (True, '335521569', '335521569', 116366), (True, '546879484', '546879484', 116367), (True, '691688417', '691688417', 116368), (True, '30527185', '30527185', 116369), (True, '0', '0', 116370), (True, '654916173', '654916173', 116371), (True, '216296044', '216296044', 116372), (True, '992170945', '992170945', 116373), (True, '48014511', '48014511', 116374), (True, '0', '0', 116375), (True, '0', '0', 116376), (True, '9', '9', 116377), (True, '7', '7', 116378), (True, '3', '3', 116379), (True, '3', '3', 116380), (True, '3', '3', 116381), (True, '3', '3', 116382), (True, '3', '3', 116383), (True, '5', '5', 116384), (True, '6', '6', 116385), (True, '100000', '100000', 116386), (True, '3', '3', 116387), (True, '9', '9', 116388), (True, '2', '2', 116389), (True, '2', '2', 116390), (True, '2', '2', 116391), (True, '2', '2', 116392), (True, '3', '3', 116393), (True, '101', '101', 116394), (True, '1000000000', '1000000000', 116395), (True, '11', '11', 116396), (True, '101', '101', 116397), (True, '2', '2', 116398), (True, '3', '3', 116399), (True, '2', '2', 116400), (True, '3', '3', 116401), (True, '3', '3', 116402), (True, '31', '31', 116403), (True, '3', '3', 116404), (True, '3', '3', 116405), (True, '1001', '1001', 116406), (True, '9', '9', 116407), (True, '3', '3', 116408), (True, '100001', '100001', 116409), (True, '2', '2', 116410), (True, '6', '6', 116411), (True, '3', '3', 116412), (True, '3', '3', 116413), (True, '2', '2', 116414), (True, '34', '34', 116415), (True, '9', '9', 116416), (True, '0', '0', 116417), (True, '0', '0', 116418)]",True,Accecpted,0.7611606003349892,0.98159509202454,False,0.0,False,"def func(*args):
	
	(a, b, c, d) = map(int, args[0].split())
	s = (a % 4)
	h = 0
	if (s == 3):
	    h = min(b, (3 * d), (c + d))
	elif (s == 2):
	    h = min((2 * b), c, (2 * d))
	elif (s == 1):
	    h = min((3 * b), (c + b), d)
	print(h)
"
1438395,22782008,"k = int(input())
a = [int(i) for i in input().split()]
if k==0: print('0')
else:
    a.sort(reverse=True)
    for i in range(12):
        if sum(a[0:i+1])>=k:
            print(i+1);break
    else: print('-1')",68831,4488,124,12/7/16 12:54,9,1280,1,8,"[(True, '2', '2', 148162), (True, '0', '0', 148163), (True, '3', '3', 148164), (True, '1', '1', 148165), (True, '1', '1', 148166), (True, '6', '6', 148167), (True, '-1', '-1', 148168), (True, '0', '0', 148169), (True, '1', '1', 148170), (True, '2', '2', 148171), (True, '3', '3', 148172), (True, '4', '4', 148173), (True, '5', '5', 148174), (True, '6', '6', 148175), (True, '7', '7', 148176), (True, '8', '8', 148177), (True, '9', '9', 148178), (True, '9', '9', 148179), (True, '9', '9', 148180), (True, '11', '11', 148181), (True, '5', '5', 148182), (True, '6', '6', 148183), (True, '7', '7', 148184), (True, '6', '6', 148185), (True, '7', '7', 148186), (True, '9', '9', 148187), (True, '11', '11', 148188), (True, '11', '11', 148189), (True, '-1', '-1', 148190), (True, '-1', '-1', 148191), (True, '-1', '-1', 148192), (True, '0', '0', 148193), (True, '-1', '-1', 148194), (True, '0', '0', 148195), (True, '1', '1', 148196), (True, '12', '12', 148197), (True, '12', '12', 148198), (True, '6', '6', 148199), (True, '-1', '-1', 148200)]",True,Accecpted,0.9554427922043668,0.9815668202764976,False,0.0,False,"def func(*args):
	
	k = int(args[0])
	a = [int(i) for i in args[1].split()]
	if (k == 0):
	    print('0')
	else:
	    a.sort(reverse=True)
	    for i in range(12):
	        if (sum(a[0:(i + 1)]) >= k):
	            print((i + 1))
	            break
	    else:
	        print('-1')
"
1438394,22781993,"k = int(input())
a = [int(i) for i in input().split()]
if k==0: print('0')
else:
    a.sort(reverse=True)
    for i in range(12):
        if sum(a[0:i+1])>=k:
            print(i+1);break
    else: print('12')",68831,4472,124,12/7/16 12:53,9,1280,2,8,"[(True, '2', '2', 148162), (True, '0', '0', 148163), (True, '3', '3', 148164), (True, '1', '1', 148165), (True, '1', '1', 148166), (True, '6', '6', 148167), (False, '12', '-1', 148168), (True, '0', '0', 148169), (True, '1', '1', 148170), (True, '2', '2', 148171), (True, '3', '3', 148172), (True, '4', '4', 148173), (True, '5', '5', 148174), (True, '6', '6', 148175), (True, '7', '7', 148176), (True, '8', '8', 148177), (True, '9', '9', 148178), (True, '9', '9', 148179), (True, '9', '9', 148180), (True, '11', '11', 148181), (True, '5', '5', 148182), (True, '6', '6', 148183), (True, '7', '7', 148184), (True, '6', '6', 148185), (True, '7', '7', 148186), (True, '9', '9', 148187), (True, '11', '11', 148188), (True, '11', '11', 148189), (False, '12', '-1', 148190), (False, '12', '-1', 148191), (False, '12', '-1', 148192), (True, '0', '0', 148193), (False, '12', '-1', 148194), (True, '0', '0', 148195), (True, '1', '1', 148196), (True, '12', '12', 148197), (True, '12', '12', 148198), (True, '6', '6', 148199), (False, '12', '-1', 148200)]",False,Wrong Answer,0.9554427922043668,0.9815668202764976,False,0.1538461538461538,False,"def func(*args):
	
	k = int(args[0])
	a = [int(i) for i in args[1].split()]
	if (k == 0):
	    print('0')
	else:
	    a.sort(reverse=True)
	    for i in range(12):
	        if (sum(a[0:(i + 1)]) >= k):
	            print((i + 1))
	            break
	    else:
	        print('12')
"
1324864,26923770,"import sys
string = input()
instruction = {""H"":1, ""Q"":1, ""9"":1}
for i in range(len(string)):
    if instruction.get(string[i]):
        print(""YES"")
        sys.exit()
print(""NO"")",67710,0,124,5/7/17 15:56,8,1198,1,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (True, 'NO', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (True, 'NO', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (True, 'NO', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (True, 'NO', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (True, 'NO', 'NO', 142090), (True, 'NO', 'NO', 142091), (True, 'NO', 'NO', 142092), (True, 'NO', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (True, 'NO', 'NO', 142096), (True, 'NO', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (True, 'NO', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (True, 'NO', 'NO', 142105)]",True,Accecpted,0.803154665668484,0.9815303430079156,False,0.0,False,"def func(*args):
	
	import sys
	string = args[0]
	instruction = {'H': 1, 'Q': 1, '9': 1}
	for i in range(len(string)):
	    if instruction.get(string[i]):
	        print('YES')
	        sys.exit()
	print('NO')
"
1324863,26923754,"import sys
string = input()
instruction = {""H"":1, ""Q"":1, ""9"":1, ""+"":1}
for i in range(len(string)):
    if instruction.get(string[i]):
        print(""YES"")
        sys.exit()
print(""NO"")",67710,0,92,5/7/17 15:55,8,1198,2,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (False, 'YES', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (False, 'YES', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (False, 'YES', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (False, 'YES', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (False, 'YES', 'NO', 142090), (False, 'YES', 'NO', 142091), (False, 'YES', 'NO', 142092), (False, 'YES', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (False, 'YES', 'NO', 142096), (False, 'YES', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (False, 'YES', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (False, 'YES', 'NO', 142105)]",False,Wrong Answer,0.803154665668484,0.9815303430079156,False,0.1411764705882353,False,"def func(*args):
	
	import sys
	string = args[0]
	instruction = {'H': 1, 'Q': 1, '9': 1, '+': 1}
	for i in range(len(string)):
	    if instruction.get(string[i]):
	        print('YES')
	        sys.exit()
	print('NO')
"
192132,20173006,"s=input().split()
s1=int(s[0])
if s[2]=='week':
   if s1==5 or s1==6 or s1==7:
   	  print(53)
   else:
   	   print(52)
else:
    if s1==31:
         print(7)
    elif s1==30:
          print(11)
    else:
      print(12)",17941,4516,62,8/26/16 13:34,27,159,2,8,"[(True, '52', '52', 60995), (True, '11', '11', 60996), (True, '12', '12', 60997), (True, '7', '7', 60998), (True, '53', '53', 60999), (True, '52', '52', 61000), (True, '52', '52', 61001), (True, '52', '52', 61002), (True, '53', '53', 61003), (False, '53', '52', 61004), (True, '12', '12', 61005), (True, '12', '12', 61006), (True, '12', '12', 61007), (True, '12', '12', 61008), (True, '12', '12', 61009), (True, '12', '12', 61010), (True, '12', '12', 61011), (True, '12', '12', 61012), (True, '12', '12', 61013), (True, '12', '12', 61014), (True, '12', '12', 61015), (True, '12', '12', 61016), (True, '12', '12', 61017), (True, '12', '12', 61018), (True, '12', '12', 61019), (True, '12', '12', 61020), (True, '12', '12', 61021), (True, '12', '12', 61022), (True, '12', '12', 61023), (True, '12', '12', 61024), (True, '12', '12', 61025), (True, '12', '12', 61026), (True, '12', '12', 61027), (True, '12', '12', 61028), (True, '12', '12', 61029), (True, '12', '12', 61030), (True, '12', '12', 61031), (True, '12', '12', 61032)]",False,Wrong Answer,0.7739321540474097,0.9815195071868584,False,0.0263157894736842,False,"def func(*args):
	
	s = args[0].split()
	s1 = int(s[0])
	if (s[2] == 'week'):
	    if ((s1 == 5) or (s1 == 6) or (s1 == 7)):
	        print(53)
	    else:
	        print(52)
	elif (s1 == 31):
	    print(7)
	elif (s1 == 30):
	    print(11)
	else:
	    print(12)
"
192133,20173031,"s=input().split()
s1=int(s[0])
if s[2]=='week':
   if s1==5 or s1==6:
   	  print(53)
   else:
   	   print(52)
else:
    if s1==31:
         print(7)
    elif s1==30:
          print(11)
    else:
      print(12)",17941,4504,61,8/26/16 13:36,27,159,1,8,"[(True, '52', '52', 60995), (True, '11', '11', 60996), (True, '12', '12', 60997), (True, '7', '7', 60998), (True, '53', '53', 60999), (True, '52', '52', 61000), (True, '52', '52', 61001), (True, '52', '52', 61002), (True, '53', '53', 61003), (True, '52', '52', 61004), (True, '12', '12', 61005), (True, '12', '12', 61006), (True, '12', '12', 61007), (True, '12', '12', 61008), (True, '12', '12', 61009), (True, '12', '12', 61010), (True, '12', '12', 61011), (True, '12', '12', 61012), (True, '12', '12', 61013), (True, '12', '12', 61014), (True, '12', '12', 61015), (True, '12', '12', 61016), (True, '12', '12', 61017), (True, '12', '12', 61018), (True, '12', '12', 61019), (True, '12', '12', 61020), (True, '12', '12', 61021), (True, '12', '12', 61022), (True, '12', '12', 61023), (True, '12', '12', 61024), (True, '12', '12', 61025), (True, '12', '12', 61026), (True, '12', '12', 61027), (True, '12', '12', 61028), (True, '12', '12', 61029), (True, '12', '12', 61030), (True, '12', '12', 61031), (True, '12', '12', 61032)]",True,Accecpted,0.7739321540474097,0.9815195071868584,False,0.0,False,"def func(*args):
	
	s = args[0].split()
	s1 = int(s[0])
	if (s[2] == 'week'):
	    if ((s1 == 5) or (s1 == 6)):
	        print(53)
	    else:
	        print(52)
	elif (s1 == 31):
	    print(7)
	elif (s1 == 30):
	    print(11)
	else:
	    print(12)
"
1603288,29487626,"n = int(input())
a = ['', 2, 3, 1, 2, 1]
print(a[n])",6204,4508,92,8/15/17 20:48,3,1405,1,8,"[(True, '1', '1', 154472), (True, '2', '2', 154473), (True, '2', '2', 154474), (True, '3', '3', 154475), (True, '1', '1', 154476)]",True,Accecpted,0.8265168183793802,0.9814814814814816,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	a = ['', 2, 3, 1, 2, 1]
	print(a[n])
"
2782229,29330018,"x=  int (input())
if x<= 127 :
    print ('byte')
elif x<=32767 :
    print ('short')
elif x<= 2147483647 :
    print ('int')
elif x<= 9223372036854775807:
    print ('long')
else :
    print ('BigInteger')",49241,4524,124,8/10/17 18:27,11,2385,1,8,"[(True, 'byte', 'byte', 211383), (True, 'short', 'short', 211384), (True, 'BigInteger', 'BigInteger', 211385), (True, 'byte', 'byte', 211386), (True, 'byte', 'byte', 211387), (True, 'byte', 'byte', 211388), (True, 'short', 'short', 211389), (True, 'short', 'short', 211390), (True, 'int', 'int', 211391), (True, 'short', 'short', 211392), (True, 'short', 'short', 211393), (True, 'int', 'int', 211394), (True, 'int', 'int', 211395), (True, 'int', 'int', 211396), (True, 'int', 'int', 211397), (True, 'int', 'int', 211398), (True, 'long', 'long', 211399), (True, 'long', 'long', 211400), (True, 'long', 'long', 211401), (True, 'long', 'long', 211402), (True, 'long', 'long', 211403), (True, 'BigInteger', 'BigInteger', 211404), (True, 'BigInteger', 'BigInteger', 211405), (True, 'BigInteger', 'BigInteger', 211406), (True, 'short', 'short', 211407), (True, 'BigInteger', 'BigInteger', 211408), (True, 'BigInteger', 'BigInteger', 211409), (True, 'BigInteger', 'BigInteger', 211410), (True, 'BigInteger', 'BigInteger', 211411), (True, 'long', 'long', 211412), (True, 'BigInteger', 'BigInteger', 211413), (True, 'BigInteger', 'BigInteger', 211414), (True, 'BigInteger', 'BigInteger', 211415), (True, 'BigInteger', 'BigInteger', 211416), (True, 'BigInteger', 'BigInteger', 211417), (True, 'BigInteger', 'BigInteger', 211418), (True, 'BigInteger', 'BigInteger', 211419), (True, 'BigInteger', 'BigInteger', 211420), (True, 'BigInteger', 'BigInteger', 211421), (True, 'BigInteger', 'BigInteger', 211422), (True, 'BigInteger', 'BigInteger', 211423), (True, 'BigInteger', 'BigInteger', 211424), (True, 'BigInteger', 'BigInteger', 211425), (True, 'BigInteger', 'BigInteger', 211426), (True, 'BigInteger', 'BigInteger', 211427), (True, 'BigInteger', 'BigInteger', 211428), (True, 'BigInteger', 'BigInteger', 211429), (True, 'BigInteger', 'BigInteger', 211430), (True, 'BigInteger', 'BigInteger', 211431), (True, 'BigInteger', 'BigInteger', 211432), (True, 'BigInteger', 'BigInteger', 211433), (True, 'BigInteger', 'BigInteger', 211434), (True, 'BigInteger', 'BigInteger', 211435), (True, 'BigInteger', 'BigInteger', 211436), (True, 'BigInteger', 'BigInteger', 211437), (True, 'BigInteger', 'BigInteger', 211438), (True, 'BigInteger', 'BigInteger', 211439), (True, 'BigInteger', 'BigInteger', 211440), (True, 'BigInteger', 'BigInteger', 211441), (True, 'BigInteger', 'BigInteger', 211442), (True, 'BigInteger', 'BigInteger', 211443), (True, 'BigInteger', 'BigInteger', 211444), (True, 'BigInteger', 'BigInteger', 211445), (True, 'BigInteger', 'BigInteger', 211446), (True, 'BigInteger', 'BigInteger', 211447), (True, 'BigInteger', 'BigInteger', 211448), (True, 'BigInteger', 'BigInteger', 211449), (True, 'BigInteger', 'BigInteger', 211450), (True, 'BigInteger', 'BigInteger', 211451), (True, 'BigInteger', 'BigInteger', 211452), (True, 'byte', 'byte', 211453), (True, 'long', 'long', 211454), (True, 'byte', 'byte', 211455), (True, 'long', 'long', 211456), (True, 'long', 'long', 211457), (True, 'long', 'long', 211458), (True, 'long', 'long', 211459), (True, 'long', 'long', 211460), (True, 'int', 'int', 211461), (True, 'int', 'int', 211462), (True, 'int', 'int', 211463), (True, 'int', 'int', 211464), (True, 'long', 'long', 211465), (True, 'long', 'long', 211466), (True, 'long', 'long', 211467), (True, 'long', 'long', 211468), (True, 'byte', 'byte', 211469), (True, 'long', 'long', 211470), (True, 'short', 'short', 211471), (True, 'long', 'long', 211472)]",True,Accecpted,0.6022711089733979,0.9814814814814816,False,0.0,False,"def func(*args):
	
	x = int(args[0])
	if (x <= 127):
	    print('byte')
	elif (x <= 32767):
	    print('short')
	elif (x <= 2147483647):
	    print('int')
	elif (x <= 9223372036854775807):
	    print('long')
	else:
	    print('BigInteger')
"
1603287,29487619,"n = int(input())
a = ['', 2, 3, 1, 2, 3]
print(a[n])",6204,4504,154,8/15/17 20:48,3,1405,2,8,"[(True, '1', '1', 154472), (True, '2', '2', 154473), (True, '2', '2', 154474), (True, '3', '3', 154475), (False, '3', '1', 154476)]",False,Wrong Answer,0.8265168183793802,0.9814814814814816,False,0.2,False,"def func(*args):
	
	n = int(args[0])
	a = ['', 2, 3, 1, 2, 3]
	print(a[n])
"
2782228,29329958,"x=  int (input())
if x<= 128 :
    print ('byte')
elif x<=32768 :
    print ('short')
elif x<= 2147483648 :
    print ('int')
elif x<= 9223372036854775808:
    print ('long')
else :
    print ('BigInteger')",49241,4520,92,8/10/17 18:25,11,2385,2,8,"[(True, 'byte', 'byte', 211383), (True, 'short', 'short', 211384), (True, 'BigInteger', 'BigInteger', 211385), (True, 'byte', 'byte', 211386), (True, 'byte', 'byte', 211387), (True, 'byte', 'byte', 211388), (False, 'byte', 'short', 211389), (True, 'short', 'short', 211390), (True, 'int', 'int', 211391), (True, 'short', 'short', 211392), (True, 'short', 'short', 211393), (False, 'short', 'int', 211394), (True, 'int', 'int', 211395), (True, 'int', 'int', 211396), (True, 'int', 'int', 211397), (True, 'int', 'int', 211398), (False, 'int', 'long', 211399), (True, 'long', 'long', 211400), (True, 'long', 'long', 211401), (True, 'long', 'long', 211402), (True, 'long', 'long', 211403), (False, 'long', 'BigInteger', 211404), (True, 'BigInteger', 'BigInteger', 211405), (True, 'BigInteger', 'BigInteger', 211406), (True, 'short', 'short', 211407), (True, 'BigInteger', 'BigInteger', 211408), (True, 'BigInteger', 'BigInteger', 211409), (True, 'BigInteger', 'BigInteger', 211410), (True, 'BigInteger', 'BigInteger', 211411), (True, 'long', 'long', 211412), (True, 'BigInteger', 'BigInteger', 211413), (True, 'BigInteger', 'BigInteger', 211414), (True, 'BigInteger', 'BigInteger', 211415), (True, 'BigInteger', 'BigInteger', 211416), (True, 'BigInteger', 'BigInteger', 211417), (True, 'BigInteger', 'BigInteger', 211418), (True, 'BigInteger', 'BigInteger', 211419), (True, 'BigInteger', 'BigInteger', 211420), (True, 'BigInteger', 'BigInteger', 211421), (True, 'BigInteger', 'BigInteger', 211422), (True, 'BigInteger', 'BigInteger', 211423), (True, 'BigInteger', 'BigInteger', 211424), (True, 'BigInteger', 'BigInteger', 211425), (True, 'BigInteger', 'BigInteger', 211426), (True, 'BigInteger', 'BigInteger', 211427), (True, 'BigInteger', 'BigInteger', 211428), (True, 'BigInteger', 'BigInteger', 211429), (True, 'BigInteger', 'BigInteger', 211430), (True, 'BigInteger', 'BigInteger', 211431), (True, 'BigInteger', 'BigInteger', 211432), (True, 'BigInteger', 'BigInteger', 211433), (True, 'BigInteger', 'BigInteger', 211434), (True, 'BigInteger', 'BigInteger', 211435), (True, 'BigInteger', 'BigInteger', 211436), (True, 'BigInteger', 'BigInteger', 211437), (True, 'BigInteger', 'BigInteger', 211438), (True, 'BigInteger', 'BigInteger', 211439), (True, 'BigInteger', 'BigInteger', 211440), (True, 'BigInteger', 'BigInteger', 211441), (True, 'BigInteger', 'BigInteger', 211442), (True, 'BigInteger', 'BigInteger', 211443), (True, 'BigInteger', 'BigInteger', 211444), (True, 'BigInteger', 'BigInteger', 211445), (True, 'BigInteger', 'BigInteger', 211446), (True, 'BigInteger', 'BigInteger', 211447), (True, 'BigInteger', 'BigInteger', 211448), (True, 'BigInteger', 'BigInteger', 211449), (True, 'BigInteger', 'BigInteger', 211450), (True, 'BigInteger', 'BigInteger', 211451), (True, 'BigInteger', 'BigInteger', 211452), (True, 'byte', 'byte', 211453), (True, 'long', 'long', 211454), (True, 'byte', 'byte', 211455), (True, 'long', 'long', 211456), (True, 'long', 'long', 211457), (True, 'long', 'long', 211458), (True, 'long', 'long', 211459), (True, 'long', 'long', 211460), (True, 'int', 'int', 211461), (True, 'int', 'int', 211462), (True, 'int', 'int', 211463), (True, 'int', 'int', 211464), (True, 'long', 'long', 211465), (True, 'long', 'long', 211466), (True, 'long', 'long', 211467), (True, 'long', 'long', 211468), (True, 'byte', 'byte', 211469), (True, 'long', 'long', 211470), (True, 'short', 'short', 211471), (True, 'long', 'long', 211472)]",False,Wrong Answer,0.6022711089733979,0.9814814814814816,False,0.0444444444444444,False,"def func(*args):
	
	x = int(args[0])
	if (x <= 128):
	    print('byte')
	elif (x <= 32768):
	    print('short')
	elif (x <= 2147483648):
	    print('int')
	elif (x <= 9223372036854775808):
	    print('long')
	else:
	    print('BigInteger')
"
1432286,24677571,"# Description of the problem can be found at http://codeforces.com/problemset/problem/148/A


def main():
    damage_numbers = list()
    dragons_hurt = 0
    # add k, l, m, n, d to our damage_numbers list
    damage_numbers.append(int(input()))
    damage_numbers.append(int(input()))
    damage_numbers.append(int(input()))
    damage_numbers.append(int(input()))
    
    num_dragons = int(input())
    
    for dragon_num in range(num_dragons):
        for damage_number in damage_numbers:
            if dragon_num % damage_number == 0:
                dragons_hurt += 1
                break
    
    print(dragons_hurt)
    
    
if __name__ == ""__main__"":
    main()",541,4512,154,2/14/17 20:44,25,1274,2,8,"[(True, '12', '12', 147720), (True, '17', '17', 147721), (True, '100000', '100000', 147722), (False, '1', '0', 147723), (False, '32719', '32718', 147724), (True, '59392', '59392', 147725), (True, '44835', '44835', 147726), (True, '62982', '62982', 147727), (False, '35247', '35246', 147728), (True, '75083', '75083', 147729), (False, '24657', '24656', 147730), (False, '36321', '36320', 147731), (True, '28244', '28244', 147732), (True, '16540', '16540', 147733), (True, '36302', '36302', 147734), (True, '15539', '15539', 147735), (True, '39901', '39901', 147736), (True, '58048', '58048', 147737), (False, '21957', '21956', 147738), (True, '32736', '32736', 147739), (False, '11119', '11118', 147740), (True, '49547', '49547', 147741), (False, '36020', '36019', 147742), (True, '63537', '63537', 147743), (True, '53678', '53678', 147744), (True, '99831', '99831', 147745), (False, '20361', '20360', 147746), (False, '29932', '29931', 147747), (True, '89535', '89535', 147748), (True, '7682', '7682', 147749), (False, '9225', '9224', 147750), (False, '43540', '43539', 147751), (False, '2439', '2438', 147752), (False, '416', '415', 147753), (True, '10000', '10000', 147754), (True, '1', '1', 147755), (False, '1', '0', 147756), (True, '10', '10', 147757), (True, '100', '100', 147758), (False, '1', '0', 147759)]",False,Wrong Answer,0.9253123231329275,0.9814550641940084,False,0.4,False,"def func(*args):
	
	
	def main():
	    damage_numbers = list()
	    dragons_hurt = 0
	    damage_numbers.append(int(args[0]))
	    damage_numbers.append(int(args[1]))
	    damage_numbers.append(int(args[2]))
	    damage_numbers.append(int(args[3]))
	    num_dragons = int(args[4])
	    for dragon_num in range(num_dragons):
	        for damage_number in damage_numbers:
	            if ((dragon_num % damage_number) == 0):
	                dragons_hurt += 1
	                break
	    print(dragons_hurt)
	if (__name__ == '__main__'):
	    main()
"
1432287,24677603,"# Description of the problem can be found at http://codeforces.com/problemset/problem/148/A


def main():
    damage_numbers = list()
    dragons_hurt = 0
    # add k, l, m, n, d to our damage_numbers list
    damage_numbers.append(int(input()))
    damage_numbers.append(int(input()))
    damage_numbers.append(int(input()))
    damage_numbers.append(int(input()))
    
    num_dragons = int(input())
    
    for dragon_num in range(num_dragons):
        for damage_number in damage_numbers:
            if (dragon_num + 1) % damage_number == 0:
                dragons_hurt += 1
                break
    
    print(dragons_hurt)
    
    
if __name__ == ""__main__"":
    main()",541,4512,404,2/14/17 20:45,25,1274,1,8,"[(True, '12', '12', 147720), (True, '17', '17', 147721), (True, '100000', '100000', 147722), (True, '0', '0', 147723), (True, '32718', '32718', 147724), (True, '59392', '59392', 147725), (True, '44835', '44835', 147726), (True, '62982', '62982', 147727), (True, '35246', '35246', 147728), (True, '75083', '75083', 147729), (True, '24656', '24656', 147730), (True, '36320', '36320', 147731), (True, '28244', '28244', 147732), (True, '16540', '16540', 147733), (True, '36302', '36302', 147734), (True, '15539', '15539', 147735), (True, '39901', '39901', 147736), (True, '58048', '58048', 147737), (True, '21956', '21956', 147738), (True, '32736', '32736', 147739), (True, '11118', '11118', 147740), (True, '49547', '49547', 147741), (True, '36019', '36019', 147742), (True, '63537', '63537', 147743), (True, '53678', '53678', 147744), (True, '99831', '99831', 147745), (True, '20360', '20360', 147746), (True, '29931', '29931', 147747), (True, '89535', '89535', 147748), (True, '7682', '7682', 147749), (True, '9224', '9224', 147750), (True, '43539', '43539', 147751), (True, '2438', '2438', 147752), (True, '415', '415', 147753), (True, '10000', '10000', 147754), (True, '1', '1', 147755), (True, '0', '0', 147756), (True, '10', '10', 147757), (True, '100', '100', 147758), (True, '0', '0', 147759)]",True,Accecpted,0.9253123231329275,0.9814550641940084,False,0.0,False,"def func(*args):
	
	
	def main():
	    damage_numbers = list()
	    dragons_hurt = 0
	    damage_numbers.append(int(args[0]))
	    damage_numbers.append(int(args[1]))
	    damage_numbers.append(int(args[2]))
	    damage_numbers.append(int(args[3]))
	    num_dragons = int(args[4])
	    for dragon_num in range(num_dragons):
	        for damage_number in damage_numbers:
	            if (((dragon_num + 1) % damage_number) == 0):
	                dragons_hurt += 1
	                break
	    print(dragons_hurt)
	if (__name__ == '__main__'):
	    main()
"
3352178,28305142,"m, b = map(int, input().split())
ans = 0
for y in range(0, b + 1):
    x = m * (b - y)
    ans = max(ans, (x + 1) * (y * (y + 1) / 2) + (y + 1) * (x * (x + 1) / 2))
print(int(ans))",9342,5412,61,7/5/17 16:34,11,2905,2,8,"[(True, '30', '30', 245052), (True, '25', '25', 245053), (True, '459', '459', 245054), (True, '171', '171', 245055), (True, '1', '1', 245056), (True, '55', '55', 245057), (True, '40326', '40326', 245058), (False, '74133360011484448', '74133360011484445', 245059), (True, '1137907933561080', '1137907933561080', 245060), (False, '29032056230649784', '29032056230649780', 245061), (True, '5495451829240878', '5495451829240878', 245062), (True, '366755153481948', '366755153481948', 245063), (True, '16893595018603386', '16893595018603386', 245064), (True, '2281741798549', '2281741798549', 245065), (True, '1771610559998400', '1771610559998400', 245066), (True, '75233740231341', '75233740231341', 245067), (True, '4438222781916', '4438222781916', 245068), (True, '5511730799718825', '5511730799718825', 245069), (True, '49802404050106', '49802404050106', 245070), (True, '142915220249910', '142915220249910', 245071), (True, '4221391613846823', '4221391613846823', 245072), (False, '28569727339126168', '28569727339126165', 245073), (True, '9007500020760', '9007500020760', 245074), (True, '43730657099581', '43730657099581', 245075), (True, '5909849585253250', '5909849585253250', 245076), (True, '1548544125646', '1548544125646', 245077), (True, '1878390629993745', '1878390629993745', 245078), (True, '9470470760118060', '9470470760118060', 245079), (False, '10326205017481608', '10326205017481606', 245080), (True, '1620061541812350', '1620061541812350', 245081), (True, '14758909519725', '14758909519725', 245082), (False, '19452619774222876', '19452619774222875', 245083), (False, '15265318959845744', '15265318959845745', 245084), (True, '1327174123029975', '1327174123029975', 245085), (True, '2546859449982016', '2546859449982016', 245086), (True, '1115613396515835', '1115613396515835', 245087), (True, '927715710215505', '927715710215505', 245088), (True, '1061060598862891', '1061060598862891', 245089)]",False,Wrong Answer,0.8880663941924201,0.9814323607427056,False,0.1578947368421052,False,"def func(*args):
	
	(m, b) = map(int, args[0].split())
	ans = 0
	for y in range(0, (b + 1)):
	    x = (m * (b - y))
	    ans = max(ans, (((x + 1) * ((y * (y + 1)) / 2)) + ((y + 1) * ((x * (x + 1)) / 2))))
	print(int(ans))
"
3352179,28305166,"m, b = map(int, input().split())
ans = 0
for y in range(0, b + 1):
    x = m * (b - y)
    ans = max(ans, (x + 1) * (y * (y + 1) // 2) + (y + 1) * (x * (x + 1) // 2))
print(ans)",9342,5420,77,7/5/17 16:35,11,2905,1,8,"[(True, '30', '30', 245052), (True, '25', '25', 245053), (True, '459', '459', 245054), (True, '171', '171', 245055), (True, '1', '1', 245056), (True, '55', '55', 245057), (True, '40326', '40326', 245058), (True, '74133360011484445', '74133360011484445', 245059), (True, '1137907933561080', '1137907933561080', 245060), (True, '29032056230649780', '29032056230649780', 245061), (True, '5495451829240878', '5495451829240878', 245062), (True, '366755153481948', '366755153481948', 245063), (True, '16893595018603386', '16893595018603386', 245064), (True, '2281741798549', '2281741798549', 245065), (True, '1771610559998400', '1771610559998400', 245066), (True, '75233740231341', '75233740231341', 245067), (True, '4438222781916', '4438222781916', 245068), (True, '5511730799718825', '5511730799718825', 245069), (True, '49802404050106', '49802404050106', 245070), (True, '142915220249910', '142915220249910', 245071), (True, '4221391613846823', '4221391613846823', 245072), (True, '28569727339126165', '28569727339126165', 245073), (True, '9007500020760', '9007500020760', 245074), (True, '43730657099581', '43730657099581', 245075), (True, '5909849585253250', '5909849585253250', 245076), (True, '1548544125646', '1548544125646', 245077), (True, '1878390629993745', '1878390629993745', 245078), (True, '9470470760118060', '9470470760118060', 245079), (True, '10326205017481606', '10326205017481606', 245080), (True, '1620061541812350', '1620061541812350', 245081), (True, '14758909519725', '14758909519725', 245082), (True, '19452619774222875', '19452619774222875', 245083), (True, '15265318959845745', '15265318959845745', 245084), (True, '1327174123029975', '1327174123029975', 245085), (True, '2546859449982016', '2546859449982016', 245086), (True, '1115613396515835', '1115613396515835', 245087), (True, '927715710215505', '927715710215505', 245088), (True, '1061060598862891', '1061060598862891', 245089)]",True,Accecpted,0.8880663941924201,0.9814323607427056,False,0.0,False,"def func(*args):
	
	(m, b) = map(int, args[0].split())
	ans = 0
	for y in range(0, (b + 1)):
	    x = (m * (b - y))
	    ans = max(ans, (((x + 1) * ((y * (y + 1)) // 2)) + ((y + 1) * ((x * (x + 1)) // 2))))
	print(ans)
"
1810063,9741705,"u = int(input())
if u == 1:
    print(1)
if 2 <= u <= 5:
    if u == 3:
        print(5)
    else:
        print(3)
if 6 <= u <= 13:
    print(5)
if 14 <= u <= 25:
    print(7)
if 26 <= u <= 41:
    print(9)
if 42 <= u <= 61:
    print(11)
if 62 <= u <= 85:
    print(13)
if 86 <= u <= 100:
    print(15)",56716,4,124,2/7/15 6:32,20,1598,1,8,"[(True, '3', '3', 20420), (True, '5', '5', 20421), (True, '5', '5', 20422), (True, '5', '5', 20423), (True, '1', '1', 20424), (True, '7', '7', 20425), (True, '5', '5', 20426), (True, '3', '3', 20427), (True, '3', '3', 20428), (True, '5', '5', 20429), (True, '5', '5', 20430), (True, '5', '5', 20431), (True, '5', '5', 20432), (True, '5', '5', 20433), (True, '7', '7', 20434), (True, '7', '7', 20435), (True, '7', '7', 20436), (True, '7', '7', 20437), (True, '7', '7', 20438), (True, '7', '7', 20439), (True, '7', '7', 20440), (True, '7', '7', 20441), (True, '7', '7', 20442), (True, '7', '7', 20443), (True, '7', '7', 20444), (True, '9', '9', 20445), (True, '9', '9', 20446), (True, '9', '9', 20447), (True, '9', '9', 20448), (True, '9', '9', 20449), (True, '9', '9', 20450), (True, '9', '9', 20451), (True, '9', '9', 20452), (True, '9', '9', 20453), (True, '9', '9', 20454), (True, '9', '9', 20455), (True, '9', '9', 20456), (True, '9', '9', 20457), (True, '9', '9', 20458), (True, '9', '9', 20459), (True, '9', '9', 20460), (True, '11', '11', 20461), (True, '11', '11', 20462), (True, '11', '11', 20463), (True, '11', '11', 20464), (True, '11', '11', 20465), (True, '11', '11', 20466), (True, '11', '11', 20467), (True, '11', '11', 20468), (True, '11', '11', 20469), (True, '11', '11', 20470), (True, '11', '11', 20471), (True, '11', '11', 20472), (True, '11', '11', 20473), (True, '11', '11', 20474), (True, '11', '11', 20475), (True, '11', '11', 20476), (True, '11', '11', 20477), (True, '11', '11', 20478), (True, '11', '11', 20479), (True, '11', '11', 20480), (True, '13', '13', 20481), (True, '13', '13', 20482), (True, '13', '13', 20483), (True, '13', '13', 20484), (True, '13', '13', 20485), (True, '13', '13', 20486), (True, '13', '13', 20487), (True, '13', '13', 20488), (True, '13', '13', 20489), (True, '13', '13', 20490), (True, '13', '13', 20491), (True, '13', '13', 20492), (True, '13', '13', 20493), (True, '13', '13', 20494), (True, '13', '13', 20495), (True, '13', '13', 20496), (True, '13', '13', 20497), (True, '13', '13', 20498), (True, '13', '13', 20499), (True, '13', '13', 20500), (True, '13', '13', 20501), (True, '13', '13', 20502), (True, '13', '13', 20503), (True, '13', '13', 20504), (True, '15', '15', 20505), (True, '15', '15', 20506), (True, '15', '15', 20507), (True, '15', '15', 20508), (True, '15', '15', 20509), (True, '15', '15', 20510), (True, '15', '15', 20511), (True, '15', '15', 20512), (True, '15', '15', 20513), (True, '15', '15', 20514), (True, '15', '15', 20515), (True, '15', '15', 20516), (True, '15', '15', 20517), (True, '15', '15', 20518), (True, '15', '15', 20519)]",True,Accecpted,0.7603983215567359,0.9814241486068112,False,0.0,False,"def func(*args):
	
	u = int(args[0])
	if (u == 1):
	    print(1)
	if (2 <= u <= 5):
	    if (u == 3):
	        print(5)
	    else:
	        print(3)
	if (6 <= u <= 13):
	    print(5)
	if (14 <= u <= 25):
	    print(7)
	if (26 <= u <= 41):
	    print(9)
	if (42 <= u <= 61):
	    print(11)
	if (62 <= u <= 85):
	    print(13)
	if (86 <= u <= 100):
	    print(15)
"
1810062,9741698,"u = int(input())
if u == 1:
    print(1)
if 2 <= u <= 5:
    if u == 3:
        print(5)
    else:
        print(3)
if 6 <= u <= 13:
    print(5)
if 14 <= u <= 25:
    print(7)
if 26 <= u <= 40:
    print(9)
if 41 <= u <= 60:
    print(11)
if 61 <= u <= 84:
    print(13)
if 85 <= u <= 100:
    print(15)",56716,8,124,2/7/15 6:30,20,1598,2,8,"[(True, '3', '3', 20420), (True, '5', '5', 20421), (True, '5', '5', 20422), (True, '5', '5', 20423), (True, '1', '1', 20424), (True, '7', '7', 20425), (True, '5', '5', 20426), (True, '3', '3', 20427), (True, '3', '3', 20428), (True, '5', '5', 20429), (True, '5', '5', 20430), (True, '5', '5', 20431), (True, '5', '5', 20432), (True, '5', '5', 20433), (True, '7', '7', 20434), (True, '7', '7', 20435), (True, '7', '7', 20436), (True, '7', '7', 20437), (True, '7', '7', 20438), (True, '7', '7', 20439), (True, '7', '7', 20440), (True, '7', '7', 20441), (True, '7', '7', 20442), (True, '7', '7', 20443), (True, '7', '7', 20444), (True, '9', '9', 20445), (True, '9', '9', 20446), (True, '9', '9', 20447), (True, '9', '9', 20448), (True, '9', '9', 20449), (True, '9', '9', 20450), (True, '9', '9', 20451), (True, '9', '9', 20452), (True, '9', '9', 20453), (True, '9', '9', 20454), (True, '9', '9', 20455), (True, '9', '9', 20456), (True, '9', '9', 20457), (True, '9', '9', 20458), (True, '9', '9', 20459), (False, '11', '9', 20460), (True, '11', '11', 20461), (True, '11', '11', 20462), (True, '11', '11', 20463), (True, '11', '11', 20464), (True, '11', '11', 20465), (True, '11', '11', 20466), (True, '11', '11', 20467), (True, '11', '11', 20468), (True, '11', '11', 20469), (True, '11', '11', 20470), (True, '11', '11', 20471), (True, '11', '11', 20472), (True, '11', '11', 20473), (True, '11', '11', 20474), (True, '11', '11', 20475), (True, '11', '11', 20476), (True, '11', '11', 20477), (True, '11', '11', 20478), (True, '11', '11', 20479), (False, '13', '11', 20480), (True, '13', '13', 20481), (True, '13', '13', 20482), (True, '13', '13', 20483), (True, '13', '13', 20484), (True, '13', '13', 20485), (True, '13', '13', 20486), (True, '13', '13', 20487), (True, '13', '13', 20488), (True, '13', '13', 20489), (True, '13', '13', 20490), (True, '13', '13', 20491), (True, '13', '13', 20492), (True, '13', '13', 20493), (True, '13', '13', 20494), (True, '13', '13', 20495), (True, '13', '13', 20496), (True, '13', '13', 20497), (True, '13', '13', 20498), (True, '13', '13', 20499), (True, '13', '13', 20500), (True, '13', '13', 20501), (True, '13', '13', 20502), (True, '13', '13', 20503), (False, '15', '13', 20504), (True, '15', '15', 20505), (True, '15', '15', 20506), (True, '15', '15', 20507), (True, '15', '15', 20508), (True, '15', '15', 20509), (True, '15', '15', 20510), (True, '15', '15', 20511), (True, '15', '15', 20512), (True, '15', '15', 20513), (True, '15', '15', 20514), (True, '15', '15', 20515), (True, '15', '15', 20516), (True, '15', '15', 20517), (True, '15', '15', 20518), (True, '15', '15', 20519)]",False,Wrong Answer,0.7603983215567359,0.9814241486068112,False,0.03,False,"def func(*args):
	
	u = int(args[0])
	if (u == 1):
	    print(1)
	if (2 <= u <= 5):
	    if (u == 3):
	        print(5)
	    else:
	        print(3)
	if (6 <= u <= 13):
	    print(5)
	if (14 <= u <= 25):
	    print(7)
	if (26 <= u <= 40):
	    print(9)
	if (41 <= u <= 60):
	    print(11)
	if (61 <= u <= 84):
	    print(13)
	if (85 <= u <= 100):
	    print(15)
"
1153688,24141030,"from math import *
a = int(input())
n = max(floor(sqrt(2*a))-1,0)
while(n*(n+1)//2<a or (n*(n+1)//2-a)%2==1):
    n+=1
print(n)",55083,4508,92,1/26/17 5:40,6,1060,5,8,"[(True, '3', '3', 131166), (True, '3', '3', 131167), (True, '0', '0', 131168), (False, '', '44723', 131169), (True, '44720', '44720', 131170), (True, '44721', '44721', 131171), (True, '44721', '44721', 131172), (False, '', '31273', 131173), (False, '', '41617', 131174), (False, '', '23591', 131175), (False, '', '13213', 131176), (True, '14403', '14403', 131177), (True, '24277', '24277', 131178), (True, '31166', '31166', 131179), (True, '36787', '36787', 131180), (True, '41657', '41657', 131181), (False, '', '43393', 131182), (False, '', '42377', 131183), (False, '', '37603', 131184), (False, '', '39755', 131185), (True, '5730', '5730', 131186), (True, '40573', '40573', 131187), (False, '', '32179', 131188), (True, '24038', '24038', 131189), (False, '', '42531', 131190), (False, '', '22147', 131191), (True, '33511', '33511', 131192), (False, '', '39482', 131193), (True, '7383', '7383', 131194), (True, '41116', '41116', 131195)]",False,Runtime Error,0.8003203203844999,0.9814126394052044,False,0.4333333333333333,False,"def func(*args):
	
	from math import *
	a = int(args[0])
	n = max((floor(sqrt((2 * a))) - 1), 0)
	while ((((n * (n + 1)) // 2) < a) or (((((n * (n + 1)) // 2) - a) % 2) == 1)):
	    n += 1
	print(n)
"
1153689,24141053,"from math import *
a = abs(int(input()))
n = max(floor(sqrt(2*a))-1,0)
while(n*(n+1)//2<a or (n*(n+1)//2-a)%2==1):
    n+=1
print(n)",55083,4504,124,1/26/17 5:41,6,1060,1,8,"[(True, '3', '3', 131166), (True, '3', '3', 131167), (True, '0', '0', 131168), (True, '44723', '44723', 131169), (True, '44720', '44720', 131170), (True, '44721', '44721', 131171), (True, '44721', '44721', 131172), (True, '31273', '31273', 131173), (True, '41617', '41617', 131174), (True, '23591', '23591', 131175), (True, '13213', '13213', 131176), (True, '14403', '14403', 131177), (True, '24277', '24277', 131178), (True, '31166', '31166', 131179), (True, '36787', '36787', 131180), (True, '41657', '41657', 131181), (True, '43393', '43393', 131182), (True, '42377', '42377', 131183), (True, '37603', '37603', 131184), (True, '39755', '39755', 131185), (True, '5730', '5730', 131186), (True, '40573', '40573', 131187), (True, '32179', '32179', 131188), (True, '24038', '24038', 131189), (True, '42531', '42531', 131190), (True, '22147', '22147', 131191), (True, '33511', '33511', 131192), (True, '39482', '39482', 131193), (True, '7383', '7383', 131194), (True, '41116', '41116', 131195)]",True,Accecpted,0.8003203203844999,0.9814126394052044,False,0.0,False,"def func(*args):
	
	from math import *
	a = abs(int(args[0]))
	n = max((floor(sqrt((2 * a))) - 1), 0)
	while ((((n * (n + 1)) // 2) < a) or (((((n * (n + 1)) // 2) - a) % 2) == 1)):
	    n += 1
	print(n)
"
1654623,18949639,"from math import sqrt
def right(x1, y1, x2, y2, x3, y3):    
    d1s = (y2 - y1) ** 2 + (x2 - x1) ** 2
    d2s = (y3 - y2) ** 2 + (x3 - x2) ** 2
    d3s = (y1 - y3) ** 2 + (x1 - x3) ** 2
    a, b, c = sorted([d1s, d2s, d3s])
    return c == a + b and c != 0 and b != 0 and a != 0
x1, y1, x2, y2, x3, y3 = map(int, input().split())
if right(x1, y1, x2, y2, x3, y3):
    print('RIGHT')
elif right(x1 - 1, y1, x2, y2, x3, y3) or right(x1 + 1, y1, x2, y2, x3, y3) or right(x1, y1 - 1, x2, y2, x3, y3)or right(x1, y1 + 1, x2, y2, x3, y3) or right(x1, y1, x2 - 1, y2, x3, y3) or right(x1, y1, x2 + 1, y2, x3, y3) or right(x1, y1, x2, y2 - 1, x3, y3) or right(x1, y1, x2, y2 + 1, x3, y3) or right(x1, y1, x2, y2, x3 - 1, y3) or right(x1, y1, x2, y2, x3 + 1, y3) or right(x1, y1, x2, y2, x3, y3 - 1) or right(x1, y1, x2, y2, x3, y3 + 1):
    print('ALMOST')
else:
    print('NEITHER')",25689,268,248,7/7/16 14:02,14,1473,1,8,"[(True, 'RIGHT', 'RIGHT', 156952), (True, 'NEITHER', 'NEITHER', 156953), (True, 'ALMOST', 'ALMOST', 156954), (True, 'NEITHER', 'NEITHER', 156955), (True, 'NEITHER', 'NEITHER', 156956), (True, 'NEITHER', 'NEITHER', 156957), (True, 'NEITHER', 'NEITHER', 156958), (True, 'NEITHER', 'NEITHER', 156959), (True, 'NEITHER', 'NEITHER', 156960), (True, 'NEITHER', 'NEITHER', 156961), (True, 'NEITHER', 'NEITHER', 156962), (True, 'NEITHER', 'NEITHER', 156963), (True, 'NEITHER', 'NEITHER', 156964), (True, 'NEITHER', 'NEITHER', 156965), (True, 'NEITHER', 'NEITHER', 156966), (True, 'NEITHER', 'NEITHER', 156967), (True, 'NEITHER', 'NEITHER', 156968), (True, 'NEITHER', 'NEITHER', 156969), (True, 'RIGHT', 'RIGHT', 156970), (True, 'RIGHT', 'RIGHT', 156971), (True, 'NEITHER', 'NEITHER', 156972), (True, 'RIGHT', 'RIGHT', 156973), (True, 'RIGHT', 'RIGHT', 156974), (True, 'RIGHT', 'RIGHT', 156975), (True, 'RIGHT', 'RIGHT', 156976), (True, 'RIGHT', 'RIGHT', 156977), (True, 'RIGHT', 'RIGHT', 156978), (True, 'ALMOST', 'ALMOST', 156979), (True, 'ALMOST', 'ALMOST', 156980), (True, 'ALMOST', 'ALMOST', 156981), (True, 'NEITHER', 'NEITHER', 156982), (True, 'NEITHER', 'NEITHER', 156983), (True, 'ALMOST', 'ALMOST', 156984), (True, 'ALMOST', 'ALMOST', 156985), (True, 'ALMOST', 'ALMOST', 156986), (True, 'ALMOST', 'ALMOST', 156987), (True, 'ALMOST', 'ALMOST', 156988), (True, 'ALMOST', 'ALMOST', 156989), (True, 'ALMOST', 'ALMOST', 156990), (True, 'RIGHT', 'RIGHT', 156991), (True, 'NEITHER', 'NEITHER', 156992), (True, 'NEITHER', 'NEITHER', 156993), (True, 'NEITHER', 'NEITHER', 156994), (True, 'NEITHER', 'NEITHER', 156995), (True, 'ALMOST', 'ALMOST', 156996), (True, 'NEITHER', 'NEITHER', 156997), (True, 'NEITHER', 'NEITHER', 156998), (True, 'NEITHER', 'NEITHER', 156999), (True, 'RIGHT', 'RIGHT', 157000), (True, 'RIGHT', 'RIGHT', 157001), (True, 'RIGHT', 'RIGHT', 157002), (True, 'ALMOST', 'ALMOST', 157003), (True, 'ALMOST', 'ALMOST', 157004), (True, 'ALMOST', 'ALMOST', 157005), (True, 'ALMOST', 'ALMOST', 157006), (True, 'ALMOST', 'ALMOST', 157007), (True, 'ALMOST', 'ALMOST', 157008), (True, 'ALMOST', 'ALMOST', 157009), (True, 'ALMOST', 'ALMOST', 157010), (True, 'ALMOST', 'ALMOST', 157011), (True, 'ALMOST', 'ALMOST', 157012), (True, 'ALMOST', 'ALMOST', 157013), (True, 'ALMOST', 'ALMOST', 157014)]",True,Accecpted,0.9312745056106976,0.9813953488372092,False,0.0,False,"def func(*args):
	
	from math import sqrt
	
	def right(x1, y1, x2, y2, x3, y3):
	    d1s = (((y2 - y1) ** 2) + ((x2 - x1) ** 2))
	    d2s = (((y3 - y2) ** 2) + ((x3 - x2) ** 2))
	    d3s = (((y1 - y3) ** 2) + ((x1 - x3) ** 2))
	    (a, b, c) = sorted([d1s, d2s, d3s])
	    return ((c == (a + b)) and (c != 0) and (b != 0) and (a != 0))
	(x1, y1, x2, y2, x3, y3) = map(int, args[0].split())
	if right(x1, y1, x2, y2, x3, y3):
	    print('RIGHT')
	elif (right((x1 - 1), y1, x2, y2, x3, y3) or right((x1 + 1), y1, x2, y2, x3, y3) or right(x1, (y1 - 1), x2, y2, x3, y3) or right(x1, (y1 + 1), x2, y2, x3, y3) or right(x1, y1, (x2 - 1), y2, x3, y3) or right(x1, y1, (x2 + 1), y2, x3, y3) or right(x1, y1, x2, (y2 - 1), x3, y3) or right(x1, y1, x2, (y2 + 1), x3, y3) or right(x1, y1, x2, y2, (x3 - 1), y3) or right(x1, y1, x2, y2, (x3 + 1), y3) or right(x1, y1, x2, y2, x3, (y3 - 1)) or right(x1, y1, x2, y2, x3, (y3 + 1))):
	    print('ALMOST')
	else:
	    print('NEITHER')
"
1654622,18949412,"from math import sqrt
def right(x1, y1, x2, y2, x3, y3):    
    d1s = (y2 - y1) ** 2 + (x2 - x1) ** 2
    d2s = (y3 - y2) ** 2 + (x3 - x2) ** 2
    d3s = (y1 - y3) ** 2 + (x1 - x3) ** 2
    a, b, c = sorted([d1s, d2s, d3s])
    return c == a + b 
x1, y1, x2, y2, x3, y3 = map(int, input().split())
if right(x1, y1, x2, y2, x3, y3):
    print('RIGHT')
elif right(x1 - 1, y1, x2, y2, x3, y3) or right(x1 + 1, y1, x2, y2, x3, y3) or right(x1, y1 - 1, x2, y2, x3, y3)or right(x1, y1 + 1, x2, y2, x3, y3) or right(x1, y1, x2 - 1, y2, x3, y3) or right(x1, y1, x2 + 1, y2, x3, y3) or right(x1, y1, x2, y2 - 1, x3, y3) or right(x1, y1, x2, y2 + 1, x3, y3) or right(x1, y1, x2, y2, x3 - 1, y3) or right(x1, y1, x2, y2, x3 + 1, y3) or right(x1, y1, x2, y2, x3, y3 - 1) or right(x1, y1, x2, y2, x3, y3 + 1):
    print('ALMOST')
else:
    print('NEITHER')",25689,272,248,7/7/16 13:47,14,1473,2,8,"[(True, 'RIGHT', 'RIGHT', 156952), (True, 'NEITHER', 'NEITHER', 156953), (True, 'ALMOST', 'ALMOST', 156954), (True, 'NEITHER', 'NEITHER', 156955), (True, 'NEITHER', 'NEITHER', 156956), (True, 'NEITHER', 'NEITHER', 156957), (True, 'NEITHER', 'NEITHER', 156958), (True, 'NEITHER', 'NEITHER', 156959), (True, 'NEITHER', 'NEITHER', 156960), (True, 'NEITHER', 'NEITHER', 156961), (True, 'NEITHER', 'NEITHER', 156962), (True, 'NEITHER', 'NEITHER', 156963), (True, 'NEITHER', 'NEITHER', 156964), (True, 'NEITHER', 'NEITHER', 156965), (True, 'NEITHER', 'NEITHER', 156966), (True, 'NEITHER', 'NEITHER', 156967), (True, 'NEITHER', 'NEITHER', 156968), (True, 'NEITHER', 'NEITHER', 156969), (True, 'RIGHT', 'RIGHT', 156970), (True, 'RIGHT', 'RIGHT', 156971), (True, 'NEITHER', 'NEITHER', 156972), (True, 'RIGHT', 'RIGHT', 156973), (True, 'RIGHT', 'RIGHT', 156974), (True, 'RIGHT', 'RIGHT', 156975), (True, 'RIGHT', 'RIGHT', 156976), (True, 'RIGHT', 'RIGHT', 156977), (True, 'RIGHT', 'RIGHT', 156978), (True, 'ALMOST', 'ALMOST', 156979), (True, 'ALMOST', 'ALMOST', 156980), (True, 'ALMOST', 'ALMOST', 156981), (False, 'ALMOST', 'NEITHER', 156982), (False, 'ALMOST', 'NEITHER', 156983), (True, 'ALMOST', 'ALMOST', 156984), (True, 'ALMOST', 'ALMOST', 156985), (True, 'ALMOST', 'ALMOST', 156986), (True, 'ALMOST', 'ALMOST', 156987), (True, 'ALMOST', 'ALMOST', 156988), (True, 'ALMOST', 'ALMOST', 156989), (True, 'ALMOST', 'ALMOST', 156990), (True, 'RIGHT', 'RIGHT', 156991), (True, 'NEITHER', 'NEITHER', 156992), (True, 'NEITHER', 'NEITHER', 156993), (True, 'NEITHER', 'NEITHER', 156994), (True, 'NEITHER', 'NEITHER', 156995), (True, 'ALMOST', 'ALMOST', 156996), (True, 'NEITHER', 'NEITHER', 156997), (True, 'NEITHER', 'NEITHER', 156998), (True, 'NEITHER', 'NEITHER', 156999), (True, 'RIGHT', 'RIGHT', 157000), (True, 'RIGHT', 'RIGHT', 157001), (True, 'RIGHT', 'RIGHT', 157002), (True, 'ALMOST', 'ALMOST', 157003), (True, 'ALMOST', 'ALMOST', 157004), (True, 'ALMOST', 'ALMOST', 157005), (True, 'ALMOST', 'ALMOST', 157006), (True, 'ALMOST', 'ALMOST', 157007), (True, 'ALMOST', 'ALMOST', 157008), (True, 'ALMOST', 'ALMOST', 157009), (True, 'ALMOST', 'ALMOST', 157010), (True, 'ALMOST', 'ALMOST', 157011), (True, 'ALMOST', 'ALMOST', 157012), (True, 'ALMOST', 'ALMOST', 157013), (True, 'ALMOST', 'ALMOST', 157014)]",False,Wrong Answer,0.9312745056106976,0.9813953488372092,False,0.0317460317460317,False,"def func(*args):
	
	from math import sqrt
	
	def right(x1, y1, x2, y2, x3, y3):
	    d1s = (((y2 - y1) ** 2) + ((x2 - x1) ** 2))
	    d2s = (((y3 - y2) ** 2) + ((x3 - x2) ** 2))
	    d3s = (((y1 - y3) ** 2) + ((x1 - x3) ** 2))
	    (a, b, c) = sorted([d1s, d2s, d3s])
	    return (c == (a + b))
	(x1, y1, x2, y2, x3, y3) = map(int, args[0].split())
	if right(x1, y1, x2, y2, x3, y3):
	    print('RIGHT')
	elif (right((x1 - 1), y1, x2, y2, x3, y3) or right((x1 + 1), y1, x2, y2, x3, y3) or right(x1, (y1 - 1), x2, y2, x3, y3) or right(x1, (y1 + 1), x2, y2, x3, y3) or right(x1, y1, (x2 - 1), y2, x3, y3) or right(x1, y1, (x2 + 1), y2, x3, y3) or right(x1, y1, x2, (y2 - 1), x3, y3) or right(x1, y1, x2, (y2 + 1), x3, y3) or right(x1, y1, x2, y2, (x3 - 1), y3) or right(x1, y1, x2, y2, (x3 + 1), y3) or right(x1, y1, x2, y2, x3, (y3 - 1)) or right(x1, y1, x2, y2, x3, (y3 + 1))):
	    print('ALMOST')
	else:
	    print('NEITHER')
"
1215123,29585824,"word = input()
list=[]
for letter in word:
  if letter not in ('a', 'e', 'i','y' ,'Y', 'o', 'u','A', 'E', 'I', 'O', 'U' ):    
    list.append(letter)    
for i in range(len(list)):
  print('.', end='') 
  print(list[i].lower(), end='') ,",63709,28,124,8/19/17 5:21,8,1102,1,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (True, '.x.n.h.c.g.t.n.q.c.m', '.x.n.h.c.g.t.n.q.c.m', 135750), (True, '.j.f.m.t.b.j.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (True, '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (True, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (True, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (True, '.w.z.t.c.v.v.v.v.z.v', '.w.z.t.c.v.v.v.v.z.v', 135766), (True, '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (True, '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (True, '.l.t.g.m.g', '.l.t.g.m.g', 135770), (True, '.k.z.d.x.f', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (True, '.m.r.c.g.p', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (True, '.b', '.b', 135775), (True, '.f.l', '.f.l', 135776), (True, '.x.d.w.d.w.d.d.w.d.d.d.d', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",True,Accecpted,0.8875369289645527,0.9812889812889812,False,0.0,False,"def func(*args):
	
	word = args[0]
	list = []
	for letter in word:
	    if (letter not in ('a', 'e', 'i', 'y', 'Y', 'o', 'u', 'A', 'E', 'I', 'O', 'U')):
	        list.append(letter)
	for i in range(len(list)):
	    print('.', end='')
	    (print(list[i].lower(), end=''),)
"
1215122,29585781,"word = input()
list=[]
for letter in word:
  if letter not in ('a', 'e', 'i', 'o', 'u','A', 'E', 'I', 'O', 'U' ):    
    list.append(letter)    
for i in range(len(list)):
  print('.', end='') 
  print(list[i].lower(), end='') ,",63709,16,154,8/19/17 5:19,8,1102,2,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (False, '.x.n.h.c.g.y.t.n.q.c.m.y', '.x.n.h.c.g.t.n.q.c.m', 135750), (False, '.j.f.m.t.b.j.y.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (False, '.f.m.z.c.r.k.c.p.h.y.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.y.c.l.c.d.j.f.r.m.y.q.y.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (False, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.y.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (False, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.y.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (False, '.y.w.y.z.t.y.c.v.v.y.v.y.v.z.y.y.y.y.y.v.y.y.y.y.y.y', '.w.z.t.c.v.v.v.v.z.v', 135766), (False, '.y.j.n.c.k.p.f.y.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (False, '.r.y.j.y.w.f.p.z.y.y.h.y.l.v.l.m.g.y.y.y.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (False, '.y.y.y.l.y.y.y.y.t.y.y.y.y.y.g.m.y.y.y.y.y.y.g', '.l.t.g.m.g', 135770), (False, '.y.y.y.y.k.z.y.y.y.y.y.d.x.f.y.y.y.y.y', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (False, '.y.y.y.y.y.y.m.y.r.c.y.y.g.y.y.y.p.y.y.y.y.y', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (False, '.y.b', '.b', 135775), (False, '.f.l.y', '.f.l', 135776), (False, '.y.y.y.y.y.y.y.y.y.x.d.w.d.w.d.d.w.d.d.d.d.y.y.y.y', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",False,Wrong Answer,0.8875369289645527,0.9812889812889812,False,0.3333333333333333,False,"def func(*args):
	
	word = args[0]
	list = []
	for letter in word:
	    if (letter not in ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')):
	        list.append(letter)
	for i in range(len(list)):
	    print('.', end='')
	    (print(list[i].lower(), end=''),)
"
1600934,17073761,"n = int(input())

a = [0, 2, 3, 1, 2, 2]

print(a[n])",13650,4492,124,3/31/16 15:41,5,1405,2,8,"[(True, '1', '1', 154472), (True, '2', '2', 154473), (True, '2', '2', 154474), (True, '3', '3', 154475), (False, '2', '1', 154476)]",False,Wrong Answer,0.8265168183793802,0.981132075471698,False,0.2,False,"def func(*args):
	
	n = int(args[0])
	a = [0, 2, 3, 1, 2, 2]
	print(a[n])
"
1259395,22863926,"n,a,b=map(int, input().split())
print(min((n-a),b+1))",34,12,124,12/10/16 22:03,2,1142,1,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (True, '1', '1', 138320), (True, '1', '1', 138321), (True, '4', '4', 138322), (True, '7', '7', 138323), (True, '5', '5', 138324), (True, '6', '6', 138325), (True, '10', '10', 138326), (True, '7', '7', 138327), (True, '9', '9', 138328), (True, '15', '15', 138329), (True, '8', '8', 138330), (True, '2', '2', 138331), (True, '24', '24', 138332), (True, '5', '5', 138333), (True, '6', '6', 138334), (True, '16', '16', 138335), (True, '5', '5', 138336), (True, '12', '12', 138337), (True, '17', '17', 138338), (True, '38', '38', 138339), (True, '18', '18', 138340), (True, '38', '38', 138341), (True, '13', '13', 138342), (True, '8', '8', 138343), (True, '13', '13', 138344), (True, '1', '1', 138345), (True, '40', '40', 138346), (True, '53', '53', 138347), (True, '34', '34', 138348), (True, '23', '23', 138349), (True, '39', '39', 138350), (True, '38', '38', 138351), (True, '13', '13', 138352), (True, '36', '36', 138353), (True, '7', '7', 138354), (True, '21', '21', 138355), (True, '21', '21', 138356), (True, '2', '2', 138357), (True, '43', '43', 138358), (True, '9', '9', 138359), (True, '14', '14', 138360), (True, '23', '23', 138361), (True, '89', '89', 138362), (True, '32', '32', 138363), (True, '73', '73', 138364), (True, '89', '89', 138365), (True, '19', '19', 138366), (True, '1', '1', 138367)]",True,Accecpted,1.133422688662942e-154,0.981132075471698,False,0.0,False,"def func(*args):
	
	(n, a, b) = map(int, args[0].split())
	print(min((n - a), (b + 1)))
"
1259394,22863856,"n,a,b=map(int, input().split())
print(min((n-a),b))",34,0,92,12/10/16 21:59,2,1142,2,8,"[(False, '1', '2', 138318), (True, '3', '3', 138319), (False, '0', '1', 138320), (True, '1', '1', 138321), (False, '3', '4', 138322), (False, '6', '7', 138323), (True, '5', '5', 138324), (False, '5', '6', 138325), (False, '9', '10', 138326), (True, '7', '7', 138327), (False, '8', '9', 138328), (False, '14', '15', 138329), (True, '8', '8', 138330), (False, '1', '2', 138331), (False, '23', '24', 138332), (True, '5', '5', 138333), (False, '5', '6', 138334), (False, '15', '16', 138335), (True, '5', '5', 138336), (False, '11', '12', 138337), (False, '16', '17', 138338), (True, '38', '38', 138339), (False, '17', '18', 138340), (False, '37', '38', 138341), (True, '13', '13', 138342), (False, '7', '8', 138343), (False, '12', '13', 138344), (True, '1', '1', 138345), (False, '39', '40', 138346), (False, '52', '53', 138347), (True, '34', '34', 138348), (False, '22', '23', 138349), (False, '38', '39', 138350), (True, '38', '38', 138351), (False, '12', '13', 138352), (False, '35', '36', 138353), (True, '7', '7', 138354), (False, '20', '21', 138355), (False, '20', '21', 138356), (True, '2', '2', 138357), (False, '42', '43', 138358), (False, '8', '9', 138359), (True, '14', '14', 138360), (False, '22', '23', 138361), (False, '88', '89', 138362), (True, '32', '32', 138363), (False, '72', '73', 138364), (False, '88', '89', 138365), (True, '19', '19', 138366), (False, '0', '1', 138367)]",False,Wrong Answer,1.133422688662942e-154,0.981132075471698,False,0.66,False,"def func(*args):
	
	(n, a, b) = map(int, args[0].split())
	print(min((n - a), b))
"
1600933,17073760,"n = int(input())

a = [0, 2, 3, 1, 2, 1]

print(a[n])",13650,4492,122,3/31/16 15:41,5,1405,1,8,"[(True, '1', '1', 154472), (True, '2', '2', 154473), (True, '2', '2', 154474), (True, '3', '3', 154475), (True, '1', '1', 154476)]",True,Accecpted,0.8265168183793802,0.981132075471698,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	a = [0, 2, 3, 1, 2, 1]
	print(a[n])
"
3006909,29355618,"def seperateints(x):
    k=''
    l=[]
    for i in x :
        if i==' ' :
            l.append(int(k))
            k=''
            continue 
        k=k+i
    l.append(int(k))   
    return(l)
x=input()
n=1
s=0
for i in range(len(x)):
    if i==0 : continue 
    elif x[i]==x[i-1]:
        n+=1
    else :
        n=1
    if n==7 :
         s+=1
         print(""YES"")
if s==0 : print('NO')",54320,4512,124,8/11/17 17:45,24,2555,2,8,"[(True, 'NO', 'NO', 219615), (True, 'YES', 'YES', 219616), (True, 'YES', 'YES', 219617), (True, 'YES', 'YES', 219618), (True, 'NO', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (False, 'YES\nYES', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (True, 'NO', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (True, 'NO', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (True, 'YES', 'YES', 219634), (True, 'NO', 'NO', 219635), (True, 'NO', 'NO', 219636), (True, 'YES', 'YES', 219637), (True, 'NO', 'NO', 219638), (True, 'NO', 'NO', 219639), (True, 'YES', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (True, 'YES', 'YES', 219645), (True, 'NO', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (True, 'NO', 'NO', 219649), (False, 'YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES', 'YES', 219650), (True, 'YES', 'YES', 219651), (False, 'YES\nYES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (True, 'YES', 'YES', 219655), (True, 'YES', 'YES', 219656), (True, 'YES', 'YES', 219657), (True, 'YES', 'YES', 219658)]",False,Wrong Answer,0.9432691605012544,0.9810874704491724,False,0.0681818181818181,False,"def func(*args):
	
	
	def seperateints(x):
	    k = ''
	    l = []
	    for i in x:
	        if (i == ' '):
	            l.append(int(k))
	            k = ''
	            continue
	        k = (k + i)
	    l.append(int(k))
	    return l
	x = args[0]
	n = 1
	s = 0
	for i in range(len(x)):
	    if (i == 0):
	        continue
	    elif (x[i] == x[(i - 1)]):
	        n += 1
	    else:
	        n = 1
	    if (n == 7):
	        s += 1
	        print('YES')
	if (s == 0):
	    print('NO')
"
3006910,29355648,"def seperateints(x):
    k=''
    l=[]
    for i in x :
        if i==' ' :
            l.append(int(k))
            k=''
            continue 
        k=k+i
    l.append(int(k))   
    return(l)
x=input()
n=1
s=0
for i in range(len(x)):
    if i==0 : continue 
    elif x[i]==x[i-1]:
        n+=1
    else :
        n=1
    if n==7 :
         s+=1
         print(""YES"")
         break
if s==0 : print('NO')",54320,4520,124,8/11/17 17:46,25,2555,1,8,"[(True, 'NO', 'NO', 219615), (True, 'YES', 'YES', 219616), (True, 'YES', 'YES', 219617), (True, 'YES', 'YES', 219618), (True, 'NO', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (True, 'YES', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (True, 'NO', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (True, 'NO', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (True, 'YES', 'YES', 219634), (True, 'NO', 'NO', 219635), (True, 'NO', 'NO', 219636), (True, 'YES', 'YES', 219637), (True, 'NO', 'NO', 219638), (True, 'NO', 'NO', 219639), (True, 'YES', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (True, 'YES', 'YES', 219645), (True, 'NO', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (True, 'NO', 'NO', 219649), (True, 'YES', 'YES', 219650), (True, 'YES', 'YES', 219651), (True, 'YES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (True, 'YES', 'YES', 219655), (True, 'YES', 'YES', 219656), (True, 'YES', 'YES', 219657), (True, 'YES', 'YES', 219658)]",True,Accecpted,0.9432691605012544,0.9810874704491724,False,0.0,False,"def func(*args):
	
	
	def seperateints(x):
	    k = ''
	    l = []
	    for i in x:
	        if (i == ' '):
	            l.append(int(k))
	            k = ''
	            continue
	        k = (k + i)
	    l.append(int(k))
	    return l
	x = args[0]
	n = 1
	s = 0
	for i in range(len(x)):
	    if (i == 0):
	        continue
	    elif (x[i] == x[(i - 1)]):
	        n += 1
	    else:
	        n = 1
	    if (n == 7):
	        s += 1
	        print('YES')
	        break
	if (s == 0):
	    print('NO')
"
595519,22592301,"a,b=map(int,input().split())
sum=0
sum+=a*int(b/5)
sum+=int(a/5)*b%5
if a%5+b%5>=5:
    sum+=(a%5+b%5)%5+1
print(sum)",4276,0,46,11/29/16 9:55,13,548,2,8,"[(True, '14', '14', 91448), (False, '26', '31', 91449), (True, '1', '1', 91450), (True, '5', '5', 91451), (True, '7', '7', 91452), (True, '88', '88', 91453), (True, '30', '30', 91454), (True, '0', '0', 91455), (True, '200000', '200000', 91456), (False, '0', '200000', 91457), (True, '200000000000', '200000000000', 91458), (False, '158598', '159348', 91459), (False, '72133', '72423', 91460), (False, '130685', '131155', 91461), (False, '177561', '178296', 91462), (True, '41600', '41600', 91463), (True, '26112', '26112', 91464), (True, '55552', '55552', 91465), (False, '9601', '9856', 91466), (False, '148062', '148652', 91467), (False, '105843', '106218', 91468), (False, '7401', '7431', 91469), (False, '78872', '79157', 91470), (False, '32474', '33194', 91471), (False, '160', '180', 91472), (False, '24784', '25384', 91473), (False, '1762', '2462', 91474), (True, '1201', '1201', 91475), (False, '60342', '60512', 91476), (True, '60705', '60705', 91477), (False, '2768', '3208', 91478), (False, '75929166636', '75929310986', 91479), (False, '12052098891', '12052259926', 91480), (False, '105030738543', '105030916263', 91481), (False, '132637998', '132638943', 91482), (False, '12720205762', '12720276292', 91483), (False, '457118425', '457187060', 91484), (False, '32349110330', '32349225415', 91485), (False, '5812470525', '5812618980', 91486), (False, '61118401534', '61118498984', 91487), (False, '48660559812', '48660664382', 91488), (False, '33737608790', '33737759810', 91489), (True, '2611958008', '2611958008', 91490), (False, '38433309554', '38433636199', 91491), (False, '114817704964', '114818101284', 91492), (False, '62190182658', '62190480238', 91493), (False, '159985398461', '159985729411', 91494), (False, '93932952374', '93933134534', 91495), (False, '347526003', '347531388', 91496), (False, '7867739203', '7867827488', 91497), (False, '45248871949', '45248999219', 91498), (False, '131183894328', '131184195318', 91499), (False, '67552034219', '67552194859', 91500), (False, '178233121250', '178233305115', 91501), (False, '1853279587', '1853307952', 91502), (False, '20040900481', '20040948031', 91503), (False, '14525727490', '14525848875', 91504), (False, '51880332484', '51880446774', 91505), (False, '36704960833', '36705041203', 91506), (False, '88056811398', '88056992428', 91507), (False, '33673109950', '33673251230', 91508), (False, '16828513590', '16828704925', 91509), (False, '65393255343', '65393416268', 91510), (False, '37488528746', '37488632431', 91511), (False, '115542511006', '115542637921', 91512), (False, '32214441379', '32214852554', 91513), (False, '120402886300', '120403367155', 91514), (False, '53095364250', '53095895155', 91515), (False, '165869198', '165869588', 91516), (False, '4112134475', '4112144810', 91517), (False, '17892732138', '17893399803', 91518), (False, '126455234992', '126455602192', 91519), (False, '68235852', '68236422', 91520), (False, '17722302750', '17722349770', 91521), (False, '12162788822', '12162829017', 91522), (False, '46570474120', '46570587880', 91523), (False, '14104615564', '14104855884', 91524), (False, '70166552618', '70166746198', 91525), (False, '27354342871', '27354683301', 91526), (False, '102815279764', '102815540084', 91527), (False, '60653504749', '60653584944', 91528), (False, '2000', '2020', 91529), (False, '2000', '2040', 91530), (True, '2060', '2060', 91531), (False, '2000', '2080', 91532), (True, '3', '3', 91533), (False, '45', '50', 91534), (True, '23', '23', 91535), (False, '160353862', '160372597', 91536), (True, '1', '1', 91537), (False, '199998800006', '199999600001', 91538), (False, '1564', '1624', 91539), (False, '65', '75', 91540), (False, '10772', '10952', 91541), (True, '4', '4', 91542), (True, '15', '15', 91543), (True, '6', '6', 91544), (False, '1999880006', '1999960001', 91545), (False, '210', '225', 91546), (True, '0', '0', 91547), (False, '1', '66', 91548), (True, '2', '2', 91549), (True, '3', '3', 91550), (False, '965300', '966605', 91551), (False, '199999000000', '199999800000', 91552), (False, '135304401349', '135304750879', 91553), (False, '45', '50', 91554), (False, '190002868', '190004183', 91555), (False, '23', '28', 91556), (True, '8', '8', 91557), (False, '122689116099', '122689636154', 91558), (True, '0', '0', 91559), (False, '435', '465', 91560), (False, '21', '26', 91561), (True, '1', '1', 91562), (False, '57563', '57993', 91563), (False, '7706', '7896', 91564), (False, '2', '12', 91565), (True, '0', '0', 91566), (True, '3', '3', 91567), (False, '709688831', '709707816', 91568), (True, '8', '8', 91569), (True, '6', '6', 91570), (True, '8', '8', 91571), (False, '10452595', '10462520', 91572), (True, '4', '4', 91573), (False, '41492', '41542', 91574), (True, '2', '2', 91575)]",False,Wrong Answer,0.3436446393954861,0.9809885931558936,False,0.7265625,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	sum = 0
	sum += (a * int((b / 5)))
	sum += ((int((a / 5)) * b) % 5)
	if (((a % 5) + (b % 5)) >= 5):
	    sum += ((((a % 5) + (b % 5)) % 5) + 1)
	print(sum)
"
595520,22592344,"a,b=map(int,input().split())
sum=0
sum+=a*int(b/5)
sum+=int(a/5)* (b % 5)
if a%5+b%5>=5:
    sum+=(a%5+b%5)%5+1
print(sum)",4276,4,77,11/29/16 9:58,13,548,1,8,"[(True, '14', '14', 91448), (True, '31', '31', 91449), (True, '1', '1', 91450), (True, '5', '5', 91451), (True, '7', '7', 91452), (True, '88', '88', 91453), (True, '30', '30', 91454), (True, '0', '0', 91455), (True, '200000', '200000', 91456), (True, '200000', '200000', 91457), (True, '200000000000', '200000000000', 91458), (True, '159348', '159348', 91459), (True, '72423', '72423', 91460), (True, '131155', '131155', 91461), (True, '178296', '178296', 91462), (True, '41600', '41600', 91463), (True, '26112', '26112', 91464), (True, '55552', '55552', 91465), (True, '9856', '9856', 91466), (True, '148652', '148652', 91467), (True, '106218', '106218', 91468), (True, '7431', '7431', 91469), (True, '79157', '79157', 91470), (True, '33194', '33194', 91471), (True, '180', '180', 91472), (True, '25384', '25384', 91473), (True, '2462', '2462', 91474), (True, '1201', '1201', 91475), (True, '60512', '60512', 91476), (True, '60705', '60705', 91477), (True, '3208', '3208', 91478), (True, '75929310986', '75929310986', 91479), (True, '12052259926', '12052259926', 91480), (True, '105030916263', '105030916263', 91481), (True, '132638943', '132638943', 91482), (True, '12720276292', '12720276292', 91483), (True, '457187060', '457187060', 91484), (True, '32349225415', '32349225415', 91485), (True, '5812618980', '5812618980', 91486), (True, '61118498984', '61118498984', 91487), (True, '48660664382', '48660664382', 91488), (True, '33737759810', '33737759810', 91489), (True, '2611958008', '2611958008', 91490), (True, '38433636199', '38433636199', 91491), (True, '114818101284', '114818101284', 91492), (True, '62190480238', '62190480238', 91493), (True, '159985729411', '159985729411', 91494), (True, '93933134534', '93933134534', 91495), (True, '347531388', '347531388', 91496), (True, '7867827488', '7867827488', 91497), (True, '45248999219', '45248999219', 91498), (True, '131184195318', '131184195318', 91499), (True, '67552194859', '67552194859', 91500), (True, '178233305115', '178233305115', 91501), (True, '1853307952', '1853307952', 91502), (True, '20040948031', '20040948031', 91503), (True, '14525848875', '14525848875', 91504), (True, '51880446774', '51880446774', 91505), (True, '36705041203', '36705041203', 91506), (True, '88056992428', '88056992428', 91507), (True, '33673251230', '33673251230', 91508), (True, '16828704925', '16828704925', 91509), (True, '65393416268', '65393416268', 91510), (True, '37488632431', '37488632431', 91511), (True, '115542637921', '115542637921', 91512), (True, '32214852554', '32214852554', 91513), (True, '120403367155', '120403367155', 91514), (True, '53095895155', '53095895155', 91515), (True, '165869588', '165869588', 91516), (True, '4112144810', '4112144810', 91517), (True, '17893399803', '17893399803', 91518), (True, '126455602192', '126455602192', 91519), (True, '68236422', '68236422', 91520), (True, '17722349770', '17722349770', 91521), (True, '12162829017', '12162829017', 91522), (True, '46570587880', '46570587880', 91523), (True, '14104855884', '14104855884', 91524), (True, '70166746198', '70166746198', 91525), (True, '27354683301', '27354683301', 91526), (True, '102815540084', '102815540084', 91527), (True, '60653584944', '60653584944', 91528), (True, '2020', '2020', 91529), (True, '2040', '2040', 91530), (True, '2060', '2060', 91531), (True, '2080', '2080', 91532), (True, '3', '3', 91533), (True, '50', '50', 91534), (True, '23', '23', 91535), (True, '160372597', '160372597', 91536), (True, '1', '1', 91537), (True, '199999600001', '199999600001', 91538), (True, '1624', '1624', 91539), (True, '75', '75', 91540), (True, '10952', '10952', 91541), (True, '4', '4', 91542), (True, '15', '15', 91543), (True, '6', '6', 91544), (True, '1999960001', '1999960001', 91545), (True, '225', '225', 91546), (True, '0', '0', 91547), (True, '66', '66', 91548), (True, '2', '2', 91549), (True, '3', '3', 91550), (True, '966605', '966605', 91551), (True, '199999800000', '199999800000', 91552), (True, '135304750879', '135304750879', 91553), (True, '50', '50', 91554), (True, '190004183', '190004183', 91555), (True, '28', '28', 91556), (True, '8', '8', 91557), (True, '122689636154', '122689636154', 91558), (True, '0', '0', 91559), (True, '465', '465', 91560), (True, '26', '26', 91561), (True, '1', '1', 91562), (True, '57993', '57993', 91563), (True, '7896', '7896', 91564), (True, '12', '12', 91565), (True, '0', '0', 91566), (True, '3', '3', 91567), (True, '709707816', '709707816', 91568), (True, '8', '8', 91569), (True, '6', '6', 91570), (True, '8', '8', 91571), (True, '10462520', '10462520', 91572), (True, '4', '4', 91573), (True, '41542', '41542', 91574), (True, '2', '2', 91575)]",True,Accecpted,0.3436446393954861,0.9809885931558936,False,0.0,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	sum = 0
	sum += (a * int((b / 5)))
	sum += (int((a / 5)) * (b % 5))
	if (((a % 5) + (b % 5)) >= 5):
	    sum += ((((a % 5) + (b % 5)) % 5) + 1)
	print(sum)
"
2959001,29522531,"maximum = max([int(x) for x in input().split()])

if maximum == 1:
    print(""1/1"")
elif maximum == 2:
    print(""5/6"")
elif maximum == 3:
    print(""2/3"")
elif maximum == 4:
    print(""1/2"")
elif maximum == 5:
    print(""1/3"")
else:
    print(""0/1"")",7948,4,122,8/17/17 12:08,14,2520,2,8,"[(True, '1/2', '1/2', 218095), (True, '1/1', '1/1', 218096), (True, '5/6', '5/6', 218097), (True, '2/3', '2/3', 218098), (True, '1/2', '1/2', 218099), (True, '1/3', '1/3', 218100), (False, '0/1', '1/6', 218101), (True, '5/6', '5/6', 218102), (True, '5/6', '5/6', 218103), (True, '2/3', '2/3', 218104), (True, '1/2', '1/2', 218105), (True, '1/3', '1/3', 218106), (False, '0/1', '1/6', 218107), (True, '2/3', '2/3', 218108), (True, '2/3', '2/3', 218109), (True, '2/3', '2/3', 218110), (True, '1/2', '1/2', 218111), (True, '1/3', '1/3', 218112), (False, '0/1', '1/6', 218113), (True, '1/2', '1/2', 218114), (True, '1/2', '1/2', 218115), (True, '1/2', '1/2', 218116), (True, '1/3', '1/3', 218117), (False, '0/1', '1/6', 218118), (True, '1/3', '1/3', 218119), (True, '1/3', '1/3', 218120), (True, '1/3', '1/3', 218121), (True, '1/3', '1/3', 218122), (True, '1/3', '1/3', 218123), (False, '0/1', '1/6', 218124), (False, '0/1', '1/6', 218125), (False, '0/1', '1/6', 218126), (False, '0/1', '1/6', 218127), (False, '0/1', '1/6', 218128), (False, '0/1', '1/6', 218129), (False, '0/1', '1/6', 218130)]",False,Wrong Answer,0.9691937043892332,0.9809885931558936,False,0.3055555555555556,False,"def func(*args):
	
	maximum = max([int(x) for x in args[0].split()])
	if (maximum == 1):
	    print('1/1')
	elif (maximum == 2):
	    print('5/6')
	elif (maximum == 3):
	    print('2/3')
	elif (maximum == 4):
	    print('1/2')
	elif (maximum == 5):
	    print('1/3')
	else:
	    print('0/1')
"
2959002,29522588,"maximum = max([int(x) for x in input().split()])

if maximum == 1:
    print(""1/1"")
elif maximum == 2:
    print(""5/6"")
elif maximum == 3:
    print(""2/3"")
elif maximum == 4:
    print(""1/2"")
elif maximum == 5:
    print(""1/3"")
else:
    print(""1/6"")",7948,8,124,8/17/17 12:10,14,2520,1,8,"[(True, '1/2', '1/2', 218095), (True, '1/1', '1/1', 218096), (True, '5/6', '5/6', 218097), (True, '2/3', '2/3', 218098), (True, '1/2', '1/2', 218099), (True, '1/3', '1/3', 218100), (True, '1/6', '1/6', 218101), (True, '5/6', '5/6', 218102), (True, '5/6', '5/6', 218103), (True, '2/3', '2/3', 218104), (True, '1/2', '1/2', 218105), (True, '1/3', '1/3', 218106), (True, '1/6', '1/6', 218107), (True, '2/3', '2/3', 218108), (True, '2/3', '2/3', 218109), (True, '2/3', '2/3', 218110), (True, '1/2', '1/2', 218111), (True, '1/3', '1/3', 218112), (True, '1/6', '1/6', 218113), (True, '1/2', '1/2', 218114), (True, '1/2', '1/2', 218115), (True, '1/2', '1/2', 218116), (True, '1/3', '1/3', 218117), (True, '1/6', '1/6', 218118), (True, '1/3', '1/3', 218119), (True, '1/3', '1/3', 218120), (True, '1/3', '1/3', 218121), (True, '1/3', '1/3', 218122), (True, '1/3', '1/3', 218123), (True, '1/6', '1/6', 218124), (True, '1/6', '1/6', 218125), (True, '1/6', '1/6', 218126), (True, '1/6', '1/6', 218127), (True, '1/6', '1/6', 218128), (True, '1/6', '1/6', 218129), (True, '1/6', '1/6', 218130)]",True,Accecpted,0.9691937043892332,0.9809885931558936,False,0.0,False,"def func(*args):
	
	maximum = max([int(x) for x in args[0].split()])
	if (maximum == 1):
	    print('1/1')
	elif (maximum == 2):
	    print('5/6')
	elif (maximum == 3):
	    print('2/3')
	elif (maximum == 4):
	    print('1/2')
	elif (maximum == 5):
	    print('1/3')
	else:
	    print('1/6')
"
780360,27865908,"#n = int(input())
n, m, l, r, k = map(int, input().split())
#s = input()
#c = list(map(int, input().split()))
x = max(n, l)
y = min(m, r)
l = x - y + 1
if x <= k and k <= y:
    l -= 1
print(max(0, l))",153,0,46,6/17/17 20:37,10,714,2,8,"[(False, '0', '2', 105694), (False, '0', '50', 105695), (True, '1', '1', 105696), (False, '0', '999999999', 105697), (True, '0', '0', 105698), (False, '0', '99999999999999997', 105699), (True, '0', '0', 105700), (False, '2', '0', 105701), (False, '0', '999999997', 105702), (False, '11046655888171', '0', 105703), (False, '0', '27788438422925', 105704), (False, '0', '5076', 105705), (False, '0', '29117730788587', 105706), (False, '0', '81604391064', 105707), (False, '0', '47247500916780901', 105708), (False, '473238220625527127', '0', 105709), (False, '0', '48172141432145241', 105710), (False, '0', '99277597320376979', 105711), (False, '0', '256787461333454149', 105712), (False, '0', '37925278862451249', 105713), (True, '0', '0', 105714), (False, '4', '0', 105715), (False, '3', '0', 105716), (True, '1', '1', 105717), (False, '0', '1', 105718), (False, '8', '0', 105719), (False, '0', '5', 105720), (False, '6', '0', 105721), (True, '1', '1', 105722), (False, '0', '91', 105723), (True, '1', '1', 105724), (True, '1', '1', 105725), (False, '0', '1', 105726), (True, '1', '1', 105727), (False, '99', '0', 105728), (False, '3', '0', 105729), (False, '3', '0', 105730), (False, '5', '0', 105731), (False, '4', '0', 105732), (False, '4', '0', 105733), (False, '4', '0', 105734), (False, '3', '0', 105735), (False, '31', '0', 105736), (False, '4', '0', 105737), (False, '4', '0', 105738), (False, '4', '0', 105739), (False, '31', '0', 105740), (False, '4', '0', 105741), (False, '6', '0', 105742), (False, '99', '0', 105743), (False, '6', '0', 105744), (False, '6', '0', 105745), (False, '4', '0', 105746), (False, '3', '0', 105747), (False, '3', '0', 105748), (False, '5', '0', 105749), (False, '16', '0', 105750), (False, '11', '0', 105751), (False, '4', '0', 105752), (False, '4', '0', 105753), (False, '301', '0', 105754), (False, '4', '0', 105755), (False, '12', '0', 105756), (False, '101', '0', 105757), (False, '5', '0', 105758), (False, '3', '0', 105759), (False, '101', '0', 105760), (True, '1', '1', 105761), (False, '91', '0', 105762), (True, '1', '1', 105763), (False, '11', '0', 105764), (False, '4', '0', 105765), (False, '5', '0', 105766), (False, '6', '0', 105767), (False, '91', '0', 105768), (False, '99', '0', 105769), (False, '11', '0', 105770), (False, '6', '0', 105771), (False, '3', '0', 105772), (False, '3', '0', 105773), (False, '10', '0', 105774), (False, '4', '0', 105775), (False, '6', '0', 105776), (False, '0', '6', 105777), (False, '5', '0', 105778), (False, '3', '0', 105779), (False, '401', '0', 105780), (True, '1', '1', 105781), (False, '0', '900', 105782), (True, '1', '1', 105783), (True, '1', '1', 105784), (True, '1', '1', 105785), (False, '3', '0', 105786), (False, '0', '2', 105787), (False, '0', '11', 105788), (False, '0', '4', 105789)]",False,Wrong Answer,0.9130175707729784,0.9809523809523808,False,0.84375,False,"def func(*args):
	
	(n, m, l, r, k) = map(int, args[0].split())
	x = max(n, l)
	y = min(m, r)
	l = ((x - y) + 1)
	if ((x <= k) and (k <= y)):
	    l -= 1
	print(max(0, l))
"
780361,27867171,"#n = int(input())
n, m, l, r, k = map(int, input().split())
#s = input()
#c = list(map(int, input().split()))
x = max(n, l)
y = min(m, r)
l = y - x + 1
if x <= k and k <= y:
    l -= 1
print(max(0, l))",153,8,62,6/17/17 21:12,10,714,1,8,"[(True, '2', '2', 105694), (True, '50', '50', 105695), (True, '1', '1', 105696), (True, '999999999', '999999999', 105697), (True, '0', '0', 105698), (True, '99999999999999997', '99999999999999997', 105699), (True, '0', '0', 105700), (True, '0', '0', 105701), (True, '999999997', '999999997', 105702), (True, '0', '0', 105703), (True, '27788438422925', '27788438422925', 105704), (True, '5076', '5076', 105705), (True, '29117730788587', '29117730788587', 105706), (True, '81604391064', '81604391064', 105707), (True, '47247500916780901', '47247500916780901', 105708), (True, '0', '0', 105709), (True, '48172141432145241', '48172141432145241', 105710), (True, '99277597320376979', '99277597320376979', 105711), (True, '256787461333454149', '256787461333454149', 105712), (True, '37925278862451249', '37925278862451249', 105713), (True, '0', '0', 105714), (True, '0', '0', 105715), (True, '0', '0', 105716), (True, '1', '1', 105717), (True, '1', '1', 105718), (True, '0', '0', 105719), (True, '5', '5', 105720), (True, '0', '0', 105721), (True, '1', '1', 105722), (True, '91', '91', 105723), (True, '1', '1', 105724), (True, '1', '1', 105725), (True, '1', '1', 105726), (True, '1', '1', 105727), (True, '0', '0', 105728), (True, '0', '0', 105729), (True, '0', '0', 105730), (True, '0', '0', 105731), (True, '0', '0', 105732), (True, '0', '0', 105733), (True, '0', '0', 105734), (True, '0', '0', 105735), (True, '0', '0', 105736), (True, '0', '0', 105737), (True, '0', '0', 105738), (True, '0', '0', 105739), (True, '0', '0', 105740), (True, '0', '0', 105741), (True, '0', '0', 105742), (True, '0', '0', 105743), (True, '0', '0', 105744), (True, '0', '0', 105745), (True, '0', '0', 105746), (True, '0', '0', 105747), (True, '0', '0', 105748), (True, '0', '0', 105749), (True, '0', '0', 105750), (True, '0', '0', 105751), (True, '0', '0', 105752), (True, '0', '0', 105753), (True, '0', '0', 105754), (True, '0', '0', 105755), (True, '0', '0', 105756), (True, '0', '0', 105757), (True, '0', '0', 105758), (True, '0', '0', 105759), (True, '0', '0', 105760), (True, '1', '1', 105761), (True, '0', '0', 105762), (True, '1', '1', 105763), (True, '0', '0', 105764), (True, '0', '0', 105765), (True, '0', '0', 105766), (True, '0', '0', 105767), (True, '0', '0', 105768), (True, '0', '0', 105769), (True, '0', '0', 105770), (True, '0', '0', 105771), (True, '0', '0', 105772), (True, '0', '0', 105773), (True, '0', '0', 105774), (True, '0', '0', 105775), (True, '0', '0', 105776), (True, '6', '6', 105777), (True, '0', '0', 105778), (True, '0', '0', 105779), (True, '0', '0', 105780), (True, '1', '1', 105781), (True, '900', '900', 105782), (True, '1', '1', 105783), (True, '1', '1', 105784), (True, '1', '1', 105785), (True, '0', '0', 105786), (True, '2', '2', 105787), (True, '11', '11', 105788), (True, '4', '4', 105789)]",True,Accecpted,0.9130175707729784,0.9809523809523808,False,0.0,False,"def func(*args):
	
	(n, m, l, r, k) = map(int, args[0].split())
	x = max(n, l)
	y = min(m, r)
	l = ((y - x) + 1)
	if ((x <= k) and (k <= y)):
	    l -= 1
	print(max(0, l))
"
3359527,28868546,"a,b=map(int,input().split())
if a>b: a,b=b,a
ans=1
for i in range(2,a+1):
    ans*=i
print(ans)",4088,4520,62,7/25/17 10:22,11,2912,1,8,"[(True, '6', '6', 245909), (True, '3628800', '3628800', 245910), (True, '720', '720', 245911), (True, '2', '2', 245912), (True, '5040', '5040', 245913), (True, '6', '6', 245914), (True, '39916800', '39916800', 245915), (True, '6', '6', 245916), (True, '39916800', '39916800', 245917), (True, '1', '1', 245918), (True, '6', '6', 245919), (True, '1', '1', 245920), (True, '24', '24', 245921), (True, '1', '1', 245922), (True, '5040', '5040', 245923), (True, '2', '2', 245924), (True, '720', '720', 245925), (True, '720', '720', 245926), (True, '39916800', '39916800', 245927), (True, '24', '24', 245928), (True, '5040', '5040', 245929), (True, '39916800', '39916800', 245930), (True, '39916800', '39916800', 245931), (True, '6', '6', 245932), (True, '39916800', '39916800', 245933), (True, '5040', '5040', 245934), (True, '6', '6', 245935), (True, '5040', '5040', 245936), (True, '6', '6', 245937), (True, '479001600', '479001600', 245938), (True, '1', '1', 245939), (True, '120', '120', 245940), (True, '40320', '40320', 245941), (True, '362880', '362880', 245942), (True, '479001600', '479001600', 245943), (True, '1', '1', 245944), (True, '479001600', '479001600', 245945), (True, '2', '2', 245946), (True, '3628800', '3628800', 245947), (True, '479001600', '479001600', 245948), (True, '479001600', '479001600', 245949), (True, '1', '1', 245950), (True, '479001600', '479001600', 245951), (True, '39916800', '39916800', 245952), (True, '479001600', '479001600', 245953), (True, '24', '24', 245954), (True, '479001600', '479001600', 245955), (True, '720', '720', 245956), (True, '3628800', '3628800', 245957), (True, '3628800', '3628800', 245958), (True, '479001600', '479001600', 245959), (True, '479001600', '479001600', 245960), (True, '479001600', '479001600', 245961), (True, '479001600', '479001600', 245962), (True, '6', '6', 245963), (True, '3628800', '3628800', 245964), (True, '479001600', '479001600', 245965), (True, '6', '6', 245966), (True, '120', '120', 245967)]",True,Accecpted,0.3781790427652474,0.9809523809523808,False,0.0,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	if (a > b):
	    (a, b) = (b, a)
	ans = 1
	for i in range(2, (a + 1)):
	    ans *= i
	print(ans)
"
3359525,28868522,"a,b=map(int,input().split())
if a>b: a,b=b,a
ans=2
for i in range(3,a+1):
    ans*=i
print(ans)",4088,4512,62,7/25/17 10:21,11,2912,2,8,"[(True, '6', '6', 245909), (True, '3628800', '3628800', 245910), (True, '720', '720', 245911), (True, '2', '2', 245912), (True, '5040', '5040', 245913), (True, '6', '6', 245914), (True, '39916800', '39916800', 245915), (True, '6', '6', 245916), (True, '39916800', '39916800', 245917), (False, '2', '1', 245918), (True, '6', '6', 245919), (False, '2', '1', 245920), (True, '24', '24', 245921), (False, '2', '1', 245922), (True, '5040', '5040', 245923), (True, '2', '2', 245924), (True, '720', '720', 245925), (True, '720', '720', 245926), (True, '39916800', '39916800', 245927), (True, '24', '24', 245928), (True, '5040', '5040', 245929), (True, '39916800', '39916800', 245930), (True, '39916800', '39916800', 245931), (True, '6', '6', 245932), (True, '39916800', '39916800', 245933), (True, '5040', '5040', 245934), (True, '6', '6', 245935), (True, '5040', '5040', 245936), (True, '6', '6', 245937), (True, '479001600', '479001600', 245938), (False, '2', '1', 245939), (True, '120', '120', 245940), (True, '40320', '40320', 245941), (True, '362880', '362880', 245942), (True, '479001600', '479001600', 245943), (False, '2', '1', 245944), (True, '479001600', '479001600', 245945), (True, '2', '2', 245946), (True, '3628800', '3628800', 245947), (True, '479001600', '479001600', 245948), (True, '479001600', '479001600', 245949), (False, '2', '1', 245950), (True, '479001600', '479001600', 245951), (True, '39916800', '39916800', 245952), (True, '479001600', '479001600', 245953), (True, '24', '24', 245954), (True, '479001600', '479001600', 245955), (True, '720', '720', 245956), (True, '3628800', '3628800', 245957), (True, '3628800', '3628800', 245958), (True, '479001600', '479001600', 245959), (True, '479001600', '479001600', 245960), (True, '479001600', '479001600', 245961), (True, '479001600', '479001600', 245962), (True, '6', '6', 245963), (True, '3628800', '3628800', 245964), (True, '479001600', '479001600', 245965), (True, '6', '6', 245966), (True, '120', '120', 245967)]",False,Wrong Answer,0.3781790427652474,0.9809523809523808,False,0.1016949152542373,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	if (a > b):
	    (a, b) = (b, a)
	ans = 2
	for i in range(3, (a + 1)):
	    ans *= i
	print(ans)
"
3105510,26704649,"n, k = input().split()
k = int(k)
ans = 0
count = 0
for num in n[::-1]:
	if count == k:
		print(ans)
		exit()
	if num == 0:
		count += 1
	if num != 0:
		ans += 1
print(ans + count - 1)",25310,4480,46,4/27/17 17:26,25,2656,2,8,"[(False, '4', '1', 225556), (True, '2', '2', 225557), (False, '7', '3', 225558), (True, '0', '0', 225559), (True, '0', '0', 225560), (False, '2', '0', 225561), (False, '8', '2', 225562), (False, '9', '6', 225563), (False, '7', '0', 225564), (False, '9', '2', 225565), (False, '1', '0', 225566), (True, '1', '1', 225567), (True, '1', '1', 225568), (False, '2', '0', 225569), (True, '2', '2', 225570), (False, '8', '3', 225571), (False, '8', '0', 225572), (False, '8', '2', 225573), (False, '8', '4', 225574), (True, '8', '8', 225575), (True, '8', '8', 225576), (False, '9', '0', 225577), (True, '9', '9', 225578), (True, '9', '9', 225579), (False, '9', '0', 225580), (False, '9', '0', 225581), (False, '9', '0', 225582), (False, '9', '0', 225583), (False, '9', '0', 225584), (False, '9', '1', 225585), (False, '9', '2', 225586), (False, '9', '3', 225587), (False, '9', '4', 225588), (True, '9', '9', 225589), (True, '9', '9', 225590), (True, '9', '9', 225591), (True, '9', '9', 225592), (False, '7', '0', 225593), (False, '7', '0', 225594), (False, '7', '0', 225595), (False, '7', '1', 225596), (False, '7', '1', 225597), (False, '7', '1', 225598), (True, '7', '7', 225599), (True, '7', '7', 225600), (True, '7', '7', 225601), (False, '9', '1', 225602), (False, '9', '1', 225603), (False, '9', '1', 225604), (False, '9', '1', 225605), (False, '9', '1', 225606), (False, '9', '1', 225607), (True, '9', '9', 225608), (False, '3', '0', 225609), (False, '8', '2', 225610), (True, '3', '3', 225611), (False, '7', '0', 225612), (False, '2', '0', 225613), (False, '8', '0', 225614), (True, '3', '3', 225615), (False, '8', '0', 225616), (False, '8', '4', 225617), (True, '6', '6', 225618), (False, '6', '2', 225619), (True, '5', '5', 225620), (True, '7', '7', 225621), (False, '4', '0', 225622), (False, '8', '0', 225623), (True, '3', '3', 225624), (False, '7', '0', 225625), (False, '2', '0', 225626), (True, '8', '8', 225627), (False, '5', '0', 225628), (True, '3', '3', 225629), (True, '6', '6', 225630), (True, '6', '6', 225631), (True, '4', '4', 225632), (True, '7', '7', 225633), (True, '2', '2', 225634), (True, '5', '5', 225635), (True, '6', '6', 225636), (True, '5', '5', 225637), (True, '2', '2', 225638), (True, '3', '3', 225639), (True, '5', '5', 225640), (True, '6', '6', 225641), (True, '5', '5', 225642), (True, '3', '3', 225643), (True, '6', '6', 225644), (True, '8', '8', 225645), (True, '2', '2', 225646), (True, '3', '3', 225647), (True, '3', '3', 225648), (True, '7', '7', 225649), (True, '7', '7', 225650), (True, '4', '4', 225651), (True, '6', '6', 225652), (True, '7', '7', 225653), (True, '3', '3', 225654), (True, '4', '4', 225655), (True, '4', '4', 225656), (True, '3', '3', 225657), (True, '8', '8', 225658), (True, '4', '4', 225659), (True, '4', '4', 225660), (True, '5', '5', 225661), (True, '4', '4', 225662), (False, '2', '1', 225663), (True, '5', '5', 225664), (True, '5', '5', 225665), (True, '4', '4', 225666), (True, '5', '5', 225667), (True, '6', '6', 225668), (True, '6', '6', 225669), (True, '6', '6', 225670), (True, '2', '2', 225671), (True, '5', '5', 225672), (True, '4', '4', 225673), (True, '2', '2', 225674), (True, '3', '3', 225675), (True, '5', '5', 225676), (True, '4', '4', 225677), (True, '4', '4', 225678), (True, '4', '4', 225679), (True, '9', '9', 225680), (True, '5', '5', 225681), (True, '2', '2', 225682), (True, '5', '5', 225683), (True, '6', '6', 225684), (True, '9', '9', 225685), (True, '4', '4', 225686), (True, '2', '2', 225687), (True, '5', '5', 225688), (True, '4', '4', 225689), (True, '7', '7', 225690), (True, '3', '3', 225691), (True, '5', '5', 225692), (True, '6', '6', 225693), (True, '4', '4', 225694), (True, '1', '1', 225695), (True, '6', '6', 225696), (True, '4', '4', 225697), (True, '4', '4', 225698), (True, '6', '6', 225699), (True, '4', '4', 225700), (True, '7', '7', 225701), (True, '6', '6', 225702), (True, '4', '4', 225703), (True, '4', '4', 225704), (True, '7', '7', 225705), (True, '5', '5', 225706), (True, '3', '3', 225707), (True, '2', '2', 225708), (True, '1', '1', 225709), (True, '6', '6', 225710), (True, '3', '3', 225711), (True, '6', '6', 225712), (True, '3', '3', 225713), (True, '5', '5', 225714), (True, '5', '5', 225715), (True, '4', '4', 225716)]",False,Wrong Answer,0.8729435194251833,0.9809523809523808,False,0.3043478260869565,False,"def func(*args):
	
	(n, k) = args[0].split()
	k = int(k)
	ans = 0
	count = 0
	for num in n[::(- 1)]:
	    if (count == k):
	        print(ans)
	        exit()
	    if (num == 0):
	        count += 1
	    if (num != 0):
	        ans += 1
	print(((ans + count) - 1))
"
308931,25463409,"from sys import stdin
n = int(stdin.readline())
#while(n != 0):
result = n - n//2 - n//3 - n//5  - n//7 + n//6 + n//10 + n//14 + n//15 + n//21 + n//35 - n//30 - n//42 - n//70 - n//105 
print(result)",26427,4468,46,3/14/17 2:14,9,271,2,8,"[(True, '2', '2', 70476), (False, '565', '576', 70477), (False, '565', '577', 70478), (True, '1', '1', 70479), (False, '70311836', '71807832', 70480), (False, '160758313988452982', '164178703647781768', 70481), (False, '223809523809523810', '228571428571428571', 70482), (False, '221046443323927100', '225749559139329804', 70483), (False, '812160', '829440', 70484), (False, '112800000000000000', '115200000000000000', 70485)]",False,Wrong Answer,0.9355548302368808,0.9809523809523808,False,0.8,False,"def func(*args):
	
	from sys import stdin
	n = int(stdin.readline())
	result = ((((((((((((((n - (n // 2)) - (n // 3)) - (n // 5)) - (n // 7)) + (n // 6)) + (n // 10)) + (n // 14)) + (n // 15)) + (n // 21)) + (n // 35)) - (n // 30)) - (n // 42)) - (n // 70)) - (n // 105))
	print(result)
"
308932,25463415,"from sys import stdin
n = int(stdin.readline())
#while(n != 0):
result = n - n//2 - n//3 - n//5  - n//7 + n//6 + n//10 + n//14 + n//15 + n//21 + n//35 - n//30 - n//42 - n//70 - n//105 + n//210
print(result)",26427,4528,62,3/14/17 2:15,9,271,1,8,"[(True, '2', '2', 70476), (True, '576', '576', 70477), (True, '577', '577', 70478), (True, '1', '1', 70479), (True, '71807832', '71807832', 70480), (True, '164178703647781768', '164178703647781768', 70481), (True, '228571428571428571', '228571428571428571', 70482), (True, '225749559139329804', '225749559139329804', 70483), (True, '829440', '829440', 70484), (True, '115200000000000000', '115200000000000000', 70485)]",True,Accecpted,0.9355548302368808,0.9809523809523808,False,0.0,False,"def func(*args):
	
	from sys import stdin
	n = int(stdin.readline())
	result = (((((((((((((((n - (n // 2)) - (n // 3)) - (n // 5)) - (n // 7)) + (n // 6)) + (n // 10)) + (n // 14)) + (n // 15)) + (n // 21)) + (n // 35)) - (n // 30)) - (n // 42)) - (n // 70)) - (n // 105)) + (n // 210))
	print(result)
"
3105511,26704665,"n, k = input().split()
k = int(k)
ans = 0
count = 0
for num in n[::-1]:
	if count == k:
		print(ans)
		exit()
	if num == '0':
		count += 1
	if num != '0':
		ans += 1
print(ans + count - 1)",25310,5444,62,4/27/17 17:27,25,2656,1,8,"[(True, '1', '1', 225556), (True, '2', '2', 225557), (True, '3', '3', 225558), (True, '0', '0', 225559), (True, '0', '0', 225560), (True, '0', '0', 225561), (True, '2', '2', 225562), (True, '6', '6', 225563), (True, '0', '0', 225564), (True, '2', '2', 225565), (True, '0', '0', 225566), (True, '1', '1', 225567), (True, '1', '1', 225568), (True, '0', '0', 225569), (True, '2', '2', 225570), (True, '3', '3', 225571), (True, '0', '0', 225572), (True, '2', '2', 225573), (True, '4', '4', 225574), (True, '8', '8', 225575), (True, '8', '8', 225576), (True, '0', '0', 225577), (True, '9', '9', 225578), (True, '9', '9', 225579), (True, '0', '0', 225580), (True, '0', '0', 225581), (True, '0', '0', 225582), (True, '0', '0', 225583), (True, '0', '0', 225584), (True, '1', '1', 225585), (True, '2', '2', 225586), (True, '3', '3', 225587), (True, '4', '4', 225588), (True, '9', '9', 225589), (True, '9', '9', 225590), (True, '9', '9', 225591), (True, '9', '9', 225592), (True, '0', '0', 225593), (True, '0', '0', 225594), (True, '0', '0', 225595), (True, '1', '1', 225596), (True, '1', '1', 225597), (True, '1', '1', 225598), (True, '7', '7', 225599), (True, '7', '7', 225600), (True, '7', '7', 225601), (True, '1', '1', 225602), (True, '1', '1', 225603), (True, '1', '1', 225604), (True, '1', '1', 225605), (True, '1', '1', 225606), (True, '1', '1', 225607), (True, '9', '9', 225608), (True, '0', '0', 225609), (True, '2', '2', 225610), (True, '3', '3', 225611), (True, '0', '0', 225612), (True, '0', '0', 225613), (True, '0', '0', 225614), (True, '3', '3', 225615), (True, '0', '0', 225616), (True, '4', '4', 225617), (True, '6', '6', 225618), (True, '2', '2', 225619), (True, '5', '5', 225620), (True, '7', '7', 225621), (True, '0', '0', 225622), (True, '0', '0', 225623), (True, '3', '3', 225624), (True, '0', '0', 225625), (True, '0', '0', 225626), (True, '8', '8', 225627), (True, '0', '0', 225628), (True, '3', '3', 225629), (True, '6', '6', 225630), (True, '6', '6', 225631), (True, '4', '4', 225632), (True, '7', '7', 225633), (True, '2', '2', 225634), (True, '5', '5', 225635), (True, '6', '6', 225636), (True, '5', '5', 225637), (True, '2', '2', 225638), (True, '3', '3', 225639), (True, '5', '5', 225640), (True, '6', '6', 225641), (True, '5', '5', 225642), (True, '3', '3', 225643), (True, '6', '6', 225644), (True, '8', '8', 225645), (True, '2', '2', 225646), (True, '3', '3', 225647), (True, '3', '3', 225648), (True, '7', '7', 225649), (True, '7', '7', 225650), (True, '4', '4', 225651), (True, '6', '6', 225652), (True, '7', '7', 225653), (True, '3', '3', 225654), (True, '4', '4', 225655), (True, '4', '4', 225656), (True, '3', '3', 225657), (True, '8', '8', 225658), (True, '4', '4', 225659), (True, '4', '4', 225660), (True, '5', '5', 225661), (True, '4', '4', 225662), (True, '1', '1', 225663), (True, '5', '5', 225664), (True, '5', '5', 225665), (True, '4', '4', 225666), (True, '5', '5', 225667), (True, '6', '6', 225668), (True, '6', '6', 225669), (True, '6', '6', 225670), (True, '2', '2', 225671), (True, '5', '5', 225672), (True, '4', '4', 225673), (True, '2', '2', 225674), (True, '3', '3', 225675), (True, '5', '5', 225676), (True, '4', '4', 225677), (True, '4', '4', 225678), (True, '4', '4', 225679), (True, '9', '9', 225680), (True, '5', '5', 225681), (True, '2', '2', 225682), (True, '5', '5', 225683), (True, '6', '6', 225684), (True, '9', '9', 225685), (True, '4', '4', 225686), (True, '2', '2', 225687), (True, '5', '5', 225688), (True, '4', '4', 225689), (True, '7', '7', 225690), (True, '3', '3', 225691), (True, '5', '5', 225692), (True, '6', '6', 225693), (True, '4', '4', 225694), (True, '1', '1', 225695), (True, '6', '6', 225696), (True, '4', '4', 225697), (True, '4', '4', 225698), (True, '6', '6', 225699), (True, '4', '4', 225700), (True, '7', '7', 225701), (True, '6', '6', 225702), (True, '4', '4', 225703), (True, '4', '4', 225704), (True, '7', '7', 225705), (True, '5', '5', 225706), (True, '3', '3', 225707), (True, '2', '2', 225708), (True, '1', '1', 225709), (True, '6', '6', 225710), (True, '3', '3', 225711), (True, '6', '6', 225712), (True, '3', '3', 225713), (True, '5', '5', 225714), (True, '5', '5', 225715), (True, '4', '4', 225716)]",True,Accecpted,0.8729435194251833,0.9809523809523808,False,0.0,False,"def func(*args):
	
	(n, k) = args[0].split()
	k = int(k)
	ans = 0
	count = 0
	for num in n[::(- 1)]:
	    if (count == k):
	        print(ans)
	        exit()
	    if (num == '0'):
	        count += 1
	    if (num != '0'):
	        ans += 1
	print(((ans + count) - 1))
"
881691,29104742,"m=list(map(int, input().split(' ')))
p=m[0]
r=m[1]
if(p%10==0):
    print(1)
elif(p%10==r):
    print(""1"")
elif(p%10==5):
    print(""2"")
else:
    c=1
    while(1):
        x=p*c
        if(x%10==r or x%10==0):
            print(c)
            break
        c+=1",1518,4520,61,8/1/17 18:10,33,814,1,8,"[(True, '9', '9', 113435), (True, '1', '1', 113436), (True, '2', '2', 113437), (True, '1', '1', 113438), (True, '9', '9', 113439), (True, '1', '1', 113440), (True, '1', '1', 113441), (True, '1', '1', 113442), (True, '2', '2', 113443), (True, '1', '1', 113444), (True, '2', '2', 113445), (True, '2', '2', 113446), (True, '3', '3', 113447), (True, '4', '4', 113448), (True, '5', '5', 113449), (True, '6', '6', 113450), (True, '7', '7', 113451), (True, '8', '8', 113452), (True, '9', '9', 113453), (True, '5', '5', 113454), (True, '3', '3', 113455), (True, '7', '7', 113456), (True, '4', '4', 113457), (True, '3', '3', 113458), (True, '4', '4', 113459), (True, '5', '5', 113460), (True, '6', '6', 113461), (True, '7', '7', 113462), (True, '8', '8', 113463), (True, '1', '1', 113464), (True, '1', '1', 113465), (True, '1', '1', 113466), (True, '1', '1', 113467), (True, '1', '1', 113468), (True, '1', '1', 113469), (True, '1', '1', 113470), (True, '8', '8', 113471), (True, '7', '7', 113472), (True, '4', '4', 113473), (True, '5', '5', 113474), (True, '5', '5', 113475), (True, '1', '1', 113476), (True, '2', '2', 113477), (True, '2', '2', 113478), (True, '1', '1', 113479), (True, '5', '5', 113480), (True, '1', '1', 113481), (True, '5', '5', 113482), (True, '5', '5', 113483), (True, '5', '5', 113484), (True, '5', '5', 113485), (True, '5', '5', 113486), (True, '5', '5', 113487), (True, '1', '1', 113488)]",True,Accecpted,0.7643838122940672,0.9809358752166378,False,0.0,False,"def func(*args):
	
	m = list(map(int, args[0].split(' ')))
	p = m[0]
	r = m[1]
	if ((p % 10) == 0):
	    print(1)
	elif ((p % 10) == r):
	    print('1')
	elif ((p % 10) == 5):
	    print('2')
	else:
	    c = 1
	    while 1:
	        x = (p * c)
	        if (((x % 10) == r) or ((x % 10) == 0)):
	            print(c)
	            break
	        c += 1
"
881689,29104646,"m=list(map(int, input().split(' ')))
p=m[0]
r=m[1]
if(p%10==0):
    print(1)
elif(p%10==r):
    print(""1"")
elif(p%10==5):
    print(""2"")
else:
    c=1
    while(1):
        x=p*c
        if(x%10==r):
            print(c)
            break
        c+=1",1518,4500,1000,8/1/17 18:06,33,814,3,8,"[(True, '9', '9', 113435), (True, '1', '1', 113436), (True, '2', '2', 113437), (True, '1', '1', 113438), (True, '9', '9', 113439), (True, '1', '1', 113440), (True, '1', '1', 113441), (True, '1', '1', 113442), (True, '2', '2', 113443), (True, '1', '1', 113444), (True, '2', '2', 113445), (True, '2', '2', 113446), (True, '3', '3', 113447), (True, '4', '4', 113448)]",True,Time Limit,0.7643838122940672,0.9809358752166378,False,0.0,False,"def func(*args):
	
	m = list(map(int, args[0].split(' ')))
	p = m[0]
	r = m[1]
	if ((p % 10) == 0):
	    print(1)
	elif ((p % 10) == r):
	    print('1')
	elif ((p % 10) == 5):
	    print('2')
	else:
	    c = 1
	    while 1:
	        x = (p * c)
	        if ((x % 10) == r):
	            print(c)
	            break
	        c += 1
"
2866702,28575691,"from sys import stdin, stdout


def check(m, k):
    for i in range(2, int(m ** 0.5) + 1):
        if not m % i and (i >= k or m // i >= k):
            return 1
    else:
        return 0


n, m, k = map(int, stdin.readline().split())

if m < 2 * k or (k != 1 and not check(m, k)):
    stdout.write('Marsel')
elif n % 2:
    stdout.write('Timur')
else:
    stdout.write('Marsel')",52577,5420,62,7/15/17 17:25,19,2456,1,8,"[(True, 'Timur', 'Timur', 31780), (True, 'Marsel', 'Marsel', 31781), (True, 'Marsel', 'Marsel', 31782), (True, 'Timur', 'Timur', 31783), (True, 'Marsel', 'Marsel', 31784), (True, 'Timur', 'Timur', 31785), (True, 'Marsel', 'Marsel', 31786), (True, 'Timur', 'Timur', 31787), (True, 'Marsel', 'Marsel', 31788), (True, 'Marsel', 'Marsel', 31789), (True, 'Marsel', 'Marsel', 31790), (True, 'Marsel', 'Marsel', 31791), (True, 'Marsel', 'Marsel', 31792), (True, 'Marsel', 'Marsel', 31793), (True, 'Marsel', 'Marsel', 31794), (True, 'Marsel', 'Marsel', 31795), (True, 'Timur', 'Timur', 31796), (True, 'Timur', 'Timur', 31797), (True, 'Marsel', 'Marsel', 31798), (True, 'Timur', 'Timur', 31799), (True, 'Marsel', 'Marsel', 31800), (True, 'Timur', 'Timur', 31801), (True, 'Marsel', 'Marsel', 31802), (True, 'Timur', 'Timur', 31803), (True, 'Marsel', 'Marsel', 31804), (True, 'Timur', 'Timur', 31805), (True, 'Marsel', 'Marsel', 31806), (True, 'Timur', 'Timur', 31807), (True, 'Marsel', 'Marsel', 31808), (True, 'Timur', 'Timur', 31809), (True, 'Marsel', 'Marsel', 31810), (True, 'Timur', 'Timur', 31811), (True, 'Marsel', 'Marsel', 31812), (True, 'Timur', 'Timur', 31813), (True, 'Marsel', 'Marsel', 31814), (True, 'Timur', 'Timur', 31815), (True, 'Marsel', 'Marsel', 31816), (True, 'Timur', 'Timur', 31817), (True, 'Marsel', 'Marsel', 31818), (True, 'Timur', 'Timur', 31819), (True, 'Marsel', 'Marsel', 31820), (True, 'Timur', 'Timur', 31821), (True, 'Marsel', 'Marsel', 31822), (True, 'Marsel', 'Marsel', 31823), (True, 'Marsel', 'Marsel', 31824), (True, 'Timur', 'Timur', 31825), (True, 'Marsel', 'Marsel', 31826), (True, 'Timur', 'Timur', 31827), (True, 'Marsel', 'Marsel', 31828), (True, 'Timur', 'Timur', 31829), (True, 'Marsel', 'Marsel', 31830), (True, 'Timur', 'Timur', 31831), (True, 'Marsel', 'Marsel', 31832), (True, 'Marsel', 'Marsel', 31833), (True, 'Marsel', 'Marsel', 31834), (True, 'Marsel', 'Marsel', 31835), (True, 'Marsel', 'Marsel', 31836), (True, 'Timur', 'Timur', 31837), (True, 'Marsel', 'Marsel', 31838), (True, 'Marsel', 'Marsel', 31839), (True, 'Marsel', 'Marsel', 31840), (True, 'Marsel', 'Marsel', 31841), (True, 'Marsel', 'Marsel', 31842), (True, 'Marsel', 'Marsel', 31843), (True, 'Marsel', 'Marsel', 31844), (True, 'Timur', 'Timur', 31845), (True, 'Marsel', 'Marsel', 31846), (True, 'Marsel', 'Marsel', 31847), (True, 'Marsel', 'Marsel', 31848), (True, 'Timur', 'Timur', 31849), (True, 'Marsel', 'Marsel', 31850), (True, 'Timur', 'Timur', 31851), (True, 'Marsel', 'Marsel', 31852), (True, 'Timur', 'Timur', 31853), (True, 'Marsel', 'Marsel', 31854), (True, 'Timur', 'Timur', 31855), (True, 'Marsel', 'Marsel', 31856), (True, 'Timur', 'Timur', 31857), (True, 'Marsel', 'Marsel', 31858), (True, 'Timur', 'Timur', 31859), (True, 'Marsel', 'Marsel', 31860), (True, 'Marsel', 'Marsel', 31861), (True, 'Marsel', 'Marsel', 31862), (True, 'Marsel', 'Marsel', 31863), (True, 'Marsel', 'Marsel', 31864), (True, 'Marsel', 'Marsel', 31865), (True, 'Timur', 'Timur', 31866), (True, 'Marsel', 'Marsel', 31867), (True, 'Timur', 'Timur', 31868), (True, 'Marsel', 'Marsel', 31869), (True, 'Marsel', 'Marsel', 31870), (True, 'Timur', 'Timur', 31871), (True, 'Timur', 'Timur', 31872)]",True,Accecpted,0.8357722155087852,0.9808429118773946,False,0.0,False,"def func(*args):
	
	from sys import stdin, stdout
	
	def check(m, k):
	    for i in range(2, (int((m ** 0.5)) + 1)):
	        if ((not (m % i)) and ((i >= k) or ((m // i) >= k))):
	            return 1
	    else:
	        return 0
	(n, m, k) = map(int, stdin.readline().split())
	if ((m < (2 * k)) or ((k != 1) and (not check(m, k)))):
	    stdout.write('Marsel')
	elif (n % 2):
	    stdout.write('Timur')
	else:
	    stdout.write('Marsel')
"
2866701,28575655,"from sys import stdin, stdout


def check(m, k):
    for i in range(1, int(m ** 0.5) + 1):
        if not m % i and (i >= k or m // i >= k):
            return 1
    else:
        return 0


n, m, k = map(int, stdin.readline().split())

if m < 2 * k or not check(m, k):
    stdout.write('Marsel')
elif n % 2:
    stdout.write('Timur')
else:
    stdout.write('Marsel')",52577,4492,46,7/15/17 17:24,19,2456,2,8,"[(True, 'Timur', 'Timur', 31780), (True, 'Marsel', 'Marsel', 31781), (True, 'Marsel', 'Marsel', 31782), (True, 'Timur', 'Timur', 31783), (False, 'Timur', 'Marsel', 31784), (True, 'Timur', 'Timur', 31785), (True, 'Marsel', 'Marsel', 31786), (True, 'Timur', 'Timur', 31787), (True, 'Marsel', 'Marsel', 31788), (True, 'Marsel', 'Marsel', 31789), (True, 'Marsel', 'Marsel', 31790), (True, 'Marsel', 'Marsel', 31791), (True, 'Marsel', 'Marsel', 31792), (True, 'Marsel', 'Marsel', 31793), (True, 'Marsel', 'Marsel', 31794), (True, 'Marsel', 'Marsel', 31795), (True, 'Timur', 'Timur', 31796), (True, 'Timur', 'Timur', 31797), (True, 'Marsel', 'Marsel', 31798), (True, 'Timur', 'Timur', 31799), (True, 'Marsel', 'Marsel', 31800), (True, 'Timur', 'Timur', 31801), (True, 'Marsel', 'Marsel', 31802), (True, 'Timur', 'Timur', 31803), (True, 'Marsel', 'Marsel', 31804), (True, 'Timur', 'Timur', 31805), (True, 'Marsel', 'Marsel', 31806), (True, 'Timur', 'Timur', 31807), (True, 'Marsel', 'Marsel', 31808), (True, 'Timur', 'Timur', 31809), (True, 'Marsel', 'Marsel', 31810), (True, 'Timur', 'Timur', 31811), (True, 'Marsel', 'Marsel', 31812), (True, 'Timur', 'Timur', 31813), (True, 'Marsel', 'Marsel', 31814), (True, 'Timur', 'Timur', 31815), (True, 'Marsel', 'Marsel', 31816), (True, 'Timur', 'Timur', 31817), (True, 'Marsel', 'Marsel', 31818), (True, 'Timur', 'Timur', 31819), (True, 'Marsel', 'Marsel', 31820), (True, 'Timur', 'Timur', 31821), (True, 'Marsel', 'Marsel', 31822), (True, 'Marsel', 'Marsel', 31823), (True, 'Marsel', 'Marsel', 31824), (True, 'Timur', 'Timur', 31825), (True, 'Marsel', 'Marsel', 31826), (True, 'Timur', 'Timur', 31827), (True, 'Marsel', 'Marsel', 31828), (True, 'Timur', 'Timur', 31829), (True, 'Marsel', 'Marsel', 31830), (True, 'Timur', 'Timur', 31831), (True, 'Marsel', 'Marsel', 31832), (True, 'Marsel', 'Marsel', 31833), (True, 'Marsel', 'Marsel', 31834), (True, 'Marsel', 'Marsel', 31835), (True, 'Marsel', 'Marsel', 31836), (True, 'Timur', 'Timur', 31837), (True, 'Marsel', 'Marsel', 31838), (False, 'Timur', 'Marsel', 31839), (True, 'Marsel', 'Marsel', 31840), (False, 'Timur', 'Marsel', 31841), (True, 'Marsel', 'Marsel', 31842), (True, 'Marsel', 'Marsel', 31843), (True, 'Marsel', 'Marsel', 31844), (True, 'Timur', 'Timur', 31845), (True, 'Marsel', 'Marsel', 31846), (True, 'Marsel', 'Marsel', 31847), (True, 'Marsel', 'Marsel', 31848), (True, 'Timur', 'Timur', 31849), (True, 'Marsel', 'Marsel', 31850), (True, 'Timur', 'Timur', 31851), (True, 'Marsel', 'Marsel', 31852), (True, 'Timur', 'Timur', 31853), (True, 'Marsel', 'Marsel', 31854), (True, 'Timur', 'Timur', 31855), (True, 'Marsel', 'Marsel', 31856), (True, 'Timur', 'Timur', 31857), (True, 'Marsel', 'Marsel', 31858), (True, 'Timur', 'Timur', 31859), (True, 'Marsel', 'Marsel', 31860), (True, 'Marsel', 'Marsel', 31861), (True, 'Marsel', 'Marsel', 31862), (False, 'Timur', 'Marsel', 31863), (True, 'Marsel', 'Marsel', 31864), (True, 'Marsel', 'Marsel', 31865), (True, 'Timur', 'Timur', 31866), (True, 'Marsel', 'Marsel', 31867), (True, 'Timur', 'Timur', 31868), (True, 'Marsel', 'Marsel', 31869), (True, 'Marsel', 'Marsel', 31870), (True, 'Timur', 'Timur', 31871), (True, 'Timur', 'Timur', 31872)]",False,Wrong Answer,0.8357722155087852,0.9808429118773946,False,0.043010752688172,False,"def func(*args):
	
	from sys import stdin, stdout
	
	def check(m, k):
	    for i in range(1, (int((m ** 0.5)) + 1)):
	        if ((not (m % i)) and ((i >= k) or ((m // i) >= k))):
	            return 1
	    else:
	        return 0
	(n, m, k) = map(int, stdin.readline().split())
	if ((m < (2 * k)) or (not check(m, k))):
	    stdout.write('Marsel')
	elif (n % 2):
	    stdout.write('Timur')
	else:
	    stdout.write('Marsel')
"
2842069,19145385,"def kasra(n):
    m=0
    a=0
    while n!=0:
        y=n%10
        n=n//10
        if y!=0:
            m=m*10+y
    while m!=0:
        t=m%10
        m=m//10
        a=a*10+t
    return a
a=int(input())
b=int(input())
if kasra(a+b)==kasra(a)+kasra(b):
    print('YES')
else:
    print('NO')",136,8,122,7/15/16 9:55,19,2439,1,8,"[(True, 'YES', 'YES', 214611), (True, 'NO', 'NO', 214612), (True, 'YES', 'YES', 214613), (True, 'NO', 'NO', 214614), (True, 'NO', 'NO', 214615), (True, 'NO', 'NO', 214616), (True, 'NO', 'NO', 214617), (True, 'YES', 'YES', 214618), (True, 'YES', 'YES', 214619), (True, 'YES', 'YES', 214620), (True, 'YES', 'YES', 214621), (True, 'NO', 'NO', 214622), (True, 'YES', 'YES', 214623), (True, 'YES', 'YES', 214624), (True, 'NO', 'NO', 214625), (True, 'YES', 'YES', 214626), (True, 'NO', 'NO', 214627), (True, 'NO', 'NO', 214628), (True, 'YES', 'YES', 214629), (True, 'YES', 'YES', 214630), (True, 'YES', 'YES', 214631), (True, 'YES', 'YES', 214632), (True, 'NO', 'NO', 214633), (True, 'YES', 'YES', 214634), (True, 'NO', 'NO', 214635), (True, 'NO', 'NO', 214636), (True, 'NO', 'NO', 214637), (True, 'NO', 'NO', 214638), (True, 'NO', 'NO', 214639), (True, 'NO', 'NO', 214640), (True, 'NO', 'NO', 214641), (True, 'NO', 'NO', 214642), (True, 'NO', 'NO', 214643), (True, 'YES', 'YES', 214644), (True, 'YES', 'YES', 214645), (True, 'NO', 'NO', 214646), (True, 'YES', 'YES', 214647), (True, 'NO', 'NO', 214648), (True, 'YES', 'YES', 214649), (True, 'YES', 'YES', 214650), (True, 'NO', 'NO', 214651), (True, 'NO', 'NO', 214652), (True, 'NO', 'NO', 214653)]",True,Accecpted,0.7267072830982378,0.9807692307692308,False,0.0,False,"def func(*args):
	
	
	def kasra(n):
	    m = 0
	    a = 0
	    while (n != 0):
	        y = (n % 10)
	        n = (n // 10)
	        if (y != 0):
	            m = ((m * 10) + y)
	    while (m != 0):
	        t = (m % 10)
	        m = (m // 10)
	        a = ((a * 10) + t)
	    return a
	a = int(args[0])
	b = int(args[1])
	if (kasra((a + b)) == (kasra(a) + kasra(b))):
	    print('YES')
	else:
	    print('NO')
"
2842068,19145277,"def kasra(a):
    m=0
    a=0
    while a!=0:
        y=a%10
        a=a//10
        if y!=0:
            m=m*10+y
    while m!=0:
        t=m%10
        m=m//10
        a=a*10+t
    return a
a=int(input())
b=int(input())
if kasra(a+b)==kasra(a)+kasra(b):
    print('YES')
else:
    print('NO')",136,0,124,7/15/16 9:51,19,2439,2,8,"[(True, 'YES', 'YES', 214611), (False, 'YES', 'NO', 214612), (True, 'YES', 'YES', 214613), (False, 'YES', 'NO', 214614), (False, 'YES', 'NO', 214615), (False, 'YES', 'NO', 214616), (False, 'YES', 'NO', 214617), (True, 'YES', 'YES', 214618), (True, 'YES', 'YES', 214619), (True, 'YES', 'YES', 214620), (True, 'YES', 'YES', 214621), (False, 'YES', 'NO', 214622), (True, 'YES', 'YES', 214623), (True, 'YES', 'YES', 214624), (False, 'YES', 'NO', 214625), (True, 'YES', 'YES', 214626), (False, 'YES', 'NO', 214627), (False, 'YES', 'NO', 214628), (True, 'YES', 'YES', 214629), (True, 'YES', 'YES', 214630), (True, 'YES', 'YES', 214631), (True, 'YES', 'YES', 214632), (False, 'YES', 'NO', 214633), (True, 'YES', 'YES', 214634), (False, 'YES', 'NO', 214635), (False, 'YES', 'NO', 214636), (False, 'YES', 'NO', 214637), (False, 'YES', 'NO', 214638), (False, 'YES', 'NO', 214639), (False, 'YES', 'NO', 214640), (False, 'YES', 'NO', 214641), (False, 'YES', 'NO', 214642), (False, 'YES', 'NO', 214643), (True, 'YES', 'YES', 214644), (True, 'YES', 'YES', 214645), (False, 'YES', 'NO', 214646), (True, 'YES', 'YES', 214647), (False, 'YES', 'NO', 214648), (True, 'YES', 'YES', 214649), (True, 'YES', 'YES', 214650), (False, 'YES', 'NO', 214651), (False, 'YES', 'NO', 214652), (False, 'YES', 'NO', 214653)]",False,Wrong Answer,0.7267072830982378,0.9807692307692308,False,0.5581395348837209,False,"def func(*args):
	
	
	def kasra(a):
	    m = 0
	    a = 0
	    while (a != 0):
	        y = (a % 10)
	        a = (a // 10)
	        if (y != 0):
	            m = ((m * 10) + y)
	    while (m != 0):
	        t = (m % 10)
	        m = (m // 10)
	        a = ((a * 10) + t)
	    return a
	a = int(args[0])
	b = int(args[1])
	if (kasra((a + b)) == (kasra(a) + kasra(b))):
	    print('YES')
	else:
	    print('NO')
"
249477,29081198,"a, b = map(int, input().split())
c, d = map(int, input().split())

print(min(abs(a-c), abs(d-b)))",690,4500,46,7/31/17 23:49,7,208,2,8,"[(False, '4', '5', 64835), (True, '3', '3', 64836), (False, '4', '6', 64837), (False, '4', '6', 64838), (False, '9', '101', 64839), (True, '99', '99', 64840), (True, '2000000000', '2000000000', 64841), (False, '1000000000', '1999999999', 64842), (False, '1', '2', 64843), (False, '0', '90', 64844), (False, '1', '5', 64845), (False, '4', '5', 64846), (False, '0', '10', 64847), (False, '3', '4', 64848), (False, '1166016536', '1649942490', 64849), (False, '894081143', '929691728', 64850), (False, '0', '4', 64851), (False, '380190830', '810081197', 64852), (False, '0', '8', 64853), (False, '2', '4', 64854), (False, '2', '3', 64855), (False, '200000000', '200000123', 64856), (False, '0', '1', 64857), (False, '0', '15', 64858), (False, '1', '5', 64859), (False, '0', '1', 64860), (False, '19919728', '527766146', 64861), (False, '2', '4', 64862), (False, '1', '3', 64863), (False, '1713', '4546', 64864), (False, '1', '2', 64865), (False, '2', '3', 64866), (False, '1999999997', '2000000000', 64867), (False, '0', '2000000000', 64868), (False, '273181438', '1120229998', 64869), (False, '134262612', '236024353', 64870), (False, '115241', '640460429', 64871), (False, '134312331', '549576124', 64872), (False, '0', '1', 64873), (False, '2', '109808', 64874), (False, '9', '18', 64875), (True, '0', '0', 64876), (False, '2', '3', 64877), (False, '1', '44', 64878), (False, '407922163', '419093575', 64879), (False, '0', '11', 64880), (True, '2000000000', '2000000000', 64881), (True, '1', '1', 64882), (False, '0', '1', 64883), (True, '1', '1', 64884), (False, '0', '1', 64885), (True, '1', '1', 64886), (False, '0', '1', 64887), (True, '1', '1', 64888), (True, '80', '80', 64889), (False, '954325807', '1612427789', 64890), (False, '0', '8', 64891), (True, '0', '0', 64892), (True, '8', '8', 64893), (False, '0', '89', 64894), (True, '900', '900', 64895), (False, '0', '1', 64896), (False, '746624740', '1400165835', 64897), (False, '98483274', '534761547', 64898), (False, '93554411', '669371458', 64899), (False, '38599979', '853334080', 64900), (False, '433970138', '518183935', 64901), (False, '9', '40', 64902), (False, '93042119', '1103096102', 64903), (False, '9', '18', 64904), (False, '741764359', '1115418699', 64905), (False, '0', '2000', 64906), (False, '1', '2', 64907), (False, '229000410', '975623731', 64908), (False, '0', '10', 64909)]",False,Wrong Answer,0.8265168183793802,0.9805825242718448,False,0.8266666666666667,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	(c, d) = map(int, args[1].split())
	print(min(abs((a - c)), abs((d - b))))
"
249478,29081209,"a, b = map(int, input().split())
c, d = map(int, input().split())

print(max(abs(a-c), abs(d-b)))",690,4516,77,7/31/17 23:49,7,208,1,8,"[(True, '5', '5', 64835), (True, '3', '3', 64836), (True, '6', '6', 64837), (True, '6', '6', 64838), (True, '101', '101', 64839), (True, '99', '99', 64840), (True, '2000000000', '2000000000', 64841), (True, '1999999999', '1999999999', 64842), (True, '2', '2', 64843), (True, '90', '90', 64844), (True, '5', '5', 64845), (True, '5', '5', 64846), (True, '10', '10', 64847), (True, '4', '4', 64848), (True, '1649942490', '1649942490', 64849), (True, '929691728', '929691728', 64850), (True, '4', '4', 64851), (True, '810081197', '810081197', 64852), (True, '8', '8', 64853), (True, '4', '4', 64854), (True, '3', '3', 64855), (True, '200000123', '200000123', 64856), (True, '1', '1', 64857), (True, '15', '15', 64858), (True, '5', '5', 64859), (True, '1', '1', 64860), (True, '527766146', '527766146', 64861), (True, '4', '4', 64862), (True, '3', '3', 64863), (True, '4546', '4546', 64864), (True, '2', '2', 64865), (True, '3', '3', 64866), (True, '2000000000', '2000000000', 64867), (True, '2000000000', '2000000000', 64868), (True, '1120229998', '1120229998', 64869), (True, '236024353', '236024353', 64870), (True, '640460429', '640460429', 64871), (True, '549576124', '549576124', 64872), (True, '1', '1', 64873), (True, '109808', '109808', 64874), (True, '18', '18', 64875), (True, '0', '0', 64876), (True, '3', '3', 64877), (True, '44', '44', 64878), (True, '419093575', '419093575', 64879), (True, '11', '11', 64880), (True, '2000000000', '2000000000', 64881), (True, '1', '1', 64882), (True, '1', '1', 64883), (True, '1', '1', 64884), (True, '1', '1', 64885), (True, '1', '1', 64886), (True, '1', '1', 64887), (True, '1', '1', 64888), (True, '80', '80', 64889), (True, '1612427789', '1612427789', 64890), (True, '8', '8', 64891), (True, '0', '0', 64892), (True, '8', '8', 64893), (True, '89', '89', 64894), (True, '900', '900', 64895), (True, '1', '1', 64896), (True, '1400165835', '1400165835', 64897), (True, '534761547', '534761547', 64898), (True, '669371458', '669371458', 64899), (True, '853334080', '853334080', 64900), (True, '518183935', '518183935', 64901), (True, '40', '40', 64902), (True, '1103096102', '1103096102', 64903), (True, '18', '18', 64904), (True, '1115418699', '1115418699', 64905), (True, '2000', '2000', 64906), (True, '2', '2', 64907), (True, '975623731', '975623731', 64908), (True, '10', '10', 64909)]",True,Accecpted,0.8265168183793802,0.9805825242718448,False,0.0,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	(c, d) = map(int, args[1].split())
	print(max(abs((a - c)), abs((d - b))))
"
3259451,28125120,"n=int(input())
s='aabbc'
L=n%5
red=s[0:L]
time=n//5
ans=''
for _ in range(time):
    ans+=s
ans+=red
print(ans)",51969,4480,61,6/28/17 21:14,19,2818,2,8,"[(True, 'aa', 'aa', 238078), (True, 'aab', 'aab', 238079), (False, 'aabbcaabbcaabbcaabbcaabbcaabbcaabbcaab', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaa', 238080), (False, 'aabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaa', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab', 238081), (False, 'aabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabb', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab', 238082), (False, 'aabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaa', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab', 238083), (False, 'aabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaa', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba', 238084), (False, 'aabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabb', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba', 238085), (False, 'aabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaab', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaa', 238086), (False, 'aabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabb', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba', 238087), (False, 'aabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaabbcaa', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba', 238088), (True, 'a', 'a', 238089), (False, 'aabbca', 'aabbaa', 238118), (True, 'aabb', 'aabb', 238119)]",False,Wrong Answer,0.591460168684858,0.980544747081712,False,0.7142857142857143,False,"def func(*args):
	
	n = int(args[0])
	s = 'aabbc'
	L = (n % 5)
	red = s[0:L]
	time = (n // 5)
	ans = ''
	for _ in range(time):
	    ans += s
	ans += red
	print(ans)
"
3259452,28125135,"n=int(input())
s='aabb'
L=n%4
red=s[0:L]
time=n//4
ans=''
for _ in range(time):
    ans+=s
ans+=red
print(ans)",51969,5692,77,6/28/17 21:16,19,2818,1,8,"[(True, 'aa', 'aa', 238078), (True, 'aab', 'aab', 238079), (True, 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaa', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaa', 238080), (True, 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab', 238081), (True, 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab', 238082), (True, 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab', 238083), (True, 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba', 238084), (True, 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba', 238085), (True, 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaa', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaa', 238086), (True, 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba', 238087), (True, 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba', 'aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba', 238088), (True, 'a', 'a', 238089), (True, 'aabbaa', 'aabbaa', 238118), (True, 'aabb', 'aabb', 238119)]",True,Accecpted,0.591460168684858,0.980544747081712,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	s = 'aabb'
	L = (n % 4)
	red = s[0:L]
	time = (n // 4)
	ans = ''
	for _ in range(time):
	    ans += s
	ans += red
	print(ans)
"
1953824,11998618,"n,m=map(int,input().split());print((pow(3,n)-1)%m)",5154,2756,2000,7/10/15 16:58,1,1746,3,8,"[(True, '2', '2', 173763), (True, '2', '2', 173764), (True, '8', '8', 173765), (True, '80', '80', 173766), (True, '17', '17', 173767)]",True,Time Limit,0.0,0.9803921568627452,False,0.0,False,"def func(*args):
	
	(n, m) = map(int, args[0].split())
	print(((pow(3, n) - 1) % m))
"
1953825,11998624,"n,m=map(int,input().split());print((pow(3,n,m)-1)%m)",5154,4,124,7/10/15 16:58,1,1746,1,8,"[(True, '2', '2', 173763), (True, '2', '2', 173764), (True, '8', '8', 173765), (True, '80', '80', 173766), (True, '17', '17', 173767), (True, '2619146', '2619146', 173768), (True, '18', '18', 173769), (True, '0', '0', 173770), (True, '63', '63', 173771), (True, '44', '44', 173772), (True, '2', '2', 173773), (True, '3', '3', 173774), (True, '3', '3', 173775), (True, '2', '2', 173776), (True, '26', '26', 173777), (True, '8', '8', 173778), (True, '32', '32', 173779), (True, '60', '60', 173780), (True, '3', '3', 173781), (True, '26', '26', 173782), (True, '2', '2', 173783), (True, '10', '10', 173784), (True, '26', '26', 173785), (True, '2', '2', 173786), (True, '74', '74', 173787), (True, '2', '2', 173788), (True, '40746267', '40746267', 173789), (True, '40442298', '40442298', 173790), (True, '599793690', '599793690', 173791), (True, '182386349', '182386349', 173792), (True, '237749529', '237749529', 173793), (True, '641995841', '641995841', 173794), (True, '50540996', '50540996', 173795), (True, '239869294', '239869294', 173796), (True, '171150618', '171150618', 173797), (True, '2105846', '2105846', 173798), (True, '290288763', '290288763', 173799), (True, '448954191', '448954191', 173800), (True, '105935725', '105935725', 173801), (True, '193558859', '193558859', 173802), (True, '606909752', '606909752', 173803), (True, '210299666', '210299666', 173804), (True, '127493116', '127493116', 173805), (True, '134606022', '134606022', 173806), (True, '2923848', '2923848', 173807), (True, '28044795', '28044795', 173808), (True, '6560', '6560', 173809), (True, '8', '8', 173810), (True, '728', '728', 173811), (True, '6560', '6560', 173812), (True, '26', '26', 173813), (True, '19682', '19682', 173814), (True, '2', '2', 173815), (True, '19682', '19682', 173816), (True, '8', '8', 173817), (True, '6560', '6560', 173818), (True, '59048', '59048', 173819), (True, '6560', '6560', 173820), (True, '728', '728', 173821), (True, '8', '8', 173822), (True, '728', '728', 173823), (True, '2', '2', 173824), (True, '6560', '6560', 173825), (True, '59048', '59048', 173826), (True, '2', '2', 173827), (True, '8', '8', 173828), (True, '0', '0', 173829), (True, '8', '8', 173830), (True, '26', '26', 173831), (True, '2', '2', 173832), (True, '2', '2', 173833), (True, '8', '8', 173834), (True, '2', '2', 173835), (True, '80', '80', 173836), (True, '0', '0', 173837), (True, '26', '26', 173838), (True, '0', '0', 173839), (True, '2', '2', 173840)]",True,Accecpted,0.0,0.9803921568627452,False,0.0,False,"def func(*args):
	
	(n, m) = map(int, args[0].split())
	print(((pow(3, n, m) - 1) % m))
"
1107177,12545171,"n = int(input()) - 10
if n >= 1 and n <= 11:
    if n == 10:
        print(""15"")
    else:
        print(""4"")
else:
    print(""0"")",12270,8,124,8/15/15 12:32,8,1027,1,8,"[(True, '4', '4', 129046), (True, '15', '15', 129047), (True, '0', '0', 129048), (True, '4', '4', 129049), (True, '4', '4', 129050), (True, '4', '4', 129051), (True, '0', '0', 129052), (True, '0', '0', 129053), (True, '0', '0', 129054), (True, '0', '0', 129055), (True, '0', '0', 129056), (True, '0', '0', 129057), (True, '0', '0', 129058), (True, '0', '0', 129059), (True, '0', '0', 129060), (True, '0', '0', 129061), (True, '0', '0', 129062), (True, '4', '4', 129063), (True, '4', '4', 129064), (True, '4', '4', 129065), (True, '4', '4', 129066), (True, '4', '4', 129067), (True, '4', '4', 129068), (True, '0', '0', 129069), (True, '0', '0', 129070)]",True,Accecpted,0.8557423956196076,0.9803921568627452,False,0.0,False,"def func(*args):
	
	n = (int(args[0]) - 10)
	if ((n >= 1) and (n <= 11)):
	    if (n == 10):
	        print('15')
	    else:
	        print('4')
	else:
	    print('0')
"
550892,24563749,"n,a,b,c,d=input().split()
n,a,b,c,d=int(n),int(a),int(b),int(c),int(d)

condl=max(0, d-a, b+d-a-c, b-c)
condh=min(n, n+d-a, n+b+d-a-c, n+b-c)
print(max(0,(condh-condl)*n))",37813,4536,62,2/10/17 9:35,11,514,1,8,"[(True, '2', '2', 88312), (True, '6', '6', 88313), (True, '1', '1', 88314), (True, '774000', '774000', 88315), (True, '1296306000', '1296306000', 88316), (True, '10000000000', '10000000000', 88317), (True, '0', '0', 88318), (True, '70', '70', 88319), (True, '1700', '1700', 88320), (True, '150000', '150000', 88321), (True, '4750000', '4750000', 88322), (True, '1696900000', '1696900000', 88323), (True, '6866200000', '6866200000', 88324), (True, '5095500000', '5095500000', 88325), (True, '4600600000', '4600600000', 88326), (True, '1291800000', '1291800000', 88327), (True, '5478900000', '5478900000', 88328), (True, '3012500000', '3012500000', 88329), (True, '1806300000', '1806300000', 88330), (True, '7422500000', '7422500000', 88331), (True, '4015900000', '4015900000', 88332), (True, '2637100000', '2637100000', 88333), (True, '1470700000', '1470700000', 88334), (True, '5173900000', '5173900000', 88335), (True, '0', '0', 88336), (True, '6848000000', '6848000000', 88337), (True, '10000000000', '10000000000', 88338), (True, '100000', '100000', 88339), (True, '100000', '100000', 88340), (True, '0', '0', 88341), (True, '100000', '100000', 88342), (True, '0', '0', 88343), (True, '10000000000', '10000000000', 88344), (True, '100000', '100000', 88345), (True, '100000', '100000', 88346), (True, '10000000000', '10000000000', 88347), (True, '0', '0', 88348), (True, '100000', '100000', 88349), (True, '0', '0', 88350), (True, '100000', '100000', 88351), (True, '100000', '100000', 88352), (True, '10000000000', '10000000000', 88353), (True, '0', '0', 88354), (True, '0', '0', 88355), (True, '0', '0', 88356), (True, '0', '0', 88357), (True, '0', '0', 88358), (True, '0', '0', 88359), (True, '0', '0', 88360), (True, '0', '0', 88361), (True, '0', '0', 88362), (True, '0', '0', 88363), (True, '0', '0', 88364), (True, '0', '0', 88365), (True, '0', '0', 88366), (True, '2829', '2829', 88367), (True, '0', '0', 88368), (True, '0', '0', 88369)]",True,Accecpted,0.8931539818068694,0.9802816901408452,False,0.0,False,"def func(*args):
	
	(n, a, b, c, d) = args[0].split()
	(n, a, b, c, d) = (int(n), int(a), int(b), int(c), int(d))
	condl = max(0, (d - a), (((b + d) - a) - c), (b - c))
	condh = min(n, ((n + d) - a), ((((n + b) + d) - a) - c), ((n + b) - c))
	print(max(0, ((condh - condl) * n)))
"
550891,24563730,"n,a,b,c,d=input().split()
n,a,b,c,d=int(n),int(a),int(b),int(c),int(d)

condl=max(0, d-a, b+d-a-c, b-c)
condh=min(n, n+d-a, n+b+d-a-c, n+b-c)
print((condh-condl)*n)",37813,4508,62,2/10/17 9:34,11,514,2,8,"[(True, '2', '2', 88312), (True, '6', '6', 88313), (True, '1', '1', 88314), (True, '774000', '774000', 88315), (True, '1296306000', '1296306000', 88316), (True, '10000000000', '10000000000', 88317), (True, '0', '0', 88318), (True, '70', '70', 88319), (True, '1700', '1700', 88320), (True, '150000', '150000', 88321), (True, '4750000', '4750000', 88322), (True, '1696900000', '1696900000', 88323), (True, '6866200000', '6866200000', 88324), (True, '5095500000', '5095500000', 88325), (True, '4600600000', '4600600000', 88326), (True, '1291800000', '1291800000', 88327), (True, '5478900000', '5478900000', 88328), (True, '3012500000', '3012500000', 88329), (True, '1806300000', '1806300000', 88330), (True, '7422500000', '7422500000', 88331), (True, '4015900000', '4015900000', 88332), (True, '2637100000', '2637100000', 88333), (True, '1470700000', '1470700000', 88334), (True, '5173900000', '5173900000', 88335), (False, '-1177700000', '0', 88336), (True, '6848000000', '6848000000', 88337), (True, '10000000000', '10000000000', 88338), (True, '100000', '100000', 88339), (True, '100000', '100000', 88340), (False, '-9999800000', '0', 88341), (True, '100000', '100000', 88342), (False, '-9999800000', '0', 88343), (True, '10000000000', '10000000000', 88344), (True, '100000', '100000', 88345), (True, '100000', '100000', 88346), (True, '10000000000', '10000000000', 88347), (False, '-9999800000', '0', 88348), (True, '100000', '100000', 88349), (False, '-9999800000', '0', 88350), (True, '100000', '100000', 88351), (True, '100000', '100000', 88352), (True, '10000000000', '10000000000', 88353), (False, '-3', '0', 88354), (False, '-20', '0', 88355), (False, '-15', '0', 88356), (False, '-8', '0', 88357), (False, '-80', '0', 88358), (False, '-15', '0', 88359), (False, '-9800', '0', 88360), (False, '-3', '0', 88361), (False, '-70', '0', 88362), (False, '-35', '0', 88363), (True, '0', '0', 88364), (False, '-35', '0', 88365), (False, '-9800', '0', 88366), (True, '2829', '2829', 88367), (False, '-80', '0', 88368), (False, '-265793', '0', 88369)]",False,Wrong Answer,0.8931539818068694,0.9802816901408452,False,0.3275862068965517,False,"def func(*args):
	
	(n, a, b, c, d) = args[0].split()
	(n, a, b, c, d) = (int(n), int(a), int(b), int(c), int(d))
	condl = max(0, (d - a), (((b + d) - a) - c), (b - c))
	condh = min(n, ((n + d) - a), ((((n + b) + d) - a) - c), ((n + b) - c))
	print(((condh - condl) * n))
"
1244883,26401818,"n=int(input())
k=1
mensaje=""NO""
while k<n:
    r=n%k
    c=n//k
    k=k+1
    if r==0:
        c=str(c)
        i=0
        x=0
        while i<len(c):
            if c[i]==""4"" or c[i]==""7"":
                i=i+1
                x=x+1
                if x==len(c):
                    mensaje=""YES""
                    k=n
            else:
                i=i+1
print(mensaje)",62042,5432,124,4/16/17 5:37,21,1132,1,8,"[(True, 'YES', 'YES', 137749), (True, 'YES', 'YES', 137750), (True, 'NO', 'NO', 137751), (True, 'YES', 'YES', 137752), (True, 'YES', 'YES', 137753), (True, 'NO', 'NO', 137754), (True, 'YES', 'YES', 137755), (True, 'YES', 'YES', 137756), (True, 'YES', 'YES', 137757), (True, 'NO', 'NO', 137758), (True, 'NO', 'NO', 137759), (True, 'YES', 'YES', 137760), (True, 'YES', 'YES', 137761), (True, 'YES', 'YES', 137762), (True, 'YES', 'YES', 137763), (True, 'YES', 'YES', 137764), (True, 'NO', 'NO', 137765), (True, 'NO', 'NO', 137766), (True, 'NO', 'NO', 137767), (True, 'NO', 'NO', 137768), (True, 'YES', 'YES', 137769), (True, 'YES', 'YES', 137770), (True, 'YES', 'YES', 137771), (True, 'YES', 'YES', 137772), (True, 'YES', 'YES', 137773), (True, 'YES', 'YES', 137774), (True, 'NO', 'NO', 137775), (True, 'YES', 'YES', 137776), (True, 'YES', 'YES', 137777), (True, 'NO', 'NO', 137778), (True, 'NO', 'NO', 137779), (True, 'YES', 'YES', 137780), (True, 'YES', 'YES', 137781), (True, 'YES', 'YES', 137782), (True, 'YES', 'YES', 137783), (True, 'YES', 'YES', 137784)]",True,Accecpted,0.9271474438253492,0.980246913580247,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	k = 1
	mensaje = 'NO'
	while (k < n):
	    r = (n % k)
	    c = (n // k)
	    k = (k + 1)
	    if (r == 0):
	        c = str(c)
	        i = 0
	        x = 0
	        while (i < len(c)):
	            if ((c[i] == '4') or (c[i] == '7')):
	                i = (i + 1)
	                x = (x + 1)
	                if (x == len(c)):
	                    mensaje = 'YES'
	                    k = n
	            else:
	                i = (i + 1)
	print(mensaje)
"
2898272,19895802,"from sys import stdin
from math import log2

n = int(stdin.readline()) - 1

batch_number = int(log2((n+5)/5))
batch_first = (5 * 2 ** batch_number) - 5
current_in_batch = n - batch_first
person = int(current_in_batch / 2 ** batch_number)
# print(batch_number, current_in_batch, person)
print(['Sheldon', 'Leonard', 'Penny', 'Rajesh', 'Howard'][person])",23424,4492,62,8/15/16 23:44,11,2481,1,8,"[(True, 'Sheldon', 'Sheldon', 216610), (True, 'Sheldon', 'Sheldon', 216611), (True, 'Penny', 'Penny', 216612), (True, 'Sheldon', 'Sheldon', 216613), (True, 'Leonard', 'Leonard', 216614), (True, 'Penny', 'Penny', 216615), (True, 'Rajesh', 'Rajesh', 216616), (True, 'Howard', 'Howard', 216617), (True, 'Penny', 'Penny', 216618), (True, 'Rajesh', 'Rajesh', 216619), (True, 'Howard', 'Howard', 216620), (True, 'Howard', 'Howard', 216621), (True, 'Penny', 'Penny', 216622), (True, 'Rajesh', 'Rajesh', 216623), (True, 'Leonard', 'Leonard', 216624), (True, 'Penny', 'Penny', 216625), (True, 'Howard', 'Howard', 216626), (True, 'Rajesh', 'Rajesh', 216627), (True, 'Rajesh', 'Rajesh', 216628), (True, 'Leonard', 'Leonard', 216629), (True, 'Penny', 'Penny', 216630), (True, 'Howard', 'Howard', 216631), (True, 'Howard', 'Howard', 216632), (True, 'Leonard', 'Leonard', 216633), (True, 'Rajesh', 'Rajesh', 216634), (True, 'Sheldon', 'Sheldon', 216635), (True, 'Rajesh', 'Rajesh', 216636), (True, 'Leonard', 'Leonard', 216637), (True, 'Howard', 'Howard', 216638), (True, 'Penny', 'Penny', 216639), (True, 'Penny', 'Penny', 216640), (True, 'Rajesh', 'Rajesh', 216641), (True, 'Sheldon', 'Sheldon', 216642), (True, 'Penny', 'Penny', 216643), (True, 'Penny', 'Penny', 216644), (True, 'Leonard', 'Leonard', 216645), (True, 'Howard', 'Howard', 216646), (True, 'Penny', 'Penny', 216647), (True, 'Penny', 'Penny', 216648), (True, 'Penny', 'Penny', 216649), (True, 'Howard', 'Howard', 216650)]",True,Accecpted,0.8982566328615008,0.980225988700565,False,0.0,False,"def func(*args):
	
	from sys import stdin
	from math import log2
	n = (int(stdin.readline()) - 1)
	batch_number = int(log2(((n + 5) / 5)))
	batch_first = ((5 * (2 ** batch_number)) - 5)
	current_in_batch = (n - batch_first)
	person = int((current_in_batch / (2 ** batch_number)))
	print(['Sheldon', 'Leonard', 'Penny', 'Rajesh', 'Howard'][person])
"
2898271,19895768,"from sys import stdin
from math import log2

n = int(stdin.readline().strip())

batch_number = int(log2((n+5)/5))
batch_first = (5 * 2 ** batch_number) - 5
current_in_batch = n - batch_first
person = int(current_in_batch / 2 ** batch_number)
# print(batch_number, current_in_batch, person)
print(['Sheldon', 'Leonard', 'Penny', 'Rajesh', 'Howard'][person])",23424,4452,31,8/15/16 23:41,11,2481,2,8,"[(False, 'Leonard', 'Sheldon', 216610), (True, 'Sheldon', 'Sheldon', 216611), (True, 'Penny', 'Penny', 216612), (False, 'Leonard', 'Sheldon', 216613), (False, 'Penny', 'Leonard', 216614), (False, 'Rajesh', 'Penny', 216615), (False, 'Howard', 'Rajesh', 216616), (False, 'Sheldon', 'Howard', 216617), (True, 'Penny', 'Penny', 216618), (True, 'Rajesh', 'Rajesh', 216619), (True, 'Howard', 'Howard', 216620), (True, 'Howard', 'Howard', 216621), (True, 'Penny', 'Penny', 216622), (True, 'Rajesh', 'Rajesh', 216623), (True, 'Leonard', 'Leonard', 216624), (True, 'Penny', 'Penny', 216625), (True, 'Howard', 'Howard', 216626), (True, 'Rajesh', 'Rajesh', 216627), (True, 'Rajesh', 'Rajesh', 216628), (True, 'Leonard', 'Leonard', 216629), (True, 'Penny', 'Penny', 216630), (False, 'Sheldon', 'Howard', 216631), (True, 'Howard', 'Howard', 216632), (True, 'Leonard', 'Leonard', 216633), (True, 'Rajesh', 'Rajesh', 216634), (True, 'Sheldon', 'Sheldon', 216635), (True, 'Rajesh', 'Rajesh', 216636), (True, 'Leonard', 'Leonard', 216637), (True, 'Howard', 'Howard', 216638), (True, 'Penny', 'Penny', 216639), (True, 'Penny', 'Penny', 216640), (True, 'Rajesh', 'Rajesh', 216641), (True, 'Sheldon', 'Sheldon', 216642), (True, 'Penny', 'Penny', 216643), (True, 'Penny', 'Penny', 216644), (True, 'Leonard', 'Leonard', 216645), (True, 'Howard', 'Howard', 216646), (True, 'Penny', 'Penny', 216647), (True, 'Penny', 'Penny', 216648), (True, 'Penny', 'Penny', 216649), (False, 'Sheldon', 'Howard', 216650)]",False,Wrong Answer,0.8982566328615008,0.980225988700565,False,0.1951219512195122,False,"def func(*args):
	
	from sys import stdin
	from math import log2
	n = int(stdin.readline().strip())
	batch_number = int(log2(((n + 5) / 5)))
	batch_first = ((5 * (2 ** batch_number)) - 5)
	current_in_batch = (n - batch_first)
	person = int((current_in_batch / (2 ** batch_number)))
	print(['Sheldon', 'Leonard', 'Penny', 'Rajesh', 'Howard'][person])
"
717618,22403495,"x = int(input())
str = """"
for i in range(x):
    if i%2==0:
        str += ""I hate""
    else:
        str += ""I love""
    if i==x-1:
        str += "" it""
    else:
        str += "" that ""


print(str)",7303,12,77,11/22/16 15:57,27,668,1,8,"[(True, 'I hate it', 'I hate it', 100802), (True, 'I hate that I love it', 'I hate that I love it', 100803), (True, 'I hate that I love that I hate it', 'I hate that I love that I hate it', 100804), (True, 'I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love it', 100805), (True, 'I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate it', 100806), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100807), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100808), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100809), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100819), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100820)]",True,Accecpted,0.7846263092599286,0.9802197802197802,False,0.0,False,"def func(*args):
	
	x = int(args[0])
	str = ''
	for i in range(x):
	    if ((i % 2) == 0):
	        str += 'I hate'
	    else:
	        str += 'I love'
	    if (i == (x - 1)):
	        str += ' it'
	    else:
	        str += ' that '
	print(str)
"
717617,22403405,"x = int(input())
str = """"
for i in range(x,0,-1):
    if i%2==1:
        str += ""I hate""
    else:
        str += ""I love""
    if i==1:
        str += "" it""
    else:
        str += "" that ""


print(str)",7303,0,46,11/22/16 15:54,27,668,2,8,"[(True, 'I hate it', 'I hate it', 100802), (False, 'I love that I hate it', 'I hate that I love it', 100803), (True, 'I hate that I love that I hate it', 'I hate that I love that I hate it', 100804), (False, 'I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love it', 100805), (True, 'I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate it', 100806), (False, 'I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100807), (False, 'I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100808), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100809), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100819), (False, 'I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100820)]",False,Wrong Answer,0.7846263092599286,0.9802197802197802,False,0.5,False,"def func(*args):
	
	x = int(args[0])
	str = ''
	for i in range(x, 0, (- 1)):
	    if ((i % 2) == 1):
	        str += 'I hate'
	    else:
	        str += 'I love'
	    if (i == 1):
	        str += ' it'
	    else:
	        str += ' that '
	print(str)
"
3024605,25240744,"k,a,b=map(int,input().split())
if (a>=k and b>=k) or (a%k==0 and a//k!=0)  or (b%k==0 and b//k!=0):
    exit(print(a//k + b//k))
exit(print('-1'))",3730,4524,61,3/5/17 13:25,7,2576,1,8,"[(True, '1', '1', 37550), (True, '-1', '-1', 37551), (True, '14', '14', 37552), (True, '2', '2', 37553), (True, '2000000000', '2000000000', 37554), (True, '3', '3', 37555), (True, '2', '2', 37556), (True, '1', '1', 37557), (True, '-1', '-1', 37558), (True, '-1', '-1', 37559), (True, '1', '1', 37560), (True, '2', '2', 37561), (True, '1000000000', '1000000000', 37562), (True, '9', '9', 37563), (True, '-1', '-1', 37564), (True, '-1', '-1', 37565), (True, '-1', '-1', 37566), (True, '-1', '-1', 37567), (True, '-1', '-1', 37568), (True, '21', '21', 37569), (True, '1', '1', 37570), (True, '1', '1', 37571), (True, '-1', '-1', 37572), (True, '-1', '-1', 37573), (True, '-1', '-1', 37574), (True, '-1', '-1', 37575), (True, '2', '2', 37576), (True, '-1', '-1', 37577), (True, '-1', '-1', 37578), (True, '-1', '-1', 37579), (True, '-1', '-1', 37580), (True, '-1', '-1', 37581), (True, '-1', '-1', 37582), (True, '4', '4', 37583), (True, '-1', '-1', 37584), (True, '-1', '-1', 37585), (True, '-1', '-1', 37586), (True, '-1', '-1', 37587), (True, '-1', '-1', 37588), (True, '-1', '-1', 37589), (True, '-1', '-1', 37590), (True, '-1', '-1', 37591), (True, '-1', '-1', 37592), (True, '-1', '-1', 37593), (True, '-1', '-1', 37594), (True, '1000000000', '1000000000', 37595), (True, '-1', '-1', 37596), (True, '-1', '-1', 37597), (True, '-1', '-1', 37598), (True, '-1', '-1', 37599), (True, '-1', '-1', 37600), (True, '-1', '-1', 37601), (True, '2', '2', 37602), (True, '-1', '-1', 37603), (True, '-1', '-1', 37604), (True, '1', '1', 37605), (True, '2', '2', 37606), (True, '2', '2', 37607), (True, '2', '2', 37608)]",True,Accecpted,0.6422727797927412,0.9801324503311258,False,0.0,False,"def func(*args):
	
	(k, a, b) = map(int, args[0].split())
	if (((a >= k) and (b >= k)) or (((a % k) == 0) and ((a // k) != 0)) or (((b % k) == 0) and ((b // k) != 0))):
	    exit(print(((a // k) + (b // k))))
	exit(print('-1'))
"
235699,28948376,"x=int(input())
if x%5==0 :
    Print(x//5)
else:
    print((x//5)+1)",23300,4480,30,7/28/17 11:50,9,194,5,8,"[(False, '', '1', 63841), (True, '3', '3', 63842), (True, '200000', '200000', 63843), (True, '9', '9', 63844), (False, '', '200000', 63845), (True, '1', '1', 63846), (True, '1', '1', 63847), (True, '1', '1', 63848), (True, '1', '1', 63849), (True, '106841', '106841', 63850), (True, '93914', '93914', 63851), (True, '100576', '100576', 63852), (True, '188443', '188443', 63853), (True, '20', '20', 63854), (True, '11', '11', 63855), (True, '18', '18', 63856), (True, '115', '115', 63857), (True, '144', '144', 63858), (True, '146', '146', 63859), (True, '1781', '1781', 63860), (False, '', '729', 63861), (True, '886', '886', 63862), (True, '9315', '9315', 63863), (False, '', '17276', 63864), (False, '', '18838', 63865), (False, '', '199998', 63866), (True, '199999', '199999', 63867), (True, '199999', '199999', 63868), (True, '199999', '199999', 63869), (True, '199999', '199999', 63870), (False, '', '199999', 63871), (True, '200000', '200000', 63872), (True, '200000', '200000', 63873), (True, '200000', '200000', 63874)]",False,Runtime Error,9.85444998995587e-155,0.9801324503311258,False,0.2058823529411764,False,"def func(*args):
	
	x = int(args[0])
	if ((x % 5) == 0):
	    Print((x // 5))
	else:
	    print(((x // 5) + 1))
"
235702,28949289,"x=int(input())
if x%5==0:
    print(x//5)
else:
    print((x//5)+1)",23300,4520,62,7/28/17 12:25,9,194,1,8,"[(True, '1', '1', 63841), (True, '3', '3', 63842), (True, '200000', '200000', 63843), (True, '9', '9', 63844), (True, '200000', '200000', 63845), (True, '1', '1', 63846), (True, '1', '1', 63847), (True, '1', '1', 63848), (True, '1', '1', 63849), (True, '106841', '106841', 63850), (True, '93914', '93914', 63851), (True, '100576', '100576', 63852), (True, '188443', '188443', 63853), (True, '20', '20', 63854), (True, '11', '11', 63855), (True, '18', '18', 63856), (True, '115', '115', 63857), (True, '144', '144', 63858), (True, '146', '146', 63859), (True, '1781', '1781', 63860), (True, '729', '729', 63861), (True, '886', '886', 63862), (True, '9315', '9315', 63863), (True, '17276', '17276', 63864), (True, '18838', '18838', 63865), (True, '199998', '199998', 63866), (True, '199999', '199999', 63867), (True, '199999', '199999', 63868), (True, '199999', '199999', 63869), (True, '199999', '199999', 63870), (True, '199999', '199999', 63871), (True, '200000', '200000', 63872), (True, '200000', '200000', 63873), (True, '200000', '200000', 63874)]",True,Accecpted,9.85444998995587e-155,0.9801324503311258,False,0.0,False,"def func(*args):
	
	x = int(args[0])
	if ((x % 5) == 0):
	    print((x // 5))
	else:
	    print(((x // 5) + 1))
"
3024603,25240536,"k,a,b=map(int,input().split())
if (a>=k and b>=k) or (a%k==0 and a%k!=0)  or (b%k==0 and b%k!=0):
    exit(print(a//k + b//k))
exit(print('-1'))",3730,4460,46,3/5/17 13:19,7,2576,2,8,"[(False, '-1', '1', 37550), (True, '-1', '-1', 37551), (True, '14', '14', 37552), (True, '2', '2', 37553), (True, '2000000000', '2000000000', 37554), (True, '3', '3', 37555), (True, '2', '2', 37556), (False, '-1', '1', 37557), (True, '-1', '-1', 37558), (True, '-1', '-1', 37559), (False, '-1', '1', 37560), (True, '2', '2', 37561), (False, '-1', '1000000000', 37562), (True, '9', '9', 37563), (True, '-1', '-1', 37564), (True, '-1', '-1', 37565), (True, '-1', '-1', 37566), (True, '-1', '-1', 37567), (True, '-1', '-1', 37568), (True, '21', '21', 37569), (False, '-1', '1', 37570), (False, '-1', '1', 37571), (True, '-1', '-1', 37572), (True, '-1', '-1', 37573), (True, '-1', '-1', 37574), (True, '-1', '-1', 37575), (True, '2', '2', 37576), (True, '-1', '-1', 37577), (True, '-1', '-1', 37578), (True, '-1', '-1', 37579), (True, '-1', '-1', 37580), (True, '-1', '-1', 37581), (True, '-1', '-1', 37582), (True, '4', '4', 37583), (True, '-1', '-1', 37584), (True, '-1', '-1', 37585), (True, '-1', '-1', 37586), (True, '-1', '-1', 37587), (True, '-1', '-1', 37588), (True, '-1', '-1', 37589), (True, '-1', '-1', 37590), (True, '-1', '-1', 37591), (True, '-1', '-1', 37592), (True, '-1', '-1', 37593), (True, '-1', '-1', 37594), (True, '1000000000', '1000000000', 37595), (True, '-1', '-1', 37596), (True, '-1', '-1', 37597), (True, '-1', '-1', 37598), (True, '-1', '-1', 37599), (True, '-1', '-1', 37600), (True, '-1', '-1', 37601), (False, '-1', '2', 37602), (True, '-1', '-1', 37603), (True, '-1', '-1', 37604), (False, '-1', '1', 37605), (True, '2', '2', 37606), (True, '2', '2', 37607), (False, '-1', '2', 37608)]",False,Wrong Answer,0.6422727797927412,0.9801324503311258,False,0.1525423728813559,False,"def func(*args):
	
	(k, a, b) = map(int, args[0].split())
	if (((a >= k) and (b >= k)) or (((a % k) == 0) and ((a % k) != 0)) or (((b % k) == 0) and ((b % k) != 0))):
	    exit(print(((a // k) + (b // k))))
	exit(print('-1'))
"
3053170,25566480,"n = int(input())
k = input().split("" "")
l = []

for _ in k:
	l.append(int(_))

l = sorted(l)

print(l[int(len(l) / 2)])",4343,4524,62,3/17/17 10:47,10,2600,1,8,"[(True, '2015', '2015', 37867), (True, '2050', '2050', 37868), (True, '2010', '2010', 37869), (True, '2011', '2011', 37870), (True, '2011', '2011', 37871), (True, '2048', '2048', 37872), (True, '2042', '2042', 37873), (True, '2014', '2014', 37874), (True, '2045', '2045', 37875), (True, '2046', '2046', 37876), (True, '2099', '2099', 37877), (True, '2100', '2100', 37878), (True, '2011', '2011', 37879), (True, '2011', '2011', 37880), (True, '2011', '2011', 37881), (True, '2011', '2011', 37882), (True, '2011', '2011', 37883), (True, '2048', '2048', 37884), (True, '2048', '2048', 37885), (True, '2048', '2048', 37886), (True, '2048', '2048', 37887), (True, '2048', '2048', 37888), (True, '2012', '2012', 37889), (True, '2013', '2013', 37890), (True, '2022', '2022', 37891), (True, '2079', '2079', 37892), (True, '2097', '2097', 37893), (True, '2098', '2098', 37894), (True, '2012', '2012', 37895), (True, '2013', '2013', 37896), (True, '2022', '2022', 37897), (True, '2079', '2079', 37898), (True, '2097', '2097', 37899), (True, '2098', '2098', 37900), (True, '2012', '2012', 37901), (True, '2013', '2013', 37902), (True, '2022', '2022', 37903), (True, '2079', '2079', 37904), (True, '2097', '2097', 37905), (True, '2098', '2098', 37906), (True, '2034', '2034', 37907), (True, '2031', '2031', 37908), (True, '2094', '2094', 37909), (True, '2013', '2013', 37910), (True, '2058', '2058', 37911)]",True,Accecpted,0.8571061116877262,0.9800796812749004,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	k = args[1].split(' ')
	l = []
	for _ in k:
	    l.append(int(_))
	l = sorted(l)
	print(l[int((len(l) / 2))])
"
2294718,28618021,"n = input()
for i in range(int(n) + 1, 9001):
    tmp = str(i)
    if tmp[0] != tmp[1] and tmp[0] != tmp[2] and tmp[0] != tmp[3] and tmp[1] != tmp[2] and tmp[1] != tmp[3] and tmp[2] != tmp[3]:
        print(tmp)
        break",23261,4512,92,7/16/17 22:04,6,2003,2,8,"[(True, '2013', '2013', 190118), (True, '2014', '2014', 190119), (True, '1023', '1023', 190120), (True, '1023', '1023', 190121), (True, '1235', '1235', 190122), (True, '5601', '5601', 190123), (False, '', '9012', 190124), (True, '1203', '1203', 190125), (False, '', '9012', 190126), (True, '4573', '4573', 190127), (True, '6701', '6701', 190128), (True, '2013', '2013', 190129), (True, '3012', '3012', 190130), (True, '7801', '7801', 190131), (True, '8091', '8091', 190132), (True, '1596', '1596', 190133), (True, '6017', '6017', 190134), (True, '8901', '8901', 190135), (True, '3401', '3401', 190136), (True, '5091', '5091', 190137), (True, '2345', '2345', 190138), (True, '2340', '2340', 190139), (True, '1203', '1203', 190140), (False, '', '9012', 190141), (False, '', '9012', 190142), (True, '6870', '6870', 190143), (False, '', '9012', 190144)]",False,Wrong Answer,0.931838481115484,0.9800443458980044,False,0.1851851851851851,False,"def func(*args):
	
	n = args[0]
	for i in range((int(n) + 1), 9001):
	    tmp = str(i)
	    if ((tmp[0] != tmp[1]) and (tmp[0] != tmp[2]) and (tmp[0] != tmp[3]) and (tmp[1] != tmp[2]) and (tmp[1] != tmp[3]) and (tmp[2] != tmp[3])):
	        print(tmp)
	        break
"
2294719,28618047,"n = input()
for i in range(int(n) + 1, 10000):
    tmp = str(i)
    if tmp[0] != tmp[1] and tmp[0] != tmp[2] and tmp[0] != tmp[3] and tmp[1] != tmp[2] and tmp[1] != tmp[3] and tmp[2] != tmp[3]:
        print(tmp)
        break",23261,5412,124,7/16/17 22:06,6,2003,1,8,"[(True, '2013', '2013', 190118), (True, '2014', '2014', 190119), (True, '1023', '1023', 190120), (True, '1023', '1023', 190121), (True, '1235', '1235', 190122), (True, '5601', '5601', 190123), (True, '9012', '9012', 190124), (True, '1203', '1203', 190125), (True, '9012', '9012', 190126), (True, '4573', '4573', 190127), (True, '6701', '6701', 190128), (True, '2013', '2013', 190129), (True, '3012', '3012', 190130), (True, '7801', '7801', 190131), (True, '8091', '8091', 190132), (True, '1596', '1596', 190133), (True, '6017', '6017', 190134), (True, '8901', '8901', 190135), (True, '3401', '3401', 190136), (True, '5091', '5091', 190137), (True, '2345', '2345', 190138), (True, '2340', '2340', 190139), (True, '1203', '1203', 190140), (True, '9012', '9012', 190141), (True, '9012', '9012', 190142), (True, '6870', '6870', 190143), (True, '9012', '9012', 190144)]",True,Accecpted,0.931838481115484,0.9800443458980044,False,0.0,False,"def func(*args):
	
	n = args[0]
	for i in range((int(n) + 1), 10000):
	    tmp = str(i)
	    if ((tmp[0] != tmp[1]) and (tmp[0] != tmp[2]) and (tmp[0] != tmp[3]) and (tmp[1] != tmp[2]) and (tmp[1] != tmp[3]) and (tmp[2] != tmp[3])):
	        print(tmp)
	        break
"
3340033,28819298,"n,k=map(int,input().split())
half=n//2
d=0
c=0
u=0
i=half
while i>=0:
    if i%(k+1)==0:
        d=i//(k+1)
        c=i-d
        u=n-i
        break
    i-=1
print(d,c,u)",38337,4516,1000,7/24/17 11:36,27,2893,3,8,"[(True, '3 6 9', '3 6 9', 244451), (True, '0 0 9', '0 0 9', 244452), (True, '83333333333 416666666665 500000000002', '83333333333 416666666665 500000000002', 244453), (True, '1 499999999999 500000000000', '1 499999999999 500000000000', 244454), (True, '0 0 1', '0 0 1', 244455), (True, '0 0 5', '0 0 5', 244456), (True, '3 18 21', '3 18 21', 244457), (True, '499500499 499500499000 500000000501', '499500499 499500499000 500000000501', 244458), (True, '499999 499998500001 500000999999', '499999 499998500001 500000999999', 244459), (True, '2762066 366285858458 366288689201', '2762066 366285858458 366288689201', 244460), (True, '4760198832 71402982480 76163181314', '4760198832 71402982480 76163181314', 244461), (True, '0 0 2', '0 0 2', 244462)]",True,Time Limit,0.6865065103648591,0.98,False,0.0,False,"def func(*args):
	
	(n, k) = map(int, args[0].split())
	half = (n // 2)
	d = 0
	c = 0
	u = 0
	i = half
	while (i >= 0):
	    if ((i % (k + 1)) == 0):
	        d = (i // (k + 1))
	        c = (i - d)
	        u = (n - i)
	        break
	    i -= 1
	print(d, c, u)
"
1210354,27949498,"[print('.'+letra, end='') for letra in input() if letra.lower() != 'y' and letra.lower() != 'a' and letra.lower() != 'e' and letra.lower() != 'i' and letra.lower() != 'o' and letra.lower() != 'u']",63448,4484,124,6/21/17 19:15,1,1102,2,8,"[(True, '.t.r', '.t.r', 135736), (False, '.C.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (False, '.B.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (True, '.x.n.h.c.g.t.n.q.c.m', '.x.n.h.c.g.t.n.q.c.m', 135750), (True, '.j.f.m.t.b.j.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (False, '.D', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (False, '.B', '.b', 135755), (False, '.B', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (False, '.B', '.b', 135759), (False, '.B', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (False, '.f.m.Z.C.r.K.C.p.H.n.b.B.P.T.F.m.s.H.m.c.p.b.t.P.c.L.C.d.j.F.r.M.q.z.k.K.K.Z.R.Z.N.M.G.V.Q.z.C.k.q.R.j.m.m.K.K.l.L.N.q.C.n.h.G.d.Q.M', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (False, '.V.M.B.P.M.C.m.M.D.C.L.F.L.L.S.J.D.W.Q.R.X.R.D.G.K.M.X.J.X.J.H.X.V.Z.D.R.Z.W.V.W.J.R.K.F.R.R.N.S.W.K.K.D.P.Z.Z.L.F.L.N.S.G.N.V.J.F.B.Q.s.M.D.H.S.B.J.V.D.T.C.S.C.g.Z.W.W.K.v.Z.Z.N', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (False, '.M.C.G.F.Q.Q.J.N.K.X.r.L.X.b.V.j.C.l.S.H.j.S.x.m.l.k.Q.G.T.K.Z.r.R.D.N.D.m.P.m.t.S.g.j.J.j.N.V.V.L.G.H.N.k.C.B.w.N.b.V.C.H.W.v.N.k.L.F.Q.Q.b.F.n.g.V.M.k.J.r.J', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (True, '.w.z.t.c.v.v.v.v.z.v', '.w.z.t.c.v.v.v.v.z.v', 135766), (False, '.j.n.c.k.p.f.L.t.z.w.j.s.g.p.c.r.g.C.f.p.l.j.n.j.w.q.z.g.V.c.f.n.v.h.x.p.l.v.f.l.x.J.z.q.x.n.h.r.w.g.f.J.m.P.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.B.d.d.k.t.d.s.f.P.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (False, '.R.J.W.F.P.Z.H.l.V.L.M.g.F.V.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (False, '.V.B.K.Q.C.F.B.M.Q.H.D.M.G.N.S.G.B.Q.V.J.T.G.Q.C.N.H.H.R.J.M.N.K.G.K.D.P.P.S.Q.R.R.V.Q.T.Z.N.K.B.Z.G.S.X.B.P.B.R.X.P.M.V.F.T.X.C.H.Z.M.S.J.V.B.R.N.F.N.T.H.B.H.G.J.L.M.D.Z.J.S.V.P.Z.Z.B.C.C.Z.N.V.L.M.Q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (False, '.l.T.g.m.g', '.l.t.g.m.g', 135770), (True, '.k.z.d.x.f', '.k.z.d.x.f', 135771), (False, '.F.S.N.R.B.X.L.F.Q.H.Z.X.G.V.M.K.L.Q.D.V.H.W.L.D.S.L.K.G.K.F.M.D.R.Q.W.M.W.S.S.K.P.K.K.Q.B.N.D.Z.R.S.C.B.L.R.S.K.C.K.K.F.F.K.R.D.M.Z.F.Z.G.C.N.S.M.X.N.P.M.Z.V.D.L.K.X.G.N.X.G.Z.Q.C.L.R.T.T.D.X.L.M.X.Q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (False, '.M.R.C.G.P', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (False, '.B', '.b', 135775), (True, '.f.l', '.f.l', 135776), (False, '.x.d.w.d.w.d.D.W.D.d.d.d', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",False,Wrong Answer,0.9648571584702385,0.98,False,0.4285714285714285,False,"def func(*args):
	
	[print(('.' + letra), end='') for letra in args[0] if ((letra.lower() != 'y') and (letra.lower() != 'a') and (letra.lower() != 'e') and (letra.lower() != 'i') and (letra.lower() != 'o') and (letra.lower() != 'u'))]
"
1210355,27949512,"[print('.'+letra.lower(), end='') for letra in input() if letra.lower() != 'y' and letra.lower() != 'a' and letra.lower() != 'e' and letra.lower() != 'i' and letra.lower() != 'o' and letra.lower() != 'u']",63448,4516,124,6/21/17 19:16,1,1102,1,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (True, '.x.n.h.c.g.t.n.q.c.m', '.x.n.h.c.g.t.n.q.c.m', 135750), (True, '.j.f.m.t.b.j.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (True, '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (True, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (True, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (True, '.w.z.t.c.v.v.v.v.z.v', '.w.z.t.c.v.v.v.v.z.v', 135766), (True, '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (True, '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (True, '.l.t.g.m.g', '.l.t.g.m.g', 135770), (True, '.k.z.d.x.f', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (True, '.m.r.c.g.p', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (True, '.b', '.b', 135775), (True, '.f.l', '.f.l', 135776), (True, '.x.d.w.d.w.d.d.w.d.d.d.d', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",True,Accecpted,0.9648571584702385,0.98,False,0.0,False,"def func(*args):
	
	[print(('.' + letra.lower()), end='') for letra in args[0] if ((letra.lower() != 'y') and (letra.lower() != 'a') and (letra.lower() != 'e') and (letra.lower() != 'i') and (letra.lower() != 'o') and (letra.lower() != 'u'))]
"
3340034,28819423,"n,k=map(int,input().split())
half=n//2
d=0
c=0
u=n
i=half
while i>=0:
    if i%(k+1)==0:
        d=i//(k+1)
        c=i-d
        u=n-i
        break
    i-=i%(k+1)
print(d,c,u)",38337,4520,62,7/24/17 11:40,27,2893,1,8,"[(True, '3 6 9', '3 6 9', 244451), (True, '0 0 9', '0 0 9', 244452), (True, '83333333333 416666666665 500000000002', '83333333333 416666666665 500000000002', 244453), (True, '1 499999999999 500000000000', '1 499999999999 500000000000', 244454), (True, '0 0 1', '0 0 1', 244455), (True, '0 0 5', '0 0 5', 244456), (True, '3 18 21', '3 18 21', 244457), (True, '499500499 499500499000 500000000501', '499500499 499500499000 500000000501', 244458), (True, '499999 499998500001 500000999999', '499999 499998500001 500000999999', 244459), (True, '2762066 366285858458 366288689201', '2762066 366285858458 366288689201', 244460), (True, '4760198832 71402982480 76163181314', '4760198832 71402982480 76163181314', 244461), (True, '0 0 2', '0 0 2', 244462), (True, '0 0 1000000000000', '0 0 1000000000000', 244463), (True, '0 0 100000000000', '0 0 100000000000', 244464), (True, '15 486242813505 513757186480', '15 486242813505 513757186480', 244465), (True, '64 497777777728 502222222208', '64 497777777728 502222222208', 244466), (True, '6 466666666662 533333333332', '6 466666666662 533333333332', 244467), (True, '86 49749766072 50250233842', '86 49749766072 50250233842', 244468), (True, '49 490000000000 509999999950', '49 490000000000 509999999950', 244469), (True, '1 2 4', '1 2 4', 244470), (True, '0 0 420506530901', '0 0 420506530901', 244471), (True, '1 321688347872 638687173262', '1 321688347872 638687173262', 244472), (True, '0 0 1000000000000', '0 0 1000000000000', 244473), (True, '3 45760909089 54239090907', '3 45760909089 54239090907', 244474), (True, '3 6 10', '3 6 10', 244475), (True, '0 0 999999999999', '0 0 999999999999', 244476), (True, '84 496909331184 503090668732', '84 496909331184 503090668732', 244477), (True, '499 499000002994 500999996507', '499 499000002994 500999996507', 244478), (True, '2047 274743689216 275012122625', '2047 274743689216 275012122625', 244479), (True, '14999 49996661667 50003323333', '14999 49996661667 50003323333', 244480), (True, '2 2 5', '2 2 5', 244481), (True, '1 250000000001 749999999998', '1 250000000001 749999999998', 244482), (True, '1 1 3', '1 1 3', 244483), (True, '2 1192080414 1914957717', '2 1192080414 1914957717', 244484), (True, '6776 499980556152 500019437072', '6776 499980556152 500019437072', 244485), (True, '6776 499980549376 500019443848', '6776 499980549376 500019443848', 244486), (True, '19 475000000000 524999999981', '19 475000000000 524999999981', 244487), (True, '0 0 216929598879', '0 0 216929598879', 244488), (True, '1 250000000000 749999999999', '1 250000000000 749999999999', 244489), (True, '4 400000000004 599999999992', '4 400000000004 599999999992', 244490), (True, '0 0 100000000000', '0 0 100000000000', 244491), (True, '4 401127200004 498872799992', '4 401127200004 498872799992', 244492), (True, '4 436492080284 469536819716', '4 436492080284 469536819716', 244493), (True, '250000000000 250000000000 500000000000', '250000000000 250000000000 500000000000', 244494)]",True,Accecpted,0.6865065103648591,0.98,False,0.0,False,"def func(*args):
	
	(n, k) = map(int, args[0].split())
	half = (n // 2)
	d = 0
	c = 0
	u = n
	i = half
	while (i >= 0):
	    if ((i % (k + 1)) == 0):
	        d = (i // (k + 1))
	        c = (i - d)
	        u = (n - i)
	        break
	    i -= (i % (k + 1))
	print(d, c, u)
"
1047947,25768591,"a,b=map(int,input().split())
if a!=0 and b!=0:
	if abs(a-b)<=1:
		print('YES')
	else:
		print('NO')
else:
	print('NO')",37839,4508,46,3/24/17 13:01,8,972,2,8,"[(True, 'YES', 'YES', 125942), (True, 'NO', 'NO', 125943), (True, 'YES', 'YES', 125944), (True, 'YES', 'YES', 125945), (True, 'NO', 'NO', 125946), (False, 'NO', 'YES', 125947), (True, 'NO', 'NO', 125948), (True, 'YES', 'YES', 125949), (True, 'NO', 'NO', 125950), (True, 'YES', 'YES', 125951), (True, 'YES', 'YES', 125952), (True, 'NO', 'NO', 125953), (True, 'NO', 'NO', 125954), (True, 'YES', 'YES', 125955), (False, 'NO', 'YES', 125956), (True, 'NO', 'NO', 125957), (True, 'NO', 'NO', 125958), (True, 'NO', 'NO', 125959), (True, 'YES', 'YES', 125960), (True, 'NO', 'NO', 125961), (True, 'YES', 'YES', 125962)]",False,Wrong Answer,0.7348889200874658,0.9799196787148594,False,0.0952380952380952,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	if ((a != 0) and (b != 0)):
	    if (abs((a - b)) <= 1):
	        print('YES')
	    else:
	        print('NO')
	else:
	    print('NO')
"
1047948,25768608,"a,b=map(int,input().split())
if a!=0 or b!=0:
	if abs(a-b)<=1:
		print('YES')
	else:
		print('NO')
else:
	print('NO')",37839,4512,62,3/24/17 13:02,8,972,1,8,"[(True, 'YES', 'YES', 125942), (True, 'NO', 'NO', 125943), (True, 'YES', 'YES', 125944), (True, 'YES', 'YES', 125945), (True, 'NO', 'NO', 125946), (True, 'YES', 'YES', 125947), (True, 'NO', 'NO', 125948), (True, 'YES', 'YES', 125949), (True, 'NO', 'NO', 125950), (True, 'YES', 'YES', 125951), (True, 'YES', 'YES', 125952), (True, 'NO', 'NO', 125953), (True, 'NO', 'NO', 125954), (True, 'YES', 'YES', 125955), (True, 'YES', 'YES', 125956), (True, 'NO', 'NO', 125957), (True, 'NO', 'NO', 125958), (True, 'NO', 'NO', 125959), (True, 'YES', 'YES', 125960), (True, 'NO', 'NO', 125961), (True, 'YES', 'YES', 125962)]",True,Accecpted,0.7348889200874658,0.9799196787148594,False,0.0,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	if ((a != 0) or (b != 0)):
	    if (abs((a - b)) <= 1):
	        print('YES')
	    else:
	        print('NO')
	else:
	    print('NO')
"
1213567,29046199,"letter='aAoOyYeEuUiI'
string=input()
result=''
for i in string:
    if not (i in letter):
        i=i.lower()
        result+='.'+i
print(result)",23363,4524,122,7/31/17 14:13,8,1102,1,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (True, '.x.n.h.c.g.t.n.q.c.m', '.x.n.h.c.g.t.n.q.c.m', 135750), (True, '.j.f.m.t.b.j.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (True, '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (True, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (True, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (True, '.w.z.t.c.v.v.v.v.z.v', '.w.z.t.c.v.v.v.v.z.v', 135766), (True, '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (True, '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (True, '.l.t.g.m.g', '.l.t.g.m.g', 135770), (True, '.k.z.d.x.f', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (True, '.m.r.c.g.p', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (True, '.b', '.b', 135775), (True, '.f.l', '.f.l', 135776), (True, '.x.d.w.d.w.d.d.w.d.d.d.d', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",True,Accecpted,0.9253911813809744,0.9798657718120806,False,0.0,False,"def func(*args):
	
	letter = 'aAoOyYeEuUiI'
	string = args[0]
	result = ''
	for i in string:
	    if (not (i in letter)):
	        i = i.lower()
	        result += ('.' + i)
	print(result)
"
1213566,29046156,"letter='aoyeui'
string=input()
result=''
for i in string:
    if not (i in letter):
        i=i.lower()
        result+='.'+i
print(result)",23363,4496,92,7/31/17 14:12,8,1102,2,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (False, '.b.a.c.a.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (True, '.x.n.h.c.g.t.n.q.c.m', '.x.n.h.c.g.t.n.q.c.m', 135750), (True, '.j.f.m.t.b.j.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (False, '.a.b', '.b', 135754), (True, '.b', '.b', 135755), (False, '.a.b', '.b', 135756), (True, '.b', '.b', 135757), (False, '.b.a', '.b', 135758), (True, '.b', '.b', 135759), (False, '.b.a', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (False, '.f.m.o.z.c.a.r.k.c.p.u.h.y.n.b.b.p.t.i.o.f.m.s.h.m.c.p.o.b.t.p.y.c.l.c.d.j.f.r.u.m.i.q.y.z.a.k.k.u.k.z.r.z.n.m.o.g.v.q.z.c.a.o.k.q.r.j.m.m.k.k.e.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (False, '.v.m.b.p.m.c.m.m.d.c.l.f.e.l.l.i.i.s.u.j.d.w.q.r.x.y.r.d.g.k.m.x.j.x.j.h.x.v.z.a.d.r.z.w.v.w.j.r.k.f.r.r.n.s.a.w.k.k.d.p.z.z.l.f.l.n.s.g.u.n.i.v.j.f.b.e.q.s.m.d.h.s.b.j.v.d.t.o.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (False, '.m.c.g.f.q.q.j.n.u.k.a.e.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.i.p.o.m.t.s.g.j.j.a.j.n.v.i.v.l.u.g.u.a.o.h.n.k.c.b.w.n.o.b.v.c.h.o.w.v.n.k.l.f.q.q.b.f.n.g.y.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (False, '.w.o.z.u.o.t.a.e.y.c.v.v.u.v.v.z.y.y.a.o.u.v.o', '.w.z.t.c.v.v.v.v.z.v', 135766), (False, '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.o.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (False, '.r.i.i.i.u.a.i.y.j.o.y.i.u.w.f.p.o.o.a.i.u.e.z.i.u.e.u.e.a.i.i.h.y.o.e.a.l.v.a.a.i.l.u.a.u.a.u.i.e.u.m.o.a.g.e.u.o.i.a.o.u.y.y.e.y.f.e.o.i.i.v.o.o.a.o.i.i.e.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (False, '.l.t.g.m.y.g', '.l.t.g.m.g', 135770), (True, '.k.z.d.x.f', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (False, '.e.y.a.y.a.y.i.o.i.o.y.o.o.a.u.o.e.u.e.u.o.u.u.y.i.y.u.u.m.o.e.o.i.i.i.a.o.i.u.o.a.a.o.i.y.o.i.o.e.u.i.e.r.c.e.y.y.a.o.i.o.i.g.y.u.i.a.o.y.u.e.o.e.u.a.e.a.y.p.o.y.e.y.u.u.a.u.o.a.o.e.i.y.i.e.y.u.e.e.y', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (False, '.y.b', '.b', 135775), (True, '.f.l', '.f.l', 135776), (False, '.y.y.y.y.y.x.d.w.d.w.d.d.a.w.d.d.d.d.y.y.y.y', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",False,Wrong Answer,0.9253911813809744,0.9798657718120806,False,0.3571428571428571,False,"def func(*args):
	
	letter = 'aoyeui'
	string = args[0]
	result = ''
	for i in string:
	    if (not (i in letter)):
	        i = i.lower()
	        result += ('.' + i)
	print(result)
"
1603058,26053773,"__author__ = 'MARI'


def main():
    a = int(input())
    print(1 + 12*(a*(a-1)//2))


if __name__ == '__main__':
    import sys

    argv = sys.argv
    main()",75498,5444,124,4/1/17 15:55,13,1408,1,8,"[(True, '13', '13', 154605), (True, '1', '1', 154606), (True, '37', '37', 154607), (True, '73', '73', 154608), (True, '121', '121', 154609), (True, '181', '181', 154610), (True, '253', '253', 154611), (True, '337', '337', 154612), (True, '433', '433', 154613), (True, '1349910001', '1349910001', 154614), (True, '140815081', '140815081', 154615), (True, '286778893', '286778893', 154616), (True, '95688253', '95688253', 154617), (True, '938025073', '938025073', 154618), (True, '1040614381', '1040614381', 154619), (True, '1091413', '1091413', 154620), (True, '846307513', '846307513', 154621), (True, '61497613', '61497613', 154622), (True, '194154193', '194154193', 154623), (True, '1404815413', '1404815413', 154624), (True, '1742476333', '1742476333', 154625), (True, '13151281', '13151281', 154626), (True, '1458569233', '1458569233', 154627), (True, '1602659953', '1602659953', 154628), (True, '106926373', '106926373', 154629), (True, '836502337', '836502337', 154630), (True, '1071819541', '1071819541', 154631), (True, '87669037', '87669037', 154632), (True, '2021881', '2021881', 154633), (True, '1437503773', '1437503773', 154634), (True, '256825837', '256825837', 154635), (True, '743996161', '743996161', 154636), (True, '1600111381', '1600111381', 154637), (True, '437845837', '437845837', 154638), (True, '340160221', '340160221', 154639), (True, '59667373', '59667373', 154640), (True, '793569001', '793569001', 154641), (True, '869408437', '869408437', 154642), (True, '1026753853', '1026753853', 154643), (True, '1999798753', '1999798753', 154644)]",True,Accecpted,0.8656030552541708,0.9798270893371758,False,0.0,False,"def func(*args):
	
	__author__ = 'MARI'
	
	def main():
	    a = int(args[0])
	    print((1 + (12 * ((a * (a - 1)) // 2))))
	if (__name__ == '__main__'):
	    import sys
	    argv = sys.argv
	    main()
"
947578,26888033,"def get_number(k):

    current = 1
    div = 1
    while True:

        if k%div == 0:
            current += 1
            div *= 2
        else:
            return current-1




inp = input()
n,k = inp.split("" "")
print(get_number(int(k)))",50727,0,62,5/5/17 22:46,35,874,1,8,"[(True, '2', '2', 116868), (True, '4', '4', 116869), (True, '1', '1', 116870), (True, '3', '3', 116871), (True, '12', '12', 116872), (True, '3', '3', 116873), (True, '28', '28', 116874), (True, '38', '38', 116875), (True, '1', '1', 116876), (True, '1', '1', 116877), (True, '3', '3', 116878), (True, '6', '6', 116879), (True, '4', '4', 116880), (True, '15', '15', 116881), (True, '11', '11', 116882), (True, '20', '20', 116883), (True, '5', '5', 116884), (True, '30', '30', 116885), (True, '34', '34', 116886), (True, '3', '3', 116887), (True, '21', '21', 116888), (True, '15', '15', 116889), (True, '39', '39', 116890), (True, '2', '2', 116891), (True, '34', '34', 116892), (True, '47', '47', 116893), (True, '1', '1', 116894), (True, '2', '2', 116895), (True, '5', '5', 116896), (True, '17', '17', 116897), (True, '37', '37', 116898), (True, '48', '48', 116899), (True, '49', '49', 116900), (True, '50', '50', 116901), (True, '1', '1', 116902), (True, '1', '1', 116903), (True, '3', '3', 116904), (True, '1', '1', 116905), (True, '12', '12', 116906)]",True,Accecpted,0.966052030305502,0.979816513761468,False,0.0,False,"def func(*args):
	
	
	def get_number(k):
	    current = 1
	    div = 1
	    while True:
	        if ((k % div) == 0):
	            current += 1
	            div *= 2
	        else:
	            return (current - 1)
	inp = args[0]
	(n, k) = inp.split(' ')
	print(get_number(int(k)))
"
360790,16869190,"n,a=[int(x) for x in input().split()]
if n&1:
    print(n//2+1)
else:
    print((n-a)//2+1)",27544,4480,62,3/22/16 14:32,9,317,2,8,"[(True, '2', '2', 572), (False, '2', '3', 573), (True, '1', '1', 574), (True, '1', '1', 575), (False, '5', '1', 576), (True, '1', '1', 577), (True, '1', '1', 578), (True, '50000', '50000', 579), (False, '49999', '2', 580), (False, '1', '50000', 581), (True, '1', '1', 582), (True, '1484', '1484', 583), (False, '1000', '1', 584), (False, '50000', '1', 585), (True, '11903', '11903', 586), (True, '678', '678', 587), (False, '7925', '169', 588), (False, '11277', '1005', 589), (False, '3007', '1722', 590), (True, '2640', '2640', 591), (True, '239', '239', 592), (True, '7344', '7344', 593), (True, '24704', '24704', 594), (True, '6766', '6766', 595), (True, '10859', '10859', 596), (False, '3000', '30905', 597), (False, '5715', '34348', 598), (True, '1904', '1904', 599), (False, '2419', '1458', 600), (True, '19', '19', 601), (True, '677', '677', 602), (False, '6771', '10397', 603), (False, '6648', '5122', 604), (False, '698', '3967', 605), (False, '613', '4943', 606), (True, '11660', '11660', 607), (False, '34870', '2662', 608), (True, '43535', '43535', 609), (True, '29189', '29189', 610), (True, '44004', '44004', 611), (False, '37956', '9610', 612), (True, '41888', '41888', 613), (True, '112', '112', 614), (False, '165', '2349', 615), (True, '71', '71', 616), (True, '314', '314', 617), (True, '2875', '2875', 618), (False, '3319', '37760', 619), (False, '3351', '13957', 620), (False, '13441', '30572', 621), (True, '18100', '18100', 622), (True, '45426', '45426', 623), (True, '49604', '49604', 624), (False, '38110', '6524', 625), (False, '37225', '8228', 626), (False, '40495', '6881', 627), (True, '38272', '38272', 628), (False, '38272', '11729', 629), (True, '17435', '17435', 630), (True, '673', '673', 631), (False, '11628', '1367', 632), (False, '2052', '2655', 633), (False, '970', '11801', 634), (True, '35106', '35106', 635), (True, '26636', '26636', 636), (False, '1511', '2748', 637), (False, '27047', '18924', 638), (True, '15117', '15117', 639), (False, '13651', '9673', 640)]",False,Wrong Answer,0.5814307369682193,0.9797979797979798,False,0.463768115942029,False,"def func(*args):
	
	(n, a) = [int(x) for x in args[0].split()]
	if (n & 1):
	    print(((n // 2) + 1))
	else:
	    print((((n - a) // 2) + 1))
"
360791,16869201,"n,a=[int(x) for x in input().split()]
if a&1:
    print(a//2+1)
else:
    print((n-a)//2+1)",27544,4736,77,3/22/16 14:33,9,317,1,8,"[(True, '2', '2', 572), (True, '3', '3', 573), (True, '1', '1', 574), (True, '1', '1', 575), (True, '1', '1', 576), (True, '1', '1', 577), (True, '1', '1', 578), (True, '50000', '50000', 579), (True, '2', '2', 580), (True, '50000', '50000', 581), (True, '1', '1', 582), (True, '1484', '1484', 583), (True, '1', '1', 584), (True, '1', '1', 585), (True, '11903', '11903', 586), (True, '678', '678', 587), (True, '169', '169', 588), (True, '1005', '1005', 589), (True, '1722', '1722', 590), (True, '2640', '2640', 591), (True, '239', '239', 592), (True, '7344', '7344', 593), (True, '24704', '24704', 594), (True, '6766', '6766', 595), (True, '10859', '10859', 596), (True, '30905', '30905', 597), (True, '34348', '34348', 598), (True, '1904', '1904', 599), (True, '1458', '1458', 600), (True, '19', '19', 601), (True, '677', '677', 602), (True, '10397', '10397', 603), (True, '5122', '5122', 604), (True, '3967', '3967', 605), (True, '4943', '4943', 606), (True, '11660', '11660', 607), (True, '2662', '2662', 608), (True, '43535', '43535', 609), (True, '29189', '29189', 610), (True, '44004', '44004', 611), (True, '9610', '9610', 612), (True, '41888', '41888', 613), (True, '112', '112', 614), (True, '2349', '2349', 615), (True, '71', '71', 616), (True, '314', '314', 617), (True, '2875', '2875', 618), (True, '37760', '37760', 619), (True, '13957', '13957', 620), (True, '30572', '30572', 621), (True, '18100', '18100', 622), (True, '45426', '45426', 623), (True, '49604', '49604', 624), (True, '6524', '6524', 625), (True, '8228', '8228', 626), (True, '6881', '6881', 627), (True, '38272', '38272', 628), (True, '11729', '11729', 629), (True, '17435', '17435', 630), (True, '673', '673', 631), (True, '1367', '1367', 632), (True, '2655', '2655', 633), (True, '11801', '11801', 634), (True, '35106', '35106', 635), (True, '26636', '26636', 636), (True, '2748', '2748', 637), (True, '18924', '18924', 638), (True, '15117', '15117', 639), (True, '9673', '9673', 640)]",True,Accecpted,0.5814307369682193,0.9797979797979798,False,0.0,False,"def func(*args):
	
	(n, a) = [int(x) for x in args[0].split()]
	if (a & 1):
	    print(((a // 2) + 1))
	else:
	    print((((n - a) // 2) + 1))
"
2873947,4875414,"def readln(): return tuple(map(int, input().split()))

x, y = readln()
x *= 100
y *= 10
_ = 0
while x + y >= 220:
    if _ == 0:
        if x >= 200:
            x -= 200
            y -= 20
        elif x == 100:
            x -= 100
            y -= 120
        else:
            y -= 220
    else:
        if y >= 220:
            y -= 220
        elif y >= 120:
            y -= 120
            x -= 100
        else:
            y -= 20
            x -= 200
    if x < 0 or y < 0:
        break
    _ = ( _ + 1) % 2
print('Hanako' if not _ else 'Ciel')",32051,300,248,10/25/13 11:34,29,2461,1,8,"[(True, 'Ciel', 'Ciel', 32128), (True, 'Hanako', 'Hanako', 32129), (True, 'Ciel', 'Ciel', 32130), (True, 'Ciel', 'Ciel', 32131), (True, 'Hanako', 'Hanako', 32132), (True, 'Hanako', 'Hanako', 32133), (True, 'Hanako', 'Hanako', 32134), (True, 'Ciel', 'Ciel', 32135), (True, 'Hanako', 'Hanako', 32136), (True, 'Ciel', 'Ciel', 32137), (True, 'Hanako', 'Hanako', 32138), (True, 'Hanako', 'Hanako', 32139), (True, 'Ciel', 'Ciel', 32140), (True, 'Ciel', 'Ciel', 32141), (True, 'Hanako', 'Hanako', 32142), (True, 'Hanako', 'Hanako', 32143), (True, 'Ciel', 'Ciel', 32144), (True, 'Hanako', 'Hanako', 32145), (True, 'Ciel', 'Ciel', 32146), (True, 'Hanako', 'Hanako', 32147), (True, 'Ciel', 'Ciel', 32148), (True, 'Hanako', 'Hanako', 32149), (True, 'Ciel', 'Ciel', 32150), (True, 'Ciel', 'Ciel', 32151), (True, 'Hanako', 'Hanako', 32152), (True, 'Hanako', 'Hanako', 32153), (True, 'Ciel', 'Ciel', 32154), (True, 'Ciel', 'Ciel', 32155), (True, 'Hanako', 'Hanako', 32156), (True, 'Ciel', 'Ciel', 32157), (True, 'Hanako', 'Hanako', 32158), (True, 'Hanako', 'Hanako', 32159), (True, 'Ciel', 'Ciel', 32160), (True, 'Ciel', 'Ciel', 32161), (True, 'Hanako', 'Hanako', 32162), (True, 'Hanako', 'Hanako', 32163), (True, 'Ciel', 'Ciel', 32164), (True, 'Hanako', 'Hanako', 32165), (True, 'Ciel', 'Ciel', 32166), (True, 'Hanako', 'Hanako', 32167), (True, 'Ciel', 'Ciel', 32168), (True, 'Hanako', 'Hanako', 32169), (True, 'Ciel', 'Ciel', 32170), (True, 'Hanako', 'Hanako', 32171), (True, 'Ciel', 'Ciel', 32172), (True, 'Hanako', 'Hanako', 32173), (True, 'Ciel', 'Ciel', 32174), (True, 'Ciel', 'Ciel', 32175), (True, 'Hanako', 'Hanako', 32176), (True, 'Ciel', 'Ciel', 32177), (True, 'Ciel', 'Ciel', 32178), (True, 'Ciel', 'Ciel', 32179), (True, 'Ciel', 'Ciel', 32180), (True, 'Ciel', 'Ciel', 32181), (True, 'Ciel', 'Ciel', 32182), (True, 'Hanako', 'Hanako', 32183), (True, 'Hanako', 'Hanako', 32184), (True, 'Hanako', 'Hanako', 32185), (True, 'Hanako', 'Hanako', 32186), (True, 'Hanako', 'Hanako', 32187), (True, 'Hanako', 'Hanako', 32188), (True, 'Hanako', 'Hanako', 32189), (True, 'Hanako', 'Hanako', 32190), (True, 'Ciel', 'Ciel', 32191), (True, 'Ciel', 'Ciel', 32192), (True, 'Ciel', 'Ciel', 32193), (True, 'Hanako', 'Hanako', 32194), (True, 'Ciel', 'Ciel', 32195), (True, 'Ciel', 'Ciel', 32196), (True, 'Ciel', 'Ciel', 32197), (True, 'Hanako', 'Hanako', 32198), (True, 'Ciel', 'Ciel', 32199), (True, 'Hanako', 'Hanako', 32200), (True, 'Hanako', 'Hanako', 32201), (True, 'Hanako', 'Hanako', 32202), (True, 'Hanako', 'Hanako', 32203), (True, 'Hanako', 'Hanako', 32204), (True, 'Hanako', 'Hanako', 32205), (True, 'Hanako', 'Hanako', 32206), (True, 'Hanako', 'Hanako', 32207), (True, 'Hanako', 'Hanako', 32208), (True, 'Hanako', 'Hanako', 32209), (True, 'Ciel', 'Ciel', 32210), (True, 'Hanako', 'Hanako', 32211), (True, 'Hanako', 'Hanako', 32212), (True, 'Ciel', 'Ciel', 32213), (True, 'Hanako', 'Hanako', 32214), (True, 'Ciel', 'Ciel', 32215), (True, 'Hanako', 'Hanako', 32216), (True, 'Ciel', 'Ciel', 32217), (True, 'Hanako', 'Hanako', 32218), (True, 'Hanako', 'Hanako', 32219), (True, 'Ciel', 'Ciel', 32220), (True, 'Hanako', 'Hanako', 32221), (True, 'Hanako', 'Hanako', 32222), (True, 'Ciel', 'Ciel', 32223), (True, 'Ciel', 'Ciel', 32224), (True, 'Ciel', 'Ciel', 32225), (True, 'Ciel', 'Ciel', 32226)]",True,Accecpted,0.9554689933959511,0.9797713280562884,False,0.0,False,"def func(*args):
	
	
	def readln():
	    return tuple(map(int, args[0].split()))
	(x, y) = readln()
	x *= 100
	y *= 10
	_ = 0
	while ((x + y) >= 220):
	    if (_ == 0):
	        if (x >= 200):
	            x -= 200
	            y -= 20
	        elif (x == 100):
	            x -= 100
	            y -= 120
	        else:
	            y -= 220
	    elif (y >= 220):
	        y -= 220
	    elif (y >= 120):
	        y -= 120
	        x -= 100
	    else:
	        y -= 20
	        x -= 200
	    if ((x < 0) or (y < 0)):
	        break
	    _ = ((_ + 1) % 2)
	print(('Hanako' if (not _) else 'Ciel'))
"
3403361,29143827,"if __name__ == ""__main__"":

    x, y = input().split()
    n = int(input())

    dirs = {'^': 1, '>': 2, 'v': 3, '<': 4}

    if n%2 == 0: print('undefined')
    elif (dirs[y]-dirs[x])%4 == n%4: print('cw')
    else: print('ccw')",4284,4512,62,8/3/17 5:57,19,2965,1,8,"[(True, 'cw', 'cw', 248929), (True, 'ccw', 'ccw', 248930), (True, 'undefined', 'undefined', 248931), (True, 'ccw', 'ccw', 248932), (True, 'cw', 'cw', 248933), (True, 'cw', 'cw', 248934), (True, 'cw', 'cw', 248935), (True, 'cw', 'cw', 248936), (True, 'ccw', 'ccw', 248937), (True, 'undefined', 'undefined', 248938), (True, 'undefined', 'undefined', 248939), (True, 'undefined', 'undefined', 248940), (True, 'undefined', 'undefined', 248941), (True, 'undefined', 'undefined', 248942), (True, 'undefined', 'undefined', 248943), (True, 'undefined', 'undefined', 248944), (True, 'ccw', 'ccw', 248945), (True, 'ccw', 'ccw', 248946), (True, 'ccw', 'ccw', 248947), (True, 'ccw', 'ccw', 248948), (True, 'cw', 'cw', 248949), (True, 'undefined', 'undefined', 248950), (True, 'undefined', 'undefined', 248951), (True, 'cw', 'cw', 248952), (True, 'cw', 'cw', 248953), (True, 'ccw', 'ccw', 248954), (True, 'ccw', 'ccw', 248955), (True, 'ccw', 'ccw', 248956), (True, 'undefined', 'undefined', 248957), (True, 'ccw', 'ccw', 248958), (True, 'undefined', 'undefined', 248959), (True, 'undefined', 'undefined', 248960), (True, 'undefined', 'undefined', 248961), (True, 'undefined', 'undefined', 248962), (True, 'undefined', 'undefined', 248963), (True, 'cw', 'cw', 248964), (True, 'undefined', 'undefined', 248965), (True, 'undefined', 'undefined', 248966), (True, 'cw', 'cw', 248967), (True, 'cw', 'cw', 248968), (True, 'cw', 'cw', 248969), (True, 'undefined', 'undefined', 248970), (True, 'cw', 'cw', 248971), (True, 'undefined', 'undefined', 248972), (True, 'undefined', 'undefined', 248973), (True, 'ccw', 'ccw', 248974), (True, 'undefined', 'undefined', 248975)]",True,Accecpted,0.8617660129625551,0.979757085020243,False,0.0,False,"def func(*args):
	
	if (__name__ == '__main__'):
	    (x, y) = args[0].split()
	    n = int(args[1])
	    dirs = {'^': 1, '>': 2, 'v': 3, '<': 4}
	    if ((n % 2) == 0):
	        print('undefined')
	    elif (((dirs[y] - dirs[x]) % 4) == (n % 4)):
	        print('cw')
	    else:
	        print('ccw')
"
3403360,29143817,"if __name__ == ""__main__"":

    x, y = input().split()
    n = int(input())

    dirs = {'^': 1, '>': 2, 'v': 3, '<': 4}

    if n%4 == 2: print('undefined')
    elif (dirs[y]-dirs[x])%4 == n%4: print('cw')
    else: print('ccw')",4284,4504,46,8/3/17 5:56,19,2965,2,8,"[(True, 'cw', 'cw', 248929), (True, 'ccw', 'ccw', 248930), (True, 'undefined', 'undefined', 248931), (True, 'ccw', 'ccw', 248932), (True, 'cw', 'cw', 248933), (True, 'cw', 'cw', 248934), (True, 'cw', 'cw', 248935), (True, 'cw', 'cw', 248936), (True, 'ccw', 'ccw', 248937), (True, 'undefined', 'undefined', 248938), (False, 'cw', 'undefined', 248939), (True, 'undefined', 'undefined', 248940), (False, 'cw', 'undefined', 248941), (False, 'cw', 'undefined', 248942), (False, 'cw', 'undefined', 248943), (True, 'undefined', 'undefined', 248944), (True, 'ccw', 'ccw', 248945), (True, 'ccw', 'ccw', 248946), (True, 'ccw', 'ccw', 248947), (True, 'ccw', 'ccw', 248948), (True, 'cw', 'cw', 248949), (False, 'cw', 'undefined', 248950), (True, 'undefined', 'undefined', 248951), (True, 'cw', 'cw', 248952), (True, 'cw', 'cw', 248953), (True, 'ccw', 'ccw', 248954), (True, 'ccw', 'ccw', 248955), (True, 'ccw', 'ccw', 248956), (False, 'cw', 'undefined', 248957), (True, 'ccw', 'ccw', 248958), (False, 'cw', 'undefined', 248959), (False, 'cw', 'undefined', 248960), (False, 'cw', 'undefined', 248961), (False, 'cw', 'undefined', 248962), (False, 'cw', 'undefined', 248963), (True, 'cw', 'cw', 248964), (False, 'cw', 'undefined', 248965), (False, 'cw', 'undefined', 248966), (True, 'cw', 'cw', 248967), (True, 'cw', 'cw', 248968), (True, 'cw', 'cw', 248969), (True, 'undefined', 'undefined', 248970), (True, 'cw', 'cw', 248971), (False, 'cw', 'undefined', 248972), (False, 'cw', 'undefined', 248973), (True, 'ccw', 'ccw', 248974), (False, 'cw', 'undefined', 248975)]",False,Wrong Answer,0.8617660129625551,0.979757085020243,False,0.3404255319148936,False,"def func(*args):
	
	if (__name__ == '__main__'):
	    (x, y) = args[0].split()
	    n = int(args[1])
	    dirs = {'^': 1, '>': 2, 'v': 3, '<': 4}
	    if ((n % 4) == 2):
	        print('undefined')
	    elif (((dirs[y] - dirs[x]) % 4) == (n % 4)):
	        print('cw')
	    else:
	        print('ccw')
"
844068,22067147,"seat= input()
number= int(seat[:-1])
letter= seat[-1]
time=0
pair=""first or second""

if number%2 == 0:
    Q=number/2
    if Q%2==0:
        pair=""second""
    else:
        pair=""first""

else:
    Q=int(number/2 - 0.5)
    if Q%2==0:
        pair=""first""
    else:
        pair=""second""

if pair == ""first"":
    time+= 6 * ((number//2)) + (number//2) + (number//4 *2)
else:
    time+= 6 * ((number//2)-1) + (number//2)-1 + (number//4 *2)

if number%4==0:
    time=time-2


order=[""f"",""e"",""d"",""a"",""b"",""c""]

time += order.index(letter) + 1

if number== 999999999999999998 or number== 999999999999999994:
    time += 7
if number== 999999999999999999:
    time -= 7

print(time)",47000,0,62,11/6/16 5:35,77,779,2,8,"[(True, '1', '1', 111317), (True, '10', '10', 111318), (True, '11', '11', 111319), (True, '18', '18', 111320), (True, '13', '13', 111321), (True, '5', '5', 111322), (True, '3999999999999999994', '3999999999999999994', 111323), (True, '3999999999999999988', '3999999999999999988', 111324), (True, '6', '6', 111325), (True, '3', '3', 111326), (True, '2', '2', 111327), (True, '4', '4', 111328), (True, '11', '11', 111329), (True, '12', '12', 111330), (True, '9', '9', 111331), (True, '8', '8', 111332), (True, '4', '4', 111333), (True, '5', '5', 111334), (True, '6', '6', 111335), (True, '3', '3', 111336), (True, '2', '2', 111337), (True, '1', '1', 111338), (True, '12', '12', 111339), (True, '13', '13', 111340), (True, '10', '10', 111341), (True, '9', '9', 111342), (True, '8', '8', 111343), (True, '3999999988', '3999999988', 111344), (True, '3999999989', '3999999989', 111345), (True, '3999999990', '3999999990', 111346), (True, '3999999987', '3999999987', 111347), (True, '3999999986', '3999999986', 111348), (True, '3999999985', '3999999985', 111349), (True, '3999999995', '3999999995', 111350), (True, '3999999996', '3999999996', 111351), (True, '3999999997', '3999999997', 111352), (True, '3999999994', '3999999994', 111353), (True, '3999999993', '3999999993', 111354), (True, '3999999992', '3999999992', 111355), (True, '3999999988', '3999999988', 111356), (True, '3999999989', '3999999989', 111357), (True, '3999999990', '3999999990', 111358), (True, '3999999987', '3999999987', 111359), (True, '3999999986', '3999999986', 111360), (True, '3999999985', '3999999985', 111361), (True, '3999999995', '3999999995', 111362), (True, '3999999996', '3999999996', 111363), (True, '3999999997', '3999999997', 111364), (True, '3999999994', '3999999994', 111365), (True, '3999999993', '3999999993', 111366), (True, '3999999992', '3999999992', 111367), (True, '399996', '399996', 111368), (True, '399992', '399992', 111369), (True, '400003', '400003', 111370), (True, '400002', '400002', 111371), (True, '400001', '400001', 111372), (True, '400011', '400011', 111373), (True, '400012', '400012', 111374), (True, '400010', '400010', 111375), (True, '4925092', '4925092', 111376), (True, '331128', '331128', 111377), (True, '353245', '353245', 111378), (True, '3564946', '3564946', 111379), (True, '3999999999999999989', '3999999999999999989', 111380), (True, '3999999999999999990', '3999999999999999990', 111381), (True, '3999999999999999987', '3999999999999999987', 111382), (True, '3999999999999999986', '3999999999999999986', 111383), (True, '3999999999999999985', '3999999999999999985', 111384), (True, '3999999999999999995', '3999999999999999995', 111385), (True, '3999999999999999996', '3999999999999999996', 111386), (True, '3999999999999999997', '3999999999999999997', 111387), (True, '3999999999999999994', '3999999999999999994', 111388), (True, '3999999999999999993', '3999999999999999993', 111389), (True, '3999999999999999992', '3999999999999999992', 111390), (True, '3999999999999999988', '3999999999999999988', 111391), (True, '3999999999999999989', '3999999999999999989', 111392), (True, '3999999999999999990', '3999999999999999990', 111393), (True, '3999999999999999987', '3999999999999999987', 111394), (True, '3999999999999999995', '3999999999999999995', 111395), (True, '3999999999999999993', '3999999999999999993', 111396), (True, '3999999999999999992', '3999999999999999992', 111397), (True, '3999999999999999997', '3999999999999999997', 111398), (True, '388', '388', 111399), (True, '24', '24', 111400), (True, '17', '17', 111401), (True, '18', '18', 111402), (True, '3999999999999999965', '3999999999999999965', 111403), (True, '20', '20', 111404), (True, '24', '24', 111405), (True, '3999999999999999963', '3999999999999999963', 111406), (True, '3999999999999999964', '3999999999999999964', 111407), (True, '3999999999999999965', '3999999999999999965', 111408), (True, '3999999999999999962', '3999999999999999962', 111409), (True, '3999999999999999961', '3999999999999999961', 111410), (True, '3999999999999999960', '3999999999999999960', 111411), (True, '3999999999999999972', '3999999999999999972', 111412), (True, '3999999999999999973', '3999999999999999973', 111413), (True, '3999999999999999974', '3999999999999999974', 111414), (True, '3999999999999999971', '3999999999999999971', 111415), (True, '3999999999999999970', '3999999999999999970', 111416), (True, '3999999999999999969', '3999999999999999969', 111417), (True, '3999999999999999979', '3999999999999999979', 111418), (True, '3999999999999999980', '3999999999999999980', 111419), (True, '3999999999999999981', '3999999999999999981', 111420), (True, '3999999999999999978', '3999999999999999978', 111421), (True, '3999999999999999977', '3999999999999999977', 111422), (True, '3999999999999999976', '3999999999999999976', 111423), (False, '3999999999999999979', '3999999999999999972', 111424), (False, '3999999999999999980', '3999999999999999973', 111425), (False, '3999999999999999981', '3999999999999999974', 111426), (False, '3999999999999999978', '3999999999999999971', 111427), (False, '3999999999999999977', '3999999999999999970', 111428), (False, '3999999999999999976', '3999999999999999969', 111429), (True, '43', '43', 111430), (True, '33', '33', 111431), (True, '2726290581', '2726290581', 111432), (True, '81', '81', 111433), (True, '484', '484', 111434), (True, '3999999555555111108', '3999999555555111108', 111435)]",False,Wrong Answer,0.929606330915766,0.9797517962116264,False,0.0504201680672268,False,"def func(*args):
	
	seat = args[0]
	number = int(seat[:(- 1)])
	letter = seat[(- 1)]
	time = 0
	pair = 'first or second'
	if ((number % 2) == 0):
	    Q = (number / 2)
	    if ((Q % 2) == 0):
	        pair = 'second'
	    else:
	        pair = 'first'
	else:
	    Q = int(((number / 2) - 0.5))
	    if ((Q % 2) == 0):
	        pair = 'first'
	    else:
	        pair = 'second'
	if (pair == 'first'):
	    time += (((6 * (number // 2)) + (number // 2)) + ((number // 4) * 2))
	else:
	    time += ((((6 * ((number // 2) - 1)) + (number // 2)) - 1) + ((number // 4) * 2))
	if ((number % 4) == 0):
	    time = (time - 2)
	order = ['f', 'e', 'd', 'a', 'b', 'c']
	time += (order.index(letter) + 1)
	if ((number == 999999999999999998) or (number == 999999999999999994)):
	    time += 7
	if (number == 999999999999999999):
	    time -= 7
	print(time)
"
844069,22067165,"seat= input()
number= int(seat[:-1])
letter= seat[-1]
time=0
pair=""first or second""

if number%2 == 0:
    Q=number/2
    if Q%2==0:
        pair=""second""
    else:
        pair=""first""

else:
    Q=int(number/2 - 0.5)
    if Q%2==0:
        pair=""first""
    else:
        pair=""second""

if pair == ""first"":
    time+= 6 * ((number//2)) + (number//2) + (number//4 *2)
else:
    time+= 6 * ((number//2)-1) + (number//2)-1 + (number//4 *2)

if number%4==0:
    time=time-2


order=[""f"",""e"",""d"",""a"",""b"",""c""]

time += order.index(letter) + 1

if number== 999999999999999998 or number== 999999999999999994:
    time += 7
if number== 999999999999999999 or number== 999999999999999995:
    time -= 7

print(time)",47000,20,62,11/6/16 5:37,77,779,1,8,"[(True, '1', '1', 111317), (True, '10', '10', 111318), (True, '11', '11', 111319), (True, '18', '18', 111320), (True, '13', '13', 111321), (True, '5', '5', 111322), (True, '3999999999999999994', '3999999999999999994', 111323), (True, '3999999999999999988', '3999999999999999988', 111324), (True, '6', '6', 111325), (True, '3', '3', 111326), (True, '2', '2', 111327), (True, '4', '4', 111328), (True, '11', '11', 111329), (True, '12', '12', 111330), (True, '9', '9', 111331), (True, '8', '8', 111332), (True, '4', '4', 111333), (True, '5', '5', 111334), (True, '6', '6', 111335), (True, '3', '3', 111336), (True, '2', '2', 111337), (True, '1', '1', 111338), (True, '12', '12', 111339), (True, '13', '13', 111340), (True, '10', '10', 111341), (True, '9', '9', 111342), (True, '8', '8', 111343), (True, '3999999988', '3999999988', 111344), (True, '3999999989', '3999999989', 111345), (True, '3999999990', '3999999990', 111346), (True, '3999999987', '3999999987', 111347), (True, '3999999986', '3999999986', 111348), (True, '3999999985', '3999999985', 111349), (True, '3999999995', '3999999995', 111350), (True, '3999999996', '3999999996', 111351), (True, '3999999997', '3999999997', 111352), (True, '3999999994', '3999999994', 111353), (True, '3999999993', '3999999993', 111354), (True, '3999999992', '3999999992', 111355), (True, '3999999988', '3999999988', 111356), (True, '3999999989', '3999999989', 111357), (True, '3999999990', '3999999990', 111358), (True, '3999999987', '3999999987', 111359), (True, '3999999986', '3999999986', 111360), (True, '3999999985', '3999999985', 111361), (True, '3999999995', '3999999995', 111362), (True, '3999999996', '3999999996', 111363), (True, '3999999997', '3999999997', 111364), (True, '3999999994', '3999999994', 111365), (True, '3999999993', '3999999993', 111366), (True, '3999999992', '3999999992', 111367), (True, '399996', '399996', 111368), (True, '399992', '399992', 111369), (True, '400003', '400003', 111370), (True, '400002', '400002', 111371), (True, '400001', '400001', 111372), (True, '400011', '400011', 111373), (True, '400012', '400012', 111374), (True, '400010', '400010', 111375), (True, '4925092', '4925092', 111376), (True, '331128', '331128', 111377), (True, '353245', '353245', 111378), (True, '3564946', '3564946', 111379), (True, '3999999999999999989', '3999999999999999989', 111380), (True, '3999999999999999990', '3999999999999999990', 111381), (True, '3999999999999999987', '3999999999999999987', 111382), (True, '3999999999999999986', '3999999999999999986', 111383), (True, '3999999999999999985', '3999999999999999985', 111384), (True, '3999999999999999995', '3999999999999999995', 111385), (True, '3999999999999999996', '3999999999999999996', 111386), (True, '3999999999999999997', '3999999999999999997', 111387), (True, '3999999999999999994', '3999999999999999994', 111388), (True, '3999999999999999993', '3999999999999999993', 111389), (True, '3999999999999999992', '3999999999999999992', 111390), (True, '3999999999999999988', '3999999999999999988', 111391), (True, '3999999999999999989', '3999999999999999989', 111392), (True, '3999999999999999990', '3999999999999999990', 111393), (True, '3999999999999999987', '3999999999999999987', 111394), (True, '3999999999999999995', '3999999999999999995', 111395), (True, '3999999999999999993', '3999999999999999993', 111396), (True, '3999999999999999992', '3999999999999999992', 111397), (True, '3999999999999999997', '3999999999999999997', 111398), (True, '388', '388', 111399), (True, '24', '24', 111400), (True, '17', '17', 111401), (True, '18', '18', 111402), (True, '3999999999999999965', '3999999999999999965', 111403), (True, '20', '20', 111404), (True, '24', '24', 111405), (True, '3999999999999999963', '3999999999999999963', 111406), (True, '3999999999999999964', '3999999999999999964', 111407), (True, '3999999999999999965', '3999999999999999965', 111408), (True, '3999999999999999962', '3999999999999999962', 111409), (True, '3999999999999999961', '3999999999999999961', 111410), (True, '3999999999999999960', '3999999999999999960', 111411), (True, '3999999999999999972', '3999999999999999972', 111412), (True, '3999999999999999973', '3999999999999999973', 111413), (True, '3999999999999999974', '3999999999999999974', 111414), (True, '3999999999999999971', '3999999999999999971', 111415), (True, '3999999999999999970', '3999999999999999970', 111416), (True, '3999999999999999969', '3999999999999999969', 111417), (True, '3999999999999999979', '3999999999999999979', 111418), (True, '3999999999999999980', '3999999999999999980', 111419), (True, '3999999999999999981', '3999999999999999981', 111420), (True, '3999999999999999978', '3999999999999999978', 111421), (True, '3999999999999999977', '3999999999999999977', 111422), (True, '3999999999999999976', '3999999999999999976', 111423), (True, '3999999999999999972', '3999999999999999972', 111424), (True, '3999999999999999973', '3999999999999999973', 111425), (True, '3999999999999999974', '3999999999999999974', 111426), (True, '3999999999999999971', '3999999999999999971', 111427), (True, '3999999999999999970', '3999999999999999970', 111428), (True, '3999999999999999969', '3999999999999999969', 111429), (True, '43', '43', 111430), (True, '33', '33', 111431), (True, '2726290581', '2726290581', 111432), (True, '81', '81', 111433), (True, '484', '484', 111434), (True, '3999999555555111108', '3999999555555111108', 111435)]",True,Accecpted,0.929606330915766,0.9797517962116264,False,0.0,False,"def func(*args):
	
	seat = args[0]
	number = int(seat[:(- 1)])
	letter = seat[(- 1)]
	time = 0
	pair = 'first or second'
	if ((number % 2) == 0):
	    Q = (number / 2)
	    if ((Q % 2) == 0):
	        pair = 'second'
	    else:
	        pair = 'first'
	else:
	    Q = int(((number / 2) - 0.5))
	    if ((Q % 2) == 0):
	        pair = 'first'
	    else:
	        pair = 'second'
	if (pair == 'first'):
	    time += (((6 * (number // 2)) + (number // 2)) + ((number // 4) * 2))
	else:
	    time += ((((6 * ((number // 2) - 1)) + (number // 2)) - 1) + ((number // 4) * 2))
	if ((number % 4) == 0):
	    time = (time - 2)
	order = ['f', 'e', 'd', 'a', 'b', 'c']
	time += (order.index(letter) + 1)
	if ((number == 999999999999999998) or (number == 999999999999999994)):
	    time += 7
	if ((number == 999999999999999999) or (number == 999999999999999995)):
	    time -= 7
	print(time)
"
1210862,28135207,"consonents=['A','a','E','e','I','i','O','o','U','u','Y','y']
s=input()
t=""""
for x in s:
	if x in consonents:
		continue
	elif ord(x) < 97:
		t=t+'.'+chr(ord(x)+32)
	else:
		t=t+'.'+x
print(t)",63486,5428,124,6/29/17 11:38,11,1102,1,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (True, '.x.n.h.c.g.t.n.q.c.m', '.x.n.h.c.g.t.n.q.c.m', 135750), (True, '.j.f.m.t.b.j.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (True, '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (True, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (True, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (True, '.w.z.t.c.v.v.v.v.z.v', '.w.z.t.c.v.v.v.v.z.v', 135766), (True, '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (True, '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (True, '.l.t.g.m.g', '.l.t.g.m.g', 135770), (True, '.k.z.d.x.f', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (True, '.m.r.c.g.p', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (True, '.b', '.b', 135775), (True, '.f.l', '.f.l', 135776), (True, '.x.d.w.d.w.d.d.w.d.d.d.d', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",True,Accecpted,0.9457416090031758,0.9796954314720812,False,0.0,False,"def func(*args):
	
	consonents = ['A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u', 'Y', 'y']
	s = args[0]
	t = ''
	for x in s:
	    if (x in consonents):
	        continue
	    elif (ord(x) < 97):
	        t = ((t + '.') + chr((ord(x) + 32)))
	    else:
	        t = ((t + '.') + x)
	print(t)
"
1210861,28135114,"consonents=['A','a','E','e','I','i','O','o','U','u']
s=input()
t=""""
for x in s:
	if x in consonents:
		continue
	elif ord(x) < 97:
		t=t+'.'+chr(ord(x)+32)
	else:
		t=t+'.'+x
print(t)",63486,5396,92,6/29/17 11:33,11,1102,2,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (False, '.x.n.h.c.g.y.t.n.q.c.m.y', '.x.n.h.c.g.t.n.q.c.m', 135750), (False, '.j.f.m.t.b.j.y.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (False, '.f.m.z.c.r.k.c.p.h.y.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.y.c.l.c.d.j.f.r.m.y.q.y.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (False, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.y.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (False, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.y.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (False, '.y.w.y.z.t.y.c.v.v.y.v.y.v.z.y.y.y.y.y.v.y.y.y.y.y.y', '.w.z.t.c.v.v.v.v.z.v', 135766), (False, '.y.j.n.c.k.p.f.y.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (False, '.r.y.j.y.w.f.p.z.y.y.h.y.l.v.l.m.g.y.y.y.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (False, '.y.y.y.l.y.y.y.y.t.y.y.y.y.y.g.m.y.y.y.y.y.y.g', '.l.t.g.m.g', 135770), (False, '.y.y.y.y.k.z.y.y.y.y.y.d.x.f.y.y.y.y.y', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (False, '.y.y.y.y.y.y.m.y.r.c.y.y.g.y.y.y.p.y.y.y.y.y', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (False, '.y.b', '.b', 135775), (False, '.f.l.y', '.f.l', 135776), (False, '.y.y.y.y.y.y.y.y.y.x.d.w.d.w.d.d.w.d.d.d.d.y.y.y.y', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",False,Wrong Answer,0.9457416090031758,0.9796954314720812,False,0.3333333333333333,False,"def func(*args):
	
	consonents = ['A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u']
	s = args[0]
	t = ''
	for x in s:
	    if (x in consonents):
	        continue
	    elif (ord(x) < 97):
	        t = ((t + '.') + chr((ord(x) + 32)))
	    else:
	        t = ((t + '.') + x)
	print(t)
"
1311340,27811535,"# http://codeforces.com/problemset/problem/131/A


def main():
    string = input()
    if string[0].islower():
        if all(x.isupper() for x in string[1:]):
            return string.swapcase()
        else:
            return string
    elif all(x.isupper() for x in string):
        return string.lower()
    else:
        return string


if __name__ == '__main__':
    print(main())",61667,20,78,6/15/17 23:43,18,1187,1,8,"[(True, 'Caps', 'Caps', 141548), (True, 'Lock', 'Lock', 141549), (True, 'cAPSlOCK', 'cAPSlOCK', 141550), (True, 'CAPs', 'CAPs', 141551), (True, 'LoCK', 'LoCK', 141552), (True, 'oops', 'oops', 141553), (True, 'oops', 'oops', 141554), (True, 'A', 'A', 141555), (True, 'a', 'a', 141556), (True, 'Aa', 'Aa', 141557), (True, 'Zz', 'Zz', 141558), (True, 'Az', 'Az', 141559), (True, 'Za', 'Za', 141560), (True, 'aaa', 'aaa', 141561), (True, 'AAa', 'AAa', 141562), (True, 'AaR', 'AaR', 141563), (True, 'Tdr', 'Tdr', 141564), (True, 'Atf', 'Atf', 141565), (True, 'fYd', 'fYd', 141566), (True, 'dsA', 'dsA', 141567), (True, 'fru', 'fru', 141568), (True, 'Hybkf', 'Hybkf', 141569), (True, 'XweAR', 'XweAR', 141570), (True, 'mogqx', 'mogqx', 141571), (True, 'eOhEi', 'eOhEi', 141572), (True, 'nkdku', 'nkdku', 141573), (True, 'zcnko', 'zcnko', 141574), (True, 'lcccd', 'lcccd', 141575), (True, 'vwmvg', 'vwmvg', 141576), (True, 'lvchf', 'lvchf', 141577), (True, 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 141578), (True, 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 141579), (True, 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 141580), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141581), (True, 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 141582), (True, 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 141583), (True, 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 141584), (True, 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 141585), (True, 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 141586), (True, 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 141587), (True, 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 141588), (True, 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 141589), (True, 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 141590), (True, 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 141591), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141592), (True, 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 141593), (True, 'aBACABa', 'aBACABa', 141594), (True, 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 141595), (True, 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 141596), (True, 'Dddddddddddddd', 'Dddddddddddddd', 141597), (True, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 141598), (True, 'Z', 'Z', 141599), (True, 'az', 'az', 141600), (True, 'z', 'z', 141601), (True, 'Aaaaa', 'Aaaaa', 141602), (True, 'f', 'f', 141603)]",True,Accecpted,0.7721060576667053,0.979539641943734,False,0.0,False,"def func(*args):
	
	
	def main():
	    string = args[0]
	    if string[0].islower():
	        if all((x.isupper() for x in string[1:])):
	            return string.swapcase()
	        else:
	            return string
	    elif all((x.isupper() for x in string)):
	        return string.lower()
	    else:
	        return string
	if (__name__ == '__main__'):
	    print(main())
"
1311338,27811491,"# http://codeforces.com/problemset/problem/131/A


def main():
    string = input()
    if string[0].islower():
        if any(x.isupper() for x in string):
            return string.swapcase()
        else:
            return string.upper()
    elif all(x.isupper() for x in string):
        return string.lower()
    else:
        return string


if __name__ == '__main__':
    print(main())",61667,12,62,6/15/17 23:40,18,1187,2,8,"[(True, 'Caps', 'Caps', 141548), (True, 'Lock', 'Lock', 141549), (False, 'CapsLock', 'cAPSlOCK', 141550), (True, 'CAPs', 'CAPs', 141551), (True, 'LoCK', 'LoCK', 141552), (True, 'oops', 'oops', 141553), (False, 'OOPS', 'oops', 141554), (True, 'A', 'A', 141555), (True, 'a', 'a', 141556), (True, 'Aa', 'Aa', 141557), (True, 'Zz', 'Zz', 141558), (True, 'Az', 'Az', 141559), (True, 'Za', 'Za', 141560), (True, 'aaa', 'aaa', 141561), (True, 'AAa', 'AAa', 141562), (True, 'AaR', 'AaR', 141563), (True, 'Tdr', 'Tdr', 141564), (True, 'Atf', 'Atf', 141565), (False, 'FyD', 'fYd', 141566), (False, 'DSa', 'dsA', 141567), (False, 'FRU', 'fru', 141568), (True, 'Hybkf', 'Hybkf', 141569), (True, 'XweAR', 'XweAR', 141570), (False, 'MOGQX', 'mogqx', 141571), (False, 'EoHeI', 'eOhEi', 141572), (False, 'NKDKU', 'nkdku', 141573), (False, 'ZCNKO', 'zcnko', 141574), (False, 'LCCCD', 'lcccd', 141575), (False, 'VWMVG', 'vwmvg', 141576), (False, 'LVCHF', 'lvchf', 141577), (True, 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 141578), (True, 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 141579), (True, 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 141580), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141581), (True, 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 141582), (True, 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 141583), (True, 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 141584), (True, 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 141585), (False, 'XfgQOlilnVXarkUiNTpFEUKfTmBVZdEZkPprakKiOiVWQnxNEHrvWKKxyVUrcEOIEbAbFtJWSyHdEclVbWKTNTYLUOXcyvIOxgDM', 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 141586), (False, 'UDVQOLBXDWBKIJWVHLYAELHYNMNFGSZBHGSHLCWDKAIBCEQOMZUJNDIXUZIVLSJYJQXZXODZBUKXXHWWULTVEKDFNTWPZLHHRiJM', 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 141587), (False, 'JGPWHETQQONCIGHGZBBAlWWWXKXIVUWTOKEHRGPRFGEWZCWXKAVWOFLCGSGBHOEAMZBEFZOONWSYZISETOYDRPUFKTZGBAYCGAEG', 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 141588), (False, 'VYUJSAZDSTBNKXEUNEDFBOLICOJZJPUFGFEMHTMDRSWVMUHOIVJVONACEFQENBQUDELMDEGXQTBWEZSBYDMANZUTVDGKGRJXZLNC', 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 141589), (False, 'PIVQNUQKAOFCDUVBTTZTJBUAVRQWIQRWKFNCMVATOXRUELYOECNKPQRAIAHUMIAIQEYJAPBQYRSXCDGJBIHIVTQEZVASFMZNTDFV', 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 141590), (False, 'UPVTBSXSWBOHXSHDRBJXCUNGZQUHUOMGXWLRYVSHSHSFVQBRXVCIKBGLIETLPQKIWBHIQPMDWUQOSBTDVYXEKKAQIWRBSIBPOECT', 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 141591), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141592), (True, 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 141593), (False, 'AbacabA', 'aBACABa', 141594), (True, 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 141595), (False, 'AAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 141596), (True, 'Dddddddddddddd', 'Dddddddddddddd', 141597), (False, 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 141598), (True, 'Z', 'Z', 141599), (True, 'az', 'az', 141600), (True, 'z', 'z', 141601), (True, 'Aaaaa', 'Aaaaa', 141602), (True, 'f', 'f', 141603)]",False,Wrong Answer,0.7721060576667053,0.979539641943734,False,0.375,False,"def func(*args):
	
	
	def main():
	    string = args[0]
	    if string[0].islower():
	        if any((x.isupper() for x in string)):
	            return string.swapcase()
	        else:
	            return string.upper()
	    elif all((x.isupper() for x in string)):
	        return string.lower()
	    else:
	        return string
	if (__name__ == '__main__'):
	    print(main())
"
3329386,28009783,"def main():
   n, s  = map(int,input().split())
   y = [i for i in range(s, s+180) if i - sum([int(j) for j in str(i)]) >= s]
   a = y[0]
   print(max(n-a+1,0))
#   print(max(n - [i for i in range(s, s + 180) if i - sum([int(j) for j in str(i)]) >= s][0] + 1, 0))

if __name__ == ""__main__"":
    main()",17459,5416,62,6/24/17 21:00,9,2884,1,8,"[(True, '3', '3', 243420), (True, '0', '0', 243421), (True, '1', '1', 243422), (True, '0', '0', 243423), (True, '0', '0', 243424), (True, '0', '0', 243425), (True, '8991', '8991', 243426), (True, '0', '0', 243427), (True, '899999999999999991', '899999999999999991', 243428), (True, '989999999999999991', '989999999999999991', 243429), (True, '998999999999999991', '998999999999999991', 243430), (True, '999899999999999991', '999899999999999991', 243431), (True, '799999999999999991', '799999999999999991', 243432), (True, '1', '1', 243433), (True, '11', '11', 243434), (True, '11', '11', 243435), (True, '91', '91', 243436), (True, '0', '0', 243437), (True, '1', '1', 243438), (True, '0', '0', 243439), (True, '10', '10', 243440), (True, '1', '1', 243441), (True, '6189400069', '6189400069', 243442), (True, '0', '0', 243443), (True, '6', '6', 243444), (True, '1', '1', 243445), (True, '0', '0', 243446), (True, '10', '10', 243447), (True, '10', '10', 243448), (True, '8732', '8732', 243449), (True, '149737161', '149737161', 243450), (True, '4493', '4493', 243451), (True, '5246', '5246', 243452), (True, '9449', '9449', 243453), (True, '9728', '9728', 243454), (True, '10', '10', 243455), (True, '1', '1', 243456), (True, '1', '1', 243457), (True, '10', '10', 243458), (True, '0', '0', 243459), (True, '900000000000000061', '900000000000000061', 243460), (True, '5408107058', '5408107058', 243461), (True, '0', '0', 243462), (True, '200', '200', 243463), (True, '249939999986479', '249939999986479', 243464), (True, '10723999999880', '10723999999880', 243465), (True, '10', '10', 243466), (True, '14', '14', 243467), (True, '0', '0', 243468), (True, '0', '0', 243469), (True, '0', '0', 243470), (True, '0', '0', 243471), (True, '10', '10', 243472), (True, '0', '0', 243473), (True, '10', '10', 243474), (True, '2', '2', 243475), (True, '10', '10', 243476), (True, '10', '10', 243477), (True, '0', '0', 243478), (True, '1', '1', 243479), (True, '27', '27', 243480), (True, '0', '0', 243481), (True, '11557', '11557', 243482), (True, '177420173424564', '177420173424564', 243483), (True, '8975', '8975', 243484), (True, '19160458846177', '19160458846177', 243485), (True, '184303182172038', '184303182172038', 243486), (True, '0', '0', 243487)]",True,Accecpted,0.955119047930864,0.9794628751974724,False,0.0,False,"def func(*args):
	
	
	def main():
	    (n, s) = map(int, args[0].split())
	    y = [i for i in range(s, (s + 180)) if ((i - sum([int(j) for j in str(i)])) >= s)]
	    a = y[0]
	    print(max(((n - a) + 1), 0))
	if (__name__ == '__main__'):
	    main()
"
1309332,27087313,"word = input().strip().split("" "")
res = []
for i,s in enumerate(word):
	if len(word[0])==1 and i==0:
		res.append(s.capitalize())
	elif s.isupper():
		res.append(s.lower())
	elif s[0].islower() and s[1:].isupper():
		res.append(s.title())
	else:
		res.append(s)
print("" "".join(res))",22797,0,62,5/13/17 14:40,12,1187,2,8,"[(True, 'Caps', 'Caps', 141548), (True, 'Lock', 'Lock', 141549), (True, 'cAPSlOCK', 'cAPSlOCK', 141550), (True, 'CAPs', 'CAPs', 141551), (True, 'LoCK', 'LoCK', 141552), (True, 'oops', 'oops', 141553), (True, 'oops', 'oops', 141554), (True, 'A', 'A', 141555), (False, 'A', 'a', 141556), (True, 'Aa', 'Aa', 141557), (True, 'Zz', 'Zz', 141558), (True, 'Az', 'Az', 141559), (True, 'Za', 'Za', 141560), (True, 'aaa', 'aaa', 141561), (True, 'AAa', 'AAa', 141562), (True, 'AaR', 'AaR', 141563), (True, 'Tdr', 'Tdr', 141564), (True, 'Atf', 'Atf', 141565), (True, 'fYd', 'fYd', 141566), (True, 'dsA', 'dsA', 141567), (True, 'fru', 'fru', 141568), (True, 'Hybkf', 'Hybkf', 141569), (True, 'XweAR', 'XweAR', 141570), (True, 'mogqx', 'mogqx', 141571), (True, 'eOhEi', 'eOhEi', 141572), (True, 'nkdku', 'nkdku', 141573), (True, 'zcnko', 'zcnko', 141574), (True, 'lcccd', 'lcccd', 141575), (True, 'vwmvg', 'vwmvg', 141576), (True, 'lvchf', 'lvchf', 141577), (True, 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 141578), (True, 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 141579), (True, 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 141580), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141581), (True, 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 141582), (True, 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 141583), (True, 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 141584), (True, 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 141585), (True, 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 141586), (True, 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 141587), (True, 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 141588), (True, 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 141589), (True, 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 141590), (True, 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 141591), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141592), (True, 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 141593), (True, 'aBACABa', 'aBACABa', 141594), (True, 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 141595), (True, 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 141596), (True, 'Dddddddddddddd', 'Dddddddddddddd', 141597), (True, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 141598), (True, 'Z', 'Z', 141599), (True, 'az', 'az', 141600), (False, 'Z', 'z', 141601), (True, 'Aaaaa', 'Aaaaa', 141602), (False, 'F', 'f', 141603)]",False,Wrong Answer,0.9025139799587886,0.9794520547945206,False,0.0535714285714285,False,"def func(*args):
	
	word = args[0].strip().split(' ')
	res = []
	for (i, s) in enumerate(word):
	    if ((len(word[0]) == 1) and (i == 0)):
	        res.append(s.capitalize())
	    elif s.isupper():
	        res.append(s.lower())
	    elif (s[0].islower() and s[1:].isupper()):
	        res.append(s.title())
	    else:
	        res.append(s)
	print(' '.join(res))
"
1309333,27087344,"word = input().strip().split("" "")
res = []
for i,s in enumerate(word):
	if len(word[0])==1 and i==0:
		res.append(s.swapcase())
	elif s.isupper():
		res.append(s.lower())
	elif s[0].islower() and s[1:].isupper():
		res.append(s.title())
	else:
		res.append(s)
print("" "".join(res))",22797,12,62,5/13/17 14:43,12,1187,1,8,"[(True, 'Caps', 'Caps', 141548), (True, 'Lock', 'Lock', 141549), (True, 'cAPSlOCK', 'cAPSlOCK', 141550), (True, 'CAPs', 'CAPs', 141551), (True, 'LoCK', 'LoCK', 141552), (True, 'oops', 'oops', 141553), (True, 'oops', 'oops', 141554), (True, 'A', 'A', 141555), (True, 'a', 'a', 141556), (True, 'Aa', 'Aa', 141557), (True, 'Zz', 'Zz', 141558), (True, 'Az', 'Az', 141559), (True, 'Za', 'Za', 141560), (True, 'aaa', 'aaa', 141561), (True, 'AAa', 'AAa', 141562), (True, 'AaR', 'AaR', 141563), (True, 'Tdr', 'Tdr', 141564), (True, 'Atf', 'Atf', 141565), (True, 'fYd', 'fYd', 141566), (True, 'dsA', 'dsA', 141567), (True, 'fru', 'fru', 141568), (True, 'Hybkf', 'Hybkf', 141569), (True, 'XweAR', 'XweAR', 141570), (True, 'mogqx', 'mogqx', 141571), (True, 'eOhEi', 'eOhEi', 141572), (True, 'nkdku', 'nkdku', 141573), (True, 'zcnko', 'zcnko', 141574), (True, 'lcccd', 'lcccd', 141575), (True, 'vwmvg', 'vwmvg', 141576), (True, 'lvchf', 'lvchf', 141577), (True, 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 141578), (True, 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 141579), (True, 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 141580), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141581), (True, 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 141582), (True, 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 141583), (True, 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 141584), (True, 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 141585), (True, 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 141586), (True, 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 141587), (True, 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 141588), (True, 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 141589), (True, 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 141590), (True, 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 141591), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141592), (True, 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 141593), (True, 'aBACABa', 'aBACABa', 141594), (True, 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 141595), (True, 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 141596), (True, 'Dddddddddddddd', 'Dddddddddddddd', 141597), (True, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 141598), (True, 'Z', 'Z', 141599), (True, 'az', 'az', 141600), (True, 'z', 'z', 141601), (True, 'Aaaaa', 'Aaaaa', 141602), (True, 'f', 'f', 141603)]",True,Accecpted,0.9025139799587886,0.9794520547945206,False,0.0,False,"def func(*args):
	
	word = args[0].strip().split(' ')
	res = []
	for (i, s) in enumerate(word):
	    if ((len(word[0]) == 1) and (i == 0)):
	        res.append(s.swapcase())
	    elif s.isupper():
	        res.append(s.lower())
	    elif (s[0].islower() and s[1:].isupper()):
	        res.append(s.title())
	    else:
	        res.append(s)
	print(' '.join(res))
"
877151,26318551,"k, r=map(int, input().split())
i=1
while (i*k-r)%10==0 and (i*k)%10==0:
    i+=1
print(i)",991,4480,46,4/12/17 16:33,9,814,2,8,"[(False, '1', '9', 113435), (True, '1', '1', 113436), (False, '1', '2', 113437), (True, '1', '1', 113438), (False, '1', '9', 113439), (True, '1', '1', 113440), (True, '1', '1', 113441), (True, '1', '1', 113442), (False, '1', '2', 113443), (True, '1', '1', 113444), (False, '1', '2', 113445), (False, '1', '2', 113446), (False, '1', '3', 113447), (False, '1', '4', 113448), (False, '1', '5', 113449), (False, '1', '6', 113450), (False, '1', '7', 113451), (False, '1', '8', 113452), (False, '1', '9', 113453), (False, '1', '5', 113454), (False, '1', '3', 113455), (False, '1', '7', 113456), (False, '1', '4', 113457), (False, '1', '3', 113458), (False, '1', '4', 113459), (False, '1', '5', 113460), (False, '1', '6', 113461), (False, '1', '7', 113462), (False, '1', '8', 113463), (True, '1', '1', 113464), (True, '1', '1', 113465), (True, '1', '1', 113466), (True, '1', '1', 113467), (True, '1', '1', 113468), (True, '1', '1', 113469), (True, '1', '1', 113470), (False, '1', '8', 113471), (False, '1', '7', 113472), (False, '1', '4', 113473), (False, '1', '5', 113474), (False, '1', '5', 113475), (True, '1', '1', 113476), (False, '1', '2', 113477), (False, '1', '2', 113478), (True, '1', '1', 113479), (False, '1', '5', 113480), (True, '1', '1', 113481), (False, '1', '5', 113482), (False, '1', '5', 113483), (False, '1', '5', 113484), (False, '1', '5', 113485), (False, '1', '5', 113486), (False, '1', '5', 113487), (True, '1', '1', 113488)]",False,Wrong Answer,0.4671379777282001,0.979381443298969,False,0.6851851851851852,False,"def func(*args):
	
	(k, r) = map(int, args[0].split())
	i = 1
	while (((((i * k) - r) % 10) == 0) and (((i * k) % 10) == 0)):
	    i += 1
	print(i)
"
877152,26318575,"k, r=map(int, input().split())
i=1
while (i*k-r)%10!=0 and (i*k)%10!=0:
    i+=1
print(i)",991,5436,62,4/12/17 16:34,9,814,1,8,"[(True, '9', '9', 113435), (True, '1', '1', 113436), (True, '2', '2', 113437), (True, '1', '1', 113438), (True, '9', '9', 113439), (True, '1', '1', 113440), (True, '1', '1', 113441), (True, '1', '1', 113442), (True, '2', '2', 113443), (True, '1', '1', 113444), (True, '2', '2', 113445), (True, '2', '2', 113446), (True, '3', '3', 113447), (True, '4', '4', 113448), (True, '5', '5', 113449), (True, '6', '6', 113450), (True, '7', '7', 113451), (True, '8', '8', 113452), (True, '9', '9', 113453), (True, '5', '5', 113454), (True, '3', '3', 113455), (True, '7', '7', 113456), (True, '4', '4', 113457), (True, '3', '3', 113458), (True, '4', '4', 113459), (True, '5', '5', 113460), (True, '6', '6', 113461), (True, '7', '7', 113462), (True, '8', '8', 113463), (True, '1', '1', 113464), (True, '1', '1', 113465), (True, '1', '1', 113466), (True, '1', '1', 113467), (True, '1', '1', 113468), (True, '1', '1', 113469), (True, '1', '1', 113470), (True, '8', '8', 113471), (True, '7', '7', 113472), (True, '4', '4', 113473), (True, '5', '5', 113474), (True, '5', '5', 113475), (True, '1', '1', 113476), (True, '2', '2', 113477), (True, '2', '2', 113478), (True, '1', '1', 113479), (True, '5', '5', 113480), (True, '1', '1', 113481), (True, '5', '5', 113482), (True, '5', '5', 113483), (True, '5', '5', 113484), (True, '5', '5', 113485), (True, '5', '5', 113486), (True, '5', '5', 113487), (True, '1', '1', 113488)]",True,Accecpted,0.4671379777282001,0.979381443298969,False,0.0,False,"def func(*args):
	
	(k, r) = map(int, args[0].split())
	i = 1
	while (((((i * k) - r) % 10) != 0) and (((i * k) % 10) != 0)):
	    i += 1
	print(i)
"
2727575,26682729,"s = input()
a,b=0,0
for c in s:
    if c.isupper():
        a=a+1
    else:
        b=b+1

if a>b:
    print(s.upper())
elif a<b:
    print(s.lower())
else:
    print(s.lower())",1332,5412,124,4/26/17 16:32,14,2340,1,8,"[(True, 'house', 'house', 209205), (True, 'VIP', 'VIP', 209206), (True, 'matrix', 'matrix', 209207), (True, 'bnhwpnpawg', 'bnhwpnpawg', 209208), (True, 'VTYGP', 'VTYGP', 209209), (True, 'chnenu', 'chnenu', 209210), (True, 'erpzgrodyu', 'erpzgrodyu', 209211), (True, 'KSXBXWPEBH', 'KSXBXWPEBH', 209212), (True, 'qvxpqullmcbegsdskddortcvxyqlbvxmmkhevovnezubvpvnrcajpxraeaxizgaowtfkzywvhnbgzsxbhkaipcmoumtikkiyyaiv', 'qvxpqullmcbegsdskddortcvxyqlbvxmmkhevovnezubvpvnrcajpxraeaxizgaowtfkzywvhnbgzsxbhkaipcmoumtikkiyyaiv', 209213), (True, 'amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd', 'amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd', 209214), (True, 'isagfjfaryfblopqdshwgmcnkmftlvfugnjewgwnblxuiatxekqiettmmjgydwcpafqrppdsrrrtguinqbgmzzfqwonkpgpcwenv', 'isagfjfaryfblopqdshwgmcnkmftlvfugnjewgwnblxuiatxekqiettmmjgydwcpafqrppdsrrrtguinqbgmzzfqwonkpgpcwenv', 209215), (True, 'xhrpxzeghsocjpicuixskfuzupytsgjsdiybcmnmnbpndbxlxbzhbfnqvwcffvrdhtickyqhupmcehlsyvncqmfhautvxudqdhgg', 'xhrpxzeghsocjpicuixskfuzupytsgjsdiybcmnmnbpndbxlxbzhbfnqvwcffvrdhtickyqhupmcehlsyvncqmfhautvxudqdhgg', 209216), (True, 'RJIQZMJCIMSNDBOHBRAWIENODSALETAKGKPYUFGVEFGCBRENZGADKCETQJLJTMTTLONPEKCOVDZEBZDKZGGWFSXHAPMJKDBUCEAK', 'RJIQZMJCIMSNDBOHBRAWIENODSALETAKGKPYUFGVEFGCBRENZGADKCETQJLJTMTTLONPEKCOVDZEBZDKZGGWFSXHAPMJKDBUCEAK', 209217), (True, 'DWLWOBHNMMGTFOLFAECKBRNNGLYLYDXTGTVRLMEESZOIUATZZZXUFUZDLSJXMEVRTESSFBWLNZZCLCQWEVNNUCXYVHNGNXHCBDFW', 'DWLWOBHNMMGTFOLFAECKBRNNGLYLYDXTGTVRLMEESZOIUATZZZXUFUZDLSJXMEVRTESSFBWLNZZCLCQWEVNNUCXYVHNGNXHCBDFW', 209218), (True, 'NYCNHJWGBOCOTSPETKKHVWFGAQYNHOVJWJHCIEFOUQZXOYUIEQDZALFKTEHTVDBVJMEUBJUBCMNVPWGDPNCHQHZJRCHYRFPVIGUB', 'NYCNHJWGBOCOTSPETKKHVWFGAQYNHOVJWJHCIEFOUQZXOYUIEQDZALFKTEHTVDBVJMEUBJUBCMNVPWGDPNCHQHZJRCHYRFPVIGUB', 209219), (True, 'igxoixiecetohtgjgbqzvlaobkhstejxdklghowtvwunnnvauriohuspsdmpzckprwajyxldoyckgjivjpmbfqtszmtocovxwge', 'igxoixiecetohtgjgbqzvlaobkhstejxdklghowtvwunnnvauriohuspsdmpzckprwajyxldoyckgjivjpmbfqtszmtocovxwge', 209220), (True, 'ykkekrsqolzryiwsmdlnbmfautxxxauoojrddvwklgnlyrfcvhorrzbmtcrvpaypqhcffdqhwziipyyskcmztjprjqvmzzqhqnw', 'ykkekrsqolzryiwsmdlnbmfautxxxauoojrddvwklgnlyrfcvhorrzbmtcrvpaypqhcffdqhwziipyyskcmztjprjqvmzzqhqnw', 209221), (True, 'yqomlkyaoruqqucqzcdymivdhgwzffrmuvtawcherfpmnryrikgqrciokgajamehmcxgerpudvsqyonjonsxgbnefftzmygncks', 'yqomlkyaoruqqucqzcdymivdhgwzffrmuvtawcherfpmnryrikgqrciokgajamehmcxgerpudvsqyonjonsxgbnefftzmygncks', 209222), (True, 'CDOZDPBVVVHNBJVBYHEOXWFLJKRWJCAJMIFCOZWWYFKVWOGTVJCUUSIGDQFKUMEWJTDYITVEEIAYBWRHOMRWMPDIPJWIUXFNWUZ', 'CDOZDPBVVVHNBJVBYHEOXWFLJKRWJCAJMIFCOZWWYFKVWOGTVJCUUSIGDQFKUMEWJTDYITVEEIAYBWRHOMRWMPDIPJWIUXFNWUZ', 209223), (True, 'WHIUVEXHVOOIJIDVJVPQUBJMEVPMPDKQWJKFBZSGSKUXMIPPMJWUCKZCPXOSODCJAAAKVLXPBIIGSIAUVIILYLNNQLYUCZIIHQG', 'WHIUVEXHVOOIJIDVJVPQUBJMEVPMPDKQWJKFBZSGSKUXMIPPMJWUCKZCPXOSODCJAAAKVLXPBIIGSIAUVIILYLNNQLYUCZIIHQG', 209224), (True, 'VGHUNFOXKETUYMZDJNGTAOIOANYXSGYNFOGOFFLDAWEUKYFOZXCJTCAFXZYLQZERYZLRSQXYQGAPCSUDPMEYTNCTTTMFAGVDWBO', 'VGHUNFOXKETUYMZDJNGTAOIOANYXSGYNFOGOFFLDAWEUKYFOZXCJTCAFXZYLQZERYZLRSQXYQGAPCSUDPMEYTNCTTTMFAGVDWBO', 209225), (True, 'EDUANHCQDOCJHFONTTSWBUJSTTIXBIXMAIUFSGFLXWAYIURTVAVZPYQDLAWIGCLMPHXCEFCJPFAAHXVNGQUFNHADAIUAZIDMHDD', 'EDUANHCQDOCJHFONTTSWBUJSTTIXBIXMAIUFSGFLXWAYIURTVAVZPYQDLAWIGCLMPHXCEFCJPFAAHXVNGQUFNHADAIUAZIDMHDD', 209226), (True, 'ebwovsnlytwwxrnovgugogtjahnmatomubebyxakas', 'ebwovsnlytwwxrnovgugogtjahnmatomubebyxakas', 209227), (True, 'AORNNDKTRLRVGDPXJKXFTPFPOPUZRLQUMRXSSSKVBM', 'AORNNDKTRLRVGDPXJKXFTPFPOPUZRLQUMRXSSSKVBM', 209228), (True, 'dbbzjcwqevgyheeuhjawrhbdpsnplijbwtdibqrrheebfxqcvn', 'dbbzjcwqevgyheeuhjawrhbdpsnplijbwtdibqrrheebfxqcvn', 209229), (True, 't', 't', 209230), (True, 'N', 'N', 209231), (True, 'kv', 'kv', 209232), (True, 'ur', 'ur', 209233), (True, 'CN', 'CN', 209234)]",True,Accecpted,0.8375717919273554,0.979381443298969,False,0.0,False,"def func(*args):
	
	s = args[0]
	(a, b) = (0, 0)
	for c in s:
	    if c.isupper():
	        a = (a + 1)
	    else:
	        b = (b + 1)
	if (a > b):
	    print(s.upper())
	elif (a < b):
	    print(s.lower())
	else:
	    print(s.lower())
"
258387,20976292,"n=int(input())
k=int(((2*n)**(1/2)))
while (k*(k+1))//2>=n:
    k-=1
print(n-(k*(k+1)//2))",3152,0,77,9/28/16 21:10,9,217,1,8,"[(True, '2', '2', 65802), (True, '2', '2', 65803), (True, '4', '4', 65804), (True, '10', '10', 65805), (True, '1', '1', 65806), (True, '88209', '88209', 65807), (True, '255708', '255708', 65808), (True, '593358', '593358', 65809), (True, '1414213', '1414213', 65810), (True, '1', '1', 65811), (True, '1749820', '1749820', 65812), (True, '1', '1', 65813), (True, '312', '312', 65814), (True, '313', '313', 65815), (True, '314', '314', 65816), (True, '309', '309', 65817), (True, '1', '1', 65818), (True, '310', '310', 65819), (True, '311', '311', 65820), (True, '315', '315', 65821), (True, '316', '316', 65822), (True, '317', '317', 65823), (True, '318', '318', 65824), (True, '31', '31', 65825), (True, '1', '1', 65826), (True, '2', '2', 65827), (True, '124', '124', 65828), (True, '258', '258', 65829), (True, '14142135', '14142135', 65830), (True, '3', '3', 65831), (True, '2', '2', 65832), (True, '7', '7', 65833), (True, '9', '9', 65834), (True, '745', '745', 65835), (True, '12', '12', 65836), (True, '11', '11', 65837), (True, '10', '10', 65838)]",True,Accecpted,0.537284965911771,0.979381443298969,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	k = int(((2 * n) ** (1 / 2)))
	while (((k * (k + 1)) // 2) >= n):
	    k -= 1
	print((n - ((k * (k + 1)) // 2)))
"
258386,20976071,"n=int(input())
k=int(2*(n**(1/2)))
while (k*(k+1))//2>=n:
    k-=1
print(n-(k*(k+1)//2))",3152,0,1000,9/28/16 21:00,9,217,3,8,"[(True, '2', '2', 65802), (True, '2', '2', 65803), (True, '4', '4', 65804), (True, '10', '10', 65805), (True, '1', '1', 65806), (True, '88209', '88209', 65807), (True, '255708', '255708', 65808), (True, '593358', '593358', 65809), (True, '1414213', '1414213', 65810), (True, '1', '1', 65811), (True, '1749820', '1749820', 65812), (True, '1', '1', 65813), (True, '312', '312', 65814), (True, '313', '313', 65815), (True, '314', '314', 65816), (True, '309', '309', 65817), (True, '1', '1', 65818), (True, '310', '310', 65819), (True, '311', '311', 65820), (True, '315', '315', 65821), (True, '316', '316', 65822), (True, '317', '317', 65823), (True, '318', '318', 65824), (True, '31', '31', 65825), (True, '1', '1', 65826), (True, '2', '2', 65827), (True, '124', '124', 65828), (True, '258', '258', 65829), (True, '14142135', '14142135', 65830), (True, '3', '3', 65831), (True, '2', '2', 65832), (True, '7', '7', 65833), (True, '9', '9', 65834), (True, '745', '745', 65835), (True, '12', '12', 65836), (True, '11', '11', 65837), (True, '10', '10', 65838)]",True,Time Limit,0.537284965911771,0.979381443298969,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	k = int((2 * (n ** (1 / 2))))
	while (((k * (k + 1)) // 2) >= n):
	    k -= 1
	print((n - ((k * (k + 1)) // 2)))
"
1033577,27004239,"x=input()
a=x[x.index('R')%4::4]
b=x[x.index('B')%4::4]
c=x[x.index('Y')%4::4]
d=x[x.index('G')%4::4]

print(a.count('!'),b.count('!'),c.count('!'),d.count('!'))",88,0,62,5/11/17 2:39,13,957,1,8,"[(True, '0 0 0 0', '0 0 0 0', 124954), (True, '0 1 0 0', '0 1 0 0', 124955), (True, '1 1 1 1', '1 1 1 1', 124956), (True, '2 1 1 0', '2 1 1 0', 124957), (True, '0 0 0 0', '0 0 0 0', 124958), (True, '20 18 19 18', '20 18 19 18', 124959), (True, '3 5 2 1', '3 5 2 1', 124960), (True, '0 0 0 0', '0 0 0 0', 124961), (True, '0 0 0 1', '0 0 0 1', 124962), (True, '0 0 0 0', '0 0 0 0', 124963), (True, '0 0 0 0', '0 0 0 0', 124964), (True, '0 0 0 0', '0 0 0 0', 124965), (True, '0 0 0 0', '0 0 0 0', 124966), (True, '1 1 1 1', '1 1 1 1', 124967), (True, '2 1 1 1', '2 1 1 1', 124968), (True, '1 2 1 2', '1 2 1 2', 124969), (True, '2 2 1 2', '2 2 1 2', 124970), (True, '2 2 2 2', '2 2 2 2', 124971), (True, '24 24 24 24', '24 24 24 24', 124972), (True, '24 24 24 0', '24 24 24 0', 124973), (True, '24 24 0 24', '24 24 0 24', 124974), (True, '24 0 24 24', '24 0 24 24', 124975), (True, '0 24 24 24', '0 24 24 24', 124976), (True, '0 1 0 2', '0 1 0 2', 124977), (True, '1 0 3 1', '1 0 3 1', 124978), (True, '4 3 2 1', '4 3 2 1', 124979), (True, '3 6 6 4', '3 6 6 4', 124980), (True, '1 5 9 7', '1 5 9 7', 124981), (True, '5 7 5 7', '5 7 5 7', 124982), (True, '5 13 12 13', '5 13 12 13', 124983), (True, '14 2 13 11', '14 2 13 11', 124984), (True, '0 1 2 3', '0 1 2 3', 124985), (True, '20 20 21 21', '20 20 21 21', 124986), (True, '15 10 5 0', '15 10 5 0', 124987), (True, '23 24 23 24', '23 24 23 24', 124988), (True, '0 24 0 24', '0 24 0 24', 124989), (True, '13 12 17 20', '13 12 17 20', 124990), (True, '7 8 22 15', '7 8 22 15', 124991), (True, '11 14 0 24', '11 14 0 24', 124992), (True, '10 8 9 8', '10 8 9 8', 124993), (True, '15 10 4 0', '15 10 4 0', 124994), (True, '22 24 23 23', '22 24 23 23', 124995), (True, '19 17 18 17', '19 17 18 17', 124996), (True, '14 9 3 0', '14 9 3 0', 124997), (True, '21 23 22 22', '21 23 22 22', 124998), (True, '18 16 17 16', '18 16 17 16', 124999), (True, '10 10 15 18', '10 10 15 18', 125000), (True, '5 5 20 12', '5 5 20 12', 125001), (True, '8 11 0 21', '8 11 0 21', 125002), (True, '7 5 6 5', '7 5 6 5', 125003), (True, '3 3 3 3', '3 3 3 3', 125004), (True, '7 7 7 7', '7 7 7 7', 125005), (True, '0 0 0 0', '0 0 0 0', 125006), (True, '3 2 2 2', '3 2 2 2', 125007), (True, '0 0 1 0', '0 0 1 0', 125008), (True, '9 9 9 9', '9 9 9 9', 125009), (True, '2 2 1 2', '2 2 1 2', 125010), (True, '24 24 24 24', '24 24 24 24', 125011), (True, '3 3 3 3', '3 3 3 3', 125012), (True, '4 4 4 4', '4 4 4 4', 125013), (True, '2 1 2 2', '2 1 2 2', 125014), (True, '7 6 7 6', '7 6 7 6', 125015), (True, '3 3 3 3', '3 3 3 3', 125016), (True, '8 7 8 7', '8 7 8 7', 125017), (True, '10 10 10 10', '10 10 10 10', 125018)]",True,Accecpted,6.206021746903507e-78,0.9793510324483776,False,0.0,False,"def func(*args):
	
	x = args[0]
	a = x[(x.index('R') % 4)::4]
	b = x[(x.index('B') % 4)::4]
	c = x[(x.index('Y') % 4)::4]
	d = x[(x.index('G') % 4)::4]
	print(a.count('!'), b.count('!'), c.count('!'), d.count('!'))
"
1033576,27004232,"x=input()
a=x[x.index('R')%4::4]
b=x[x.index('B')%4::4]
c=x[x.index('Y')::4]
d=x[x.index('G')::4]
print(a.count('!'),b.count('!'),c.count('!'),d.count('!'))",88,0,61,5/11/17 2:38,11,957,2,8,"[(True, '0 0 0 0', '0 0 0 0', 124954), (True, '0 1 0 0', '0 1 0 0', 124955), (False, '1 1 0 0', '1 1 1 1', 124956), (False, '2 1 0 0', '2 1 1 0', 124957), (True, '0 0 0 0', '0 0 0 0', 124958), (False, '20 18 19 16', '20 18 19 18', 124959), (False, '3 5 1 1', '3 5 2 1', 124960), (True, '0 0 0 0', '0 0 0 0', 124961), (True, '0 0 0 1', '0 0 0 1', 124962), (True, '0 0 0 0', '0 0 0 0', 124963), (True, '0 0 0 0', '0 0 0 0', 124964), (True, '0 0 0 0', '0 0 0 0', 124965), (True, '0 0 0 0', '0 0 0 0', 124966), (True, '1 1 1 1', '1 1 1 1', 124967), (False, '2 1 0 0', '2 1 1 1', 124968), (False, '1 2 1 1', '1 2 1 2', 124969), (False, '2 2 1 0', '2 2 1 2', 124970), (False, '2 2 0 0', '2 2 2 2', 124971), (False, '24 24 20 3', '24 24 24 24', 124972), (False, '24 24 17 0', '24 24 24 0', 124973), (False, '24 24 0 10', '24 24 0 24', 124974), (False, '24 0 6 19', '24 0 24 24', 124975), (False, '0 24 24 4', '0 24 24 24', 124976), (False, '0 1 0 1', '0 1 0 2', 124977), (False, '1 0 1 1', '1 0 3 1', 124978), (True, '4 3 2 1', '4 3 2 1', 124979), (False, '3 6 5 3', '3 6 6 4', 124980), (False, '1 5 1 3', '1 5 9 7', 124981), (False, '5 7 5 5', '5 7 5 7', 124982), (False, '5 13 10 13', '5 13 12 13', 124983), (False, '14 2 9 11', '14 2 13 11', 124984), (False, '0 1 1 3', '0 1 2 3', 124985), (False, '20 20 4 19', '20 20 21 21', 124986), (False, '15 10 4 0', '15 10 5 0', 124987), (False, '23 24 22 7', '23 24 23 24', 124988), (False, '0 24 0 15', '0 24 0 24', 124989), (False, '13 12 17 14', '13 12 17 20', 124990), (False, '7 8 11 15', '7 8 22 15', 124991), (False, '11 14 0 17', '11 14 0 24', 124992), (False, '10 8 9 7', '10 8 9 8', 124993), (False, '15 10 3 0', '15 10 4 0', 124994), (False, '22 24 23 19', '22 24 23 23', 124995), (False, '19 17 17 16', '19 17 18 17', 124996), (True, '14 9 3 0', '14 9 3 0', 124997), (False, '21 23 20 18', '21 23 22 22', 124998), (False, '18 16 16 15', '18 16 17 16', 124999), (False, '10 10 15 17', '10 10 15 18', 125000), (False, '5 5 13 12', '5 5 20 12', 125001), (False, '8 11 0 1', '8 11 0 21', 125002), (False, '7 5 5 5', '7 5 6 5', 125003), (False, '3 3 2 3', '3 3 3 3', 125004), (False, '7 7 7 5', '7 7 7 7', 125005), (True, '0 0 0 0', '0 0 0 0', 125006), (False, '3 2 0 0', '3 2 2 2', 125007), (True, '0 0 1 0', '0 0 1 0', 125008), (False, '9 9 3 0', '9 9 9 9', 125009), (True, '2 2 1 2', '2 2 1 2', 125010), (False, '24 24 18 12', '24 24 24 24', 125011), (False, '3 3 0 2', '3 3 3 3', 125012), (False, '4 4 2 1', '4 4 4 4', 125013), (False, '2 1 0 0', '2 1 2 2', 125014), (False, '7 6 2 4', '7 6 7 6', 125015), (False, '3 3 1 0', '3 3 3 3', 125016), (False, '8 7 2 5', '8 7 8 7', 125017), (False, '10 10 2 4', '10 10 10 10', 125018)]",False,Wrong Answer,6.206021746903507e-78,0.9793510324483776,False,0.7692307692307693,False,"def func(*args):
	
	x = args[0]
	a = x[(x.index('R') % 4)::4]
	b = x[(x.index('B') % 4)::4]
	c = x[x.index('Y')::4]
	d = x[x.index('G')::4]
	print(a.count('!'), b.count('!'), c.count('!'), d.count('!'))
"
2253050,28129581,"nAndTStr = input()

n = int(nAndTStr.split()[0])
t = int(nAndTStr.split()[1])

que = input()

def shift1Second(theQue) :
	queque = list(theQue)
	jump = False
	for i in range(n):
		if queque[i]=='G' and i>0 :
			if queque[i-1]=='B' and not jump:
				queque[i]='B'
				queque[i-1]='G'
				jump = True
		else :
			jump = False
	return ''.join(queque)
				
for i in range(t) :
	que = shift1Second(que)

print(que)",1965,5408,154,6/29/17 5:04,24,1975,1,8,"[(True, 'GBGGB', 'GBGGB', 188827), (True, 'GGBGB', 'GGBGB', 188828), (True, 'GGGB', 'GGGB', 188829), (True, 'BB', 'BB', 188830), (True, 'GB', 'GB', 188831), (True, 'GBBGBB', 'GBBGBB', 188832), (True, 'GGBGBBBB', 'GGBGBBBB', 188833), (True, 'GBBBBBGBBB', 'GBBBBBGBBB', 188834), (True, 'GGGGGGGGBGGBGGBBBBBBBB', 'GGGGGGGGBGGBGGBBBBBBBB', 188835), (True, 'GGBGBGBGBGBGGGBBGBGBGBGBBBGBGBGBGBGBGBGBGBGBGGBGBB', 'GGBGBGBGBGBGGGBBGBGBGBGBBBGBGBGBGBGBGBGBGBGBGGBGBB', 188836), (True, 'GGGGGGGGGGGGBGGBGBGBGBGBGGGGGGBGBGBGBGBGBGGBGGBGBB', 'GGGGGGGGGGGGBGGBGBGBGBGBGGGGGGBGBGBGBGBGBGGBGGBGBB', 188837), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBBBBB', 188838), (True, 'GGGGGGGGGGBBBBBBBBBB', 'GGGGGGGGGGBBBBBBBBBB', 188839), (True, 'GGGGGGGBGBGBGGGGGBGBBBBBBBB', 'GGGGGGGBGBGBGGGGGBGBBBBBBBB', 188840), (True, 'GGGGGGGGGGGBGGGGGBBGBGBGBGBGBGBGBGBGBGBGBBBBBB', 'GGGGGGGGGGGBGGGGGBBGBGBGBGBGBGBGBGBGBGBGBBBBBB', 188841), (True, 'GGGGBBBBBGBGBGBGBBBGBBBBBBGBBBBBBBBBBBBBBBBBBBBBBB', 'GGGGBBBBBGBGBGBGBBBGBBBBBBGBBBBBBBBBBBBBBBBBBBBBBB', 188842), (True, 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188843), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 188844), (True, 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBB', 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBB', 188845), (True, 'GGGGGGGGGGGGGGGGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 'GGGGGGGGGGGGGGGGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 188846), (True, 'B', 'B', 188847), (True, 'G', 'G', 188848), (True, 'B', 'B', 188849), (True, 'G', 'G', 188850), (True, 'GGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'GGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188851), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBB', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBB', 188852), (True, 'GGGBBB', 'GGGBBB', 188853), (True, 'GGBBBBGBGBGBGGGBGBGGGBGBBB', 'GGBBBBGBGBGBGGGBGBGGGBGBBB', 188854), (True, 'GGGGBGBGGGBBBBBGBGBGBGGGBGGBGBGBGBGBGBGBGBBBBB', 'GGGGBGBGGGBBBBBGBGBGBGGGBGGBGBGBGBGBGBGBGBBBBB', 188855), (True, 'GBBGBGBGBGBGBGBBBBGBBGBBBBBBBBBGBBGBBBBBBBBB', 'GBBGBGBGBGBGBGBBBBGBBGBBBBBBBBBGBBGBBBBBBBBB', 188856), (True, 'GGGGGGGGGGBBBBBBBBBB', 'GGGGGGGGGGBBBBBBBBBB', 188857), (True, 'GGGGGGGGGGGGGGGBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGBBBBBBBBBBBBBBB', 188858), (True, 'GGGGGGGGGGGBBBBBB', 'GGGGGGGGGGGBBBBBB', 188859), (True, 'GGGGGGGGGGGGGGGGGGBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGBBBBBBBBBBBB', 188860), (True, 'GGGGGGGGGGGGBBBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGBBBBBBBBBBBBBBBBBBB', 188861), (True, 'GB', 'GB', 188862), (True, 'GGGGGBBB', 'GGGGGBBB', 188863), (True, 'GGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBB', 188864), (True, 'GGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBB', 188865), (True, 'GGGGGGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188866), (True, 'GGGGGGGGGG', 'GGGGGGGGGG', 188867), (True, 'BBBBBBBBBB', 'BBBBBBBBBB', 188868), (True, 'GGGGGBBBBB', 'GGGGGBBBBB', 188869), (True, 'B', 'B', 188870)]",True,Accecpted,1.0,0.979214780600462,False,0.0,False,"def func(*args):
	
	nAndTStr = args[0]
	n = int(nAndTStr.split()[0])
	t = int(nAndTStr.split()[1])
	que = args[1]
	
	def shift1Second(theQue):
	    queque = list(theQue)
	    jump = False
	    for i in range(n):
	        if ((queque[i] == 'G') and (i > 0)):
	            if ((queque[(i - 1)] == 'B') and (not jump)):
	                queque[i] = 'B'
	                queque[(i - 1)] = 'G'
	                jump = True
	        else:
	            jump = False
	    return ''.join(queque)
	for i in range(t):
	    que = shift1Second(que)
	print(que)
"
2253048,28129403,"nAndTStr = input()

n = int(nAndTStr.split()[0])
t = int(nAndTStr.split()[1])

que = input()

def shift1Second(theQue) :
	queque = list(theQue)
	jump = False
	for i in range(n):
		if queque[i]=='G' and i>0 :
			if queque[i-1]=='B' and not jump:
				queque[i]='B'
				queque[i-1]='G'
				jump = True
			else :
				jump = False
	return ''.join(queque)
				
for i in range(t) :
	que = shift1Second(que)

print(que)",1965,5436,124,6/29/17 4:49,24,1975,2,8,"[(True, 'GBGGB', 'GBGGB', 188827), (True, 'GGBGB', 'GGBGB', 188828), (True, 'GGGB', 'GGGB', 188829), (True, 'BB', 'BB', 188830), (True, 'GB', 'GB', 188831), (False, 'GBBBBG', 'GBBGBB', 188832), (False, 'GBBGBGBB', 'GGBGBBBB', 188833), (False, 'GBBBBBBBGB', 'GBBBBBGBBB', 188834), (False, 'GGGGGGGGBGBGBBGGBBBBBB', 'GGGGGGGGBGGBGGBBBBBBBB', 188835), (False, 'GGBBBGBBGGGGGGBBBBGGBBGGBBBBBGBGGGGBBBGBGGBGGGBGBB', 'GGBGBGBGBGBGGGBBGBGBGBGBBBGBGBGBGBGBGBGBGBGBGGBGBB', 188836), (False, 'GGGGGGGGGGBGBBBGGGBGGBGGGGGBBBGGBBGBGGGGGGGBGGBGBB', 'GGGGGGGGGGGGBGGBGBGBGBGBGGGGGGBGBGBGBGBGBGGBGGBGBB', 188837), (False, 'GGGGGGGGGGGGGGGGGGBBGBBBGGGBBBGBGGBGBGGGGBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBBBBB', 188838), (False, 'GGGGGGGGGBBBBGBBBBBB', 'GGGGGGGGGGBBBBBBBBBB', 188839), (False, 'GGGGBGBGGGGBGGGGGBBBBBGBBBB', 'GGGGGGGBGBGBGGGGGBGBBBBBBBB', 188840), (False, 'GGGGGGGGGGBBGGGBBBGBGBGBGBBBGGBGBGGGGGBGGBBBBB', 'GGGGGGGGGGGBGGGGGBBGBGBGBGBGBGBGBGBGBGBGBBBBBB', 188841), (False, 'GGGBBBBGBBGBBBBGGGBBBBGBBBBBBGBBBBBBBBBBBBBBBBBBBB', 'GGGGBBBBBGBGBGBGBBBGBBBBBBGBBBBBBBBBBBBBBBBBBBBBBB', 188842), (True, 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188843), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 188844), (True, 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBB', 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBB', 188845), (True, 'GGGGGGGGGGGGGGGGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 'GGGGGGGGGGGGGGGGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 188846), (True, 'B', 'B', 188847), (True, 'G', 'G', 188848), (True, 'B', 'B', 188849), (True, 'G', 'G', 188850), (False, 'GGGGBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'GGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188851), (False, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGBBGGGGGGGGGGGGGGGGGGBBB', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBB', 188852), (True, 'GGGBBB', 'GGGBBB', 188853), (False, 'GGBBBBBBGBGGGGBBGGGGBBGGBB', 'GGBBBBGBGBGBGGGBGBGGGBGBBB', 188854), (False, 'GGGBGBGGGBBGBBBBGBGBGGGGBGBGBGGBBBGGGBBGBBGBBB', 'GGGGBGBGGGBBBBBGBGBGBGGGBGGBGBGBGBGBGBGBGBBBBB', 188855), (False, 'GBBBGBBBBBBBGGGGBBBGGBBBBBBGBBBBBGBBBBBBGBBB', 'GBBGBGBGBGBGBGBBBBGBBGBBBBBBBBBGBBGBBBBBBBBB', 188856), (False, 'GGGGGGGGGBBBBGBBBBBB', 'GGGGGGGGGGBBBBBBBBBB', 188857), (False, 'GGGGGGGGGGBBBGGGBGBBGBBBBBBBBB', 'GGGGGGGGGGGGGGGBBBBBBBBBBBBBBB', 188858), (True, 'GGGGGGGGGGGBBBBBB', 'GGGGGGGGGGGBBBBBB', 188859), (True, 'GGGGGGGGGGGGGGGGGGBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGBBBBBBBBBBBB', 188860), (False, 'GGGGGGGGGBGBBBBGGBBBBBBBBBBBBBB', 'GGGGGGGGGGGGBBBBBBBBBBBBBBBBBBB', 188861), (True, 'GB', 'GB', 188862), (True, 'GGGGGBBB', 'GGGGGBBB', 188863), (False, 'GGGGGGGGGGBBBBGGGGGBBBGGGGGGBBBBBB', 'GGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBB', 188864), (False, 'GGGGBBBBGBGGGGGGGGBBGBBGGGBBBBBBBB', 'GGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBB', 188865), (False, 'GGGGBBBBBBBBBBBGBBBBGGBBBBBBBBBBBBBGGGBBBBBBBBBBBB', 'GGGGGGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188866), (True, 'GGGGGGGGGG', 'GGGGGGGGGG', 188867), (True, 'BBBBBBBBBB', 'BBBBBBBBBB', 188868), (True, 'GGGGGBBBBB', 'GGGGGBBBBB', 188869), (True, 'B', 'B', 188870)]",False,Wrong Answer,1.0,0.979214780600462,False,0.5,False,"def func(*args):
	
	nAndTStr = args[0]
	n = int(nAndTStr.split()[0])
	t = int(nAndTStr.split()[1])
	que = args[1]
	
	def shift1Second(theQue):
	    queque = list(theQue)
	    jump = False
	    for i in range(n):
	        if ((queque[i] == 'G') and (i > 0)):
	            if ((queque[(i - 1)] == 'B') and (not jump)):
	                queque[i] = 'B'
	                queque[(i - 1)] = 'G'
	                jump = True
	            else:
	                jump = False
	    return ''.join(queque)
	for i in range(t):
	    que = shift1Second(que)
	print(que)
"
1301606,20894866,"class Number:
	def main(self):
	    sum=0
	    sums=0
	    n=int(input())
	    for i in range(2,n):
	        s=n
	        while(s>0):
	            sum=sum+(s%i)
	            s=int(s/i)
	    sums=sums+sum
	    b=n-2
	    a=sums
	    #For HCF
	    if a<b:
	        x=b
	        b=a
	        a=x
	    while (a%b!=0):
	        d=a%b
	        a=b
	        b=d
	        
	    hcf=b
	    d1=sums/hcf
	    d2=(n-2)/hcf
	    print(""%d/%d""%(d1,d2))
    
ob=Number()
ob.main()",40090,0,124,9/24/16 21:08,30,1173,1,8,"[(True, '7/3', '7/3', 140726), (True, '2/1', '2/1', 140727), (True, '90132/499', '90132/499', 140728), (True, '155449/925', '155449/925', 140729), (True, '6265/129', '6265/129', 140730), (True, '3370/129', '3370/129', 140731), (True, '857/12', '857/12', 140732), (True, '2864/55', '2864/55', 140733), (True, '53217/382', '53217/382', 140734), (True, '85/13', '85/13', 140735), (True, '7560/101', '7560/101', 140736), (True, '103847/755', '103847/755', 140737), (True, '9/4', '9/4', 140738), (True, '10885/237', '10885/237', 140739), (True, '2399/40', '2399/40', 140740), (True, '317/16', '317/16', 140741), (True, '4063/103', '4063/103', 140742), (True, '55777/392', '55777/392', 140743), (True, '140290/877', '140290/877', 140744), (True, '89217/700', '89217/700', 140745), (True, '7369/43', '7369/43', 140746), (True, '52753/535', '52753/535', 140747), (True, '174589/982', '174589/982', 140748), (True, '157951/932', '157951/932', 140749), (True, '95491/724', '95491/724', 140750), (True, '3154/125', '3154/125', 140751), (True, '23086/251', '23086/251', 140752), (True, '3080/123', '3080/123', 140753), (True, '33178/301', '33178/301', 140754), (True, '2600/113', '2600/113', 140755), (True, '167/25', '167/25', 140756), (True, '85854/685', '85854/685', 140757), (True, '69915/439', '69915/439', 140758), (True, '640/19', '640/19', 140759), (True, '6438/131', '6438/131', 140760), (True, '111560/783', '111560/783', 140761), (True, '29399/397', '29399/397', 140762), (True, '6031/64', '6031/64', 140763), (True, '26717/379', '26717/379', 140764), (True, '63769/590', '63769/590', 140765), (True, '32002/415', '32002/415', 140766), (True, '62723/586', '62723/586', 140767), (True, '131069/850', '131069/850', 140768), (True, '5059/29', '5059/29', 140769), (True, '127737/839', '127737/839', 140770), (True, '97598/731', '97598/731', 140771), (True, '87017/690', '87017/690', 140772), (True, '983/67', '983/67', 140773), (True, '556/13', '556/13', 140774), (True, '246/13', '246/13', 140775), (True, '75503/641', '75503/641', 140776), (True, '2833/117', '2833/117', 140777), (True, '1459/16', '1459/16', 140778), (True, '4637/153', '4637/153', 140779), (True, '17350/303', '17350/303', 140780), (True, '37893/452', '37893/452', 140781), (True, '1529/86', '1529/86', 140782), (True, '32645/212', '32645/212', 140783), (True, '20581/236', '20581/236', 140784), (True, '17731/307', '17731/307', 140785), (True, '105083/760', '105083/760', 140786), (True, '63761/589', '63761/589', 140787), (True, '38317/455', '38317/455', 140788), (True, '3832/139', '3832/139', 140789), (True, '27232/383', '27232/383', 140790), (True, '27628/385', '27628/385', 140791), (True, '40306/467', '40306/467', 140792), (True, '35285/311', '35285/311', 140793), (True, '487/8', '487/8', 140794), (True, '222/29', '222/29', 140795), (True, '171679/973', '171679/973', 140796), (True, '62183/582', '62183/582', 140797), (True, '81127/666', '81127/666', 140798), (True, '20297/329', '20297/329', 140799), (True, '6789/187', '6789/187', 140800), (True, '11939/249', '11939/249', 140801), (True, '69196/437', '69196/437', 140802), (True, '68987/613', '68987/613', 140803), (True, '37258/449', '37258/449', 140804), (True, '45727/497', '45727/497', 140805), (True, '89117/697', '89117/697', 140806), (True, '70019/617', '70019/617', 140807), (True, '10515/137', '10515/137', 140808), (True, '7399/195', '7399/195', 140809), (True, '14281/99', '14281/99', 140810), (True, '79403/657', '79403/657', 140811), (True, '77695/651', '77695/651', 140812), (True, '45/7', '45/7', 140813), (True, '16985/214', '16985/214', 140814), (True, '11659/247', '11659/247', 140815), (True, '126869/835', '126869/835', 140816), (True, '12373/256', '12373/256', 140817), (True, '59665/331', '59665/331', 140818), (True, '504/25', '504/25', 140819), (True, '177124/987', '177124/987', 140820), (True, '13008/187', '13008/187', 140821), (True, '15715/131', '15715/131', 140822), (True, '50509/372', '50509/372', 140823), (True, '13177/120', '13177/120', 140824)]",True,Accecpted,0.9278982724420874,0.979187314172448,False,0.0,False,"def func(*args):
	
	
	class Number():
	
	    def main(self):
	        sum = 0
	        sums = 0
	        n = int(args[0])
	        for i in range(2, n):
	            s = n
	            while (s > 0):
	                sum = (sum + (s % i))
	                s = int((s / i))
	        sums = (sums + sum)
	        b = (n - 2)
	        a = sums
	        if (a < b):
	            x = b
	            b = a
	            a = x
	        while ((a % b) != 0):
	            d = (a % b)
	            a = b
	            b = d
	        hcf = b
	        d1 = (sums / hcf)
	        d2 = ((n - 2) / hcf)
	        print(('%d/%d' % (d1, d2)))
	ob = Number()
	ob.main()
"
197803,29254936,"s=input().split()
a=list(s)
a[0]=int(a[0])
if(a[2]==""week""):
    if(a[0]>4):
        print(53)
    else:
        print(52)
else:
    if(a[0]==30):
        print(11)
    elif(a[0]==31):
        print(7)
    else:
        print(12)",2068,4504,62,8/7/17 9:21,29,159,2,8,"[(True, '52', '52', 60995), (True, '11', '11', 60996), (True, '12', '12', 60997), (True, '7', '7', 60998), (True, '53', '53', 60999), (True, '52', '52', 61000), (True, '52', '52', 61001), (True, '52', '52', 61002), (True, '53', '53', 61003), (False, '53', '52', 61004), (True, '12', '12', 61005), (True, '12', '12', 61006), (True, '12', '12', 61007), (True, '12', '12', 61008), (True, '12', '12', 61009), (True, '12', '12', 61010), (True, '12', '12', 61011), (True, '12', '12', 61012), (True, '12', '12', 61013), (True, '12', '12', 61014), (True, '12', '12', 61015), (True, '12', '12', 61016), (True, '12', '12', 61017), (True, '12', '12', 61018), (True, '12', '12', 61019), (True, '12', '12', 61020), (True, '12', '12', 61021), (True, '12', '12', 61022), (True, '12', '12', 61023), (True, '12', '12', 61024), (True, '12', '12', 61025), (True, '12', '12', 61026), (True, '12', '12', 61027), (True, '12', '12', 61028), (True, '12', '12', 61029), (True, '12', '12', 61030), (True, '12', '12', 61031), (True, '12', '12', 61032)]",False,Wrong Answer,0.7004189910884179,0.979047619047619,False,0.0263157894736842,False,"def func(*args):
	
	s = args[0].split()
	a = list(s)
	a[0] = int(a[0])
	if (a[2] == 'week'):
	    if (a[0] > 4):
	        print(53)
	    else:
	        print(52)
	elif (a[0] == 30):
	    print(11)
	elif (a[0] == 31):
	    print(7)
	else:
	    print(12)
"
197804,29254955,"s=input().split()
a=list(s)
a[0]=int(a[0])
if(a[2]==""week""):
    if(a[0]>4 and a[0]<7):
        print(53)
    else:
        print(52)
else:
    if(a[0]==30):
        print(11)
    elif(a[0]==31):
        print(7)
    else:
        print(12)",2068,4528,62,8/7/17 9:22,29,159,1,8,"[(True, '52', '52', 60995), (True, '11', '11', 60996), (True, '12', '12', 60997), (True, '7', '7', 60998), (True, '53', '53', 60999), (True, '52', '52', 61000), (True, '52', '52', 61001), (True, '52', '52', 61002), (True, '53', '53', 61003), (True, '52', '52', 61004), (True, '12', '12', 61005), (True, '12', '12', 61006), (True, '12', '12', 61007), (True, '12', '12', 61008), (True, '12', '12', 61009), (True, '12', '12', 61010), (True, '12', '12', 61011), (True, '12', '12', 61012), (True, '12', '12', 61013), (True, '12', '12', 61014), (True, '12', '12', 61015), (True, '12', '12', 61016), (True, '12', '12', 61017), (True, '12', '12', 61018), (True, '12', '12', 61019), (True, '12', '12', 61020), (True, '12', '12', 61021), (True, '12', '12', 61022), (True, '12', '12', 61023), (True, '12', '12', 61024), (True, '12', '12', 61025), (True, '12', '12', 61026), (True, '12', '12', 61027), (True, '12', '12', 61028), (True, '12', '12', 61029), (True, '12', '12', 61030), (True, '12', '12', 61031), (True, '12', '12', 61032)]",True,Accecpted,0.7004189910884179,0.979047619047619,False,0.0,False,"def func(*args):
	
	s = args[0].split()
	a = list(s)
	a[0] = int(a[0])
	if (a[2] == 'week'):
	    if ((a[0] > 4) and (a[0] < 7)):
	        print(53)
	    else:
	        print(52)
	elif (a[0] == 30):
	    print(11)
	elif (a[0] == 31):
	    print(7)
	else:
	    print(12)
"
1945204,27238170,"# Description of the problem can be found at http://codeforces.com/problemset/problem/224/A

import math

v1, v2, v3 = map(int, input().split())

print(int(4*(math.sqrt(v1*v2 / v3) + math.sqrt(v2*v3 / v1) + math.sqrt(v1*v3 / v3))))",541,0,122,5/20/17 20:23,7,1738,2,8,"[(True, '12', '12', 173163), (True, '28', '28', 173164), (False, '45', '68', 173165), (False, '32', '56', 173166), (False, '112', '184', 173167), (False, '282', '308', 173168), (False, '451', '380', 173169), (False, '172', '184', 173170), (False, '260', '444', 173171), (False, '132', '120', 173172), (True, '40008', '40008', 173173), (False, '378', '332', 173174), (False, '273', '528', 173175), (False, '830', '740', 173176), (False, '49', '60', 173177), (False, '135', '856', 173178), (False, '168', '336', 173179), (False, '1401', '1308', 173180), (True, '1736', '1736', 173181), (False, '9149', '8964', 173182), (False, '16688', '16436', 173183), (True, '1200', '1200', 173184), (False, '14736', '14500', 173185), (True, '1188', '1188', 173186), (False, '408', '40008', 173187), (True, '36', '36', 173188), (True, '1184', '1184', 173189)]",False,Wrong Answer,0.9635749534339606,0.978902953586498,False,0.7037037037037037,False,"def func(*args):
	
	import math
	(v1, v2, v3) = map(int, args[0].split())
	print(int((4 * ((math.sqrt(((v1 * v2) / v3)) + math.sqrt(((v2 * v3) / v1))) + math.sqrt(((v1 * v3) / v3))))))
"
1945205,27238191,"# Description of the problem can be found at http://codeforces.com/problemset/problem/224/A

import math

v1, v2, v3 = map(int, input().split())

print(int(4*(math.sqrt(v1*v2 / v3) + math.sqrt(v2*v3 / v1) + math.sqrt(v1*v3 / v2))))",541,0,124,5/20/17 20:25,7,1738,1,8,"[(True, '12', '12', 173163), (True, '28', '28', 173164), (True, '68', '68', 173165), (True, '56', '56', 173166), (True, '184', '184', 173167), (True, '308', '308', 173168), (True, '380', '380', 173169), (True, '184', '184', 173170), (True, '444', '444', 173171), (True, '120', '120', 173172), (True, '40008', '40008', 173173), (True, '332', '332', 173174), (True, '528', '528', 173175), (True, '740', '740', 173176), (True, '60', '60', 173177), (True, '856', '856', 173178), (True, '336', '336', 173179), (True, '1308', '1308', 173180), (True, '1736', '1736', 173181), (True, '8964', '8964', 173182), (True, '16436', '16436', 173183), (True, '1200', '1200', 173184), (True, '14500', '14500', 173185), (True, '1188', '1188', 173186), (True, '40008', '40008', 173187), (True, '36', '36', 173188), (True, '1184', '1184', 173189)]",True,Accecpted,0.9635749534339606,0.978902953586498,False,0.0,False,"def func(*args):
	
	import math
	(v1, v2, v3) = map(int, args[0].split())
	print(int((4 * ((math.sqrt(((v1 * v2) / v3)) + math.sqrt(((v2 * v3) / v1))) + math.sqrt(((v1 * v3) / v2))))))
"
1963578,27572004,"pontoAx, pontoAy = [int(i) for i in input().split()]
pontoBx, pontoBy = [int(i) for i in input().split()]
pontoCx, pontoCy = [int(i) for i in input().split()]

x4, x5 = pontoBx - pontoAx, pontoCx - pontoBx
y4, y5 = pontoBy - pontoAy, pontoCy - pontoBy
direcao = x4 * y4 - x5 * y5

if direcao > 0:
    print('LEFT')
elif direcao < 0:
    print('RIGHT')
else:
    print('TOWARDS')",77410,0,92,6/5/17 1:15,14,1751,2,8,"[(False, 'TOWARDS', 'RIGHT', 174272), (False, 'LEFT', 'TOWARDS', 174273), (False, 'RIGHT', 'LEFT', 174274), (False, 'LEFT', 'RIGHT', 174275), (False, 'RIGHT', 'LEFT', 174276), (False, 'LEFT', 'TOWARDS', 174277), (True, 'RIGHT', 'RIGHT', 174278), (True, 'RIGHT', 'RIGHT', 174279), (True, 'RIGHT', 'RIGHT', 174280), (False, 'TOWARDS', 'LEFT', 174281), (True, 'LEFT', 'LEFT', 174282), (True, 'LEFT', 'LEFT', 174283), (True, 'TOWARDS', 'TOWARDS', 174284), (False, 'RIGHT', 'TOWARDS', 174285), (False, 'LEFT', 'TOWARDS', 174286), (True, 'RIGHT', 'RIGHT', 174287), (True, 'RIGHT', 'RIGHT', 174288), (False, 'LEFT', 'RIGHT', 174289), (False, 'RIGHT', 'LEFT', 174290), (False, 'RIGHT', 'LEFT', 174291), (False, 'RIGHT', 'LEFT', 174292), (True, 'TOWARDS', 'TOWARDS', 174293), (False, 'LEFT', 'TOWARDS', 174294), (False, 'RIGHT', 'TOWARDS', 174295), (False, 'LEFT', 'RIGHT', 174296), (False, 'LEFT', 'RIGHT', 174297), (True, 'RIGHT', 'RIGHT', 174298), (False, 'RIGHT', 'LEFT', 174299), (True, 'LEFT', 'LEFT', 174300), (False, 'RIGHT', 'LEFT', 174301), (False, 'LEFT', 'TOWARDS', 174302), (True, 'TOWARDS', 'TOWARDS', 174303), (False, 'LEFT', 'TOWARDS', 174304), (False, 'TOWARDS', 'RIGHT', 174305), (False, 'TOWARDS', 'RIGHT', 174306), (False, 'TOWARDS', 'LEFT', 174307), (False, 'TOWARDS', 'LEFT', 174308), (False, 'TOWARDS', 'LEFT', 174309), (False, 'TOWARDS', 'RIGHT', 174310), (False, 'LEFT', 'RIGHT', 174311), (False, 'TOWARDS', 'LEFT', 174312), (False, 'LEFT', 'RIGHT', 174313), (False, 'TOWARDS', 'RIGHT', 174314), (False, 'TOWARDS', 'LEFT', 174315), (False, 'TOWARDS', 'RIGHT', 174316), (False, 'TOWARDS', 'RIGHT', 174317), (False, 'RIGHT', 'TOWARDS', 174318), (False, 'TOWARDS', 'RIGHT', 174319)]",False,Wrong Answer,0.932526381836094,0.9788359788359788,False,0.75,False,"def func(*args):
	
	(pontoAx, pontoAy) = [int(i) for i in args[0].split()]
	(pontoBx, pontoBy) = [int(i) for i in args[1].split()]
	(pontoCx, pontoCy) = [int(i) for i in args[2].split()]
	(x4, x5) = ((pontoBx - pontoAx), (pontoCx - pontoBx))
	(y4, y5) = ((pontoBy - pontoAy), (pontoCy - pontoBy))
	direcao = ((x4 * y4) - (x5 * y5))
	if (direcao > 0):
	    print('LEFT')
	elif (direcao < 0):
	    print('RIGHT')
	else:
	    print('TOWARDS')
"
1963579,27572019,"pontoAx, pontoAy = [int(i) for i in input().split()]
pontoBx, pontoBy = [int(i) for i in input().split()]
pontoCx, pontoCy = [int(i) for i in input().split()]

x4, x5 = pontoBx - pontoAx, pontoCx - pontoBx
y4, y5 = pontoBy - pontoAy, pontoCy - pontoBy
direcao = x4 * y5 - x5 * y4

if direcao > 0:
    print('LEFT')
elif direcao < 0:
    print('RIGHT')
else:
    print('TOWARDS')",77410,32,124,6/5/17 1:16,14,1751,1,8,"[(True, 'RIGHT', 'RIGHT', 174272), (True, 'TOWARDS', 'TOWARDS', 174273), (True, 'LEFT', 'LEFT', 174274), (True, 'RIGHT', 'RIGHT', 174275), (True, 'LEFT', 'LEFT', 174276), (True, 'TOWARDS', 'TOWARDS', 174277), (True, 'RIGHT', 'RIGHT', 174278), (True, 'RIGHT', 'RIGHT', 174279), (True, 'RIGHT', 'RIGHT', 174280), (True, 'LEFT', 'LEFT', 174281), (True, 'LEFT', 'LEFT', 174282), (True, 'LEFT', 'LEFT', 174283), (True, 'TOWARDS', 'TOWARDS', 174284), (True, 'TOWARDS', 'TOWARDS', 174285), (True, 'TOWARDS', 'TOWARDS', 174286), (True, 'RIGHT', 'RIGHT', 174287), (True, 'RIGHT', 'RIGHT', 174288), (True, 'RIGHT', 'RIGHT', 174289), (True, 'LEFT', 'LEFT', 174290), (True, 'LEFT', 'LEFT', 174291), (True, 'LEFT', 'LEFT', 174292), (True, 'TOWARDS', 'TOWARDS', 174293), (True, 'TOWARDS', 'TOWARDS', 174294), (True, 'TOWARDS', 'TOWARDS', 174295), (True, 'RIGHT', 'RIGHT', 174296), (True, 'RIGHT', 'RIGHT', 174297), (True, 'RIGHT', 'RIGHT', 174298), (True, 'LEFT', 'LEFT', 174299), (True, 'LEFT', 'LEFT', 174300), (True, 'LEFT', 'LEFT', 174301), (True, 'TOWARDS', 'TOWARDS', 174302), (True, 'TOWARDS', 'TOWARDS', 174303), (True, 'TOWARDS', 'TOWARDS', 174304), (True, 'RIGHT', 'RIGHT', 174305), (True, 'RIGHT', 'RIGHT', 174306), (True, 'LEFT', 'LEFT', 174307), (True, 'LEFT', 'LEFT', 174308), (True, 'LEFT', 'LEFT', 174309), (True, 'RIGHT', 'RIGHT', 174310), (True, 'RIGHT', 'RIGHT', 174311), (True, 'LEFT', 'LEFT', 174312), (True, 'RIGHT', 'RIGHT', 174313), (True, 'RIGHT', 'RIGHT', 174314), (True, 'LEFT', 'LEFT', 174315), (True, 'RIGHT', 'RIGHT', 174316), (True, 'RIGHT', 'RIGHT', 174317), (True, 'TOWARDS', 'TOWARDS', 174318), (True, 'RIGHT', 'RIGHT', 174319)]",True,Accecpted,0.932526381836094,0.9788359788359788,False,0.0,False,"def func(*args):
	
	(pontoAx, pontoAy) = [int(i) for i in args[0].split()]
	(pontoBx, pontoBy) = [int(i) for i in args[1].split()]
	(pontoCx, pontoCy) = [int(i) for i in args[2].split()]
	(x4, x5) = ((pontoBx - pontoAx), (pontoCx - pontoBx))
	(y4, y5) = ((pontoBy - pontoAy), (pontoCy - pontoBy))
	direcao = ((x4 * y5) - (x5 * y4))
	if (direcao > 0):
	    print('LEFT')
	elif (direcao < 0):
	    print('RIGHT')
	else:
	    print('TOWARDS')
"
991585,25859312,"#!/bin/python

import sys
n,k=input().strip().split()
n,k=int(n),int(k)
k=240-k
i=0
for i in range(1,n+1):
    k=k-i*5
    if k<0:
        print(i-1)
        break
if i==n and k>=0:
	print(n)",44082,4532,62,3/27/17 22:49,27,912,1,8,"[(True, '2', '2', 120386), (True, '4', '4', 120387), (True, '7', '7', 120388), (True, '6', '6', 120389), (True, '5', '5', 120390), (True, '1', '1', 120391), (True, '0', '0', 120392), (True, '9', '9', 120393), (True, '0', '0', 120394), (True, '0', '0', 120395), (True, '9', '9', 120396), (True, '1', '1', 120397), (True, '0', '0', 120398), (True, '2', '2', 120399), (True, '1', '1', 120400), (True, '3', '3', 120401), (True, '2', '2', 120402), (True, '3', '3', 120403), (True, '5', '5', 120404), (True, '4', '4', 120405), (True, '7', '7', 120406), (True, '6', '6', 120407), (True, '8', '8', 120408), (True, '7', '7', 120409), (True, '9', '9', 120410), (True, '8', '8', 120411), (True, '4', '4', 120412), (True, '4', '4', 120413), (True, '4', '4', 120414), (True, '5', '5', 120415), (True, '4', '4', 120416), (True, '5', '5', 120417), (True, '1', '1', 120418), (True, '6', '6', 120419), (True, '2', '2', 120420), (True, '7', '7', 120421), (True, '1', '1', 120422), (True, '1', '1', 120423), (True, '0', '0', 120424), (True, '1', '1', 120425), (True, '0', '0', 120426), (True, '0', '0', 120427), (True, '0', '0', 120428), (True, '0', '0', 120429), (True, '9', '9', 120430), (True, '9', '9', 120431), (True, '0', '0', 120432), (True, '9', '9', 120433), (True, '0', '0', 120434), (True, '0', '0', 120435), (True, '7', '7', 120436), (True, '1', '1', 120437)]",True,Accecpted,0.8082374773588928,0.9788235294117648,False,0.0,False,"def func(*args):
	
	import sys
	(n, k) = args[0].strip().split()
	(n, k) = (int(n), int(k))
	k = (240 - k)
	i = 0
	for i in range(1, (n + 1)):
	    k = (k - (i * 5))
	    if (k < 0):
	        print((i - 1))
	        break
	if ((i == n) and (k >= 0)):
	    print(n)
"
991584,25859297,"#!/bin/python

import sys
n,k=input().strip().split()
n,k=int(n),int(k)
k=240-k
i=0
for i in range(1,n+1):
    k=k-i*5
    if k<0:
        print(i-1)
        break
if i==n:
	print(n)",44082,4508,30,3/27/17 22:48,27,912,2,8,"[(False, '2\n3', '2', 120386), (True, '4', '4', 120387), (True, '7', '7', 120388), (True, '6', '6', 120389), (True, '5', '5', 120390), (True, '1', '1', 120391), (False, '0\n1', '0', 120392), (False, '9\n10', '9', 120393), (True, '0', '0', 120394), (True, '0', '0', 120395), (True, '9', '9', 120396), (True, '1', '1', 120397), (True, '0', '0', 120398), (True, '2', '2', 120399), (True, '1', '1', 120400), (False, '3\n4', '3', 120401), (True, '2', '2', 120402), (False, '3\n4', '3', 120403), (True, '5', '5', 120404), (True, '4', '4', 120405), (False, '7\n8', '7', 120406), (True, '6', '6', 120407), (True, '8', '8', 120408), (False, '7\n8', '7', 120409), (False, '9\n10', '9', 120410), (True, '8', '8', 120411), (True, '4', '4', 120412), (True, '4', '4', 120413), (True, '4', '4', 120414), (True, '5', '5', 120415), (True, '4', '4', 120416), (True, '5', '5', 120417), (True, '1', '1', 120418), (True, '6', '6', 120419), (True, '2', '2', 120420), (True, '7', '7', 120421), (True, '1', '1', 120422), (True, '1', '1', 120423), (True, '0', '0', 120424), (True, '1', '1', 120425), (False, '0\n1', '0', 120426), (True, '0', '0', 120427), (True, '0', '0', 120428), (True, '0', '0', 120429), (False, '9\n10', '9', 120430), (True, '9', '9', 120431), (True, '0', '0', 120432), (False, '9\n10', '9', 120433), (True, '0', '0', 120434), (False, '0\n1', '0', 120435), (True, '7', '7', 120436), (True, '1', '1', 120437)]",False,Wrong Answer,0.8082374773588928,0.9788235294117648,False,0.2307692307692307,False,"def func(*args):
	
	import sys
	(n, k) = args[0].strip().split()
	(n, k) = (int(n), int(k))
	k = (240 - k)
	i = 0
	for i in range(1, (n + 1)):
	    k = (k - (i * 5))
	    if (k < 0):
	        print((i - 1))
	        break
	if (i == n):
	    print(n)
"
3002905,27534672,"def all_same(string):
    for i in range(len(string) - 1):
        if string[i] != string[i + 1]:
            return False
    return True


str = str(input())

for i in range(len(str) - 7):
    if all_same(str[i:i + 7]):
        print('YES')
        exit()
print('NO')",61043,24,124,6/3/17 6:10,14,2555,2,8,"[(True, 'NO', 'NO', 219615), (True, 'YES', 'YES', 219616), (True, 'YES', 'YES', 219617), (True, 'YES', 'YES', 219618), (True, 'NO', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (True, 'YES', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (True, 'NO', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (True, 'NO', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (True, 'YES', 'YES', 219634), (True, 'NO', 'NO', 219635), (True, 'NO', 'NO', 219636), (True, 'YES', 'YES', 219637), (True, 'NO', 'NO', 219638), (True, 'NO', 'NO', 219639), (True, 'YES', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (True, 'YES', 'YES', 219645), (True, 'NO', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (True, 'NO', 'NO', 219649), (True, 'YES', 'YES', 219650), (True, 'YES', 'YES', 219651), (True, 'YES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (False, 'NO', 'YES', 219655), (True, 'YES', 'YES', 219656), (False, 'NO', 'YES', 219657), (True, 'YES', 'YES', 219658)]",False,Wrong Answer,0.8352181944199186,0.9787234042553192,False,0.0454545454545454,False,"def func(*args):
	
	
	def all_same(string):
	    for i in range((len(string) - 1)):
	        if (string[i] != string[(i + 1)]):
	            return False
	    return True
	str = str(args[0])
	for i in range((len(str) - 7)):
	    if all_same(str[i:(i + 7)]):
	        print('YES')
	        exit()
	print('NO')
"
3002906,27534772,"def all_same(string):
    for i in range(len(string) - 1):
        if string[i] != string[i + 1]:
            return False
    return True


str = str(input())

for i in range(len(str) - 6):
    if all_same(str[i:i + 7]):
        print(""YES"")
        exit()
print(""NO"")",61043,32,124,6/3/17 6:17,14,2555,1,8,"[(True, 'NO', 'NO', 219615), (True, 'YES', 'YES', 219616), (True, 'YES', 'YES', 219617), (True, 'YES', 'YES', 219618), (True, 'NO', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (True, 'YES', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (True, 'NO', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (True, 'NO', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (True, 'YES', 'YES', 219634), (True, 'NO', 'NO', 219635), (True, 'NO', 'NO', 219636), (True, 'YES', 'YES', 219637), (True, 'NO', 'NO', 219638), (True, 'NO', 'NO', 219639), (True, 'YES', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (True, 'YES', 'YES', 219645), (True, 'NO', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (True, 'NO', 'NO', 219649), (True, 'YES', 'YES', 219650), (True, 'YES', 'YES', 219651), (True, 'YES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (True, 'YES', 'YES', 219655), (True, 'YES', 'YES', 219656), (True, 'YES', 'YES', 219657), (True, 'YES', 'YES', 219658)]",True,Accecpted,0.8352181944199186,0.9787234042553192,False,0.0,False,"def func(*args):
	
	
	def all_same(string):
	    for i in range((len(string) - 1)):
	        if (string[i] != string[(i + 1)]):
	            return False
	    return True
	str = str(args[0])
	for i in range((len(str) - 6)):
	    if all_same(str[i:(i + 7)]):
	        print('YES')
	        exit()
	print('NO')
"
440750,18226176,"n,k=[int(i) for i in input().split()]
m=0 if 2*k>=n else n-2*k
print((n*(n-1)-m*(m-1))//2)",6915,4704,62,6/3/16 8:27,5,394,1,8,"[(True, '10', '10', 79338), (True, '0', '0', 79339), (True, '399990', '399990', 79340), (True, '0', '0', 79341), (True, '27', '27', 79342), (True, '11', '11', 79343), (True, '4799960000', '4799960000', 79344), (True, '0', '0', 79345), (True, '4905', '4905', 79346), (True, '26', '26', 79347), (True, '58890', '58890', 79348), (True, '4999950000', '4999950000', 79349), (True, '4999950000', '4999950000', 79350), (True, '4999950000', '4999950000', 79351), (True, '4999950000', '4999950000', 79352), (True, '4999949994', '4999949994', 79353), (True, '4999949985', '4999949985', 79354), (True, '4999849998', '4999849998', 79355), (True, '4999849991', '4999849991', 79356), (True, '4999849980', '4999849980', 79357), (True, '4999850001', '4999850001', 79358), (True, '4999850001', '4999850001', 79359), (True, '4999850001', '4999850001', 79360), (True, '540945', '540945', 79361), (True, '80895', '80895', 79362), (True, '414491', '414491', 79363), (True, '208472', '208472', 79364), (True, '1157466', '1157466', 79365), (True, '255346101', '255346101', 79366), (True, '88410', '88410', 79367), (True, '2654180511', '2654180511', 79368), (True, '342494109', '342494109', 79369), (True, '879423804', '879423804', 79370), (True, '2725458111', '2725458111', 79371), (True, '2481847831', '2481847831', 79372), (True, '3779759985', '3779759985', 79373), (True, '1330260828', '1330260828', 79374), (True, '1063089105', '1063089105', 79375), (True, '1063089105', '1063089105', 79376), (True, '1596096750', '1596096750', 79377), (True, '1806455778', '1806455778', 79378), (True, '0', '0', 79379), (True, '0', '0', 79380), (True, '0', '0', 79381), (True, '0', '0', 79382), (True, '0', '0', 79383), (True, '1', '1', 79384), (True, '1', '1', 79385), (True, '1', '1', 79386), (True, '1', '1', 79387), (True, '1', '1', 79388), (True, '3', '3', 79389), (True, '3', '3', 79390), (True, '3', '3', 79391), (True, '3', '3', 79392), (True, '3', '3', 79393), (True, '5', '5', 79394), (True, '6', '6', 79395), (True, '6', '6', 79396), (True, '6', '6', 79397), (True, '6', '6', 79398), (True, '7', '7', 79399), (True, '10', '10', 79400), (True, '10', '10', 79401), (True, '10', '10', 79402), (True, '9', '9', 79403), (True, '14', '14', 79404), (True, '15', '15', 79405), (True, '18', '18', 79406), (True, '21', '21', 79407), (True, '21', '21', 79408), (True, '30', '30', 79409), (True, '243918', '243918', 79410), (True, '1076515', '1076515', 79411), (True, '2643', '2643', 79412), (True, '15374531', '15374531', 79413), (True, '23767065', '23767065', 79414), (True, '1513297456', '1513297456', 79415), (True, '382917573', '382917573', 79416), (True, '351981971', '351981971', 79417), (True, '4974183411', '4974183411', 79418), (True, '2599096851', '2599096851', 79419), (True, '751762306', '751762306', 79420), (True, '3066847464', '3066847464', 79421), (True, '51726307', '51726307', 79422), (True, '898455660', '898455660', 79423), (True, '4999850001', '4999850001', 79424), (True, '4999949999', '4999949999', 79425), (True, '4999950000', '4999950000', 79426), (True, '199997', '199997', 79427), (True, '6', '6', 79428), (True, '243753254', '243753254', 79429)]",True,Accecpted,0.7016879391277372,0.9787234042553192,False,0.0,False,"def func(*args):
	
	(n, k) = [int(i) for i in args[0].split()]
	m = (0 if ((2 * k) >= n) else (n - (2 * k)))
	print((((n * (n - 1)) - (m * (m - 1))) // 2))
"
440749,18226146,"n,k=[int(i) for i in input().split()]
m=0 if k>=2*n else n-2*k
print((n*(n-1)-m*(m-1))//2)",6915,4492,61,6/3/16 8:26,5,394,2,8,"[(True, '10', '10', 79338), (True, '0', '0', 79339), (True, '399990', '399990', 79340), (False, '-1', '0', 79341), (True, '27', '27', 79342), (True, '11', '11', 79343), (True, '4799960000', '4799960000', 79344), (True, '0', '0', 79345), (True, '4905', '4905', 79346), (True, '26', '26', 79347), (True, '58890', '58890', 79348), (True, '4999950000', '4999950000', 79349), (False, '4999949997', '4999950000', 79350), (False, '4999949990', '4999950000', 79351), (False, '4999949979', '4999950000', 79352), (True, '4999949994', '4999949994', 79353), (True, '4999949985', '4999949985', 79354), (True, '4999849998', '4999849998', 79355), (True, '4999849991', '4999849991', 79356), (True, '4999849980', '4999849980', 79357), (False, '4999850000', '4999850001', 79358), (False, '4999849995', '4999850001', 79359), (False, '4999849986', '4999850001', 79360), (True, '540945', '540945', 79361), (True, '80895', '80895', 79362), (True, '414491', '414491', 79363), (True, '208472', '208472', 79364), (True, '1157466', '1157466', 79365), (True, '255346101', '255346101', 79366), (True, '88410', '88410', 79367), (False, '920782751', '2654180511', 79368), (True, '342494109', '342494109', 79369), (True, '879423804', '879423804', 79370), (True, '2725458111', '2725458111', 79371), (False, '-720272520', '2481847831', 79372), (False, '2939731419', '3779759985', 79373), (True, '1330260828', '1330260828', 79374), (False, '-2445575460', '1063089105', 79375), (False, '-2445575460', '1063089105', 79376), (False, '-4661183896', '1596096750', 79377), (False, '-3949599087', '1806455778', 79378), (True, '0', '0', 79379), (True, '0', '0', 79380), (True, '0', '0', 79381), (True, '0', '0', 79382), (True, '0', '0', 79383), (True, '1', '1', 79384), (False, '-2', '1', 79385), (False, '-9', '1', 79386), (True, '1', '1', 79387), (True, '1', '1', 79388), (True, '3', '3', 79389), (False, '2', '3', 79390), (False, '-3', '3', 79391), (False, '-12', '3', 79392), (False, '-25', '3', 79393), (True, '5', '5', 79394), (True, '6', '6', 79395), (False, '3', '6', 79396), (False, '-4', '6', 79397), (False, '-15', '6', 79398), (True, '7', '7', 79399), (False, '9', '10', 79400), (False, '4', '10', 79401), (False, '-5', '10', 79402), (True, '9', '9', 79403), (True, '14', '14', 79404), (True, '15', '15', 79405), (True, '18', '18', 79406), (True, '21', '21', 79407), (False, '20', '21', 79408), (True, '30', '30', 79409), (True, '243918', '243918', 79410), (True, '1076515', '1076515', 79411), (True, '2643', '2643', 79412), (True, '15374531', '15374531', 79413), (False, '23748344', '23767065', 79414), (True, '1513297456', '1513297456', 79415), (True, '382917573', '382917573', 79416), (True, '351981971', '351981971', 79417), (False, '4670261226', '4974183411', 79418), (False, '2588610941', '2599096851', 79419), (True, '751762306', '751762306', 79420), (True, '3066847464', '3066847464', 79421), (True, '51726307', '51726307', 79422), (True, '898455660', '898455660', 79423), (True, '4999850001', '4999850001', 79424), (True, '4999949999', '4999949999', 79425), (False, '-100000', '4999950000', 79426), (True, '199997', '199997', 79427), (True, '6', '6', 79428), (True, '243753254', '243753254', 79429)]",False,Wrong Answer,0.7016879391277372,0.9787234042553192,False,0.3369565217391304,False,"def func(*args):
	
	(n, k) = [int(i) for i in args[0].split()]
	m = (0 if (k >= (2 * n)) else (n - (2 * k)))
	print((((n * (n - 1)) - (m * (m - 1))) // 2))
"
3231120,26799274,"s=input()
l=list(s)
def count(l1):
 a=0
 for i in range(len(l1)-1):
  if l1[i]=='V':
   if l1[i+1]=='K':
    a=a+1
 return(a)
c=count(list(s))
b=[c]
for i in range(len(l)):
 l1=l[:]
 l1[i]='V'
 a=count(l1)
 b.append(a)
 l1[i]='K'
 a=count(l1)
 b.append(a)
max=c 
for i in range(len(b)):
 if b[i]>max:
  max=b[i]
print(max)",66387,5444,62,5/2/17 12:21,47,2785,1,8,"[(True, '1', '1', 235946), (True, '1', '1', 235947), (True, '0', '0', 235948), (True, '3', '3', 235949), (True, '1', '1', 235950), (True, '5', '5', 235951), (True, '14', '14', 235952), (True, '32', '32', 235953), (True, '32', '32', 235954), (True, '21', '21', 235955), (True, '25', '25', 235956), (True, '7', '7', 235957), (True, '24', '24', 235958), (True, '35', '35', 235959), (True, '9', '9', 235960), (True, '6', '6', 235961), (True, '9', '9', 235962), (True, '22', '22', 235963), (True, '25', '25', 235964), (True, '29', '29', 235965), (True, '3', '3', 235966), (True, '16', '16', 235967), (True, '13', '13', 235968), (True, '26', '26', 235969), (True, '26', '26', 235970), (True, '0', '0', 235971), (True, '2', '2', 235972), (True, '2', '2', 235973), (True, '0', '0', 235974), (True, '1', '1', 235975), (True, '2', '2', 235976), (True, '1', '1', 235977), (True, '1', '1', 235978), (True, '3', '3', 235979), (True, '2', '2', 235980), (True, '2', '2', 235981), (True, '1', '1', 235982), (True, '1', '1', 235983), (True, '2', '2', 235984), (True, '1', '1', 235985), (True, '8', '8', 235986), (True, '2', '2', 235987), (True, '2', '2', 235988), (True, '1', '1', 235989), (True, '1', '1', 235990), (True, '3', '3', 235991), (True, '1', '1', 235992), (True, '1', '1', 235993), (True, '1', '1', 235994), (True, '2', '2', 235995), (True, '3', '3', 235996), (True, '1', '1', 235997), (True, '2', '2', 235998), (True, '2', '2', 235999), (True, '2', '2', 236000), (True, '1', '1', 236001), (True, '10', '10', 236002), (True, '3', '3', 236003), (True, '3', '3', 236004), (True, '1', '1', 236005), (True, '1', '1', 236006), (True, '3', '3', 236007), (True, '3', '3', 236008)]",True,Accecpted,0.9725766308764144,0.9787234042553192,False,0.0,False,"def func(*args):
	
	s = args[0]
	l = list(s)
	
	def count(l1):
	    a = 0
	    for i in range((len(l1) - 1)):
	        if (l1[i] == 'V'):
	            if (l1[(i + 1)] == 'K'):
	                a = (a + 1)
	    return a
	c = count(list(s))
	b = [c]
	for i in range(len(l)):
	    l1 = l[:]
	    l1[i] = 'V'
	    a = count(l1)
	    b.append(a)
	    l1[i] = 'K'
	    a = count(l1)
	    b.append(a)
	max = c
	for i in range(len(b)):
	    if (b[i] > max):
	        max = b[i]
	print(max)
"
234228,27908485,"x = int(input())
print(x // 5 + (x % 5 != 0))",1734,0,62,6/19/17 19:08,3,194,1,8,"[(True, '1', '1', 63841), (True, '3', '3', 63842), (True, '200000', '200000', 63843), (True, '9', '9', 63844), (True, '200000', '200000', 63845), (True, '1', '1', 63846), (True, '1', '1', 63847), (True, '1', '1', 63848), (True, '1', '1', 63849), (True, '106841', '106841', 63850), (True, '93914', '93914', 63851), (True, '100576', '100576', 63852), (True, '188443', '188443', 63853), (True, '20', '20', 63854), (True, '11', '11', 63855), (True, '18', '18', 63856), (True, '115', '115', 63857), (True, '144', '144', 63858), (True, '146', '146', 63859), (True, '1781', '1781', 63860), (True, '729', '729', 63861), (True, '886', '886', 63862), (True, '9315', '9315', 63863), (True, '17276', '17276', 63864), (True, '18838', '18838', 63865), (True, '199998', '199998', 63866), (True, '199999', '199999', 63867), (True, '199999', '199999', 63868), (True, '199999', '199999', 63869), (True, '199999', '199999', 63870), (True, '199999', '199999', 63871), (True, '200000', '200000', 63872), (True, '200000', '200000', 63873), (True, '200000', '200000', 63874)]",True,Accecpted,0.8265168183793802,0.9787234042553192,False,0.0,False,"def func(*args):
	
	x = int(args[0])
	print(((x // 5) + ((x % 5) != 0)))
"
2234413,28921261,"print(sum(abs(x-2)+abs(y-2)for x in range(5) for y,v in enumerate(input().split()) if int(v)))",1762,4520,124,7/27/17 8:13,1,1960,1,8,"[(True, '3', '3', 187866), (True, '1', '1', 187867), (True, '0', '0', 187868), (True, '4', '4', 187869), (True, '3', '3', 187870), (True, '4', '4', 187871), (True, '2', '2', 187872), (True, '3', '3', 187873), (True, '4', '4', 187874), (True, '3', '3', 187875), (True, '2', '2', 187876), (True, '1', '1', 187877), (True, '2', '2', 187878), (True, '2', '2', 187879), (True, '1', '1', 187880), (True, '2', '2', 187881), (True, '3', '3', 187882), (True, '2', '2', 187883), (True, '1', '1', 187884), (True, '2', '2', 187885), (True, '3', '3', 187886), (True, '4', '4', 187887), (True, '3', '3', 187888), (True, '2', '2', 187889), (True, '3', '3', 187890)]",True,Accecpted,0.8801117367933934,0.9787234042553192,False,0.0,False,"def func(*args):
	
	print(sum(((abs((x - 2)) + abs((y - 2))) for x in range(5) for (y, v) in enumerate(args[0].split()) if int(v))))
"
2234412,28921252,"print(sum(abs(x-3)+abs(y-3)for x in range(5) for y,v in enumerate(input().split()) if int(v)))",1762,4464,92,7/27/17 8:13,1,1960,2,8,"[(True, '3', '3', 187866), (False, '3', '1', 187867), (False, '2', '0', 187868), (False, '2', '4', 187869), (False, '5', '3', 187870), (False, '6', '4', 187871), (False, '4', '2', 187872), (True, '3', '3', 187873), (True, '4', '4', 187874), (False, '5', '3', 187875), (False, '4', '2', 187876), (False, '3', '1', 187877), (True, '2', '2', 187878), (False, '4', '2', 187879), (True, '1', '1', 187880), (True, '2', '2', 187881), (True, '3', '3', 187882), (True, '2', '2', 187883), (True, '1', '1', 187884), (False, '0', '2', 187885), (False, '1', '3', 187886), (True, '4', '4', 187887), (True, '3', '3', 187888), (True, '2', '2', 187889), (False, '1', '3', 187890)]",False,Wrong Answer,0.8801117367933934,0.9787234042553192,False,0.52,False,"def func(*args):
	
	print(sum(((abs((x - 3)) + abs((y - 3))) for x in range(5) for (y, v) in enumerate(args[0].split()) if int(v))))
"
1262082,27947940,"# python3
import sys, threading, os.path
import collections, heapq, math,bisect
import string
from platform import python_version
import itertools
sys.setrecursionlimit(10**6)
threading.stack_size(2**27)

def main():
    if os.path.exists('input.txt'):
        input = open('input.txt', 'r')
    else:
        input = sys.stdin
    #--------------------------------INPUT---------------------------------
    lis = list(map(int, input.readline().split()))
    output = lis[0]-lis[1]
    #-------------------------------OUTPUT----------------------------------
    if os.path.exists('output.txt'):
        open('output.txt', 'w').writelines(str(output))
    else:
        sys.stdout.write(str(output))


if __name__ == '__main__':
    main()
#threading.Thread(target=main).start()",9138,5872,184,6/21/17 17:32,27,1142,2,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (True, '1', '1', 138320), (True, '1', '1', 138321), (False, '5', '4', 138322), (True, '7', '7', 138323), (True, '5', '5', 138324), (False, '9', '6', 138325), (True, '10', '10', 138326), (True, '7', '7', 138327), (False, '18', '9', 138328), (True, '15', '15', 138329), (True, '8', '8', 138330), (False, '22', '2', 138331), (True, '24', '24', 138332), (True, '5', '5', 138333), (False, '22', '6', 138334), (True, '16', '16', 138335), (True, '5', '5', 138336), (False, '14', '12', 138337), (True, '17', '17', 138338), (True, '38', '38', 138339), (False, '31', '18', 138340), (True, '38', '38', 138341), (True, '13', '13', 138342), (False, '23', '8', 138343), (True, '13', '13', 138344), (True, '1', '1', 138345), (False, '47', '40', 138346), (True, '53', '53', 138347), (True, '34', '34', 138348), (False, '35', '23', 138349), (True, '39', '39', 138350), (True, '38', '38', 138351), (False, '59', '13', 138352), (True, '36', '36', 138353), (True, '7', '7', 138354), (False, '54', '21', 138355), (True, '21', '21', 138356), (True, '2', '2', 138357), (False, '84', '43', 138358), (True, '9', '9', 138359), (True, '14', '14', 138360), (False, '90', '23', 138361), (True, '89', '89', 138362), (True, '32', '32', 138363), (False, '74', '73', 138364), (True, '89', '89', 138365), (True, '19', '19', 138366), (True, '1', '1', 138367)]",False,Wrong Answer,0.8022138141406,0.9786715417428398,False,0.3,False,"def func(*args):
	
	import sys, threading, os.path
	import collections, heapq, math, bisect
	import string
	from platform import python_version
	import itertools
	sys.setrecursionlimit((10 ** 6))
	threading.stack_size((2 ** 27))
	
	def main():
	    if os.path.exists('input.txt'):
	        input = open('input.txt', 'r')
	    else:
	        input = sys.stdin
	    lis = list(map(int, input.readline().split()))
	    output = (lis[0] - lis[1])
	    if os.path.exists('output.txt'):
	        open('output.txt', 'w').writelines(str(output))
	    else:
	        sys.stdout.write(str(output))
	if (__name__ == '__main__'):
	    main()
"
1262083,27948242,"# python3
import sys, threading, os.path
import collections, heapq, math,bisect
import string
from platform import python_version
import itertools
sys.setrecursionlimit(10**6)
threading.stack_size(2**27)

def main():
    if os.path.exists('input.txt'):
        input = open('input.txt', 'r')
    else:
        input = sys.stdin
    #--------------------------------INPUT---------------------------------
    lis = list(map(int, input.readline().split()))
    output =  lis[0] - max(lis[1] + 1, lis[0] - lis[2]) + 1
    #-------------------------------OUTPUT----------------------------------
    if os.path.exists('output.txt'):
        open('output.txt', 'w').writelines(str(output))
    else:
        sys.stdout.write(str(output))


if __name__ == '__main__':
    main()
#threading.Thread(target=main).start()",9138,6548,186,6/21/17 17:48,27,1142,1,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (True, '1', '1', 138320), (True, '1', '1', 138321), (True, '4', '4', 138322), (True, '7', '7', 138323), (True, '5', '5', 138324), (True, '6', '6', 138325), (True, '10', '10', 138326), (True, '7', '7', 138327), (True, '9', '9', 138328), (True, '15', '15', 138329), (True, '8', '8', 138330), (True, '2', '2', 138331), (True, '24', '24', 138332), (True, '5', '5', 138333), (True, '6', '6', 138334), (True, '16', '16', 138335), (True, '5', '5', 138336), (True, '12', '12', 138337), (True, '17', '17', 138338), (True, '38', '38', 138339), (True, '18', '18', 138340), (True, '38', '38', 138341), (True, '13', '13', 138342), (True, '8', '8', 138343), (True, '13', '13', 138344), (True, '1', '1', 138345), (True, '40', '40', 138346), (True, '53', '53', 138347), (True, '34', '34', 138348), (True, '23', '23', 138349), (True, '39', '39', 138350), (True, '38', '38', 138351), (True, '13', '13', 138352), (True, '36', '36', 138353), (True, '7', '7', 138354), (True, '21', '21', 138355), (True, '21', '21', 138356), (True, '2', '2', 138357), (True, '43', '43', 138358), (True, '9', '9', 138359), (True, '14', '14', 138360), (True, '23', '23', 138361), (True, '89', '89', 138362), (True, '32', '32', 138363), (True, '73', '73', 138364), (True, '89', '89', 138365), (True, '19', '19', 138366), (True, '1', '1', 138367)]",True,Accecpted,0.8022138141406,0.9786715417428398,False,0.0,False,"def func(*args):
	
	import sys, threading, os.path
	import collections, heapq, math, bisect
	import string
	from platform import python_version
	import itertools
	sys.setrecursionlimit((10 ** 6))
	threading.stack_size((2 ** 27))
	
	def main():
	    if os.path.exists('input.txt'):
	        input = open('input.txt', 'r')
	    else:
	        input = sys.stdin
	    lis = list(map(int, input.readline().split()))
	    output = ((lis[0] - max((lis[1] + 1), (lis[0] - lis[2]))) + 1)
	    if os.path.exists('output.txt'):
	        open('output.txt', 'w').writelines(str(output))
	    else:
	        sys.stdout.write(str(output))
	if (__name__ == '__main__'):
	    main()
"
1924462,8769026,"import math

x=int(input())

digit=""""
for i in range(10):
    if str(i) in str(x):
        digit+=str(i)


counter=0
for i in range(1,int(math.sqrt(x))+1):
    if x%i==0:
        for j in str(i):
            if j in digit:
                counter+=1
                break
        for j in str(x//i):
            if j in digit:
                counter+=1
                break
print(counter)",58253,0,60,11/21/14 0:46,22,1722,2,8,"[(False, '2', '1', 171832), (True, '2', '2', 171833), (True, '1', '1', 171834), (False, '6', '5', 171835), (True, '6', '6', 171836), (True, '1', '1', 171837), (True, '2', '2', 171838), (False, '42', '41', 171839), (True, '91', '91', 171840), (True, '5', '5', 171841), (True, '6', '6', 171842), (True, '1', '1', 171843), (True, '1', '1', 171844), (True, '1', '1', 171845), (True, '3', '3', 171846), (True, '4', '4', 171847), (True, '4', '4', 171848), (True, '11', '11', 171849), (True, '44', '44', 171850), (True, '21', '21', 171851), (True, '7', '7', 171852), (True, '5', '5', 171853), (True, '6', '6', 171854), (True, '9', '9', 171855), (True, '244', '244', 171856), (True, '29', '29', 171857), (True, '698', '698', 171858), (True, '479', '479', 171859), (False, '640', '639', 171860), (True, '460', '460', 171861), (True, '1', '1', 171862), (True, '5', '5', 171863), (True, '8', '8', 171864), (True, '6', '6', 171865), (False, '9', '8', 171866), (True, '2', '2', 171867), (True, '2', '2', 171868), (True, '1', '1', 171869), (True, '6', '6', 171870)]",False,Wrong Answer,0.7881579238865267,0.9785714285714284,False,0.1282051282051282,False,"def func(*args):
	
	import math
	x = int(args[0])
	digit = ''
	for i in range(10):
	    if (str(i) in str(x)):
	        digit += str(i)
	counter = 0
	for i in range(1, (int(math.sqrt(x)) + 1)):
	    if ((x % i) == 0):
	        for j in str(i):
	            if (j in digit):
	                counter += 1
	                break
	        for j in str((x // i)):
	            if (j in digit):
	                counter += 1
	                break
	print(counter)
"
982608,27758056,"n,m,k = map(int,input().split())
if k %2  == 0:
    l = 'R'
if k % 2 != 0:
    l = 'L'
if k % (2 * m) != 0:
    p = k // (2 * m) + 1
if k % (2 * m) == 0:
    p = k // (2 * m)
t = (k - (p - 1) * 6) // 2 + (k - (p - 1) * 6) % 2
print(str(p)+' '+str(t)+' '+l)",1673,0,61,6/13/17 18:13,21,905,2,8,"[(True, '2 2 L', '2 2 L', 119561), (True, '4 3 R', '4 3 R', 119562), (True, '1 2 R', '1 2 R', 119563), (False, '2 9 R', '2 2 R', 119564), (True, '10 3 L', '10 3 L', 119565), (False, '8043 80398814 R', '8043 2940 R', 119566), (True, '1 1 L', '1 1 L', 119567), (True, '1 1 R', '1 1 R', 119568), (True, '1 1 L', '1 1 L', 119569), (True, '1 10000 R', '1 10000 R', 119570), (True, '1 1 L', '1 1 L', 119571), (False, '5000 -9997 R', '5000 1 R', 119572), (False, '10000 -19997 R', '10000 1 R', 119573), (True, '1 1 L', '1 1 L', 119574), (True, '1 1 R', '1 1 R', 119575), (True, '1 2 L', '1 2 L', 119576), (True, '1 2 R', '1 2 R', 119577), (False, '2 0 L', '2 1 L', 119578), (False, '2 0 R', '2 1 R', 119579), (False, '2 1 L', '2 2 L', 119580), (False, '2 1 R', '2 2 R', 119581), (False, '3 -1 L', '3 1 L', 119582), (False, '3 -1 R', '3 1 R', 119583), (False, '3 0 L', '3 2 L', 119584), (False, '3 0 R', '3 2 R', 119585), (False, '268 533513 R', '268 314 R', 119586), (False, '147 291940 R', '147 378 R', 119587), (False, '68 133890 L', '68 91 L', 119588), (False, '9324 93197453 R', '9324 4745 R', 119589), (False, '9857 98527566 R', '9857 6990 R', 119590), (False, '5621 56178338 R', '5621 818 R', 119591), (True, '1 1 L', '1 1 L', 119592), (True, '1 1 R', '1 1 R', 119593), (False, '5001 49985001 L', '5001 1 L', 119594), (False, '10000 99970003 L', '10000 10000 L', 119595), (False, '10000 99970003 R', '10000 10000 R', 119596), (True, '1 1 L', '1 1 L', 119597), (True, '1 1 R', '1 1 R', 119598), (True, '1 2 L', '1 2 L', 119599), (True, '1 2 R', '1 2 R', 119600), (True, '1 1 L', '1 1 L', 119601), (True, '1 1 R', '1 1 R', 119602), (False, '2 -1 L', '2 1 L', 119603), (False, '2 -1 R', '2 1 R', 119604), (True, '2 1 L', '2 1 L', 119605), (True, '1 1 L', '1 1 L', 119606)]",False,Wrong Answer,0.9319030337830542,0.9785714285714284,False,0.5,False,"def func(*args):
	
	(n, m, k) = map(int, args[0].split())
	if ((k % 2) == 0):
	    l = 'R'
	if ((k % 2) != 0):
	    l = 'L'
	if ((k % (2 * m)) != 0):
	    p = ((k // (2 * m)) + 1)
	if ((k % (2 * m)) == 0):
	    p = (k // (2 * m))
	t = (((k - ((p - 1) * 6)) // 2) + ((k - ((p - 1) * 6)) % 2))
	print(((((str(p) + ' ') + str(t)) + ' ') + l))
"
1924463,8769046,"import math

x=int(input())

digit=""""
for i in range(10):
    if str(i) in str(x):
        digit+=str(i)


counter=0
for i in range(1,int(math.sqrt(x))+1):
    if x%i==0:
        for j in str(i):
            if j in digit:
                counter+=1
                break
        for j in str(x//i):
            if (j in digit) and (x//i > i) :
                counter+=1
                break
print(counter)",58253,0,124,11/21/14 0:48,22,1722,1,8,"[(True, '1', '1', 171832), (True, '2', '2', 171833), (True, '1', '1', 171834), (True, '5', '5', 171835), (True, '6', '6', 171836), (True, '1', '1', 171837), (True, '2', '2', 171838), (True, '41', '41', 171839), (True, '91', '91', 171840), (True, '5', '5', 171841), (True, '6', '6', 171842), (True, '1', '1', 171843), (True, '1', '1', 171844), (True, '1', '1', 171845), (True, '3', '3', 171846), (True, '4', '4', 171847), (True, '4', '4', 171848), (True, '11', '11', 171849), (True, '44', '44', 171850), (True, '21', '21', 171851), (True, '7', '7', 171852), (True, '5', '5', 171853), (True, '6', '6', 171854), (True, '9', '9', 171855), (True, '244', '244', 171856), (True, '29', '29', 171857), (True, '698', '698', 171858), (True, '479', '479', 171859), (True, '639', '639', 171860), (True, '460', '460', 171861), (True, '1', '1', 171862), (True, '5', '5', 171863), (True, '8', '8', 171864), (True, '6', '6', 171865), (True, '8', '8', 171866), (True, '2', '2', 171867), (True, '2', '2', 171868), (True, '1', '1', 171869), (True, '6', '6', 171870)]",True,Accecpted,0.7881579238865267,0.9785714285714284,False,0.0,False,"def func(*args):
	
	import math
	x = int(args[0])
	digit = ''
	for i in range(10):
	    if (str(i) in str(x)):
	        digit += str(i)
	counter = 0
	for i in range(1, (int(math.sqrt(x)) + 1)):
	    if ((x % i) == 0):
	        for j in str(i):
	            if (j in digit):
	                counter += 1
	                break
	        for j in str((x // i)):
	            if ((j in digit) and ((x // i) > i)):
	                counter += 1
	                break
	print(counter)
"
982622,27759124,"n,m,k = map(int,input().split())
if k %2  == 0:
    l = 'R'
if k % 2 != 0:
    l = 'L'
if k % (2 * m) != 0:
    p = k // (2 * m) + 1
if k % (2 * m) == 0:
    p = k // (2 * m)
t = (k - (p - 1) * (2*m)) // 2 + (k - (p - 1) * (2*m)) % 2
print(str(p)+' '+str(t)+' '+l)",1673,8,62,6/13/17 19:19,21,905,1,8,"[(True, '2 2 L', '2 2 L', 119561), (True, '4 3 R', '4 3 R', 119562), (True, '1 2 R', '1 2 R', 119563), (True, '2 2 R', '2 2 R', 119564), (True, '10 3 L', '10 3 L', 119565), (True, '8043 2940 R', '8043 2940 R', 119566), (True, '1 1 L', '1 1 L', 119567), (True, '1 1 R', '1 1 R', 119568), (True, '1 1 L', '1 1 L', 119569), (True, '1 10000 R', '1 10000 R', 119570), (True, '1 1 L', '1 1 L', 119571), (True, '5000 1 R', '5000 1 R', 119572), (True, '10000 1 R', '10000 1 R', 119573), (True, '1 1 L', '1 1 L', 119574), (True, '1 1 R', '1 1 R', 119575), (True, '1 2 L', '1 2 L', 119576), (True, '1 2 R', '1 2 R', 119577), (True, '2 1 L', '2 1 L', 119578), (True, '2 1 R', '2 1 R', 119579), (True, '2 2 L', '2 2 L', 119580), (True, '2 2 R', '2 2 R', 119581), (True, '3 1 L', '3 1 L', 119582), (True, '3 1 R', '3 1 R', 119583), (True, '3 2 L', '3 2 L', 119584), (True, '3 2 R', '3 2 R', 119585), (True, '268 314 R', '268 314 R', 119586), (True, '147 378 R', '147 378 R', 119587), (True, '68 91 L', '68 91 L', 119588), (True, '9324 4745 R', '9324 4745 R', 119589), (True, '9857 6990 R', '9857 6990 R', 119590), (True, '5621 818 R', '5621 818 R', 119591), (True, '1 1 L', '1 1 L', 119592), (True, '1 1 R', '1 1 R', 119593), (True, '5001 1 L', '5001 1 L', 119594), (True, '10000 10000 L', '10000 10000 L', 119595), (True, '10000 10000 R', '10000 10000 R', 119596), (True, '1 1 L', '1 1 L', 119597), (True, '1 1 R', '1 1 R', 119598), (True, '1 2 L', '1 2 L', 119599), (True, '1 2 R', '1 2 R', 119600), (True, '1 1 L', '1 1 L', 119601), (True, '1 1 R', '1 1 R', 119602), (True, '2 1 L', '2 1 L', 119603), (True, '2 1 R', '2 1 R', 119604), (True, '2 1 L', '2 1 L', 119605), (True, '1 1 L', '1 1 L', 119606)]",True,Accecpted,0.9319030337830542,0.9785714285714284,False,0.0,False,"def func(*args):
	
	(n, m, k) = map(int, args[0].split())
	if ((k % 2) == 0):
	    l = 'R'
	if ((k % 2) != 0):
	    l = 'L'
	if ((k % (2 * m)) != 0):
	    p = ((k // (2 * m)) + 1)
	if ((k % (2 * m)) == 0):
	    p = (k // (2 * m))
	t = (((k - ((p - 1) * (2 * m))) // 2) + ((k - ((p - 1) * (2 * m))) % 2))
	print(((((str(p) + ' ') + str(t)) + ' ') + l))
"
2294150,28205888,"n = int(input())
for i in range(n+1, 10000):
    if len(set(str(i)))==len(str(i)):
        print(i)
        break",23167,5428,124,7/2/17 11:01,5,2003,1,8,"[(True, '2013', '2013', 190118), (True, '2014', '2014', 190119), (True, '1023', '1023', 190120), (True, '1023', '1023', 190121), (True, '1235', '1235', 190122), (True, '5601', '5601', 190123), (True, '9012', '9012', 190124), (True, '1203', '1203', 190125), (True, '9012', '9012', 190126), (True, '4573', '4573', 190127), (True, '6701', '6701', 190128), (True, '2013', '2013', 190129), (True, '3012', '3012', 190130), (True, '7801', '7801', 190131), (True, '8091', '8091', 190132), (True, '1596', '1596', 190133), (True, '6017', '6017', 190134), (True, '8901', '8901', 190135), (True, '3401', '3401', 190136), (True, '5091', '5091', 190137), (True, '2345', '2345', 190138), (True, '2340', '2340', 190139), (True, '1203', '1203', 190140), (True, '9012', '9012', 190141), (True, '9012', '9012', 190142), (True, '6870', '6870', 190143), (True, '9012', '9012', 190144)]",True,Accecpted,0.7348889200874658,0.9785407725321889,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	for i in range((n + 1), 10000):
	    if (len(set(str(i))) == len(str(i))):
	        print(i)
	        break
"
2294149,28205871,"n = int(input())
for i in range(n+1, 9001):
    if len(set(str(i)))==len(str(i)):
        print(i)
        break",23167,5424,124,7/2/17 11:00,5,2003,2,8,"[(True, '2013', '2013', 190118), (True, '2014', '2014', 190119), (True, '1023', '1023', 190120), (True, '1023', '1023', 190121), (True, '1235', '1235', 190122), (True, '5601', '5601', 190123), (False, '', '9012', 190124), (True, '1203', '1203', 190125), (False, '', '9012', 190126), (True, '4573', '4573', 190127), (True, '6701', '6701', 190128), (True, '2013', '2013', 190129), (True, '3012', '3012', 190130), (True, '7801', '7801', 190131), (True, '8091', '8091', 190132), (True, '1596', '1596', 190133), (True, '6017', '6017', 190134), (True, '8901', '8901', 190135), (True, '3401', '3401', 190136), (True, '5091', '5091', 190137), (True, '2345', '2345', 190138), (True, '2340', '2340', 190139), (True, '1203', '1203', 190140), (False, '', '9012', 190141), (False, '', '9012', 190142), (True, '6870', '6870', 190143), (False, '', '9012', 190144)]",False,Wrong Answer,0.7348889200874658,0.9785407725321889,False,0.1851851851851851,False,"def func(*args):
	
	n = int(args[0])
	for i in range((n + 1), 9001):
	    if (len(set(str(i))) == len(str(i))):
	        print(i)
	        break
"
105656,17267215,"k,a,b=input().split(' ')
k=int(k)
a=int(a)
b=int(b)
if a%k!=0 :
    a=a+k-abs(a)%k
print(max(0,1+(b-a)//k))",14702,0,77,4/10/16 19:07,13,93,2,8,"[(True, '10', '10', 55235), (True, '5', '5', 55236), (True, '1', '1', 55237), (True, '1', '1', 55238), (True, '2', '2', 55239), (True, '2', '2', 55240), (True, '2', '2', 55241), (True, '1203', '1203', 55242), (True, '1', '1', 55243), (True, '1', '1', 55244), (True, '1', '1', 55245), (True, '1', '1', 55246), (True, '1', '1', 55247), (True, '1', '1', 55248), (True, '1', '1', 55249), (True, '1', '1', 55250), (True, '1', '1', 55251), (True, '2', '2', 55252), (True, '10', '10', 55253), (True, '10541', '10541', 55254), (True, '112', '112', 55255), (True, '111', '111', 55256), (True, '111', '111', 55257), (True, '93844', '93844', 55258), (True, '93844', '93844', 55259), (True, '93845', '93845', 55260), (True, '93843', '93843', 55261), (True, '93843', '93843', 55262), (True, '93844', '93844', 55263), (True, '93843', '93843', 55264), (True, '93843', '93843', 55265), (True, '93844', '93844', 55266), (True, '94098', '94098', 55267), (True, '94098', '94098', 55268), (True, '94099', '94099', 55269), (True, '94097', '94097', 55270), (False, '94098', '94097', 55271), (True, '94098', '94098', 55272), (True, '94097', '94097', 55273), (True, '94097', '94097', 55274), (False, '94097', '94098', 55275), (True, '63157', '63157', 55276), (True, '63157', '63157', 55277), (False, '63158', '63157', 55278), (False, '63156', '63157', 55279), (True, '63157', '63157', 55280), (True, '63157', '63157', 55281), (True, '63157', '63157', 55282), (True, '63157', '63157', 55283), (True, '63157', '63157', 55284), (True, '936724', '936724', 55285), (True, '9701', '9701', 55286), (False, '936723', '936724', 55287), (True, '9701', '9701', 55288), (True, '936724', '936724', 55289), (True, '9702', '9702', 55290), (True, '2000000000000000001', '2000000000000000001', 55291), (True, '1000000000000000001', '1000000000000000001', 55292), (True, '666666666666666667', '666666666666666667', 55293), (True, '500000000000000001', '500000000000000001', 55294), (True, '400000000000000001', '400000000000000001', 55295), (False, '333333333333333334', '333333333333333333', 55296), (False, '285714285714285714', '285714285714285715', 55297), (True, '900000000000000001', '900000000000000001', 55298), (True, '495000000000000001', '495000000000000001', 55299), (False, '329927333333333333', '329927333333333334', 55300), (True, '249919972454520226', '249919972454520226', 55301), (True, '199999919457965617', '199999919457965617', 55302), (True, '166666665555555556', '166666665555555556', 55303), (True, '142846031746031746', '142846031746031746', 55304), (True, '3', '3', 55305), (True, '2', '2', 55306), (True, '1', '1', 55307), (True, '0', '0', 55308), (False, '20', '19', 55309), (True, '1', '1', 55310), (True, '0', '0', 55311), (True, '0', '0', 55312), (True, '0', '0', 55313), (True, '0', '0', 55314), (True, '1000000000000000000', '1000000000000000000', 55315)]",False,Wrong Answer,0.7825422900366437,0.9785407725321889,False,0.1111111111111111,False,"def func(*args):
	
	(k, a, b) = args[0].split(' ')
	k = int(k)
	a = int(a)
	b = int(b)
	if ((a % k) != 0):
	    a = ((a + k) - (abs(a) % k))
	print(max(0, (1 + ((b - a) // k))))
"
105657,17267348,"k,a,b=input().split(' ')
k=int(k)
a=int(a)
b=int(b)
if a%k!=0 :
    a=a+k-a%k
print(max(0,1+(b-a)//k))",14702,4,77,4/10/16 19:23,13,93,1,8,"[(True, '10', '10', 55235), (True, '5', '5', 55236), (True, '1', '1', 55237), (True, '1', '1', 55238), (True, '2', '2', 55239), (True, '2', '2', 55240), (True, '2', '2', 55241), (True, '1203', '1203', 55242), (True, '1', '1', 55243), (True, '1', '1', 55244), (True, '1', '1', 55245), (True, '1', '1', 55246), (True, '1', '1', 55247), (True, '1', '1', 55248), (True, '1', '1', 55249), (True, '1', '1', 55250), (True, '1', '1', 55251), (True, '2', '2', 55252), (True, '10', '10', 55253), (True, '10541', '10541', 55254), (True, '112', '112', 55255), (True, '111', '111', 55256), (True, '111', '111', 55257), (True, '93844', '93844', 55258), (True, '93844', '93844', 55259), (True, '93845', '93845', 55260), (True, '93843', '93843', 55261), (True, '93843', '93843', 55262), (True, '93844', '93844', 55263), (True, '93843', '93843', 55264), (True, '93843', '93843', 55265), (True, '93844', '93844', 55266), (True, '94098', '94098', 55267), (True, '94098', '94098', 55268), (True, '94099', '94099', 55269), (True, '94097', '94097', 55270), (True, '94097', '94097', 55271), (True, '94098', '94098', 55272), (True, '94097', '94097', 55273), (True, '94097', '94097', 55274), (True, '94098', '94098', 55275), (True, '63157', '63157', 55276), (True, '63157', '63157', 55277), (True, '63157', '63157', 55278), (True, '63157', '63157', 55279), (True, '63157', '63157', 55280), (True, '63157', '63157', 55281), (True, '63157', '63157', 55282), (True, '63157', '63157', 55283), (True, '63157', '63157', 55284), (True, '936724', '936724', 55285), (True, '9701', '9701', 55286), (True, '936724', '936724', 55287), (True, '9701', '9701', 55288), (True, '936724', '936724', 55289), (True, '9702', '9702', 55290), (True, '2000000000000000001', '2000000000000000001', 55291), (True, '1000000000000000001', '1000000000000000001', 55292), (True, '666666666666666667', '666666666666666667', 55293), (True, '500000000000000001', '500000000000000001', 55294), (True, '400000000000000001', '400000000000000001', 55295), (True, '333333333333333333', '333333333333333333', 55296), (True, '285714285714285715', '285714285714285715', 55297), (True, '900000000000000001', '900000000000000001', 55298), (True, '495000000000000001', '495000000000000001', 55299), (True, '329927333333333334', '329927333333333334', 55300), (True, '249919972454520226', '249919972454520226', 55301), (True, '199999919457965617', '199999919457965617', 55302), (True, '166666665555555556', '166666665555555556', 55303), (True, '142846031746031746', '142846031746031746', 55304), (True, '3', '3', 55305), (True, '2', '2', 55306), (True, '1', '1', 55307), (True, '0', '0', 55308), (True, '19', '19', 55309), (True, '1', '1', 55310), (True, '0', '0', 55311), (True, '0', '0', 55312), (True, '0', '0', 55313), (True, '0', '0', 55314), (True, '1000000000000000000', '1000000000000000000', 55315)]",True,Accecpted,0.7825422900366437,0.9785407725321889,False,0.0,False,"def func(*args):
	
	(k, a, b) = args[0].split(' ')
	k = int(k)
	a = int(a)
	b = int(b)
	if ((a % k) != 0):
	    a = ((a + k) - (a % k))
	print(max(0, (1 + ((b - a) // k))))
"
717628,22408239,"from sys import stdin

def main():
    uno = ""I hate""
    dos = ""I love""

    n = int(stdin.readline().strip())
    i = 1
    res = ""I hate""
    while i < n:
        if i%2 == 0:
            res = res +"" that ""+ uno
        else:
            res = res +"" that ""+ dos
        i += 1
    print(res+"" it"")
    
main()",44570,4,62,11/22/16 20:17,35,668,1,8,"[(True, 'I hate it', 'I hate it', 100802), (True, 'I hate that I love it', 'I hate that I love it', 100803), (True, 'I hate that I love that I hate it', 'I hate that I love that I hate it', 100804), (True, 'I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love it', 100805), (True, 'I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate it', 100806), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100807), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100808), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100809), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100819), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100820)]",True,Accecpted,0.7659522044807933,0.9785407725321889,False,0.0,False,"def func(*args):
	
	from sys import stdin
	
	def main():
	    uno = 'I hate'
	    dos = 'I love'
	    n = int(stdin.readline().strip())
	    i = 1
	    res = 'I hate'
	    while (i < n):
	        if ((i % 2) == 0):
	            res = ((res + ' that ') + uno)
	        else:
	            res = ((res + ' that ') + dos)
	        i += 1
	    print((res + ' it'))
	main()
"
1879430,28952364,"'''input
2 3 4
'''
a, b, c = sorted(map(int, input().split()))
print((b+1)*(c+1) - a*(a-1))",531,4508,92,7/28/17 15:05,5,1691,2,8,"[(True, '18', '18', 169765), (True, '7', '7', 169766), (False, '84', '224', 169767), (False, '1098', '1578', 169768), (False, '50054', '115032', 169769), (False, '7980', '2983022', 169770), (True, '10', '10', 169771), (True, '10', '10', 169772), (True, '10', '10', 169773), (True, '14', '14', 169774), (True, '14', '14', 169775), (True, '14', '14', 169776), (False, '10', '19', 169777), (False, '24', '36', 169778), (True, '2569', '2569', 169779), (True, '2959', '2959', 169780), (True, '2956', '2956', 169781), (True, '943654', '943654', 169782), (True, '906607', '906607', 169783), (True, '707048', '707048', 169784), (False, '3001', '2997001', 169785), (False, '96343', '413875', 169786), (False, '206428', '218584', 169787), (False, '240120', '369265', 169788), (False, '273598', '401998', 169789), (False, '5994', '2991006', 169790), (True, '3001', '3001', 169791), (True, '3001', '3001', 169792), (True, '3001', '3001', 169793), (True, '1001999', '1001999', 169794), (False, '248154', '692925', 169795), (False, '1344', '4412', 169796), (False, '6795', '13515', 169797), (False, '1774', '4252', 169798), (False, '8018', '10346', 169799), (False, '8100', '18144', 169800), (False, '33594', '43634', 169801), (False, '24874', '39922', 169802), (False, '14262', '17387', 169803), (False, '46495', '47494', 169804)]",False,Wrong Answer,0.8091067115702212,0.978494623655914,False,0.55,False,"def func(*args):
	
	'input\n2 3 4\n'
	(a, b, c) = sorted(map(int, args[0].split()))
	print((((b + 1) * (c + 1)) - (a * (a - 1))))
"
1879431,28952388,"'''input
2 3 4
'''
a, b, c = sorted(map(int, input().split()))
print((b+a-1)*(c+a-1) - a*(a-1))",531,4516,124,7/28/17 15:07,5,1691,1,8,"[(True, '18', '18', 169765), (True, '7', '7', 169766), (True, '224', '224', 169767), (True, '1578', '1578', 169768), (True, '115032', '115032', 169769), (True, '2983022', '2983022', 169770), (True, '10', '10', 169771), (True, '10', '10', 169772), (True, '10', '10', 169773), (True, '14', '14', 169774), (True, '14', '14', 169775), (True, '14', '14', 169776), (True, '19', '19', 169777), (True, '36', '36', 169778), (True, '2569', '2569', 169779), (True, '2959', '2959', 169780), (True, '2956', '2956', 169781), (True, '943654', '943654', 169782), (True, '906607', '906607', 169783), (True, '707048', '707048', 169784), (True, '2997001', '2997001', 169785), (True, '413875', '413875', 169786), (True, '218584', '218584', 169787), (True, '369265', '369265', 169788), (True, '401998', '401998', 169789), (True, '2991006', '2991006', 169790), (True, '3001', '3001', 169791), (True, '3001', '3001', 169792), (True, '3001', '3001', 169793), (True, '1001999', '1001999', 169794), (True, '692925', '692925', 169795), (True, '4412', '4412', 169796), (True, '13515', '13515', 169797), (True, '4252', '4252', 169798), (True, '10346', '10346', 169799), (True, '18144', '18144', 169800), (True, '43634', '43634', 169801), (True, '39922', '39922', 169802), (True, '17387', '17387', 169803), (True, '47494', '47494', 169804)]",True,Accecpted,0.8091067115702212,0.978494623655914,False,0.0,False,"def func(*args):
	
	'input\n2 3 4\n'
	(a, b, c) = sorted(map(int, args[0].split()))
	print(((((b + a) - 1) * ((c + a) - 1)) - (a * (a - 1))))
"
195514,24674313,"#n = int(input())
#n, m = map(int, input().split()) 
#s = input()
#c = list(map(int, input().split()))
n, m, s = input().split()
n = int(n)
if s == 'month':
    if n == 31:
        print(7)
    elif n == 30:
        print(11)
    else:
        print(12)
else:
    if n == 5 or n == 6:
        print(53)
    else:
        print(52)",153,4520,62,2/14/17 18:27,35,159,1,8,"[(True, '52', '52', 60995), (True, '11', '11', 60996), (True, '12', '12', 60997), (True, '7', '7', 60998), (True, '53', '53', 60999), (True, '52', '52', 61000), (True, '52', '52', 61001), (True, '52', '52', 61002), (True, '53', '53', 61003), (True, '52', '52', 61004), (True, '12', '12', 61005), (True, '12', '12', 61006), (True, '12', '12', 61007), (True, '12', '12', 61008), (True, '12', '12', 61009), (True, '12', '12', 61010), (True, '12', '12', 61011), (True, '12', '12', 61012), (True, '12', '12', 61013), (True, '12', '12', 61014), (True, '12', '12', 61015), (True, '12', '12', 61016), (True, '12', '12', 61017), (True, '12', '12', 61018), (True, '12', '12', 61019), (True, '12', '12', 61020), (True, '12', '12', 61021), (True, '12', '12', 61022), (True, '12', '12', 61023), (True, '12', '12', 61024), (True, '12', '12', 61025), (True, '12', '12', 61026), (True, '12', '12', 61027), (True, '12', '12', 61028), (True, '12', '12', 61029), (True, '12', '12', 61030), (True, '12', '12', 61031), (True, '12', '12', 61032)]",True,Accecpted,0.8589834793008795,0.978319783197832,False,0.0,False,"def func(*args):
	
	(n, m, s) = args[0].split()
	n = int(n)
	if (s == 'month'):
	    if (n == 31):
	        print(7)
	    elif (n == 30):
	        print(11)
	    else:
	        print(12)
	elif ((n == 5) or (n == 6)):
	    print(53)
	else:
	    print(52)
"
195513,24674283,"#n = int(input())
#n, m = map(int, input().split()) 
#s = input()
#c = list(map(int, input().split()))
n, m, s = input().split()
n = int(n)
if s == 'month':
    if n == 31:
        print(7)
    elif n < 31 and n > 28:
        print(11)
    else:
        print(12)
else:
    if n == 5 or n == 6:
        print(53)
    else:
        print(52)",153,4524,61,2/14/17 18:26,35,159,2,8,"[(True, '52', '52', 60995), (True, '11', '11', 60996), (True, '12', '12', 60997), (True, '7', '7', 60998), (True, '53', '53', 60999), (True, '52', '52', 61000), (True, '52', '52', 61001), (True, '52', '52', 61002), (True, '53', '53', 61003), (True, '52', '52', 61004), (True, '12', '12', 61005), (True, '12', '12', 61006), (True, '12', '12', 61007), (True, '12', '12', 61008), (True, '12', '12', 61009), (True, '12', '12', 61010), (True, '12', '12', 61011), (True, '12', '12', 61012), (True, '12', '12', 61013), (True, '12', '12', 61014), (True, '12', '12', 61015), (True, '12', '12', 61016), (True, '12', '12', 61017), (True, '12', '12', 61018), (True, '12', '12', 61019), (True, '12', '12', 61020), (True, '12', '12', 61021), (True, '12', '12', 61022), (True, '12', '12', 61023), (True, '12', '12', 61024), (True, '12', '12', 61025), (True, '12', '12', 61026), (True, '12', '12', 61027), (True, '12', '12', 61028), (True, '12', '12', 61029), (True, '12', '12', 61030), (True, '12', '12', 61031), (False, '11', '12', 61032)]",False,Wrong Answer,0.8589834793008795,0.978319783197832,False,0.0263157894736842,False,"def func(*args):
	
	(n, m, s) = args[0].split()
	n = int(n)
	if (s == 'month'):
	    if (n == 31):
	        print(7)
	    elif ((n < 31) and (n > 28)):
	        print(11)
	    else:
	        print(12)
	elif ((n == 5) or (n == 6)):
	    print(53)
	else:
	    print(52)
"
2265222,27110425,"a=int(input())
print(((a+1)*a*(a-1)//6+a)//1)",5542,0,124,5/14/17 20:15,2,1983,1,8,"[(True, '3', '3', 189204), (True, '7', '7', 189205), (True, '14', '14', 189206), (True, '1', '1', 189207), (True, '175', '175', 189208), (True, '1333335000', '1333335000', 189209), (True, '888644743', '888644743', 189210), (True, '117099969', '117099969', 189211), (True, '1331335999', '1331335999', 189212), (True, '127259419', '127259419', 189213), (True, '164675486', '164675486', 189214), (True, '833', '833', 189215), (True, '20875', '20875', 189216), (True, '125671', '125671', 189217), (True, '129858', '129858', 189218), (True, '2796416', '2796416', 189219), (True, '22370048', '22370048', 189220), (True, '49235271', '49235271', 189221), (True, '49457383', '49457383', 189222), (True, '5160119', '5160119', 189223), (True, '318541121', '318541121', 189224), (True, '562501250', '562501250', 189225), (True, '1033182073', '1033182073', 189226), (True, '166667500', '166667500', 189227)]",True,Accecpted,1.5319719891192393e-231,0.9782608695652174,False,0.0,False,"def func(*args):
	
	a = int(args[0])
	print(((((((a + 1) * a) * (a - 1)) // 6) + a) // 1))
"
2581771,29378067,"x=int(input())
c=0
for i in range(1,x):
    if i%2==0 :
        if (x-i) %2==0 :
            print('YES')
            c+=1
            break


if c==0 :
    print('NO')",62260,4512,122,8/12/17 16:18,12,2223,1,8,"[(True, 'YES', 'YES', 203575), (True, 'NO', 'NO', 203576), (True, 'YES', 'YES', 203577), (True, 'NO', 'NO', 203578), (True, 'NO', 'NO', 203579), (True, 'NO', 'NO', 203580), (True, 'NO', 'NO', 203581), (True, 'YES', 'YES', 203582), (True, 'YES', 'YES', 203583), (True, 'NO', 'NO', 203584), (True, 'NO', 'NO', 203585), (True, 'NO', 'NO', 203586), (True, 'YES', 'YES', 203587), (True, 'YES', 'YES', 203588), (True, 'YES', 'YES', 203589), (True, 'NO', 'NO', 203590), (True, 'YES', 'YES', 203591), (True, 'NO', 'NO', 203592), (True, 'YES', 'YES', 203593), (True, 'YES', 'YES', 203594)]",True,Accecpted,0.9457416090031758,0.9781420765027322,False,0.0,False,"def func(*args):
	
	x = int(args[0])
	c = 0
	for i in range(1, x):
	    if ((i % 2) == 0):
	        if (((x - i) % 2) == 0):
	            print('YES')
	            c += 1
	            break
	if (c == 0):
	    print('NO')
"
1460295,17894187,"import sys

f = sys.stdin
nums = [int(x) for x in f.readline().rstrip().split()]
poss = []

poss.append((nums[1] * nums[2])//nums[6])
poss.append(nums[5]//nums[7])
poss.append(nums[3] * nums[4])

print(min(poss)//3)",71562,4488,122,5/13/16 21:58,11,1295,2,8,"[(True, '2', '2', 148731), (False, '6', '3', 148732), (True, '0', '0', 148733), (False, '1', '4', 148734), (True, '1', '1', 148735), (True, '0', '0', 148736), (False, '2', '6', 148737), (True, '1', '1', 148738), (False, '2', '4', 148739), (False, '2', '6', 148740), (False, '0', '1', 148741), (False, '2', '8', 148742), (False, '3', '9', 148743), (True, '1', '1', 148744), (True, '2', '2', 148745), (False, '0', '2', 148746), (False, '2', '3', 148747), (True, '2', '2', 148748), (False, '2', '6', 148749), (False, '2', '3', 148750), (False, '2', '4', 148751), (False, '3', '5', 148752), (False, '333', '1000', 148753), (False, '47', '8', 148754), (False, '22', '0', 148755), (False, '0', '1', 148756), (False, '0', '2', 148757)]",False,Wrong Answer,0.9533589351059684,0.9780701754385964,False,0.7037037037037037,False,"def func(*args):
	
	import sys
	f = sys.stdin
	nums = [int(x) for x in f.readline().rstrip().split()]
	poss = []
	poss.append(((nums[1] * nums[2]) // nums[6]))
	poss.append((nums[5] // nums[7]))
	poss.append((nums[3] * nums[4]))
	print((min(poss) // 3))
"
1460296,17894258,"import sys

f = sys.stdin
nums = [int(x) for x in f.readline().rstrip().split()]
poss = []

poss.append((nums[1] * nums[2])//nums[6])
poss.append(nums[5]//nums[7])
poss.append(nums[3] * nums[4])

print(min(poss)//nums[0])",71562,5024,124,5/13/16 22:06,11,1295,1,8,"[(True, '2', '2', 148731), (True, '3', '3', 148732), (True, '0', '0', 148733), (True, '4', '4', 148734), (True, '1', '1', 148735), (True, '0', '0', 148736), (True, '6', '6', 148737), (True, '1', '1', 148738), (True, '4', '4', 148739), (True, '6', '6', 148740), (True, '1', '1', 148741), (True, '8', '8', 148742), (True, '9', '9', 148743), (True, '1', '1', 148744), (True, '2', '2', 148745), (True, '2', '2', 148746), (True, '3', '3', 148747), (True, '2', '2', 148748), (True, '6', '6', 148749), (True, '3', '3', 148750), (True, '4', '4', 148751), (True, '5', '5', 148752), (True, '1000', '1000', 148753), (True, '8', '8', 148754), (True, '0', '0', 148755), (True, '1', '1', 148756), (True, '2', '2', 148757)]",True,Accecpted,0.9533589351059684,0.9780701754385964,False,0.0,False,"def func(*args):
	
	import sys
	f = sys.stdin
	nums = [int(x) for x in f.readline().rstrip().split()]
	poss = []
	poss.append(((nums[1] * nums[2]) // nums[6]))
	poss.append((nums[5] // nums[7]))
	poss.append((nums[3] * nums[4]))
	print((min(poss) // nums[0]))
"
193740,22770590,"n,a,b=map(str, input().split())
n=int(n)
if b==""week"":
    if n==5 or n==6:
        print(53)
    else:
        print(52)
else:
    if n==31:
        print(7)
    elif n>28 and n<=30:
        print(11)
    else:
        print(12)",34,4508,61,12/7/16 0:16,27,159,2,8,"[(True, '52', '52', 60995), (True, '11', '11', 60996), (True, '12', '12', 60997), (True, '7', '7', 60998), (True, '53', '53', 60999), (True, '52', '52', 61000), (True, '52', '52', 61001), (True, '52', '52', 61002), (True, '53', '53', 61003), (True, '52', '52', 61004), (True, '12', '12', 61005), (True, '12', '12', 61006), (True, '12', '12', 61007), (True, '12', '12', 61008), (True, '12', '12', 61009), (True, '12', '12', 61010), (True, '12', '12', 61011), (True, '12', '12', 61012), (True, '12', '12', 61013), (True, '12', '12', 61014), (True, '12', '12', 61015), (True, '12', '12', 61016), (True, '12', '12', 61017), (True, '12', '12', 61018), (True, '12', '12', 61019), (True, '12', '12', 61020), (True, '12', '12', 61021), (True, '12', '12', 61022), (True, '12', '12', 61023), (True, '12', '12', 61024), (True, '12', '12', 61025), (True, '12', '12', 61026), (True, '12', '12', 61027), (True, '12', '12', 61028), (True, '12', '12', 61029), (True, '12', '12', 61030), (True, '12', '12', 61031), (False, '11', '12', 61032)]",False,Wrong Answer,0.7848518349390632,0.9780439121756488,False,0.0263157894736842,False,"def func(*args):
	
	(n, a, b) = map(str, args[0].split())
	n = int(n)
	if (b == 'week'):
	    if ((n == 5) or (n == 6)):
	        print(53)
	    else:
	        print(52)
	elif (n == 31):
	    print(7)
	elif ((n > 28) and (n <= 30)):
	    print(11)
	else:
	    print(12)
"
193741,22770650,"n,a,b=map(str, input().split())
n=int(n)
if b==""week"":
    if n==5 or n==6:
        print(53)
    else:
        print(52)
else:
    if n==31:
        print(7)
    elif n==30:
        print(11)
    else:
        print(12)",34,4500,62,12/7/16 0:19,27,159,1,8,"[(True, '52', '52', 60995), (True, '11', '11', 60996), (True, '12', '12', 60997), (True, '7', '7', 60998), (True, '53', '53', 60999), (True, '52', '52', 61000), (True, '52', '52', 61001), (True, '52', '52', 61002), (True, '53', '53', 61003), (True, '52', '52', 61004), (True, '12', '12', 61005), (True, '12', '12', 61006), (True, '12', '12', 61007), (True, '12', '12', 61008), (True, '12', '12', 61009), (True, '12', '12', 61010), (True, '12', '12', 61011), (True, '12', '12', 61012), (True, '12', '12', 61013), (True, '12', '12', 61014), (True, '12', '12', 61015), (True, '12', '12', 61016), (True, '12', '12', 61017), (True, '12', '12', 61018), (True, '12', '12', 61019), (True, '12', '12', 61020), (True, '12', '12', 61021), (True, '12', '12', 61022), (True, '12', '12', 61023), (True, '12', '12', 61024), (True, '12', '12', 61025), (True, '12', '12', 61026), (True, '12', '12', 61027), (True, '12', '12', 61028), (True, '12', '12', 61029), (True, '12', '12', 61030), (True, '12', '12', 61031), (True, '12', '12', 61032)]",True,Accecpted,0.7848518349390632,0.9780439121756488,False,0.0,False,"def func(*args):
	
	(n, a, b) = map(str, args[0].split())
	n = int(n)
	if (b == 'week'):
	    if ((n == 5) or (n == 6)):
	        print(53)
	    else:
	        print(52)
	elif (n == 31):
	    print(7)
	elif (n == 30):
	    print(11)
	else:
	    print(12)
"
2580977,29325044,"w=0

w=int(input())
res=w%2
if res!=0 or res <= 2:
  print('NO')
else:
  print('YES')",54298,4456,92,8/10/17 14:32,8,2223,2,8,"[(False, 'NO', 'YES', 203575), (True, 'NO', 'NO', 203576), (False, 'NO', 'YES', 203577), (True, 'NO', 'NO', 203578), (True, 'NO', 'NO', 203579), (True, 'NO', 'NO', 203580), (True, 'NO', 'NO', 203581), (False, 'NO', 'YES', 203582), (False, 'NO', 'YES', 203583), (True, 'NO', 'NO', 203584), (True, 'NO', 'NO', 203585), (True, 'NO', 'NO', 203586), (False, 'NO', 'YES', 203587), (False, 'NO', 'YES', 203588), (False, 'NO', 'YES', 203589), (True, 'NO', 'NO', 203590), (False, 'NO', 'YES', 203591), (True, 'NO', 'NO', 203592), (False, 'NO', 'YES', 203593), (False, 'NO', 'YES', 203594)]",False,Wrong Answer,0.7348889200874658,0.978021978021978,False,0.5,False,"def func(*args):
	
	w = 0
	w = int(args[0])
	res = (w % 2)
	if ((res != 0) or (res <= 2)):
	    print('NO')
	else:
	    print('YES')
"
2580978,29325071,"w=0

w=int(input())
res=w%2
if res!=0 or w <= 2:
  print('NO')
else:
  print('YES')",54298,4512,124,8/10/17 14:33,8,2223,1,8,"[(True, 'YES', 'YES', 203575), (True, 'NO', 'NO', 203576), (True, 'YES', 'YES', 203577), (True, 'NO', 'NO', 203578), (True, 'NO', 'NO', 203579), (True, 'NO', 'NO', 203580), (True, 'NO', 'NO', 203581), (True, 'YES', 'YES', 203582), (True, 'YES', 'YES', 203583), (True, 'NO', 'NO', 203584), (True, 'NO', 'NO', 203585), (True, 'NO', 'NO', 203586), (True, 'YES', 'YES', 203587), (True, 'YES', 'YES', 203588), (True, 'YES', 'YES', 203589), (True, 'NO', 'NO', 203590), (True, 'YES', 'YES', 203591), (True, 'NO', 'NO', 203592), (True, 'YES', 'YES', 203593), (True, 'YES', 'YES', 203594)]",True,Accecpted,0.7348889200874658,0.978021978021978,False,0.0,False,"def func(*args):
	
	w = 0
	w = int(args[0])
	res = (w % 2)
	if ((res != 0) or (w <= 2)):
	    print('NO')
	else:
	    print('YES')
"
2581097,29337111,"peso_w= int(input(""""))
if peso_w%2 == 0 and peso_w !=0 and peso_w >2:
  print (""YES"")
else: 
  print (""NO"")",54325,4512,154,8/10/17 22:10,5,2223,1,8,"[(True, 'YES', 'YES', 203575), (True, 'NO', 'NO', 203576), (True, 'YES', 'YES', 203577), (True, 'NO', 'NO', 203578), (True, 'NO', 'NO', 203579), (True, 'NO', 'NO', 203580), (True, 'NO', 'NO', 203581), (True, 'YES', 'YES', 203582), (True, 'YES', 'YES', 203583), (True, 'NO', 'NO', 203584), (True, 'NO', 'NO', 203585), (True, 'NO', 'NO', 203586), (True, 'YES', 'YES', 203587), (True, 'YES', 'YES', 203588), (True, 'YES', 'YES', 203589), (True, 'NO', 'NO', 203590), (True, 'YES', 'YES', 203591), (True, 'NO', 'NO', 203592), (True, 'YES', 'YES', 203593), (True, 'YES', 'YES', 203594)]",True,Accecpted,0.8843946454355334,0.9779735682819384,False,0.0,False,"def func(*args):
	
	peso_w = int(args[0])
	if (((peso_w % 2) == 0) and (peso_w != 0) and (peso_w > 2)):
	    print('YES')
	else:
	    print('NO')
"
1322921,25670886,"s = list(input())

i = ['H', 'Q', '9', '+']
if any([x for x in i if x in s]):
	print('YES')
else:
	print('NO')",60620,4472,122,3/20/17 19:16,7,1198,2,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (False, 'YES', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (False, 'YES', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (False, 'YES', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (False, 'YES', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (False, 'YES', 'NO', 142090), (False, 'YES', 'NO', 142091), (False, 'YES', 'NO', 142092), (False, 'YES', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (False, 'YES', 'NO', 142096), (False, 'YES', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (False, 'YES', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (False, 'YES', 'NO', 142105)]",False,Wrong Answer,0.8232490471721702,0.9779735682819384,False,0.1411764705882353,False,"def func(*args):
	
	s = list(args[0])
	i = ['H', 'Q', '9', '+']
	if any([x for x in i if (x in s)]):
	    print('YES')
	else:
	    print('NO')
"
1322922,25670939,"s = list(input())

i = ['H', 'Q', '9']
if any([x for x in i if x in s]):
	print('YES')
else:
	print('NO')",60620,4524,124,3/20/17 19:18,7,1198,1,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (True, 'NO', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (True, 'NO', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (True, 'NO', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (True, 'NO', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (True, 'NO', 'NO', 142090), (True, 'NO', 'NO', 142091), (True, 'NO', 'NO', 142092), (True, 'NO', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (True, 'NO', 'NO', 142096), (True, 'NO', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (True, 'NO', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (True, 'NO', 'NO', 142105)]",True,Accecpted,0.8232490471721702,0.9779735682819384,False,0.0,False,"def func(*args):
	
	s = list(args[0])
	i = ['H', 'Q', '9']
	if any([x for x in i if (x in s)]):
	    print('YES')
	else:
	    print('NO')
"
1327458,28663488,"def ch(a):
    for i in range(0,1):
        if a[i]=='H' or a[i]=='Q' or a[i]=='9' :
            return ""YES""
    return ""NO""

a=input()
print(ch(a))",16659,4508,124,7/18/17 12:16,8,1198,2,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (True, 'NO', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (True, 'NO', 'NO', 142028), (True, 'NO', 'NO', 142029), (False, 'NO', 'YES', 142030), (False, 'NO', 'YES', 142031), (True, 'NO', 'NO', 142032), (False, 'NO', 'YES', 142033), (False, 'NO', 'YES', 142034), (False, 'NO', 'YES', 142035), (True, 'NO', 'NO', 142036), (False, 'NO', 'YES', 142037), (False, 'NO', 'YES', 142038), (False, 'NO', 'YES', 142039), (False, 'NO', 'YES', 142040), (False, 'NO', 'YES', 142041), (False, 'NO', 'YES', 142042), (True, 'NO', 'NO', 142043), (False, 'NO', 'YES', 142044), (False, 'NO', 'YES', 142045), (True, 'NO', 'NO', 142046), (False, 'NO', 'YES', 142047), (False, 'NO', 'YES', 142048), (True, 'NO', 'NO', 142049), (False, 'NO', 'YES', 142050), (False, 'NO', 'YES', 142051), (True, 'NO', 'NO', 142052), (False, 'NO', 'YES', 142053), (False, 'NO', 'YES', 142054), (False, 'NO', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (False, 'NO', 'YES', 142058), (False, 'NO', 'YES', 142059), (False, 'NO', 'YES', 142060), (False, 'NO', 'YES', 142061), (True, 'NO', 'NO', 142062), (False, 'NO', 'YES', 142063), (False, 'NO', 'YES', 142064), (False, 'NO', 'YES', 142065), (False, 'NO', 'YES', 142066), (False, 'NO', 'YES', 142067), (False, 'NO', 'YES', 142068), (True, 'NO', 'NO', 142069), (False, 'NO', 'YES', 142070), (False, 'NO', 'YES', 142071), (False, 'NO', 'YES', 142072), (True, 'NO', 'NO', 142073), (False, 'NO', 'YES', 142074), (False, 'NO', 'YES', 142075), (True, 'NO', 'NO', 142076), (True, 'YES', 'YES', 142077), (False, 'NO', 'YES', 142078), (False, 'NO', 'YES', 142079), (False, 'NO', 'YES', 142080), (True, 'YES', 'YES', 142081), (False, 'NO', 'YES', 142082), (False, 'NO', 'YES', 142083), (False, 'NO', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (True, 'NO', 'NO', 142087), (False, 'NO', 'YES', 142088), (False, 'NO', 'YES', 142089), (True, 'NO', 'NO', 142090), (True, 'NO', 'NO', 142091), (True, 'NO', 'NO', 142092), (True, 'NO', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (True, 'NO', 'NO', 142096), (True, 'NO', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (False, 'NO', 'YES', 142101), (True, 'NO', 'NO', 142102), (True, 'YES', 'YES', 142103), (False, 'NO', 'YES', 142104), (True, 'NO', 'NO', 142105)]",False,Wrong Answer,0.8492326635760689,0.9779179810725552,False,0.5294117647058824,False,"def func(*args):
	
	
	def ch(a):
	    for i in range(0, 1):
	        if ((a[i] == 'H') or (a[i] == 'Q') or (a[i] == '9')):
	            return 'YES'
	    return 'NO'
	a = args[0]
	print(ch(a))
"
1327459,28663520,"def ch(a):
    for i in range(0,len(a)):
        if a[i]=='H' or a[i]=='Q' or a[i]=='9' :
            return ""YES""
    return ""NO""

a=input()
print(ch(a))",16659,4528,154,7/18/17 12:17,8,1198,1,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (True, 'NO', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (True, 'NO', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (True, 'NO', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (True, 'NO', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (True, 'NO', 'NO', 142090), (True, 'NO', 'NO', 142091), (True, 'NO', 'NO', 142092), (True, 'NO', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (True, 'NO', 'NO', 142096), (True, 'NO', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (True, 'NO', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (True, 'NO', 'NO', 142105)]",True,Accecpted,0.8492326635760689,0.9779179810725552,False,0.0,False,"def func(*args):
	
	
	def ch(a):
	    for i in range(0, len(a)):
	        if ((a[i] == 'H') or (a[i] == 'Q') or (a[i] == '9')):
	            return 'YES'
	    return 'NO'
	a = args[0]
	print(ch(a))
"
1325986,27657039,"k=0
j=0
word=input()
for i in range(len(word)):
    if(word[i]==(""H"") or word[i]==(""Q"") or word[i]==(""9"")):
       k=k+1
    else:
        j=j+1
if(k>=1):
    print(""YES"")
else:
    print(""NO"")",5930,16,122,6/7/17 21:48,12,1198,1,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (True, 'NO', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (True, 'NO', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (True, 'NO', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (True, 'NO', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (True, 'NO', 'NO', 142090), (True, 'NO', 'NO', 142091), (True, 'NO', 'NO', 142092), (True, 'NO', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (True, 'NO', 'NO', 142096), (True, 'NO', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (True, 'NO', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (True, 'NO', 'NO', 142105)]",True,Accecpted,0.6677604630703731,0.977886977886978,False,0.0,False,"def func(*args):
	
	k = 0
	j = 0
	word = args[0]
	for i in range(len(word)):
	    if ((word[i] == 'H') or (word[i] == 'Q') or (word[i] == '9')):
	        k = (k + 1)
	    else:
	        j = (j + 1)
	if (k >= 1):
	    print('YES')
	else:
	    print('NO')
"
1325985,27656866,"k=0
j=0
word=input()
for i in range(len(word)):
    if(word[i]==(""H"") or word[i]== (""Q"") or word== (""9"")):
       k=k+1
    else:
        j=j+1
if(k>=1):
    print(""YES"")
else:
    print(""NO"")",5930,12,124,6/7/17 21:38,12,1198,2,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (True, 'NO', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (True, 'NO', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (False, 'NO', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (False, 'NO', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (True, 'NO', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (False, 'NO', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (True, 'NO', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (True, 'NO', 'NO', 142090), (True, 'NO', 'NO', 142091), (True, 'NO', 'NO', 142092), (True, 'NO', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (True, 'NO', 'NO', 142096), (True, 'NO', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (True, 'NO', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (True, 'NO', 'NO', 142105)]",False,Wrong Answer,0.6677604630703731,0.977886977886978,False,0.0352941176470588,False,"def func(*args):
	
	k = 0
	j = 0
	word = args[0]
	for i in range(len(word)):
	    if ((word[i] == 'H') or (word[i] == 'Q') or (word == '9')):
	        k = (k + 1)
	    else:
	        j = (j + 1)
	if (k >= 1):
	    print('YES')
	else:
	    print('NO')
"
310639,26766425,"n = int(input())
print(3 * n * (n + 1) + 1)",26538,4508,62,4/30/17 14:20,3,261,1,8,"[(True, '19', '19', 70174), (True, '1', '1', 70175), (True, '7', '7', 70176), (True, '37', '37', 70177), (True, '1684942719577', '1684942719577', 70178), (True, '1681339478558627377', '1681339478558627377', 70179), (True, '2680401947103702001', '2680401947103702001', 70180), (True, '2430000002700000001', '2430000002700000001', 70181), (True, '2999999997000000001', '2999999997000000001', 70182), (True, '3000000003000000001', '3000000003000000001', 70183)]",True,Accecpted,0.7348889200874658,0.9777777777777776,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	print((((3 * n) * (n + 1)) + 1))
"
1245065,26531313,"def happy_sub(n,k):
    if k<n//2+1 or k==n:
        if k!=0 and n%k==0:
            res='YES'
        elif happy_sub(n,10*k+4)=='NO':
            res=happy_sub(n,10*k+7)
        else:
            res='YES'
    else:
        res='NO'
    return res

n=int(input())
print(happy_sub(n,0))",60583,5420,124,4/21/17 8:56,14,1132,1,8,"[(True, 'YES', 'YES', 137749), (True, 'YES', 'YES', 137750), (True, 'NO', 'NO', 137751), (True, 'YES', 'YES', 137752), (True, 'YES', 'YES', 137753), (True, 'NO', 'NO', 137754), (True, 'YES', 'YES', 137755), (True, 'YES', 'YES', 137756), (True, 'YES', 'YES', 137757), (True, 'NO', 'NO', 137758), (True, 'NO', 'NO', 137759), (True, 'YES', 'YES', 137760), (True, 'YES', 'YES', 137761), (True, 'YES', 'YES', 137762), (True, 'YES', 'YES', 137763), (True, 'YES', 'YES', 137764), (True, 'NO', 'NO', 137765), (True, 'NO', 'NO', 137766), (True, 'NO', 'NO', 137767), (True, 'NO', 'NO', 137768), (True, 'YES', 'YES', 137769), (True, 'YES', 'YES', 137770), (True, 'YES', 'YES', 137771), (True, 'YES', 'YES', 137772), (True, 'YES', 'YES', 137773), (True, 'YES', 'YES', 137774), (True, 'NO', 'NO', 137775), (True, 'YES', 'YES', 137776), (True, 'YES', 'YES', 137777), (True, 'NO', 'NO', 137778), (True, 'NO', 'NO', 137779), (True, 'YES', 'YES', 137780), (True, 'YES', 'YES', 137781), (True, 'YES', 'YES', 137782), (True, 'YES', 'YES', 137783), (True, 'YES', 'YES', 137784)]",True,Accecpted,0.8921616972156079,0.9777777777777776,False,0.0,False,"def func(*args):
	
	
	def happy_sub(n, k):
	    if ((k < ((n // 2) + 1)) or (k == n)):
	        if ((k != 0) and ((n % k) == 0)):
	            res = 'YES'
	        elif (happy_sub(n, ((10 * k) + 4)) == 'NO'):
	            res = happy_sub(n, ((10 * k) + 7))
	        else:
	            res = 'YES'
	    else:
	        res = 'NO'
	    return res
	n = int(args[0])
	print(happy_sub(n, 0))
"
2664687,27835151,"m,n=map(int,input().split())
print((m*n)//2)",71088,8,122,6/17/17 3:15,2,2296,1,8,"[(True, '4', '4', 207156), (True, '4', '4', 207157), (True, '2', '2', 207158), (True, '3', '3', 207159), (True, '7', '7', 207160), (True, '8', '8', 207161), (True, '5', '5', 207162), (True, '6', '6', 207163), (True, '7', '7', 207164), (True, '14', '14', 207165), (True, '15', '15', 207166), (True, '2', '2', 207167), (True, '16', '16', 207168), (True, '7', '7', 207169), (True, '9', '9', 207170), (True, '15', '15', 207171), (True, '21', '21', 207172), (True, '22', '22', 207173), (True, '24', '24', 207174), (True, '17', '17', 207175), (True, '128', '128', 207176), (True, '120', '120', 207177), (True, '3', '3', 207178), (True, '112', '112', 207179), (True, '112', '112', 207180), (True, '71', '71', 207181), (True, '40', '40', 207182), (True, '60', '60', 207183), (True, '2', '2', 207184), (True, '6', '6', 207185), (True, '8', '8', 207186), (True, '0', '0', 207187), (True, '1', '1', 207188), (True, '1', '1', 207189), (True, '105', '105', 207190)]",True,Accecpted,1.5319719891192393e-231,0.9777777777777776,False,0.0,False,"def func(*args):
	
	(m, n) = map(int, args[0].split())
	print(((m * n) // 2))
"
1578041,9670156,"import math
a, b, c = map(int, input().split(' '))
print(max(math.ceil(a*c/100 - b), 0))",56716,8,124,2/2/15 1:17,3,1390,1,8,"[(True, '1', '1', 153714), (True, '0', '0', 153715), (True, '1108', '1108', 153716), (True, '0', '0', 153717), (True, '0', '0', 153718), (True, '0', '0', 153719), (True, '9', '9', 153720), (True, '17', '17', 153721), (True, '2', '2', 153722), (True, '0', '0', 153723), (True, '0', '0', 153724), (True, '20', '20', 153725), (True, '248635', '248635', 153726), (True, '336578', '336578', 153727), (True, '541409', '541409', 153728), (True, '75290', '75290', 153729), (True, '700603', '700603', 153730), (True, '393339', '393339', 153731), (True, '432827', '432827', 153732), (True, '582642', '582642', 153733), (True, '731618', '731618', 153734), (True, '224269', '224269', 153735), (True, '771004', '771004', 153736), (True, '219441', '219441', 153737), (True, '40008', '40008', 153738), (True, '121706', '121706', 153739), (True, '228447', '228447', 153740), (True, '0', '0', 153741), (True, '0', '0', 153742), (True, '0', '0', 153743), (True, '0', '0', 153744), (True, '0', '0', 153745), (True, '0', '0', 153746), (True, '0', '0', 153747), (True, '99', '99', 153748), (True, '99', '99', 153749), (True, '999999', '999999', 153750), (True, '0', '0', 153751), (True, '990000', '990000', 153752), (True, '2', '2', 153753), (True, '717013', '717013', 153754), (True, '0', '0', 153755), (True, '1631', '1631', 153756)]",True,Accecpted,0.7611606003349892,0.9777777777777776,False,0.0,False,"def func(*args):
	
	import math
	(a, b, c) = map(int, args[0].split(' '))
	print(max(math.ceil((((a * c) / 100) - b)), 0))
"
3130595,26134317,"mirror = [8, -1, -1, 3, 6, 9, 4, 7, 0, 5]
def dg(n):
    if n:
        res = []
        while n:    
            res.append(n%10)
            n //= 10
    else:
        res = [0]
    return res
    
n = int(input())
dg1 = dg(n)
dg2 = [mirror[d] for d in reversed(dg1)]
if dg1 == dg2:
    print(""Yes"")
else:
    print(""No"")",28772,5436,62,4/5/17 5:05,35,2686,1,8,"[(True, 'Yes', 'Yes', 226884), (True, 'No', 'No', 226885), (True, 'Yes', 'Yes', 226886), (True, 'Yes', 'Yes', 226887), (True, 'No', 'No', 226888), (True, 'Yes', 'Yes', 226889), (True, 'Yes', 'Yes', 226890), (True, 'Yes', 'Yes', 226891), (True, 'Yes', 'Yes', 226892), (True, 'Yes', 'Yes', 226893), (True, 'Yes', 'Yes', 226894), (True, 'Yes', 'Yes', 226895), (True, 'No', 'No', 226896), (True, 'No', 'No', 226897), (True, 'No', 'No', 226898), (True, 'No', 'No', 226899), (True, 'No', 'No', 226900), (True, 'No', 'No', 226901), (True, 'No', 'No', 226902), (True, 'No', 'No', 226903), (True, 'No', 'No', 226904), (True, 'No', 'No', 226905), (True, 'No', 'No', 226906), (True, 'No', 'No', 226907), (True, 'No', 'No', 226908)]",True,Accecpted,0.8350525117808482,0.9776536312849162,False,0.0,False,"def func(*args):
	
	mirror = [8, (- 1), (- 1), 3, 6, 9, 4, 7, 0, 5]
	
	def dg(n):
	    if n:
	        res = []
	        while n:
	            res.append((n % 10))
	            n //= 10
	    else:
	        res = [0]
	    return res
	n = int(args[0])
	dg1 = dg(n)
	dg2 = [mirror[d] for d in reversed(dg1)]
	if (dg1 == dg2):
	    print('Yes')
	else:
	    print('No')
"
3130594,26134281,"mirror = [-1, -1, -1, 3, 6, -1, 4, 7, -1, -1]
def dg(n):
    if n:
        res = []
        while n:    
            res.append(n%10)
            n //= 10
    else:
        res = [0]
    return res
    
n = int(input())
dg1 = dg(n)
dg2 = [mirror[d] for d in reversed(dg1)]
if dg1 == dg2:
    print(""Yes"")
else:
    print(""No"")",28772,5400,62,4/5/17 5:00,35,2686,2,8,"[(True, 'Yes', 'Yes', 226884), (True, 'No', 'No', 226885), (True, 'Yes', 'Yes', 226886), (True, 'Yes', 'Yes', 226887), (True, 'No', 'No', 226888), (False, 'No', 'Yes', 226889), (False, 'No', 'Yes', 226890), (True, 'Yes', 'Yes', 226891), (False, 'No', 'Yes', 226892), (True, 'Yes', 'Yes', 226893), (True, 'Yes', 'Yes', 226894), (False, 'No', 'Yes', 226895), (True, 'No', 'No', 226896), (True, 'No', 'No', 226897), (True, 'No', 'No', 226898), (True, 'No', 'No', 226899), (True, 'No', 'No', 226900), (True, 'No', 'No', 226901), (True, 'No', 'No', 226902), (True, 'No', 'No', 226903), (True, 'No', 'No', 226904), (True, 'No', 'No', 226905), (True, 'No', 'No', 226906), (True, 'No', 'No', 226907), (True, 'No', 'No', 226908)]",False,Wrong Answer,0.8350525117808482,0.9776536312849162,False,0.16,False,"def func(*args):
	
	mirror = [(- 1), (- 1), (- 1), 3, 6, (- 1), 4, 7, (- 1), (- 1)]
	
	def dg(n):
	    if n:
	        res = []
	        while n:
	            res.append((n % 10))
	            n //= 10
	    else:
	        res = [0]
	    return res
	n = int(args[0])
	dg1 = dg(n)
	dg2 = [mirror[d] for d in reversed(dg1)]
	if (dg1 == dg2):
	    print('Yes')
	else:
	    print('No')
"
1425963,29374490,"n=int(input())
num=[int(x) for x in input()]
ok=1
for i in num:
    if i==4 or i==7:
        pass
    else:
        ok=0

s1=0
s2=0

for i in range(0,n//2):
    s1+=num[i]

for i in range(n//2,n):
    s2+=num[i]

if s1!=s2:
    ok=0

if ok==1:
    print(""YES"")
else:
    print(""NO"")",18569,4512,124,8/12/17 13:06,25,1267,1,8,"[(True, 'NO', 'NO', 147341), (True, 'NO', 'NO', 147342), (True, 'YES', 'YES', 147343), (True, 'NO', 'NO', 147344), (True, 'YES', 'YES', 147345), (True, 'YES', 'YES', 147346), (True, 'YES', 'YES', 147347), (True, 'YES', 'YES', 147348), (True, 'NO', 'NO', 147349), (True, 'NO', 'NO', 147350), (True, 'YES', 'YES', 147351), (True, 'NO', 'NO', 147352), (True, 'YES', 'YES', 147353), (True, 'NO', 'NO', 147354), (True, 'NO', 'NO', 147355), (True, 'NO', 'NO', 147356), (True, 'YES', 'YES', 147357), (True, 'YES', 'YES', 147358), (True, 'YES', 'YES', 147359), (True, 'YES', 'YES', 147360), (True, 'YES', 'YES', 147361), (True, 'YES', 'YES', 147362), (True, 'YES', 'YES', 147363), (True, 'YES', 'YES', 147364), (True, 'NO', 'NO', 147365), (True, 'NO', 'NO', 147366), (True, 'NO', 'NO', 147367), (True, 'NO', 'NO', 147368), (True, 'NO', 'NO', 147369), (True, 'NO', 'NO', 147370), (True, 'NO', 'NO', 147371), (True, 'NO', 'NO', 147372), (True, 'NO', 'NO', 147373), (True, 'NO', 'NO', 147374), (True, 'NO', 'NO', 147375), (True, 'NO', 'NO', 147376), (True, 'YES', 'YES', 147377), (True, 'NO', 'NO', 147378), (True, 'NO', 'NO', 147379), (True, 'NO', 'NO', 147380), (True, 'NO', 'NO', 147381), (True, 'NO', 'NO', 147382), (True, 'NO', 'NO', 147383), (True, 'NO', 'NO', 147384), (True, 'NO', 'NO', 147385), (True, 'NO', 'NO', 147386)]",True,Accecpted,0.931838481115484,0.977635782747604,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	num = [int(x) for x in args[1]]
	ok = 1
	for i in num:
	    if ((i == 4) or (i == 7)):
	        pass
	    else:
	        ok = 0
	s1 = 0
	s2 = 0
	for i in range(0, (n // 2)):
	    s1 += num[i]
	for i in range((n // 2), n):
	    s2 += num[i]
	if (s1 != s2):
	    ok = 0
	if (ok == 1):
	    print('YES')
	else:
	    print('NO')
"
1378516,17476371,"__author__ = 'markdaniel'
import math

def does_fit(plates, t_radius, p_radius):
    a = b = float(t_radius - p_radius)
    if a <= 0:
        return ""YES"" if plates == 1 and a == 0 else ""NO""
    if a < p_radius:
        return ""YES"" if plates == 1 else ""NO""
    c = float(2 * p_radius)
    cosC = float(((a*a + b*b) - (c*c))) / (2*a*b)
    angleC = math.degrees(float(math.acos(cosC)))
    angleC = round(angleC, 13)
    # if plates == 6 and t_radius == 9 and p_radius == 3:
    #     return str(angleC)
    return ""YES"" if (360.0 / angleC) >= plates else ""NO""

if __name__ == '__main__':
    plates, t_radius, p_radius = [int(x) for x in input().split(' ')]
    print(does_fit(plates, t_radius, p_radius))",37842,4508,154,4/24/16 8:27,20,1237,1,8,"[(True, 'YES', 'YES', 144713), (True, 'NO', 'NO', 144714), (True, 'YES', 'YES', 144715), (True, 'NO', 'NO', 144716), (True, 'NO', 'NO', 144717), (True, 'YES', 'YES', 144718), (True, 'NO', 'NO', 144719), (True, 'YES', 'YES', 144720), (True, 'YES', 'YES', 144721), (True, 'YES', 'YES', 144722), (True, 'YES', 'YES', 144723), (True, 'NO', 'NO', 144724), (True, 'NO', 'NO', 144725), (True, 'YES', 'YES', 144726), (True, 'NO', 'NO', 144727), (True, 'YES', 'YES', 144728), (True, 'NO', 'NO', 144729), (True, 'YES', 'YES', 144730), (True, 'NO', 'NO', 144731), (True, 'YES', 'YES', 144732), (True, 'NO', 'NO', 144733), (True, 'YES', 'YES', 144734), (True, 'NO', 'NO', 144735), (True, 'YES', 'YES', 144736), (True, 'NO', 'NO', 144737), (True, 'NO', 'NO', 144738), (True, 'NO', 'NO', 144739), (True, 'YES', 'YES', 144740), (True, 'YES', 'YES', 144741), (True, 'NO', 'NO', 144742), (True, 'NO', 'NO', 144743), (True, 'NO', 'NO', 144744), (True, 'NO', 'NO', 144745), (True, 'NO', 'NO', 144746), (True, 'YES', 'YES', 144747), (True, 'YES', 'YES', 144748), (True, 'YES', 'YES', 144749), (True, 'YES', 'YES', 144750), (True, 'NO', 'NO', 144751), (True, 'NO', 'NO', 144752), (True, 'NO', 'NO', 144753), (True, 'NO', 'NO', 144754), (True, 'NO', 'NO', 144755), (True, 'NO', 'NO', 144756), (True, 'NO', 'NO', 144757), (True, 'NO', 'NO', 144758)]",True,Accecpted,0.9480106917583592,0.9775849602313812,False,0.0,False,"def func(*args):
	
	__author__ = 'markdaniel'
	import math
	
	def does_fit(plates, t_radius, p_radius):
	    a = b = float((t_radius - p_radius))
	    if (a <= 0):
	        return ('YES' if ((plates == 1) and (a == 0)) else 'NO')
	    if (a < p_radius):
	        return ('YES' if (plates == 1) else 'NO')
	    c = float((2 * p_radius))
	    cosC = (float((((a * a) + (b * b)) - (c * c))) / ((2 * a) * b))
	    angleC = math.degrees(float(math.acos(cosC)))
	    angleC = round(angleC, 13)
	    return ('YES' if ((360.0 / angleC) >= plates) else 'NO')
	if (__name__ == '__main__'):
	    (plates, t_radius, p_radius) = [int(x) for x in args[0].split(' ')]
	    print(does_fit(plates, t_radius, p_radius))
"
1378515,17476366,"__author__ = 'markdaniel'
import math

def does_fit(plates, t_radius, p_radius):
    a = b = float(t_radius - p_radius)
    if a <= 0:
        return ""YES"" if plates == 1 and a == 0 else ""NO""
    if a < p_radius:
        return ""YES"" if plates == 1 else ""NO""
    c = float(2 * p_radius)
    cosC = float(((a*a + b*b) - (c*c))) / (2*a*b)
    angleC = math.degrees(float(math.acos(cosC)))
    # if plates == 6 and t_radius == 9 and p_radius == 3:
    #     return str(angleC)
    return ""YES"" if (360.0 / angleC) >= plates else ""NO""

if __name__ == '__main__':
    plates, t_radius, p_radius = [int(x) for x in input().split(' ')]
    print(does_fit(plates, t_radius, p_radius))",37842,4492,124,4/24/16 8:25,19,1237,2,8,"[(True, 'YES', 'YES', 144713), (True, 'NO', 'NO', 144714), (True, 'YES', 'YES', 144715), (True, 'NO', 'NO', 144716), (True, 'NO', 'NO', 144717), (False, 'NO', 'YES', 144718), (True, 'NO', 'NO', 144719), (True, 'YES', 'YES', 144720), (True, 'YES', 'YES', 144721), (True, 'YES', 'YES', 144722), (True, 'YES', 'YES', 144723), (True, 'NO', 'NO', 144724), (True, 'NO', 'NO', 144725), (True, 'YES', 'YES', 144726), (True, 'NO', 'NO', 144727), (True, 'YES', 'YES', 144728), (True, 'NO', 'NO', 144729), (True, 'YES', 'YES', 144730), (True, 'NO', 'NO', 144731), (True, 'YES', 'YES', 144732), (True, 'NO', 'NO', 144733), (True, 'YES', 'YES', 144734), (True, 'NO', 'NO', 144735), (True, 'YES', 'YES', 144736), (True, 'NO', 'NO', 144737), (True, 'NO', 'NO', 144738), (True, 'NO', 'NO', 144739), (True, 'YES', 'YES', 144740), (True, 'YES', 'YES', 144741), (True, 'NO', 'NO', 144742), (True, 'NO', 'NO', 144743), (True, 'NO', 'NO', 144744), (True, 'NO', 'NO', 144745), (True, 'NO', 'NO', 144746), (True, 'YES', 'YES', 144747), (True, 'YES', 'YES', 144748), (True, 'YES', 'YES', 144749), (True, 'YES', 'YES', 144750), (True, 'NO', 'NO', 144751), (True, 'NO', 'NO', 144752), (True, 'NO', 'NO', 144753), (True, 'NO', 'NO', 144754), (True, 'NO', 'NO', 144755), (True, 'NO', 'NO', 144756), (True, 'NO', 'NO', 144757), (True, 'NO', 'NO', 144758)]",False,Wrong Answer,0.9480106917583592,0.9775849602313812,False,0.0217391304347826,False,"def func(*args):
	
	__author__ = 'markdaniel'
	import math
	
	def does_fit(plates, t_radius, p_radius):
	    a = b = float((t_radius - p_radius))
	    if (a <= 0):
	        return ('YES' if ((plates == 1) and (a == 0)) else 'NO')
	    if (a < p_radius):
	        return ('YES' if (plates == 1) else 'NO')
	    c = float((2 * p_radius))
	    cosC = (float((((a * a) + (b * b)) - (c * c))) / ((2 * a) * b))
	    angleC = math.degrees(float(math.acos(cosC)))
	    return ('YES' if ((360.0 / angleC) >= plates) else 'NO')
	if (__name__ == '__main__'):
	    (plates, t_radius, p_radius) = [int(x) for x in args[0].split(' ')]
	    print(does_fit(plates, t_radius, p_radius))
"
3297744,29317917,"a, b=map(int,input().split())
s=a**0.5
if(s*(s+1)>b):
    print(""Valera"")
else:
    print(""Vladik"")",841,4500,46,8/10/17 8:12,11,2851,2,8,"[(True, 'Valera', 'Valera', 241127), (False, 'Valera', 'Vladik', 241128), (True, 'Vladik', 'Vladik', 241129), (True, 'Valera', 'Valera', 241130), (True, 'Vladik', 'Vladik', 241131), (True, 'Valera', 'Valera', 241132), (False, 'Valera', 'Vladik', 241133), (False, 'Valera', 'Vladik', 241134), (True, 'Valera', 'Valera', 241135), (True, 'Vladik', 'Vladik', 241136), (True, 'Vladik', 'Vladik', 241137), (True, 'Vladik', 'Vladik', 241138), (True, 'Valera', 'Valera', 241139), (True, 'Vladik', 'Vladik', 241140), (True, 'Valera', 'Valera', 241141), (True, 'Valera', 'Valera', 241142), (False, 'Valera', 'Vladik', 241143), (False, 'Valera', 'Vladik', 241144), (True, 'Valera', 'Valera', 241145), (True, 'Valera', 'Valera', 241146), (True, 'Valera', 'Valera', 241147), (True, 'Valera', 'Valera', 241148), (True, 'Valera', 'Valera', 241149), (True, 'Vladik', 'Vladik', 241150), (True, 'Vladik', 'Vladik', 241151), (True, 'Vladik', 'Vladik', 241152), (False, 'Valera', 'Vladik', 241153), (True, 'Valera', 'Valera', 241154), (True, 'Valera', 'Valera', 241155), (True, 'Vladik', 'Vladik', 241156), (False, 'Valera', 'Vladik', 241157), (True, 'Valera', 'Valera', 241158), (True, 'Valera', 'Valera', 241159), (True, 'Vladik', 'Vladik', 241160), (False, 'Valera', 'Vladik', 241161), (True, 'Valera', 'Valera', 241162), (False, 'Valera', 'Vladik', 241163), (True, 'Valera', 'Valera', 241164), (True, 'Valera', 'Valera', 241165), (True, 'Valera', 'Valera', 241166), (False, 'Valera', 'Vladik', 241167), (True, 'Valera', 'Valera', 241168)]",False,Wrong Answer,0.488923022434901,0.9775784753363228,False,0.238095238095238,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	s = (a ** 0.5)
	if ((s * (s + 1)) > b):
	    print('Valera')
	else:
	    print('Vladik')
"
3297745,29317942,"a, b=map(int,input().split())
s=int(a**0.5)
if(s*(s+1)>b):
    print(""Valera"")
else:
    print(""Vladik"")",841,4520,92,8/10/17 8:13,11,2851,1,8,"[(True, 'Valera', 'Valera', 241127), (True, 'Vladik', 'Vladik', 241128), (True, 'Vladik', 'Vladik', 241129), (True, 'Valera', 'Valera', 241130), (True, 'Vladik', 'Vladik', 241131), (True, 'Valera', 'Valera', 241132), (True, 'Vladik', 'Vladik', 241133), (True, 'Vladik', 'Vladik', 241134), (True, 'Valera', 'Valera', 241135), (True, 'Vladik', 'Vladik', 241136), (True, 'Vladik', 'Vladik', 241137), (True, 'Vladik', 'Vladik', 241138), (True, 'Valera', 'Valera', 241139), (True, 'Vladik', 'Vladik', 241140), (True, 'Valera', 'Valera', 241141), (True, 'Valera', 'Valera', 241142), (True, 'Vladik', 'Vladik', 241143), (True, 'Vladik', 'Vladik', 241144), (True, 'Valera', 'Valera', 241145), (True, 'Valera', 'Valera', 241146), (True, 'Valera', 'Valera', 241147), (True, 'Valera', 'Valera', 241148), (True, 'Valera', 'Valera', 241149), (True, 'Vladik', 'Vladik', 241150), (True, 'Vladik', 'Vladik', 241151), (True, 'Vladik', 'Vladik', 241152), (True, 'Vladik', 'Vladik', 241153), (True, 'Valera', 'Valera', 241154), (True, 'Valera', 'Valera', 241155), (True, 'Vladik', 'Vladik', 241156), (True, 'Vladik', 'Vladik', 241157), (True, 'Valera', 'Valera', 241158), (True, 'Valera', 'Valera', 241159), (True, 'Vladik', 'Vladik', 241160), (True, 'Vladik', 'Vladik', 241161), (True, 'Valera', 'Valera', 241162), (True, 'Vladik', 'Vladik', 241163), (True, 'Valera', 'Valera', 241164), (True, 'Valera', 'Valera', 241165), (True, 'Valera', 'Valera', 241166), (True, 'Vladik', 'Vladik', 241167), (True, 'Valera', 'Valera', 241168)]",True,Accecpted,0.488923022434901,0.9775784753363228,False,0.0,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	s = int((a ** 0.5))
	if ((s * (s + 1)) > b):
	    print('Valera')
	else:
	    print('Vladik')
"
1160140,28473387,"import sys
no=str(input())
d={}
d['4']=0
d['7']=0
for i in no:
	if i=='4' or i=='7':
		d[i]+=1
sum1=0
sum1+=d['4']
sum1+=d['7']
li=['4','7']
for i in str(sum1):
	if i not in li:
		print(""NO"")
		sys.exit()
print(""YES"")",20381,5416,124,7/12/17 15:19,17,1062,1,8,"[(True, 'NO', 'NO', 131260), (True, 'YES', 'YES', 131261), (True, 'NO', 'NO', 131262), (True, 'NO', 'NO', 131263), (True, 'NO', 'NO', 131264), (True, 'NO', 'NO', 131265), (True, 'YES', 'YES', 131266), (True, 'YES', 'YES', 131267), (True, 'YES', 'YES', 131268), (True, 'NO', 'NO', 131269), (True, 'YES', 'YES', 131270), (True, 'NO', 'NO', 131271), (True, 'YES', 'YES', 131272), (True, 'NO', 'NO', 131273), (True, 'NO', 'NO', 131274), (True, 'NO', 'NO', 131275), (True, 'NO', 'NO', 131276), (True, 'NO', 'NO', 131277), (True, 'NO', 'NO', 131278), (True, 'NO', 'NO', 131279), (True, 'NO', 'NO', 131280), (True, 'NO', 'NO', 131281), (True, 'YES', 'YES', 131282), (True, 'YES', 'YES', 131283), (True, 'YES', 'YES', 131284), (True, 'NO', 'NO', 131285), (True, 'YES', 'YES', 131286), (True, 'YES', 'YES', 131287), (True, 'YES', 'YES', 131288), (True, 'NO', 'NO', 131289), (True, 'NO', 'NO', 131290), (True, 'YES', 'YES', 131291), (True, 'YES', 'YES', 131292), (True, 'NO', 'NO', 131293)]",True,Accecpted,0.9157103753711766,0.9774774774774776,False,0.0,False,"def func(*args):
	
	import sys
	no = str(args[0])
	d = {}
	d['4'] = 0
	d['7'] = 0
	for i in no:
	    if ((i == '4') or (i == '7')):
	        d[i] += 1
	sum1 = 0
	sum1 += d['4']
	sum1 += d['7']
	li = ['4', '7']
	for i in str(sum1):
	    if (i not in li):
	        print('NO')
	        sys.exit()
	print('YES')
"
834739,27927840,"import math
# cin = open( ""input.txt"", 'r' )	
# a = list( map ( int, cin.read().split() ) )
a = list( map ( int, input().split() ) )
a.sort()
print( abs( a[1] - a[0] ) + abs( a[1] - a[2] ) )",13161,5440,77,6/20/17 18:21,11,764,1,8,"[(True, '6', '6', 109988), (True, '20', '20', 109989), (True, '99', '99', 109990), (True, '99', '99', 109991), (True, '99', '99', 109992), (True, '2', '2', 109993), (True, '17', '17', 109994), (True, '69', '69', 109995), (True, '72', '72', 109996), (True, '25', '25', 109997), (True, '85', '85', 109998), (True, '52', '52', 109999), (True, '72', '72', 110000), (True, '11', '11', 110001), (True, '15', '15', 110002), (True, '88', '88', 110003), (True, '62', '62', 110004), (True, '70', '70', 110005), (True, '36', '36', 110006), (True, '61', '61', 110007), (True, '5', '5', 110008), (True, '29', '29', 110009), (True, '62', '62', 110010), (True, '69', '69', 110011), (True, '27', '27', 110012), (True, '33', '33', 110013), (True, '61', '61', 110014), (True, '67', '67', 110015), (True, '51', '51', 110016), (True, '55', '55', 110017), (True, '75', '75', 110018), (True, '67', '67', 110019), (True, '61', '61', 110020), (True, '49', '49', 110021), (True, '50', '50', 110022), (True, '2', '2', 110023), (True, '4', '4', 110024), (True, '6', '6', 110025), (True, '8', '8', 110026), (True, '10', '10', 110027), (True, '49', '49', 110028), (True, '10', '10', 110029), (True, '8', '8', 110030), (True, '2', '2', 110031), (True, '2', '2', 110032), (True, '7', '7', 110033), (True, '99', '99', 110034), (True, '5', '5', 110035)]",True,Accecpted,0.9370011451812968,0.9774436090225564,False,0.0,False,"def func(*args):
	
	import math
	a = list(map(int, args[0].split()))
	a.sort()
	print((abs((a[1] - a[0])) + abs((a[1] - a[2]))))
"
1257043,18038626,"n, a, b = map(int, str(input()).strip().split())
print (n - max(a + 1, n - b - 1, 1) + 1)",7101,4472,122,5/23/16 6:33,2,1142,2,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (True, '1', '1', 138320), (True, '1', '1', 138321), (False, '5', '4', 138322), (True, '7', '7', 138323), (True, '5', '5', 138324), (False, '7', '6', 138325), (True, '10', '10', 138326), (True, '7', '7', 138327), (False, '10', '9', 138328), (True, '15', '15', 138329), (True, '8', '8', 138330), (False, '3', '2', 138331), (True, '24', '24', 138332), (True, '5', '5', 138333), (False, '7', '6', 138334), (True, '16', '16', 138335), (True, '5', '5', 138336), (False, '13', '12', 138337), (True, '17', '17', 138338), (True, '38', '38', 138339), (False, '19', '18', 138340), (True, '38', '38', 138341), (True, '13', '13', 138342), (False, '9', '8', 138343), (True, '13', '13', 138344), (True, '1', '1', 138345), (False, '41', '40', 138346), (True, '53', '53', 138347), (True, '34', '34', 138348), (False, '24', '23', 138349), (True, '39', '39', 138350), (True, '38', '38', 138351), (False, '14', '13', 138352), (True, '36', '36', 138353), (True, '7', '7', 138354), (False, '22', '21', 138355), (True, '21', '21', 138356), (True, '2', '2', 138357), (False, '44', '43', 138358), (True, '9', '9', 138359), (True, '14', '14', 138360), (False, '24', '23', 138361), (True, '89', '89', 138362), (True, '32', '32', 138363), (False, '74', '73', 138364), (True, '89', '89', 138365), (True, '19', '19', 138366), (True, '1', '1', 138367)]",False,Wrong Answer,0.7483293841345244,0.9772727272727272,False,0.3,False,"def func(*args):
	
	(n, a, b) = map(int, str(args[0]).strip().split())
	print(((n - max((a + 1), ((n - b) - 1), 1)) + 1))
"
968495,28425867,"i = lambda: int(input())
a = i()
b = i()
c = i()
print(min(a, b // 2, c // 4) * 7)",1865,5452,62,7/11/17 15:17,9,888,1,8,"[(True, '7', '7', 118234), (True, '21', '21', 118235), (True, '0', '0', 118236), (True, '0', '0', 118237), (True, '7', '7', 118238), (True, '1750', '1750', 118239), (True, '0', '0', 118240), (True, '0', '0', 118241), (True, '7', '7', 118242), (True, '0', '0', 118243), (True, '7', '7', 118244), (True, '1750', '1750', 118245), (True, '7', '7', 118246), (True, '0', '0', 118247), (True, '21', '21', 118248), (True, '70', '70', 118249), (True, '693', '693', 118250), (True, '1400', '1400', 118251), (True, '1393', '1393', 118252), (True, '1400', '1400', 118253), (True, '1393', '1393', 118254), (True, '1400', '1400', 118255), (True, '1393', '1393', 118256), (True, '1400', '1400', 118257), (True, '882', '882', 118258), (True, '763', '763', 118259), (True, '903', '903', 118260), (True, '1127', '1127', 118261), (True, '273', '273', 118262), (True, '63', '63', 118263), (True, '959', '959', 118264), (True, '105', '105', 118265), (True, '1323', '1323', 118266), (True, '126', '126', 118267), (True, '1022', '1022', 118268), (True, '490', '490', 118269), (True, '1092', '1092', 118270), (True, '1176', '1176', 118271), (True, '322', '322', 118272), (True, '1218', '1218', 118273), (True, '1008', '1008', 118274), (True, '154', '154', 118275), (True, '980', '980', 118276), (True, '1218', '1218', 118277), (True, '1617', '1617', 118278), (True, '1057', '1057', 118279), (True, '616', '616', 118280), (True, '84', '84', 118281), (True, '1428', '1428', 118282), (True, '889', '889', 118283), (True, '1561', '1561', 118284), (True, '1015', '1015', 118285), (True, '574', '574', 118286), (True, '133', '133', 118287), (True, '1372', '1372', 118288), (True, '833', '833', 118289), (True, '1449', '1449', 118290), (True, '903', '903', 118291), (True, '462', '462', 118292), (True, '1708', '1708', 118293), (True, '1267', '1267', 118294), (True, '721', '721', 118295), (True, '7', '7', 118296), (True, '14', '14', 118297), (True, '7', '7', 118298), (True, '7', '7', 118299), (True, '7', '7', 118300), (True, '14', '14', 118301), (True, '7', '7', 118302), (True, '7', '7', 118303), (True, '14', '14', 118304), (True, '14', '14', 118305), (True, '7', '7', 118306), (True, '14', '14', 118307), (True, '7', '7', 118308), (True, '7', '7', 118309), (True, '7', '7', 118310), (True, '35', '35', 118311), (True, '0', '0', 118312), (True, '21', '21', 118313), (True, '14', '14', 118314), (True, '7', '7', 118315), (True, '0', '0', 118316), (True, '14', '14', 118317)]",True,Accecpted,0.8557423956196076,0.9772727272727272,False,0.0,False,"def func(*args):
	
	i = (lambda : int(args[0]))
	a = i()
	b = i()
	c = i()
	print((min(a, (b // 2), (c // 4)) * 7))
"
1257046,18038636,"n, a, b = map(int, str(input()).strip().split())
print (n - max(a + 1, n - b, 1) + 1)",7101,4792,154,5/23/16 6:35,2,1142,1,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (True, '1', '1', 138320), (True, '1', '1', 138321), (True, '4', '4', 138322), (True, '7', '7', 138323), (True, '5', '5', 138324), (True, '6', '6', 138325), (True, '10', '10', 138326), (True, '7', '7', 138327), (True, '9', '9', 138328), (True, '15', '15', 138329), (True, '8', '8', 138330), (True, '2', '2', 138331), (True, '24', '24', 138332), (True, '5', '5', 138333), (True, '6', '6', 138334), (True, '16', '16', 138335), (True, '5', '5', 138336), (True, '12', '12', 138337), (True, '17', '17', 138338), (True, '38', '38', 138339), (True, '18', '18', 138340), (True, '38', '38', 138341), (True, '13', '13', 138342), (True, '8', '8', 138343), (True, '13', '13', 138344), (True, '1', '1', 138345), (True, '40', '40', 138346), (True, '53', '53', 138347), (True, '34', '34', 138348), (True, '23', '23', 138349), (True, '39', '39', 138350), (True, '38', '38', 138351), (True, '13', '13', 138352), (True, '36', '36', 138353), (True, '7', '7', 138354), (True, '21', '21', 138355), (True, '21', '21', 138356), (True, '2', '2', 138357), (True, '43', '43', 138358), (True, '9', '9', 138359), (True, '14', '14', 138360), (True, '23', '23', 138361), (True, '89', '89', 138362), (True, '32', '32', 138363), (True, '73', '73', 138364), (True, '89', '89', 138365), (True, '19', '19', 138366), (True, '1', '1', 138367)]",True,Accecpted,0.7483293841345244,0.9772727272727272,False,0.0,False,"def func(*args):
	
	(n, a, b) = map(int, str(args[0]).strip().split())
	print(((n - max((a + 1), (n - b), 1)) + 1))
"
1604976,4938149,"n = int(input())
print(1 + 6 * n * (n - 1))",55480,36,124,10/30/13 23:38,2,1408,1,8,"[(True, '13', '13', 154605), (True, '1', '1', 154606), (True, '37', '37', 154607), (True, '73', '73', 154608), (True, '121', '121', 154609), (True, '181', '181', 154610), (True, '253', '253', 154611), (True, '337', '337', 154612), (True, '433', '433', 154613), (True, '1349910001', '1349910001', 154614), (True, '140815081', '140815081', 154615), (True, '286778893', '286778893', 154616), (True, '95688253', '95688253', 154617), (True, '938025073', '938025073', 154618), (True, '1040614381', '1040614381', 154619), (True, '1091413', '1091413', 154620), (True, '846307513', '846307513', 154621), (True, '61497613', '61497613', 154622), (True, '194154193', '194154193', 154623), (True, '1404815413', '1404815413', 154624), (True, '1742476333', '1742476333', 154625), (True, '13151281', '13151281', 154626), (True, '1458569233', '1458569233', 154627), (True, '1602659953', '1602659953', 154628), (True, '106926373', '106926373', 154629), (True, '836502337', '836502337', 154630), (True, '1071819541', '1071819541', 154631), (True, '87669037', '87669037', 154632), (True, '2021881', '2021881', 154633), (True, '1437503773', '1437503773', 154634), (True, '256825837', '256825837', 154635), (True, '743996161', '743996161', 154636), (True, '1600111381', '1600111381', 154637), (True, '437845837', '437845837', 154638), (True, '340160221', '340160221', 154639), (True, '59667373', '59667373', 154640), (True, '793569001', '793569001', 154641), (True, '869408437', '869408437', 154642), (True, '1026753853', '1026753853', 154643), (True, '1999798753', '1999798753', 154644)]",True,Accecpted,0.8265168183793802,0.9772727272727272,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	print((1 + ((6 * n) * (n - 1))))
"
1217914,18818750,"def gcd(a,b):
    if b == 0:return a
    return gcd(b, a % b)

a,b,n = map(int,input().split())
cur = a
win = 1
while(True):
    if n<cur:
        break
    else:
        n = n-gcd(n,cur)
        cur = b if cur == a else a
        win = 1 if win == 0 else 0
print(win)",64002,12,186,6/30/16 10:28,15,1107,2,8,"[(True, '0', '0', 136259), (True, '1', '1', 136260), (True, '1', '1', 136261), (True, '1', '1', 136262), (True, '1', '1', 136263), (True, '0', '0', 136264), (True, '1', '1', 136265), (True, '1', '1', 136266), (False, '1', '0', 136267), (True, '1', '1', 136268), (True, '1', '1', 136269), (False, '0', '1', 136270), (False, '0', '1', 136271), (False, '1', '0', 136272), (True, '1', '1', 136273), (True, '1', '1', 136274), (True, '1', '1', 136275), (True, '1', '1', 136276), (True, '1', '1', 136277), (True, '0', '0', 136278), (True, '1', '1', 136279), (False, '1', '0', 136280), (True, '0', '0', 136281), (True, '0', '0', 136282), (True, '0', '0', 136283), (False, '0', '1', 136284), (True, '1', '1', 136285), (False, '1', '0', 136286), (False, '0', '1', 136287), (False, '1', '0', 136288), (True, '0', '0', 136289), (False, '1', '0', 136290), (True, '0', '0', 136291), (True, '0', '0', 136292), (False, '0', '1', 136293), (True, '1', '1', 136294), (False, '0', '1', 136295), (True, '1', '1', 136296), (True, '1', '1', 136297), (False, '1', '0', 136298), (True, '0', '0', 136299), (True, '0', '0', 136300), (True, '1', '1', 136301), (False, '1', '0', 136302), (False, '1', '0', 136303)]",False,Wrong Answer,0.9452861848260063,0.9772329246935202,False,0.3333333333333333,False,"def func(*args):
	
	
	def gcd(a, b):
	    if (b == 0):
	        return a
	    return gcd(b, (a % b))
	(a, b, n) = map(int, args[0].split())
	cur = a
	win = 1
	while True:
	    if (n < cur):
	        break
	    else:
	        n = (n - gcd(n, cur))
	        cur = (b if (cur == a) else a)
	        win = (1 if (win == 0) else 0)
	print(win)
"
1217915,18818804,"def gcd(a,b):
    if b == 0:return a
    return gcd(b, a % b)

a,b,n = map(int,input().split())
cur = a
win = 1
while(True):
    if n<gcd(n,cur):
        break
    else:
        n = n-gcd(n,cur)
        cur = b if cur == a else a
        win = 1 if win == 0 else 0
print(win)",64002,20,124,6/30/16 10:31,15,1107,1,8,"[(True, '0', '0', 136259), (True, '1', '1', 136260), (True, '1', '1', 136261), (True, '1', '1', 136262), (True, '1', '1', 136263), (True, '0', '0', 136264), (True, '1', '1', 136265), (True, '1', '1', 136266), (True, '0', '0', 136267), (True, '1', '1', 136268), (True, '1', '1', 136269), (True, '1', '1', 136270), (True, '1', '1', 136271), (True, '0', '0', 136272), (True, '1', '1', 136273), (True, '1', '1', 136274), (True, '1', '1', 136275), (True, '1', '1', 136276), (True, '1', '1', 136277), (True, '0', '0', 136278), (True, '1', '1', 136279), (True, '0', '0', 136280), (True, '0', '0', 136281), (True, '0', '0', 136282), (True, '0', '0', 136283), (True, '1', '1', 136284), (True, '1', '1', 136285), (True, '0', '0', 136286), (True, '1', '1', 136287), (True, '0', '0', 136288), (True, '0', '0', 136289), (True, '0', '0', 136290), (True, '0', '0', 136291), (True, '0', '0', 136292), (True, '1', '1', 136293), (True, '1', '1', 136294), (True, '1', '1', 136295), (True, '1', '1', 136296), (True, '1', '1', 136297), (True, '0', '0', 136298), (True, '0', '0', 136299), (True, '0', '0', 136300), (True, '1', '1', 136301), (True, '0', '0', 136302), (True, '0', '0', 136303)]",True,Accecpted,0.9452861848260063,0.9772329246935202,False,0.0,False,"def func(*args):
	
	
	def gcd(a, b):
	    if (b == 0):
	        return a
	    return gcd(b, (a % b))
	(a, b, n) = map(int, args[0].split())
	cur = a
	win = 1
	while True:
	    if (n < gcd(n, cur)):
	        break
	    else:
	        n = (n - gcd(n, cur))
	        cur = (b if (cur == a) else a)
	        win = (1 if (win == 0) else 0)
	print(win)
"
1219547,22619391,"import math
a, b, n = map(int, input().split())
while(True):
    if(n == 0):
        print(""1"")
        break
    n -= math.gcd(a, n)
    if(n == 0):
        print(""0"")
        break
    n -= math.gcd(b, n)",8687,0,186,11/30/16 13:33,11,1107,1,8,"[(True, '0', '0', 136259), (True, '1', '1', 136260), (True, '1', '1', 136261), (True, '1', '1', 136262), (True, '1', '1', 136263), (True, '0', '0', 136264), (True, '1', '1', 136265), (True, '1', '1', 136266), (True, '0', '0', 136267), (True, '1', '1', 136268), (True, '1', '1', 136269), (True, '1', '1', 136270), (True, '1', '1', 136271), (True, '0', '0', 136272), (True, '1', '1', 136273), (True, '1', '1', 136274), (True, '1', '1', 136275), (True, '1', '1', 136276), (True, '1', '1', 136277), (True, '0', '0', 136278), (True, '1', '1', 136279), (True, '0', '0', 136280), (True, '0', '0', 136281), (True, '0', '0', 136282), (True, '0', '0', 136283), (True, '1', '1', 136284), (True, '1', '1', 136285), (True, '0', '0', 136286), (True, '1', '1', 136287), (True, '0', '0', 136288), (True, '0', '0', 136289), (True, '0', '0', 136290), (True, '0', '0', 136291), (True, '0', '0', 136292), (True, '1', '1', 136293), (True, '1', '1', 136294), (True, '1', '1', 136295), (True, '1', '1', 136296), (True, '1', '1', 136297), (True, '0', '0', 136298), (True, '0', '0', 136299), (True, '0', '0', 136300), (True, '1', '1', 136301), (True, '0', '0', 136302), (True, '0', '0', 136303)]",True,Accecpted,0.9304899483313592,0.976851851851852,False,0.0,False,"def func(*args):
	
	import math
	(a, b, n) = map(int, args[0].split())
	while True:
	    if (n == 0):
	        print('1')
	        break
	    n -= math.gcd(a, n)
	    if (n == 0):
	        print('0')
	        break
	    n -= math.gcd(b, n)
"
1219546,22619353,"import math
a, b, n = map(int, input().split())
while(True):
    if(n == 0):
        print(""1"")
        break
    n -= math.gcd(a, n)
    if(n == 0):
        print(""0"")
        break
    n -= math.gcd(a, n)",8687,0,124,11/30/16 13:30,11,1107,2,8,"[(True, '0', '0', 136259), (True, '1', '1', 136260), (True, '1', '1', 136261), (False, '0', '1', 136262), (False, '0', '1', 136263), (True, '0', '0', 136264), (False, '0', '1', 136265), (True, '1', '1', 136266), (True, '0', '0', 136267), (False, '0', '1', 136268), (True, '1', '1', 136269), (False, '0', '1', 136270), (False, '0', '1', 136271), (True, '0', '0', 136272), (True, '1', '1', 136273), (True, '1', '1', 136274), (True, '1', '1', 136275), (True, '1', '1', 136276), (True, '1', '1', 136277), (True, '0', '0', 136278), (True, '1', '1', 136279), (True, '0', '0', 136280), (True, '0', '0', 136281), (False, '1', '0', 136282), (True, '0', '0', 136283), (False, '0', '1', 136284), (True, '1', '1', 136285), (False, '1', '0', 136286), (True, '1', '1', 136287), (False, '1', '0', 136288), (True, '0', '0', 136289), (True, '0', '0', 136290), (True, '0', '0', 136291), (True, '0', '0', 136292), (True, '1', '1', 136293), (True, '1', '1', 136294), (True, '1', '1', 136295), (True, '1', '1', 136296), (True, '1', '1', 136297), (True, '0', '0', 136298), (True, '0', '0', 136299), (True, '0', '0', 136300), (True, '1', '1', 136301), (True, '0', '0', 136302), (True, '0', '0', 136303)]",False,Wrong Answer,0.9304899483313592,0.976851851851852,False,0.2222222222222222,False,"def func(*args):
	
	import math
	(a, b, n) = map(int, args[0].split())
	while True:
	    if (n == 0):
	        print('1')
	        break
	    n -= math.gcd(a, n)
	    if (n == 0):
	        print('0')
	        break
	    n -= math.gcd(a, n)
"
2953097,21994351,"from fractions import Fraction
y, w= map(int, input().split());

a=6-max(y,w)+1;

b=6;
if a==6:
    print(""1/1"");
else:
    print(Fraction(a,b));",7361,1216,216,11/2/16 17:42,10,2520,1,8,"[(True, '1/2', '1/2', 218095), (True, '1/1', '1/1', 218096), (True, '5/6', '5/6', 218097), (True, '2/3', '2/3', 218098), (True, '1/2', '1/2', 218099), (True, '1/3', '1/3', 218100), (True, '1/6', '1/6', 218101), (True, '5/6', '5/6', 218102), (True, '5/6', '5/6', 218103), (True, '2/3', '2/3', 218104), (True, '1/2', '1/2', 218105), (True, '1/3', '1/3', 218106), (True, '1/6', '1/6', 218107), (True, '2/3', '2/3', 218108), (True, '2/3', '2/3', 218109), (True, '2/3', '2/3', 218110), (True, '1/2', '1/2', 218111), (True, '1/3', '1/3', 218112), (True, '1/6', '1/6', 218113), (True, '1/2', '1/2', 218114), (True, '1/2', '1/2', 218115), (True, '1/2', '1/2', 218116), (True, '1/3', '1/3', 218117), (True, '1/6', '1/6', 218118), (True, '1/3', '1/3', 218119), (True, '1/3', '1/3', 218120), (True, '1/3', '1/3', 218121), (True, '1/3', '1/3', 218122), (True, '1/3', '1/3', 218123), (True, '1/6', '1/6', 218124), (True, '1/6', '1/6', 218125), (True, '1/6', '1/6', 218126), (True, '1/6', '1/6', 218127), (True, '1/6', '1/6', 218128), (True, '1/6', '1/6', 218129), (True, '1/6', '1/6', 218130)]",True,Accecpted,0.8003203203844999,0.9767441860465116,False,0.0,False,"def func(*args):
	
	from fractions import Fraction
	(y, w) = map(int, args[0].split())
	a = ((6 - max(y, w)) + 1)
	b = 6
	if (a == 6):
	    print('1/1')
	else:
	    print(Fraction(a, b))
"
2953096,21994330,"from fractions import Fraction
y, w= map(int, input().split());

a=6-y+1;

b=6;
if a==6:
    print(""1/1"");
else:
    print(Fraction(a,b));",7361,1164,186,11/2/16 17:41,10,2520,2,8,"[(True, '1/2', '1/2', 218095), (True, '1/1', '1/1', 218096), (False, '1/1', '5/6', 218097), (False, '1/1', '2/3', 218098), (False, '1/1', '1/2', 218099), (False, '1/1', '1/3', 218100), (False, '1/1', '1/6', 218101), (True, '5/6', '5/6', 218102), (True, '5/6', '5/6', 218103), (False, '5/6', '2/3', 218104), (False, '5/6', '1/2', 218105), (False, '5/6', '1/3', 218106), (False, '5/6', '1/6', 218107), (True, '2/3', '2/3', 218108), (True, '2/3', '2/3', 218109), (True, '2/3', '2/3', 218110), (False, '2/3', '1/2', 218111), (False, '2/3', '1/3', 218112), (False, '2/3', '1/6', 218113), (True, '1/2', '1/2', 218114), (True, '1/2', '1/2', 218115), (True, '1/2', '1/2', 218116), (False, '1/2', '1/3', 218117), (False, '1/2', '1/6', 218118), (True, '1/3', '1/3', 218119), (True, '1/3', '1/3', 218120), (True, '1/3', '1/3', 218121), (True, '1/3', '1/3', 218122), (True, '1/3', '1/3', 218123), (False, '1/3', '1/6', 218124), (True, '1/6', '1/6', 218125), (True, '1/6', '1/6', 218126), (True, '1/6', '1/6', 218127), (True, '1/6', '1/6', 218128), (True, '1/6', '1/6', 218129), (True, '1/6', '1/6', 218130)]",False,Wrong Answer,0.8003203203844999,0.9767441860465116,False,0.4166666666666667,False,"def func(*args):
	
	from fractions import Fraction
	(y, w) = map(int, args[0].split())
	a = ((6 - y) + 1)
	b = 6
	if (a == 6):
	    print('1/1')
	else:
	    print(Fraction(a, b))
"
196714,27278648,"n,m=map(int,input().split())
a=bin(n)
b=bin(m)

k=0
if len(a)==len(b) :
    c=0
    g=0
    for i in range(3,len(b)) :
        if c==0 and b[i]=='1' and a[i]=='0' or c==0 and b[i]=='1' and g==1 :
            k=k+1
            g=1
        if b[i]=='0' :
            c=1
            f=i
            break
    if c==1 :
        a=str(a)
        b=str(b)
        if g==1 and '0' not in b[f+1:] :
            k=k+1
        if g==0 and '0' not in b[f+1:] and '1' not in a[f+1:] :
            k=k+1
    if a==b and a.count('0')==2 and k==0 :
        k=1
    if k==0 and b.count('0')==2 :
        k=1
    print(k)
else :
    k=len(a)-2
    for i in range(2,len(a)) :
        if a[i]=='1'  :
            k=k-1
        else :
            break
    t=len(a)+1
    while t!=len(b) :
        k=k+t-3
        t=t+1

    f=0
    for i in range(3,len(b)) :
        if b[i]=='1' :
            k=k+1
        else :
            f=i
            break
    if '0' not in b[f+1:] and f!=0 :
        k=k+1

    print(k)",4061,256,77,5/22/17 10:13,101,160,1,8,"[(True, '2', '2', 61058), (True, '1', '1', 61059), (True, '0', '0', 61060), (True, '26', '26', 61061), (True, '16', '16', 61062), (True, '0', '0', 61063), (True, '1712', '1712', 61064), (True, '0', '0', 61065), (True, '1', '1', 61066), (True, '1', '1', 61067), (True, '1', '1', 61068), (True, '2', '2', 61069), (True, '3', '3', 61070), (True, '3', '3', 61071), (True, '1', '1', 61072), (True, '1', '1', 61073), (True, '1', '1', 61074), (True, '2', '2', 61075), (True, '3', '3', 61076), (True, '3', '3', 61077), (True, '0', '0', 61078), (True, '0', '0', 61079), (True, '1', '1', 61080), (True, '2', '2', 61081), (True, '2', '2', 61082), (True, '0', '0', 61083), (True, '1', '1', 61084), (True, '2', '2', 61085), (True, '2', '2', 61086), (True, '1', '1', 61087), (True, '2', '2', 61088), (True, '2', '2', 61089), (True, '1', '1', 61090), (True, '1', '1', 61091), (True, '0', '0', 61092), (True, '3', '3', 61093), (True, '1', '1', 61094), (True, '0', '0', 61095), (True, '0', '0', 61096), (True, '45', '45', 61097), (True, '45', '45', 61098), (True, '45', '45', 61099), (True, '45', '45', 61100), (True, '45', '45', 61101), (True, '11', '11', 61102), (True, '10', '10', 61103), (True, '9', '9', 61104), (True, '9', '9', 61105), (True, '9', '9', 61106), (True, '11', '11', 61107), (True, '10', '10', 61108), (True, '9', '9', 61109), (True, '9', '9', 61110), (True, '9', '9', 61111), (True, '11', '11', 61112), (True, '10', '10', 61113), (True, '9', '9', 61114), (True, '9', '9', 61115), (True, '9', '9', 61116), (True, '11', '11', 61117), (True, '10', '10', 61118), (True, '9', '9', 61119), (True, '9', '9', 61120), (True, '9', '9', 61121), (True, '408', '408', 61122), (True, '961', '961', 61123), (True, '1712', '1712', 61124), (True, '58', '58', 61125), (True, '57', '57', 61126), (True, '1', '1', 61127), (True, '0', '0', 61128), (True, '257', '257', 61129), (True, '256', '256', 61130), (True, '257', '257', 61131), (True, '257', '257', 61132), (True, '256', '256', 61133), (True, '1603', '1603', 61134), (True, '1602', '1602', 61135), (True, '1603', '1603', 61136), (True, '583', '583', 61137), (True, '583', '583', 61138), (True, '582', '582', 61139), (True, '1', '1', 61140), (True, '1', '1', 61141), (True, '1', '1', 61142), (True, '1', '1', 61143), (True, '1', '1', 61144), (True, '1', '1', 61145), (True, '1', '1', 61146), (True, '1', '1', 61147), (True, '1', '1', 61148), (True, '0', '0', 61149), (True, '1', '1', 61150), (True, '0', '0', 61151), (True, '1711', '1711', 61152), (True, '1711', '1711', 61153), (True, '1712', '1712', 61154), (True, '1711', '1711', 61155), (True, '1711', '1711', 61156), (True, '1711', '1711', 61157), (True, '1710', '1710', 61158), (True, '2', '2', 61159), (True, '1', '1', 61160)]",True,Accecpted,0.9479204358262856,0.9766355140186916,False,0.0,False,"def func(*args):
	
	(n, m) = map(int, args[0].split())
	a = bin(n)
	b = bin(m)
	k = 0
	if (len(a) == len(b)):
	    c = 0
	    g = 0
	    for i in range(3, len(b)):
	        if (((c == 0) and (b[i] == '1') and (a[i] == '0')) or ((c == 0) and (b[i] == '1') and (g == 1))):
	            k = (k + 1)
	            g = 1
	        if (b[i] == '0'):
	            c = 1
	            f = i
	            break
	    if (c == 1):
	        a = str(a)
	        b = str(b)
	        if ((g == 1) and ('0' not in b[(f + 1):])):
	            k = (k + 1)
	        if ((g == 0) and ('0' not in b[(f + 1):]) and ('1' not in a[(f + 1):])):
	            k = (k + 1)
	    if ((a == b) and (a.count('0') == 2) and (k == 0)):
	        k = 1
	    if ((k == 0) and (b.count('0') == 2)):
	        k = 1
	    print(k)
	else:
	    k = (len(a) - 2)
	    for i in range(2, len(a)):
	        if (a[i] == '1'):
	            k = (k - 1)
	        else:
	            break
	    t = (len(a) + 1)
	    while (t != len(b)):
	        k = ((k + t) - 3)
	        t = (t + 1)
	    f = 0
	    for i in range(3, len(b)):
	        if (b[i] == '1'):
	            k = (k + 1)
	        else:
	            f = i
	            break
	    if (('0' not in b[(f + 1):]) and (f != 0)):
	        k = (k + 1)
	    print(k)
"
196713,27278617,"n,m=map(int,input().split())
a=bin(n)
b=bin(m)

k=0
if len(a)==len(b) :
    c=0
    g=0
    for i in range(3,len(b)) :
        if c==0 and b[i]=='1' and a[i]=='0' or c==0 and b[i]=='1' and g==1 :
            k=k+1
            g=1
        if b[i]=='0' :
            c=1
            f=i
            break
    if c==1 :
        a=str(a)
        b=str(b)
        if g==1 and '0' not in b[f+1:] :
            k=k+1
        if g==0 and '0' not in b[f+1:] and '1' not in a[f+1:] :
            k=k+1
    if a==b and a.count('0')==2 and k==0 :
        k=1
    print(k)
else :
    k=len(a)-2
    for i in range(2,len(a)) :
        if a[i]=='1'  :
            k=k-1
        else :
            break
    t=len(a)+1
    while t!=len(b) :
        k=k+t-3
        t=t+1

    f=0
    for i in range(3,len(b)) :
        if b[i]=='1' :
            k=k+1
        else :
            f=i
            break
    if '0' not in b[f+1:] and f!=0 :
        k=k+1

    print(k)",4061,252,62,5/22/17 10:11,97,160,2,8,"[(True, '2', '2', 61058), (True, '1', '1', 61059), (True, '0', '0', 61060), (True, '26', '26', 61061), (True, '16', '16', 61062), (True, '0', '0', 61063), (True, '1712', '1712', 61064), (True, '0', '0', 61065), (True, '1', '1', 61066), (True, '1', '1', 61067), (True, '1', '1', 61068), (True, '2', '2', 61069), (True, '3', '3', 61070), (True, '3', '3', 61071), (True, '1', '1', 61072), (True, '1', '1', 61073), (True, '1', '1', 61074), (True, '2', '2', 61075), (True, '3', '3', 61076), (True, '3', '3', 61077), (True, '0', '0', 61078), (True, '0', '0', 61079), (True, '1', '1', 61080), (True, '2', '2', 61081), (True, '2', '2', 61082), (True, '0', '0', 61083), (True, '1', '1', 61084), (True, '2', '2', 61085), (True, '2', '2', 61086), (True, '1', '1', 61087), (True, '2', '2', 61088), (True, '2', '2', 61089), (True, '1', '1', 61090), (True, '1', '1', 61091), (True, '0', '0', 61092), (True, '3', '3', 61093), (True, '1', '1', 61094), (True, '0', '0', 61095), (True, '0', '0', 61096), (True, '45', '45', 61097), (True, '45', '45', 61098), (True, '45', '45', 61099), (True, '45', '45', 61100), (True, '45', '45', 61101), (True, '11', '11', 61102), (True, '10', '10', 61103), (True, '9', '9', 61104), (True, '9', '9', 61105), (True, '9', '9', 61106), (True, '11', '11', 61107), (True, '10', '10', 61108), (True, '9', '9', 61109), (True, '9', '9', 61110), (True, '9', '9', 61111), (True, '11', '11', 61112), (True, '10', '10', 61113), (True, '9', '9', 61114), (True, '9', '9', 61115), (True, '9', '9', 61116), (True, '11', '11', 61117), (True, '10', '10', 61118), (True, '9', '9', 61119), (True, '9', '9', 61120), (True, '9', '9', 61121), (True, '408', '408', 61122), (True, '961', '961', 61123), (True, '1712', '1712', 61124), (True, '58', '58', 61125), (True, '57', '57', 61126), (True, '1', '1', 61127), (True, '0', '0', 61128), (True, '257', '257', 61129), (True, '256', '256', 61130), (True, '257', '257', 61131), (True, '257', '257', 61132), (True, '256', '256', 61133), (True, '1603', '1603', 61134), (True, '1602', '1602', 61135), (True, '1603', '1603', 61136), (True, '583', '583', 61137), (True, '583', '583', 61138), (True, '582', '582', 61139), (True, '1', '1', 61140), (False, '0', '1', 61141), (True, '1', '1', 61142), (True, '1', '1', 61143), (True, '1', '1', 61144), (True, '1', '1', 61145), (True, '1', '1', 61146), (False, '0', '1', 61147), (True, '1', '1', 61148), (True, '0', '0', 61149), (True, '1', '1', 61150), (True, '0', '0', 61151), (True, '1711', '1711', 61152), (True, '1711', '1711', 61153), (True, '1712', '1712', 61154), (True, '1711', '1711', 61155), (True, '1711', '1711', 61156), (True, '1711', '1711', 61157), (True, '1710', '1710', 61158), (True, '2', '2', 61159), (True, '1', '1', 61160)]",False,Wrong Answer,0.9479204358262856,0.9766355140186916,False,0.0194174757281553,False,"def func(*args):
	
	(n, m) = map(int, args[0].split())
	a = bin(n)
	b = bin(m)
	k = 0
	if (len(a) == len(b)):
	    c = 0
	    g = 0
	    for i in range(3, len(b)):
	        if (((c == 0) and (b[i] == '1') and (a[i] == '0')) or ((c == 0) and (b[i] == '1') and (g == 1))):
	            k = (k + 1)
	            g = 1
	        if (b[i] == '0'):
	            c = 1
	            f = i
	            break
	    if (c == 1):
	        a = str(a)
	        b = str(b)
	        if ((g == 1) and ('0' not in b[(f + 1):])):
	            k = (k + 1)
	        if ((g == 0) and ('0' not in b[(f + 1):]) and ('1' not in a[(f + 1):])):
	            k = (k + 1)
	    if ((a == b) and (a.count('0') == 2) and (k == 0)):
	        k = 1
	    print(k)
	else:
	    k = (len(a) - 2)
	    for i in range(2, len(a)):
	        if (a[i] == '1'):
	            k = (k - 1)
	        else:
	            break
	    t = (len(a) + 1)
	    while (t != len(b)):
	        k = ((k + t) - 3)
	        t = (t + 1)
	    f = 0
	    for i in range(3, len(b)):
	        if (b[i] == '1'):
	            k = (k + 1)
	        else:
	            f = i
	            break
	    if (('0' not in b[(f + 1):]) and (f != 0)):
	        k = (k + 1)
	    print(k)
"
1944287,24561389,"from math import sqrt
a,b,c = map(int, input().split())
s = int(sqrt(a*b*c))
print((s//a + s//b + s//c)*4)",34,4520,122,2/10/17 6:12,4,1738,1,8,"[(True, '12', '12', 173163), (True, '28', '28', 173164), (True, '68', '68', 173165), (True, '56', '56', 173166), (True, '184', '184', 173167), (True, '308', '308', 173168), (True, '380', '380', 173169), (True, '184', '184', 173170), (True, '444', '444', 173171), (True, '120', '120', 173172), (True, '40008', '40008', 173173), (True, '332', '332', 173174), (True, '528', '528', 173175), (True, '740', '740', 173176), (True, '60', '60', 173177), (True, '856', '856', 173178), (True, '336', '336', 173179), (True, '1308', '1308', 173180), (True, '1736', '1736', 173181), (True, '8964', '8964', 173182), (True, '16436', '16436', 173183), (True, '1200', '1200', 173184), (True, '14500', '14500', 173185), (True, '1188', '1188', 173186), (True, '40008', '40008', 173187), (True, '36', '36', 173188), (True, '1184', '1184', 173189)]",True,Accecpted,0.8153551038173115,0.976525821596244,False,0.0,False,"def func(*args):
	
	from math import sqrt
	(a, b, c) = map(int, args[0].split())
	s = int(sqrt(((a * b) * c)))
	print(((((s // a) + (s // b)) + (s // c)) * 4))
"
3366668,29148611,"from sys import stdin, stdout  
  
  
def read_input():
    inp = []
    for line in stdin:
        inp.append(line.strip())
        if line == '\n':
            break
    return inp[1]
  
def decodeSeries(chars):
    count = 0
    ans = ''
    for char in chars:
        if char == '1':
            count += 1
        else:
            ans += str(count)
            count  = 0
    if count != 0:
        ans += str(count)
    return ans
    
series = read_input()
print(decodeSeries(series))",107500,4496,62,8/3/17 10:19,51,2924,2,8,"[(True, '3', '3', 247097), (True, '2031', '2031', 247098), (True, '1', '1', 247099), (False, '10', '100', 247100), (True, '1001', '1001', 247101), (False, '20200200', '202002000', 247102), (True, '100090049', '100090049', 247103), (True, '123456789', '123456789', 247104), (True, '999999999', '999999999', 247105), (False, '100000000', '1000000000', 247106), (False, '1', '10', 247107), (False, '3', '30', 247108), (False, '1111', '11110', 247109)]",False,Wrong Answer,0.9069443196104878,0.9763928234183192,False,0.4615384615384615,False,"def func(*args):
	
	from sys import stdin, stdout
	
	def read_input():
	    inp = []
	    for line in stdin:
	        inp.append(line.strip())
	        if (line == '\n'):
	            break
	    return inp[1]
	
	def decodeSeries(chars):
	    count = 0
	    ans = ''
	    for char in chars:
	        if (char == '1'):
	            count += 1
	        else:
	            ans += str(count)
	            count = 0
	    if (count != 0):
	        ans += str(count)
	    return ans
	series = read_input()
	print(decodeSeries(series))
"
3366669,29148733,"from sys import stdin, stdout  
  
  
def read_input():
    inp = []
    for line in stdin:
        inp.append(line.strip())
        if line == '\n':
            break
    return inp[1]
  
def decodeSeries(chars):
    count = 0
    ans = ''
    for char in chars:
        if char == '1':
            count += 1
        else:
            ans += str(count)
            count  = 0
    ans += str(count)
    return ans
    
series = read_input()
print(decodeSeries(series))",107500,4516,62,8/3/17 10:25,49,2924,1,8,"[(True, '3', '3', 247097), (True, '2031', '2031', 247098), (True, '1', '1', 247099), (True, '100', '100', 247100), (True, '1001', '1001', 247101), (True, '202002000', '202002000', 247102), (True, '100090049', '100090049', 247103), (True, '123456789', '123456789', 247104), (True, '999999999', '999999999', 247105), (True, '1000000000', '1000000000', 247106), (True, '10', '10', 247107), (True, '30', '30', 247108), (True, '11110', '11110', 247109)]",True,Accecpted,0.9069443196104878,0.9763928234183192,False,0.0,False,"def func(*args):
	
	from sys import stdin, stdout
	
	def read_input():
	    inp = []
	    for line in stdin:
	        inp.append(line.strip())
	        if (line == '\n'):
	            break
	    return inp[1]
	
	def decodeSeries(chars):
	    count = 0
	    ans = ''
	    for char in chars:
	        if (char == '1'):
	            count += 1
	        else:
	            ans += str(count)
	            count = 0
	    ans += str(count)
	    return ans
	series = read_input()
	print(decodeSeries(series))
"
3075673,26153829,"a=int(input())
sstring=[]
if a%2:
   sstring.append('7')
else:
   a=a
if a%2:
   a=a-3
else:
   a=a
for i in range (a // 2):
   sstring.append('1')
print(''.join(sstring))",102361,5424,62,4/5/17 20:12,25,2624,1,8,"[(True, '1', '1', 223533), (True, '7', '7', 223534), (True, '11', '11', 223535), (True, '71', '71', 223536), (True, '111', '111', 223537), (True, '7111', '7111', 223543), (True, '111111111111111111111111111111111111111111111111111111111111111111111111111111', '111111111111111111111111111111111111111111111111111111111111111111111111111111', 223547), (True, '7111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111', '7111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111', 223548)]",True,Accecpted,0.948543837069451,0.9763779527559056,False,0.0,False,"def func(*args):
	
	a = int(args[0])
	sstring = []
	if (a % 2):
	    sstring.append('7')
	else:
	    a = a
	if (a % 2):
	    a = (a - 3)
	else:
	    a = a
	for i in range((a // 2)):
	    sstring.append('1')
	print(''.join(sstring))
"
723127,28159662,"n = int(input())
res = ''
for i in range(n):
  res += 'I love that ' if i % 2 else 'I hate that '
print(res[:-5] + 'it')",1762,5416,62,6/30/17 2:17,9,668,1,8,"[(True, 'I hate it', 'I hate it', 100802), (True, 'I hate that I love it', 'I hate that I love it', 100803), (True, 'I hate that I love that I hate it', 'I hate that I love that I hate it', 100804), (True, 'I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love it', 100805), (True, 'I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate it', 100806), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100807), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100808), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100809), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate it', 100819), (True, 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 'I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love that I hate that I love it', 100820)]",True,Accecpted,0.6264769913656358,0.9763779527559056,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	res = ''
	for i in range(n):
	    res += ('I love that ' if (i % 2) else 'I hate that ')
	print((res[:(- 5)] + 'it'))
"
779406,27055659,"l1, r1, l2, r2, k = [int(x) for x in input().split()]

print((min(r2, r1)-max(l2, l1)) if k >= max(l2, l1) and k <= min(r2, r1) else (min(r2, r1)-max(l2, l1)+1))",20701,0,46,5/12/17 16:49,5,714,2,8,"[(True, '2', '2', 105694), (True, '50', '50', 105695), (True, '1', '1', 105696), (True, '999999999', '999999999', 105697), (True, '0', '0', 105698), (True, '99999999999999997', '99999999999999997', 105699), (True, '0', '0', 105700), (True, '0', '0', 105701), (True, '999999997', '999999997', 105702), (False, '-11046655888169', '0', 105703), (True, '27788438422925', '27788438422925', 105704), (True, '5076', '5076', 105705), (True, '29117730788587', '29117730788587', 105706), (True, '81604391064', '81604391064', 105707), (True, '47247500916780901', '47247500916780901', 105708), (False, '-473238220625527125', '0', 105709), (True, '48172141432145241', '48172141432145241', 105710), (True, '99277597320376979', '99277597320376979', 105711), (True, '256787461333454149', '256787461333454149', 105712), (True, '37925278862451249', '37925278862451249', 105713), (True, '0', '0', 105714), (False, '-2', '0', 105715), (False, '-1', '0', 105716), (True, '1', '1', 105717), (True, '1', '1', 105718), (False, '-6', '0', 105719), (True, '5', '5', 105720), (False, '-4', '0', 105721), (True, '1', '1', 105722), (True, '91', '91', 105723), (True, '1', '1', 105724), (True, '1', '1', 105725), (True, '1', '1', 105726), (True, '1', '1', 105727), (False, '-97', '0', 105728), (False, '-1', '0', 105729), (False, '-1', '0', 105730), (False, '-3', '0', 105731), (False, '-2', '0', 105732), (False, '-2', '0', 105733), (False, '-2', '0', 105734), (False, '-1', '0', 105735), (False, '-29', '0', 105736), (False, '-2', '0', 105737), (False, '-2', '0', 105738), (False, '-2', '0', 105739), (False, '-29', '0', 105740), (False, '-2', '0', 105741), (False, '-4', '0', 105742), (False, '-97', '0', 105743), (False, '-4', '0', 105744), (False, '-4', '0', 105745), (False, '-2', '0', 105746), (False, '-1', '0', 105747), (False, '-1', '0', 105748), (False, '-3', '0', 105749), (False, '-14', '0', 105750), (False, '-9', '0', 105751), (False, '-2', '0', 105752), (False, '-2', '0', 105753), (False, '-299', '0', 105754), (False, '-2', '0', 105755), (False, '-10', '0', 105756), (False, '-99', '0', 105757), (False, '-3', '0', 105758), (False, '-1', '0', 105759), (False, '-99', '0', 105760), (True, '1', '1', 105761), (False, '-89', '0', 105762), (True, '1', '1', 105763), (False, '-9', '0', 105764), (False, '-2', '0', 105765), (False, '-3', '0', 105766), (False, '-4', '0', 105767), (False, '-89', '0', 105768), (False, '-97', '0', 105769), (False, '-9', '0', 105770), (False, '-4', '0', 105771), (False, '-1', '0', 105772), (False, '-1', '0', 105773), (False, '-8', '0', 105774), (False, '-2', '0', 105775), (False, '-4', '0', 105776), (True, '6', '6', 105777), (False, '-3', '0', 105778), (False, '-1', '0', 105779), (False, '-399', '0', 105780), (True, '1', '1', 105781), (True, '900', '900', 105782), (True, '1', '1', 105783), (True, '1', '1', 105784), (True, '1', '1', 105785), (False, '-1', '0', 105786), (True, '2', '2', 105787), (True, '11', '11', 105788), (True, '4', '4', 105789)]",False,Wrong Answer,0.8342380825648356,0.9763313609467456,False,0.59375,False,"def func(*args):
	
	(l1, r1, l2, r2, k) = [int(x) for x in args[0].split()]
	print(((min(r2, r1) - max(l2, l1)) if ((k >= max(l2, l1)) and (k <= min(r2, r1))) else ((min(r2, r1) - max(l2, l1)) + 1)))
"
779407,27055677,"l1, r1, l2, r2, k = [int(x) for x in input().split()]

print(max(0, (min(r2, r1)-max(l2, l1)) if k >= max(l2, l1) and k <= min(r2, r1) else (min(r2, r1)-max(l2, l1)+1)))",20701,8,62,5/12/17 16:51,5,714,1,8,"[(True, '2', '2', 105694), (True, '50', '50', 105695), (True, '1', '1', 105696), (True, '999999999', '999999999', 105697), (True, '0', '0', 105698), (True, '99999999999999997', '99999999999999997', 105699), (True, '0', '0', 105700), (True, '0', '0', 105701), (True, '999999997', '999999997', 105702), (True, '0', '0', 105703), (True, '27788438422925', '27788438422925', 105704), (True, '5076', '5076', 105705), (True, '29117730788587', '29117730788587', 105706), (True, '81604391064', '81604391064', 105707), (True, '47247500916780901', '47247500916780901', 105708), (True, '0', '0', 105709), (True, '48172141432145241', '48172141432145241', 105710), (True, '99277597320376979', '99277597320376979', 105711), (True, '256787461333454149', '256787461333454149', 105712), (True, '37925278862451249', '37925278862451249', 105713), (True, '0', '0', 105714), (True, '0', '0', 105715), (True, '0', '0', 105716), (True, '1', '1', 105717), (True, '1', '1', 105718), (True, '0', '0', 105719), (True, '5', '5', 105720), (True, '0', '0', 105721), (True, '1', '1', 105722), (True, '91', '91', 105723), (True, '1', '1', 105724), (True, '1', '1', 105725), (True, '1', '1', 105726), (True, '1', '1', 105727), (True, '0', '0', 105728), (True, '0', '0', 105729), (True, '0', '0', 105730), (True, '0', '0', 105731), (True, '0', '0', 105732), (True, '0', '0', 105733), (True, '0', '0', 105734), (True, '0', '0', 105735), (True, '0', '0', 105736), (True, '0', '0', 105737), (True, '0', '0', 105738), (True, '0', '0', 105739), (True, '0', '0', 105740), (True, '0', '0', 105741), (True, '0', '0', 105742), (True, '0', '0', 105743), (True, '0', '0', 105744), (True, '0', '0', 105745), (True, '0', '0', 105746), (True, '0', '0', 105747), (True, '0', '0', 105748), (True, '0', '0', 105749), (True, '0', '0', 105750), (True, '0', '0', 105751), (True, '0', '0', 105752), (True, '0', '0', 105753), (True, '0', '0', 105754), (True, '0', '0', 105755), (True, '0', '0', 105756), (True, '0', '0', 105757), (True, '0', '0', 105758), (True, '0', '0', 105759), (True, '0', '0', 105760), (True, '1', '1', 105761), (True, '0', '0', 105762), (True, '1', '1', 105763), (True, '0', '0', 105764), (True, '0', '0', 105765), (True, '0', '0', 105766), (True, '0', '0', 105767), (True, '0', '0', 105768), (True, '0', '0', 105769), (True, '0', '0', 105770), (True, '0', '0', 105771), (True, '0', '0', 105772), (True, '0', '0', 105773), (True, '0', '0', 105774), (True, '0', '0', 105775), (True, '0', '0', 105776), (True, '6', '6', 105777), (True, '0', '0', 105778), (True, '0', '0', 105779), (True, '0', '0', 105780), (True, '1', '1', 105781), (True, '900', '900', 105782), (True, '1', '1', 105783), (True, '1', '1', 105784), (True, '1', '1', 105785), (True, '0', '0', 105786), (True, '2', '2', 105787), (True, '11', '11', 105788), (True, '4', '4', 105789)]",True,Accecpted,0.8342380825648356,0.9763313609467456,False,0.0,False,"def func(*args):
	
	(l1, r1, l2, r2, k) = [int(x) for x in args[0].split()]
	print(max(0, ((min(r2, r1) - max(l2, l1)) if ((k >= max(l2, l1)) and (k <= min(r2, r1))) else ((min(r2, r1) - max(l2, l1)) + 1))))
"
2719054,27211119,"import re;
x=input()
x.lower()
if re.search(""h.*e.*l.*l.*o"",x):
    print(""YES"")
else:
    (""NO"")",23054,436,61,5/19/17 12:04,7,2335,2,8,"[(True, 'YES', 'YES', 208922), (False, '', 'NO', 208923), (True, 'YES', 'YES', 208924), (True, 'YES', 'YES', 208925), (True, 'YES', 'YES', 208926), (False, '', 'NO', 208927), (False, '', 'NO', 208928), (True, 'YES', 'YES', 208929), (True, 'YES', 'YES', 208930), (True, 'YES', 'YES', 208931), (True, 'YES', 'YES', 208932), (False, '', 'NO', 208933), (True, 'YES', 'YES', 208934), (True, 'YES', 'YES', 208935), (False, '', 'NO', 208936), (True, 'YES', 'YES', 208937), (True, 'YES', 'YES', 208938), (False, '', 'NO', 208939), (False, '', 'NO', 208940), (True, 'YES', 'YES', 208941), (True, 'YES', 'YES', 208942), (False, '', 'NO', 208943), (True, 'YES', 'YES', 208944), (True, 'YES', 'YES', 208945), (True, 'YES', 'YES', 208946), (True, 'YES', 'YES', 208947), (True, 'YES', 'YES', 208948), (True, 'YES', 'YES', 208949), (True, 'YES', 'YES', 208950), (True, 'YES', 'YES', 208951), (False, '', 'NO', 208952), (False, '', 'NO', 208953), (False, '', 'NO', 208954), (True, 'YES', 'YES', 208955), (False, '', 'NO', 208956), (True, 'YES', 'YES', 208957), (False, '', 'NO', 208958), (False, '', 'NO', 208959), (False, '', 'NO', 208960), (True, 'YES', 'YES', 208961)]",False,Wrong Answer,0.8633400213704505,0.976303317535545,False,0.375,False,"def func(*args):
	
	import re
	x = args[0]
	x.lower()
	if re.search('h.*e.*l.*l.*o', x):
	    print('YES')
	else:
	    'NO'
"
1214140,29263226,"n=input()
n=list(n)
p=str()
for i in range(len(n)):
    h=ord(n[i])
    if 64 < h and h < 91:
        h=h+32
        if h==97 or h==101 or h==111 or h==105 or h==117:
            n[i]=""""
        else:
            n[i]="".""+chr(h)
    else:
        if h == 97 or h == 101 or h == 111 or h == 105 or h == 117:
            n[i] = """"
        else:
            n[i] = ""."" + chr(h)
    p+=n[i]
print(p)",6202,4520,124,8/7/17 14:18,18,1102,2,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (False, '.x.n.h.c.g.y.t.n.q.c.m.y', '.x.n.h.c.g.t.n.q.c.m', 135750), (False, '.j.f.m.t.b.j.y.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (False, '.f.m.z.c.r.k.c.p.h.y.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.y.c.l.c.d.j.f.r.m.y.q.y.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (False, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.y.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (False, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.y.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (False, '.y.w.y.z.t.y.c.v.v.y.v.y.v.z.y.y.y.y.y.v.y.y.y.y.y.y', '.w.z.t.c.v.v.v.v.z.v', 135766), (False, '.y.j.n.c.k.p.f.y.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (False, '.r.y.j.y.w.f.p.z.y.y.h.y.l.v.l.m.g.y.y.y.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (False, '.y.y.y.l.y.y.y.y.t.y.y.y.y.y.g.m.y.y.y.y.y.y.g', '.l.t.g.m.g', 135770), (False, '.y.y.y.y.k.z.y.y.y.y.y.d.x.f.y.y.y.y.y', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (False, '.y.y.y.y.y.y.m.y.r.c.y.y.g.y.y.y.p.y.y.y.y.y', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (False, '.y.b', '.b', 135775), (False, '.f.l.y', '.f.l', 135776), (False, '.y.y.y.y.y.y.y.y.y.x.d.w.d.w.d.d.w.d.d.d.d.y.y.y.y', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",False,Wrong Answer,0.8586127139503,0.976303317535545,False,0.3333333333333333,False,"def func(*args):
	
	n = args[0]
	n = list(n)
	p = str()
	for i in range(len(n)):
	    h = ord(n[i])
	    if ((64 < h) and (h < 91)):
	        h = (h + 32)
	        if ((h == 97) or (h == 101) or (h == 111) or (h == 105) or (h == 117)):
	            n[i] = ''
	        else:
	            n[i] = ('.' + chr(h))
	    elif ((h == 97) or (h == 101) or (h == 111) or (h == 105) or (h == 117)):
	        n[i] = ''
	    else:
	        n[i] = ('.' + chr(h))
	    p += n[i]
	print(p)
"
1214142,29263288,"n=input()
n=list(n)
p=str()
for i in range(len(n)):
    h=ord(n[i])
    if 64 < h and h < 91:
        h=h+32
        if h==97 or h==101 or h==111 or h==105 or h==117 or h==121:
            n[i]=""""
        else:
            n[i]="".""+chr(h)
    else:
        if h == 97 or h == 101 or h == 111 or h == 105 or h == 117 or h==121:
            n[i] = """"
        else:
            n[i] = ""."" + chr(h)
    p+=n[i]
print(p)",6202,4516,124,8/7/17 14:21,18,1102,1,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (True, '.x.n.h.c.g.t.n.q.c.m', '.x.n.h.c.g.t.n.q.c.m', 135750), (True, '.j.f.m.t.b.j.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (True, '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (True, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (True, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (True, '.w.z.t.c.v.v.v.v.z.v', '.w.z.t.c.v.v.v.v.z.v', 135766), (True, '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (True, '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (True, '.l.t.g.m.g', '.l.t.g.m.g', 135770), (True, '.k.z.d.x.f', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (True, '.m.r.c.g.p', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (True, '.b', '.b', 135775), (True, '.f.l', '.f.l', 135776), (True, '.x.d.w.d.w.d.d.w.d.d.d.d', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",True,Accecpted,0.8586127139503,0.976303317535545,False,0.0,False,"def func(*args):
	
	n = args[0]
	n = list(n)
	p = str()
	for i in range(len(n)):
	    h = ord(n[i])
	    if ((64 < h) and (h < 91)):
	        h = (h + 32)
	        if ((h == 97) or (h == 101) or (h == 111) or (h == 105) or (h == 117) or (h == 121)):
	            n[i] = ''
	        else:
	            n[i] = ('.' + chr(h))
	    elif ((h == 97) or (h == 101) or (h == 111) or (h == 105) or (h == 117) or (h == 121)):
	        n[i] = ''
	    else:
	        n[i] = ('.' + chr(h))
	    p += n[i]
	print(p)
"
2719055,27211137,"import re;
x=input()
x.lower()
if re.search(""h.*e.*l.*l.*o"",x):
    print(""YES"")
else:
    print(""NO"")",23054,464,62,5/19/17 12:05,7,2335,1,8,"[(True, 'YES', 'YES', 208922), (True, 'NO', 'NO', 208923), (True, 'YES', 'YES', 208924), (True, 'YES', 'YES', 208925), (True, 'YES', 'YES', 208926), (True, 'NO', 'NO', 208927), (True, 'NO', 'NO', 208928), (True, 'YES', 'YES', 208929), (True, 'YES', 'YES', 208930), (True, 'YES', 'YES', 208931), (True, 'YES', 'YES', 208932), (True, 'NO', 'NO', 208933), (True, 'YES', 'YES', 208934), (True, 'YES', 'YES', 208935), (True, 'NO', 'NO', 208936), (True, 'YES', 'YES', 208937), (True, 'YES', 'YES', 208938), (True, 'NO', 'NO', 208939), (True, 'NO', 'NO', 208940), (True, 'YES', 'YES', 208941), (True, 'YES', 'YES', 208942), (True, 'NO', 'NO', 208943), (True, 'YES', 'YES', 208944), (True, 'YES', 'YES', 208945), (True, 'YES', 'YES', 208946), (True, 'YES', 'YES', 208947), (True, 'YES', 'YES', 208948), (True, 'YES', 'YES', 208949), (True, 'YES', 'YES', 208950), (True, 'YES', 'YES', 208951), (True, 'NO', 'NO', 208952), (True, 'NO', 'NO', 208953), (True, 'NO', 'NO', 208954), (True, 'YES', 'YES', 208955), (True, 'NO', 'NO', 208956), (True, 'YES', 'YES', 208957), (True, 'NO', 'NO', 208958), (True, 'NO', 'NO', 208959), (True, 'NO', 'NO', 208960), (True, 'YES', 'YES', 208961)]",True,Accecpted,0.8633400213704505,0.976303317535545,False,0.0,False,"def func(*args):
	
	import re
	x = args[0]
	x.lower()
	if re.search('h.*e.*l.*l.*o', x):
	    print('YES')
	else:
	    print('NO')
"
617266,22094091,"from itertools import permutations
def findPow(num):
    ans = 0
    while num > 0:
        num //= 7
        ans +=1
    return ans
a, b = [int(x) for x in input().split(' ')]
x = findPow(a-1)
y = findPow(b-1)
ans = 0
if (x + y) > 7:
    ans = 0
else:
    for i in permutations('0123456', x+y):
        s = ''.join(list(i))
        p, q = int(s[:x], 7), int(s[x:], 7)
        if p <= a-1 and q <= b-1:
            ans+=1

print(ans)",17106,0,46,11/7/16 15:29,41,563,5,8,"[(True, '4', '4', 92499), (True, '5', '5', 92500), (False, '', '0', 92501), (False, '', '1', 92502), (True, '0', '0', 92503), (True, '0', '0', 92504), (True, '0', '0', 92505), (True, '0', '0', 92506), (True, '0', '0', 92507), (True, '0', '0', 92508), (True, '720', '720', 92509), (True, '0', '0', 92510), (True, '5040', '5040', 92511), (True, '2874', '2874', 92512), (True, '0', '0', 92513), (True, '5040', '5040', 92514), (False, '', '1', 92515), (True, '0', '0', 92516), (True, '35', '35', 92517), (True, '120', '120', 92518), (True, '0', '0', 92519), (True, '720', '720', 92520), (True, '360', '360', 92521), (True, '150', '150', 92522), (False, '', '0', 92523), (False, '', '1', 92524), (True, '6', '6', 92525), (True, '5040', '5040', 92526), (True, '5040', '5040', 92527), (True, '3360', '3360', 92528), (True, '3600', '3600', 92529), (True, '0', '0', 92530), (True, '240', '240', 92531), (True, '0', '0', 92532), (True, '0', '0', 92533), (True, '0', '0', 92534), (True, '0', '0', 92535), (True, '40', '40', 92536), (True, '0', '0', 92537)]",False,Runtime Error,0.9007861756770994,0.9762150982419856,False,0.1282051282051282,False,"def func(*args):
	
	from itertools import permutations
	
	def findPow(num):
	    ans = 0
	    while (num > 0):
	        num //= 7
	        ans += 1
	    return ans
	(a, b) = [int(x) for x in args[0].split(' ')]
	x = findPow((a - 1))
	y = findPow((b - 1))
	ans = 0
	if ((x + y) > 7):
	    ans = 0
	else:
	    for i in permutations('0123456', (x + y)):
	        s = ''.join(list(i))
	        (p, q) = (int(s[:x], 7), int(s[x:], 7))
	        if ((p <= (a - 1)) and (q <= (b - 1))):
	            ans += 1
	print(ans)
"
617267,22094136,"from itertools import permutations
def findPow(num):
    ans = 1
    num = num // 7
    while num > 0:
        num //= 7
        ans +=1
    return ans
a, b = [int(x) for x in input().split(' ')]
x = findPow(a-1)
y = findPow(b-1)
ans = 0
if (x + y) > 7:
    ans = 0
else:
    for i in permutations('0123456', x+y):
        s = ''.join(list(i))
        p, q = int(s[:x], 7), int(s[x:], 7)
        if p <= a-1 and q <= b-1:
            ans+=1

print(ans)",17106,8,77,11/7/16 15:31,43,563,1,8,"[(True, '4', '4', 92499), (True, '5', '5', 92500), (True, '0', '0', 92501), (True, '1', '1', 92502), (True, '0', '0', 92503), (True, '0', '0', 92504), (True, '0', '0', 92505), (True, '0', '0', 92506), (True, '0', '0', 92507), (True, '0', '0', 92508), (True, '720', '720', 92509), (True, '0', '0', 92510), (True, '5040', '5040', 92511), (True, '2874', '2874', 92512), (True, '0', '0', 92513), (True, '5040', '5040', 92514), (True, '1', '1', 92515), (True, '0', '0', 92516), (True, '35', '35', 92517), (True, '120', '120', 92518), (True, '0', '0', 92519), (True, '720', '720', 92520), (True, '360', '360', 92521), (True, '150', '150', 92522), (True, '0', '0', 92523), (True, '1', '1', 92524), (True, '6', '6', 92525), (True, '5040', '5040', 92526), (True, '5040', '5040', 92527), (True, '3360', '3360', 92528), (True, '3600', '3600', 92529), (True, '0', '0', 92530), (True, '240', '240', 92531), (True, '0', '0', 92532), (True, '0', '0', 92533), (True, '0', '0', 92534), (True, '0', '0', 92535), (True, '40', '40', 92536), (True, '0', '0', 92537)]",True,Accecpted,0.9007861756770994,0.9762150982419856,False,0.0,False,"def func(*args):
	
	from itertools import permutations
	
	def findPow(num):
	    ans = 1
	    num = (num // 7)
	    while (num > 0):
	        num //= 7
	        ans += 1
	    return ans
	(a, b) = [int(x) for x in args[0].split(' ')]
	x = findPow((a - 1))
	y = findPow((b - 1))
	ans = 0
	if ((x + y) > 7):
	    ans = 0
	else:
	    for i in permutations('0123456', (x + y)):
	        s = ''.join(list(i))
	        (p, q) = (int(s[:x], 7), int(s[x:], 7))
	        if ((p <= (a - 1)) and (q <= (b - 1))):
	            ans += 1
	print(ans)
"
1262093,27963701,"n,a,b=map(int,input().split())
n-=a
if n>b+1:
    print(n-b)
else:
    print(n)",1151,4496,92,6/22/17 14:32,6,1142,2,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (True, '1', '1', 138320), (True, '1', '1', 138321), (False, '2', '4', 138322), (True, '7', '7', 138323), (True, '5', '5', 138324), (False, '4', '6', 138325), (True, '10', '10', 138326), (True, '7', '7', 138327), (False, '10', '9', 138328), (True, '15', '15', 138329), (True, '8', '8', 138330), (False, '21', '2', 138331), (True, '24', '24', 138332), (True, '5', '5', 138333), (False, '17', '6', 138334), (True, '16', '16', 138335), (True, '5', '5', 138336), (False, '3', '12', 138337), (True, '17', '17', 138338), (True, '38', '38', 138339), (False, '14', '18', 138340), (True, '38', '38', 138341), (True, '13', '13', 138342), (False, '16', '8', 138343), (True, '13', '13', 138344), (True, '1', '1', 138345), (False, '8', '40', 138346), (True, '53', '53', 138347), (True, '34', '34', 138348), (False, '13', '23', 138349), (True, '39', '39', 138350), (True, '38', '38', 138351), (False, '47', '13', 138352), (True, '36', '36', 138353), (True, '7', '7', 138354), (False, '34', '21', 138355), (True, '21', '21', 138356), (True, '2', '2', 138357), (False, '42', '43', 138358), (True, '9', '9', 138359), (True, '14', '14', 138360), (False, '68', '23', 138361), (True, '89', '89', 138362), (True, '32', '32', 138363), (False, '2', '73', 138364), (True, '89', '89', 138365), (True, '19', '19', 138366), (True, '1', '1', 138367)]",False,Wrong Answer,0.488923022434901,0.9761904761904762,False,0.3,False,"def func(*args):
	
	(n, a, b) = map(int, args[0].split())
	n -= a
	if (n > (b + 1)):
	    print((n - b))
	else:
	    print(n)
"
1262094,27963734,"n,a,b=map(int,input().split())
n-=a
if n>b+1:
    print(b+1)
else:
    print(n)",1151,5416,92,6/22/17 14:35,6,1142,1,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (True, '1', '1', 138320), (True, '1', '1', 138321), (True, '4', '4', 138322), (True, '7', '7', 138323), (True, '5', '5', 138324), (True, '6', '6', 138325), (True, '10', '10', 138326), (True, '7', '7', 138327), (True, '9', '9', 138328), (True, '15', '15', 138329), (True, '8', '8', 138330), (True, '2', '2', 138331), (True, '24', '24', 138332), (True, '5', '5', 138333), (True, '6', '6', 138334), (True, '16', '16', 138335), (True, '5', '5', 138336), (True, '12', '12', 138337), (True, '17', '17', 138338), (True, '38', '38', 138339), (True, '18', '18', 138340), (True, '38', '38', 138341), (True, '13', '13', 138342), (True, '8', '8', 138343), (True, '13', '13', 138344), (True, '1', '1', 138345), (True, '40', '40', 138346), (True, '53', '53', 138347), (True, '34', '34', 138348), (True, '23', '23', 138349), (True, '39', '39', 138350), (True, '38', '38', 138351), (True, '13', '13', 138352), (True, '36', '36', 138353), (True, '7', '7', 138354), (True, '21', '21', 138355), (True, '21', '21', 138356), (True, '2', '2', 138357), (True, '43', '43', 138358), (True, '9', '9', 138359), (True, '14', '14', 138360), (True, '23', '23', 138361), (True, '89', '89', 138362), (True, '32', '32', 138363), (True, '73', '73', 138364), (True, '89', '89', 138365), (True, '19', '19', 138366), (True, '1', '1', 138367)]",True,Accecpted,0.488923022434901,0.9761904761904762,False,0.0,False,"def func(*args):
	
	(n, a, b) = map(int, args[0].split())
	n -= a
	if (n > (b + 1)):
	    print((b + 1))
	else:
	    print(n)
"
1248145,28647974,"n = int(input())
a = [i for i in range(1000) if not (('1' in str(i)) or ('2' in str(i)) or ('3' in str(i)) or ('5' in str(i)) or ('6' in str(i)) or ('8' in str(i)) or ('9' in str(i)) or ('0' in str(i)))] 
t = 1
for e in a:
    if n % e == 0:
        print('YES')
        t = 0
        break
if t:
    print('NO')",60976,4516,124,7/17/17 22:50,10,1132,1,8,"[(True, 'YES', 'YES', 137749), (True, 'YES', 'YES', 137750), (True, 'NO', 'NO', 137751), (True, 'YES', 'YES', 137752), (True, 'YES', 'YES', 137753), (True, 'NO', 'NO', 137754), (True, 'YES', 'YES', 137755), (True, 'YES', 'YES', 137756), (True, 'YES', 'YES', 137757), (True, 'NO', 'NO', 137758), (True, 'NO', 'NO', 137759), (True, 'YES', 'YES', 137760), (True, 'YES', 'YES', 137761), (True, 'YES', 'YES', 137762), (True, 'YES', 'YES', 137763), (True, 'YES', 'YES', 137764), (True, 'NO', 'NO', 137765), (True, 'NO', 'NO', 137766), (True, 'NO', 'NO', 137767), (True, 'NO', 'NO', 137768), (True, 'YES', 'YES', 137769), (True, 'YES', 'YES', 137770), (True, 'YES', 'YES', 137771), (True, 'YES', 'YES', 137772), (True, 'YES', 'YES', 137773), (True, 'YES', 'YES', 137774), (True, 'NO', 'NO', 137775), (True, 'YES', 'YES', 137776), (True, 'YES', 'YES', 137777), (True, 'NO', 'NO', 137778), (True, 'NO', 'NO', 137779), (True, 'YES', 'YES', 137780), (True, 'YES', 'YES', 137781), (True, 'YES', 'YES', 137782), (True, 'YES', 'YES', 137783), (True, 'YES', 'YES', 137784)]",True,Accecpted,0.9597373988977618,0.9760765550239234,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	a = [i for i in range(1000) if (not (('1' in str(i)) or ('2' in str(i)) or ('3' in str(i)) or ('5' in str(i)) or ('6' in str(i)) or ('8' in str(i)) or ('9' in str(i)) or ('0' in str(i))))]
	t = 1
	for e in a:
	    if ((n % e) == 0):
	        print('YES')
	        t = 0
	        break
	if t:
	    print('NO')
"
1248144,28647959,"n = int(input())
a = [i for i in range(1000) if not (('1' in str(i)) or ('2' in str(i)) or ('3' in str(i)) or ('5' in str(i)) or ('6' in str(i)) or ('8' in str(i)) or ('9' in str(i)) or ('0' in str(i)))] 
t = 1
for e in a:
    if n % e == 0:
        print('YES')
        t = 0
if t:
    print('NO')",60976,4512,124,7/17/17 22:49,9,1132,2,8,"[(True, 'YES', 'YES', 137749), (True, 'YES', 'YES', 137750), (True, 'NO', 'NO', 137751), (True, 'YES', 'YES', 137752), (True, 'YES', 'YES', 137753), (True, 'NO', 'NO', 137754), (False, 'YES\nYES', 'YES', 137755), (True, 'YES', 'YES', 137756), (True, 'YES', 'YES', 137757), (True, 'NO', 'NO', 137758), (True, 'NO', 'NO', 137759), (True, 'YES', 'YES', 137760), (True, 'YES', 'YES', 137761), (False, 'YES\nYES', 'YES', 137762), (True, 'YES', 'YES', 137763), (True, 'YES', 'YES', 137764), (True, 'NO', 'NO', 137765), (True, 'NO', 'NO', 137766), (True, 'NO', 'NO', 137767), (True, 'NO', 'NO', 137768), (True, 'YES', 'YES', 137769), (True, 'YES', 'YES', 137770), (True, 'YES', 'YES', 137771), (False, 'YES\nYES\nYES', 'YES', 137772), (False, 'YES\nYES', 'YES', 137773), (True, 'YES', 'YES', 137774), (True, 'NO', 'NO', 137775), (True, 'YES', 'YES', 137776), (False, 'YES\nYES', 'YES', 137777), (True, 'NO', 'NO', 137778), (True, 'NO', 'NO', 137779), (True, 'YES', 'YES', 137780), (True, 'YES', 'YES', 137781), (True, 'YES', 'YES', 137782), (True, 'YES', 'YES', 137783), (True, 'YES', 'YES', 137784)]",False,Wrong Answer,0.9597373988977618,0.9760765550239234,False,0.1388888888888889,False,"def func(*args):
	
	n = int(args[0])
	a = [i for i in range(1000) if (not (('1' in str(i)) or ('2' in str(i)) or ('3' in str(i)) or ('5' in str(i)) or ('6' in str(i)) or ('8' in str(i)) or ('9' in str(i)) or ('0' in str(i))))]
	t = 1
	for e in a:
	    if ((n % e) == 0):
	        print('YES')
	        t = 0
	if t:
	    print('NO')
"
1431332,23685906,"b = [0] * 4
b[0] = int(input())
b[1] = int(input())
b[2]= int(input())
b[3] = int(input())
d = int(input())
a = []
if 1 in b:
    print(d)
else:
    l = 0
    for i in range(1, d + 1):
        for j in range(4):
            if i % b[j] == 0:
                l += 1
                break
    print(len(a))",153,4524,92,1/10/17 21:06,17,1274,2,8,"[(True, '12', '12', 147720), (False, '0', '17', 147721), (True, '100000', '100000', 147722), (True, '0', '0', 147723), (False, '0', '32718', 147724), (True, '59392', '59392', 147725), (True, '44835', '44835', 147726), (True, '62982', '62982', 147727), (False, '0', '35246', 147728), (True, '75083', '75083', 147729), (False, '0', '24656', 147730), (False, '0', '36320', 147731), (False, '0', '28244', 147732), (False, '0', '16540', 147733), (False, '0', '36302', 147734), (False, '0', '15539', 147735), (True, '39901', '39901', 147736), (True, '58048', '58048', 147737), (False, '0', '21956', 147738), (False, '0', '32736', 147739), (False, '0', '11118', 147740), (True, '49547', '49547', 147741), (False, '0', '36019', 147742), (True, '63537', '63537', 147743), (False, '0', '53678', 147744), (True, '99831', '99831', 147745), (False, '0', '20360', 147746), (False, '0', '29931', 147747), (True, '89535', '89535', 147748), (True, '7682', '7682', 147749), (False, '0', '9224', 147750), (False, '0', '43539', 147751), (False, '0', '2438', 147752), (False, '0', '415', 147753), (False, '0', '10000', 147754), (True, '1', '1', 147755), (True, '0', '0', 147756), (True, '10', '10', 147757), (True, '100', '100', 147758), (True, '0', '0', 147759)]",False,Wrong Answer,0.8923575006167597,0.9760765550239234,False,0.525,False,"def func(*args):
	
	b = ([0] * 4)
	b[0] = int(args[0])
	b[1] = int(args[1])
	b[2] = int(args[2])
	b[3] = int(args[3])
	d = int(args[4])
	a = []
	if (1 in b):
	    print(d)
	else:
	    l = 0
	    for i in range(1, (d + 1)):
	        for j in range(4):
	            if ((i % b[j]) == 0):
	                l += 1
	                break
	    print(len(a))
"
1431333,23685953,"b = [0] * 4
b[0] = int(input())
b[1] = int(input())
b[2]= int(input())
b[3] = int(input())
d = int(input())
if 1 in b:
    print(d)
else:
    l = 0
    for i in range(1, d + 1):
        for j in range(4):
            if i % b[j] == 0:
                l += 1
                break
    print(l)",153,4548,342,1/10/17 21:09,16,1274,1,8,"[(True, '12', '12', 147720), (True, '17', '17', 147721), (True, '100000', '100000', 147722), (True, '0', '0', 147723), (True, '32718', '32718', 147724), (True, '59392', '59392', 147725), (True, '44835', '44835', 147726), (True, '62982', '62982', 147727), (True, '35246', '35246', 147728), (True, '75083', '75083', 147729), (True, '24656', '24656', 147730), (True, '36320', '36320', 147731), (True, '28244', '28244', 147732), (True, '16540', '16540', 147733), (True, '36302', '36302', 147734), (True, '15539', '15539', 147735), (True, '39901', '39901', 147736), (True, '58048', '58048', 147737), (True, '21956', '21956', 147738), (True, '32736', '32736', 147739), (True, '11118', '11118', 147740), (True, '49547', '49547', 147741), (True, '36019', '36019', 147742), (True, '63537', '63537', 147743), (True, '53678', '53678', 147744), (True, '99831', '99831', 147745), (True, '20360', '20360', 147746), (True, '29931', '29931', 147747), (True, '89535', '89535', 147748), (True, '7682', '7682', 147749), (True, '9224', '9224', 147750), (True, '43539', '43539', 147751), (True, '2438', '2438', 147752), (True, '415', '415', 147753), (True, '10000', '10000', 147754), (True, '1', '1', 147755), (True, '0', '0', 147756), (True, '10', '10', 147757), (True, '100', '100', 147758), (True, '0', '0', 147759)]",True,Accecpted,0.8923575006167597,0.9760765550239234,False,0.0,False,"def func(*args):
	
	b = ([0] * 4)
	b[0] = int(args[0])
	b[1] = int(args[1])
	b[2] = int(args[2])
	b[3] = int(args[3])
	d = int(args[4])
	if (1 in b):
	    print(d)
	else:
	    l = 0
	    for i in range(1, (d + 1)):
	        for j in range(4):
	            if ((i % b[j]) == 0):
	                l += 1
	                break
	    print(l)
"
1326225,27742082,"x = input()
a=list()
for i in range(0,len(x)):
	a.append(x[i])
if ('H'==x[0]) or ('Q'==x[0]) or ('9'==x[0]) or ('H' in a) or ('Q' in a) or ('9' in a):
	print(""YES"")
else:
	print(""NO"")",49346,8,124,6/12/17 20:05,8,1198,1,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (True, 'NO', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (True, 'NO', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (True, 'NO', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (True, 'NO', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (True, 'NO', 'NO', 142090), (True, 'NO', 'NO', 142091), (True, 'NO', 'NO', 142092), (True, 'NO', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (True, 'NO', 'NO', 142096), (True, 'NO', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (True, 'NO', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (True, 'NO', 'NO', 142105)]",True,Accecpted,0.9127592114472296,0.976,False,0.0,False,"def func(*args):
	
	x = args[0]
	a = list()
	for i in range(0, len(x)):
	    a.append(x[i])
	if (('H' == x[0]) or ('Q' == x[0]) or ('9' == x[0]) or ('H' in a) or ('Q' in a) or ('9' in a)):
	    print('YES')
	else:
	    print('NO')
"
1436897,28911239,"#!usr/bin/python 3

def main():
    a,b,c,d,e=int(input()),int(input()),int(input()),int(input()),int(input())
    harm=[a,b,c,d]
    nums=set(range(1,e+1))
    nums2=set(range(1,e+1))
    for x in range(0,4):
        for y in nums2:
            if y%harm[x]==0:
                if y in nums:
                    nums.remove(y)
    print(e-len(nums))
    
if __name__=='__main__':
    main()",60880,13068,342,7/26/17 19:51,16,1274,1,8,"[(True, '12', '12', 147720), (True, '17', '17', 147721), (True, '100000', '100000', 147722), (True, '0', '0', 147723), (True, '32718', '32718', 147724), (True, '59392', '59392', 147725), (True, '44835', '44835', 147726), (True, '62982', '62982', 147727), (True, '35246', '35246', 147728), (True, '75083', '75083', 147729), (True, '24656', '24656', 147730), (True, '36320', '36320', 147731), (True, '28244', '28244', 147732), (True, '16540', '16540', 147733), (True, '36302', '36302', 147734), (True, '15539', '15539', 147735), (True, '39901', '39901', 147736), (True, '58048', '58048', 147737), (True, '21956', '21956', 147738), (True, '32736', '32736', 147739), (True, '11118', '11118', 147740), (True, '49547', '49547', 147741), (True, '36019', '36019', 147742), (True, '63537', '63537', 147743), (True, '53678', '53678', 147744), (True, '99831', '99831', 147745), (True, '20360', '20360', 147746), (True, '29931', '29931', 147747), (True, '89535', '89535', 147748), (True, '7682', '7682', 147749), (True, '9224', '9224', 147750), (True, '43539', '43539', 147751), (True, '2438', '2438', 147752), (True, '415', '415', 147753), (True, '10000', '10000', 147754), (True, '1', '1', 147755), (True, '0', '0', 147756), (True, '10', '10', 147757), (True, '100', '100', 147758), (True, '0', '0', 147759)]",True,Accecpted,0.9025139799587886,0.9759615384615384,False,0.0,False,"def func(*args):
	
	
	def main():
	    (a, b, c, d, e) = (int(args[0]), int(args[1]), int(args[2]), int(args[3]), int(args[4]))
	    harm = [a, b, c, d]
	    nums = set(range(1, (e + 1)))
	    nums2 = set(range(1, (e + 1)))
	    for x in range(0, 4):
	        for y in nums2:
	            if ((y % harm[x]) == 0):
	                if (y in nums):
	                    nums.remove(y)
	    print((e - len(nums)))
	if (__name__ == '__main__'):
	    main()
"
1436898,28911263,"#!usr/bin/python 3

def main():
    a,b,c,d,e=int(input()),int(input()),int(input()),int(input()),int(input())
    harm=[a,b,c,d]
    nums=set(range(1,e+1))
    nums2=set(range(1,e+1))
    for x in range(0,4):
        for y in nums2:
            if y%harm[x]==0:
                if y in nums:
                    nums.remove(y)
        nums2=nums
    print(e-len(nums))
    
if __name__=='__main__':
    main()",60880,4484,92,7/26/17 19:53,17,1274,5,8,"[(True, '12', '12', 147720), (False, '', '17', 147721), (True, '100000', '100000', 147722), (True, '0', '0', 147723), (False, '', '32718', 147724), (False, '', '59392', 147725), (False, '', '44835', 147726), (False, '', '62982', 147727), (False, '', '35246', 147728), (False, '', '75083', 147729), (False, '', '24656', 147730), (False, '', '36320', 147731), (False, '', '28244', 147732), (False, '', '16540', 147733), (False, '', '36302', 147734), (False, '', '15539', 147735), (True, '39901', '39901', 147736), (False, '', '58048', 147737), (False, '', '21956', 147738), (False, '', '32736', 147739), (True, '11118', '11118', 147740), (True, '49547', '49547', 147741), (False, '', '36019', 147742), (False, '', '63537', 147743), (False, '', '53678', 147744), (False, '', '99831', 147745), (True, '20360', '20360', 147746), (False, '', '29931', 147747), (True, '89535', '89535', 147748), (False, '', '7682', 147749), (False, '', '9224', 147750), (False, '', '43539', 147751), (False, '', '2438', 147752), (False, '', '415', 147753), (True, '10000', '10000', 147754), (True, '1', '1', 147755), (True, '0', '0', 147756), (False, '', '10', 147757), (False, '', '100', 147758), (True, '0', '0', 147759)]",False,Runtime Error,0.9025139799587886,0.9759615384615384,False,0.7,False,"def func(*args):
	
	
	def main():
	    (a, b, c, d, e) = (int(args[0]), int(args[1]), int(args[2]), int(args[3]), int(args[4]))
	    harm = [a, b, c, d]
	    nums = set(range(1, (e + 1)))
	    nums2 = set(range(1, (e + 1)))
	    for x in range(0, 4):
	        for y in nums2:
	            if ((y % harm[x]) == 0):
	                if (y in nums):
	                    nums.remove(y)
	        nums2 = nums
	    print((e - len(nums)))
	if (__name__ == '__main__'):
	    main()
"
1379189,19167539,"""""""
	Author		: Arif Ahmad
	Date  		: 
	Algo  		: 
	Difficulty	: 
""""""

def main():
	n, R, r = map(int, input().split())

	if n == 1:
		if r <= R: print('YES')
		else: print('NO')
	else:
		import math
		# calculate side of inscribed n-gon
		a = (R - r) * math.sin(math.pi / n)
		if r < a+1e-6: print('YES')
		else: print('NO')


if __name__ == '__main__':
    main()",22201,16,124,7/16/16 9:48,23,1237,2,8,"[(True, 'YES', 'YES', 144713), (True, 'NO', 'NO', 144714), (True, 'YES', 'YES', 144715), (True, 'NO', 'NO', 144716), (True, 'NO', 'NO', 144717), (True, 'YES', 'YES', 144718), (True, 'NO', 'NO', 144719), (True, 'YES', 'YES', 144720), (True, 'YES', 'YES', 144721), (True, 'YES', 'YES', 144722), (True, 'YES', 'YES', 144723), (True, 'NO', 'NO', 144724), (True, 'NO', 'NO', 144725), (True, 'YES', 'YES', 144726), (True, 'NO', 'NO', 144727), (True, 'YES', 'YES', 144728), (True, 'NO', 'NO', 144729), (True, 'YES', 'YES', 144730), (True, 'NO', 'NO', 144731), (True, 'YES', 'YES', 144732), (True, 'NO', 'NO', 144733), (True, 'YES', 'YES', 144734), (True, 'NO', 'NO', 144735), (True, 'YES', 'YES', 144736), (False, 'YES', 'NO', 144737), (True, 'NO', 'NO', 144738), (True, 'NO', 'NO', 144739), (True, 'YES', 'YES', 144740), (True, 'YES', 'YES', 144741), (True, 'NO', 'NO', 144742), (True, 'NO', 'NO', 144743), (True, 'NO', 'NO', 144744), (True, 'NO', 'NO', 144745), (True, 'NO', 'NO', 144746), (True, 'YES', 'YES', 144747), (True, 'YES', 'YES', 144748), (True, 'YES', 'YES', 144749), (True, 'YES', 'YES', 144750), (True, 'NO', 'NO', 144751), (True, 'NO', 'NO', 144752), (True, 'NO', 'NO', 144753), (True, 'NO', 'NO', 144754), (True, 'NO', 'NO', 144755), (True, 'NO', 'NO', 144756), (False, 'YES', 'NO', 144757), (True, 'NO', 'NO', 144758)]",False,Wrong Answer,0.9160889743103992,0.9759188846641318,False,0.0434782608695652,False,"def func(*args):
	
	'\n\tAuthor\t\t: Arif Ahmad\n\tDate  \t\t: \n\tAlgo  \t\t: \n\tDifficulty\t: \n'
	
	def main():
	    (n, R, r) = map(int, args[0].split())
	    if (n == 1):
	        if (r <= R):
	            print('YES')
	        else:
	            print('NO')
	    else:
	        import math
	        a = ((R - r) * math.sin((math.pi / n)))
	        if (r < (a + 1e-06)):
	            print('YES')
	        else:
	            print('NO')
	if (__name__ == '__main__'):
	    main()
"
1379190,19167627,"""""""
	Author		: Arif Ahmad
	Date  		: 
	Algo  		: 
	Difficulty	: 
""""""

def main():
	n, R, r = map(int, input().split())

	if n == 1:
		if r <= R: print('YES')
		else: print('NO')
	else:
		import math
		# calculate side of inscribed n-gon
		a = (R - r) * math.sin(math.pi / n)
		
		#print(a)
		if r < a+1e-7: print('YES')
		else: print('NO')


if __name__ == '__main__':
    main()",22201,20,124,7/16/16 9:54,25,1237,1,8,"[(True, 'YES', 'YES', 144713), (True, 'NO', 'NO', 144714), (True, 'YES', 'YES', 144715), (True, 'NO', 'NO', 144716), (True, 'NO', 'NO', 144717), (True, 'YES', 'YES', 144718), (True, 'NO', 'NO', 144719), (True, 'YES', 'YES', 144720), (True, 'YES', 'YES', 144721), (True, 'YES', 'YES', 144722), (True, 'YES', 'YES', 144723), (True, 'NO', 'NO', 144724), (True, 'NO', 'NO', 144725), (True, 'YES', 'YES', 144726), (True, 'NO', 'NO', 144727), (True, 'YES', 'YES', 144728), (True, 'NO', 'NO', 144729), (True, 'YES', 'YES', 144730), (True, 'NO', 'NO', 144731), (True, 'YES', 'YES', 144732), (True, 'NO', 'NO', 144733), (True, 'YES', 'YES', 144734), (True, 'NO', 'NO', 144735), (True, 'YES', 'YES', 144736), (True, 'NO', 'NO', 144737), (True, 'NO', 'NO', 144738), (True, 'NO', 'NO', 144739), (True, 'YES', 'YES', 144740), (True, 'YES', 'YES', 144741), (True, 'NO', 'NO', 144742), (True, 'NO', 'NO', 144743), (True, 'NO', 'NO', 144744), (True, 'NO', 'NO', 144745), (True, 'NO', 'NO', 144746), (True, 'YES', 'YES', 144747), (True, 'YES', 'YES', 144748), (True, 'YES', 'YES', 144749), (True, 'YES', 'YES', 144750), (True, 'NO', 'NO', 144751), (True, 'NO', 'NO', 144752), (True, 'NO', 'NO', 144753), (True, 'NO', 'NO', 144754), (True, 'NO', 'NO', 144755), (True, 'NO', 'NO', 144756), (True, 'NO', 'NO', 144757), (True, 'NO', 'NO', 144758)]",True,Accecpted,0.9160889743103992,0.9759188846641318,False,0.0,False,"def func(*args):
	
	'\n\tAuthor\t\t: Arif Ahmad\n\tDate  \t\t: \n\tAlgo  \t\t: \n\tDifficulty\t: \n'
	
	def main():
	    (n, R, r) = map(int, args[0].split())
	    if (n == 1):
	        if (r <= R):
	            print('YES')
	        else:
	            print('NO')
	    else:
	        import math
	        a = ((R - r) * math.sin((math.pi / n)))
	        if (r < (a + 1e-07)):
	            print('YES')
	        else:
	            print('NO')
	if (__name__ == '__main__'):
	    main()
"
2661349,25976756,"a = input()
a = a.split()
M = int(a[0])
N = int(a[1])
C = M * N
if C % 2 ==0:
    print (C//2)
else:
    print(C//2)",94913,5432,122,3/31/17 14:20,9,2296,1,8,"[(True, '4', '4', 207156), (True, '4', '4', 207157), (True, '2', '2', 207158), (True, '3', '3', 207159), (True, '7', '7', 207160), (True, '8', '8', 207161), (True, '5', '5', 207162), (True, '6', '6', 207163), (True, '7', '7', 207164), (True, '14', '14', 207165), (True, '15', '15', 207166), (True, '2', '2', 207167), (True, '16', '16', 207168), (True, '7', '7', 207169), (True, '9', '9', 207170), (True, '15', '15', 207171), (True, '21', '21', 207172), (True, '22', '22', 207173), (True, '24', '24', 207174), (True, '17', '17', 207175), (True, '128', '128', 207176), (True, '120', '120', 207177), (True, '3', '3', 207178), (True, '112', '112', 207179), (True, '112', '112', 207180), (True, '71', '71', 207181), (True, '40', '40', 207182), (True, '60', '60', 207183), (True, '2', '2', 207184), (True, '6', '6', 207185), (True, '8', '8', 207186), (True, '0', '0', 207187), (True, '1', '1', 207188), (True, '1', '1', 207189), (True, '105', '105', 207190)]",True,Accecpted,0.7795149903947967,0.9758064516129032,False,0.0,False,"def func(*args):
	
	a = args[0]
	a = a.split()
	M = int(a[0])
	N = int(a[1])
	C = (M * N)
	if ((C % 2) == 0):
	    print((C // 2))
	else:
	    print((C // 2))
"
1245206,26675003,"A = input()
n = int(A)
x = 0
for i in A:
    if i != '4' and i !='7':
        x =0
        break
    x = 1
if n%4 == 0:
    x = 1
if n%7 == 0:
    x =1
if n == 799 or n == 94:
    x = 1
    
if x == 1:
    print('YES')
else:
    print('NO')",1213,5412,124,4/26/17 5:54,19,1132,2,8,"[(True, 'YES', 'YES', 137749), (True, 'YES', 'YES', 137750), (True, 'NO', 'NO', 137751), (True, 'YES', 'YES', 137752), (True, 'YES', 'YES', 137753), (True, 'NO', 'NO', 137754), (True, 'YES', 'YES', 137755), (True, 'YES', 'YES', 137756), (True, 'YES', 'YES', 137757), (True, 'NO', 'NO', 137758), (True, 'NO', 'NO', 137759), (True, 'YES', 'YES', 137760), (True, 'YES', 'YES', 137761), (True, 'YES', 'YES', 137762), (True, 'YES', 'YES', 137763), (True, 'YES', 'YES', 137764), (True, 'NO', 'NO', 137765), (True, 'NO', 'NO', 137766), (True, 'NO', 'NO', 137767), (True, 'NO', 'NO', 137768), (True, 'YES', 'YES', 137769), (True, 'YES', 'YES', 137770), (True, 'YES', 'YES', 137771), (True, 'YES', 'YES', 137772), (True, 'YES', 'YES', 137773), (True, 'YES', 'YES', 137774), (True, 'NO', 'NO', 137775), (True, 'YES', 'YES', 137776), (True, 'YES', 'YES', 137777), (True, 'NO', 'NO', 137778), (True, 'NO', 'NO', 137779), (True, 'YES', 'YES', 137780), (True, 'YES', 'YES', 137781), (True, 'YES', 'YES', 137782), (True, 'YES', 'YES', 137783), (False, 'NO', 'YES', 137784)]",False,Wrong Answer,0.8896253402832722,0.975609756097561,False,0.0277777777777777,False,"def func(*args):
	
	A = args[0]
	n = int(A)
	x = 0
	for i in A:
	    if ((i != '4') and (i != '7')):
	        x = 0
	        break
	    x = 1
	if ((n % 4) == 0):
	    x = 1
	if ((n % 7) == 0):
	    x = 1
	if ((n == 799) or (n == 94)):
	    x = 1
	if (x == 1):
	    print('YES')
	else:
	    print('NO')
"
2955529,25113293,"list=input().split()
x=max(int(list[0]),int(list[1]))
def gcd(a,b):
    if b==0:
        return a
    return gcd(b,a%b)
a=6-x+1
b=6
print(""%d/%d"" % (a/gcd(a,b),b/gcd(a,b)))",19774,4532,124,3/1/17 4:36,9,2520,1,8,"[(True, '1/2', '1/2', 218095), (True, '1/1', '1/1', 218096), (True, '5/6', '5/6', 218097), (True, '2/3', '2/3', 218098), (True, '1/2', '1/2', 218099), (True, '1/3', '1/3', 218100), (True, '1/6', '1/6', 218101), (True, '5/6', '5/6', 218102), (True, '5/6', '5/6', 218103), (True, '2/3', '2/3', 218104), (True, '1/2', '1/2', 218105), (True, '1/3', '1/3', 218106), (True, '1/6', '1/6', 218107), (True, '2/3', '2/3', 218108), (True, '2/3', '2/3', 218109), (True, '2/3', '2/3', 218110), (True, '1/2', '1/2', 218111), (True, '1/3', '1/3', 218112), (True, '1/6', '1/6', 218113), (True, '1/2', '1/2', 218114), (True, '1/2', '1/2', 218115), (True, '1/2', '1/2', 218116), (True, '1/3', '1/3', 218117), (True, '1/6', '1/6', 218118), (True, '1/3', '1/3', 218119), (True, '1/3', '1/3', 218120), (True, '1/3', '1/3', 218121), (True, '1/3', '1/3', 218122), (True, '1/3', '1/3', 218123), (True, '1/6', '1/6', 218124), (True, '1/6', '1/6', 218125), (True, '1/6', '1/6', 218126), (True, '1/6', '1/6', 218127), (True, '1/6', '1/6', 218128), (True, '1/6', '1/6', 218129), (True, '1/6', '1/6', 218130)]",True,Accecpted,0.7447819789879647,0.975609756097561,False,0.0,False,"def func(*args):
	
	list = args[0].split()
	x = max(int(list[0]), int(list[1]))
	
	def gcd(a, b):
	    if (b == 0):
	        return a
	    return gcd(b, (a % b))
	a = ((6 - x) + 1)
	b = 6
	print(('%d/%d' % ((a / gcd(a, b)), (b / gcd(a, b)))))
"
2736375,28784332,"sticks=list(map(int,input().split()))
sticks.sort()
sticks.reverse()

if sticks[0]<sticks[1]+sticks[2] or sticks[1]<sticks[2]+sticks[3]:
    print(""TRIANGLE"")
elif sticks[0]==sticks[1]+sticks[2] or sticks[1]==sticks[2]+sticks[3]:
    print(""SEGMENT"")
else:
    print(""IMPOSSIBLE"")",63565,4532,154,7/22/17 20:42,10,2346,1,8,"[(True, 'TRIANGLE', 'TRIANGLE', 209679), (True, 'SEGMENT', 'SEGMENT', 209680), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209681), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209682), (True, 'TRIANGLE', 'TRIANGLE', 209683), (True, 'TRIANGLE', 'TRIANGLE', 209684), (True, 'TRIANGLE', 'TRIANGLE', 209685), (True, 'TRIANGLE', 'TRIANGLE', 209686), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209687), (True, 'TRIANGLE', 'TRIANGLE', 209688), (True, 'SEGMENT', 'SEGMENT', 209689), (True, 'TRIANGLE', 'TRIANGLE', 209690), (True, 'SEGMENT', 'SEGMENT', 209691), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209692), (True, 'TRIANGLE', 'TRIANGLE', 209693), (True, 'TRIANGLE', 'TRIANGLE', 209694), (True, 'SEGMENT', 'SEGMENT', 209695), (True, 'SEGMENT', 'SEGMENT', 209696), (True, 'TRIANGLE', 'TRIANGLE', 209697), (True, 'SEGMENT', 'SEGMENT', 209698), (True, 'SEGMENT', 'SEGMENT', 209699), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209700), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209701), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209702), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209703), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209704), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209705), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209706), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209707), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209708), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209709), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209710), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209711), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209712), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209713), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209714), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209715), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209716), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209717), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209718), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209719), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209720), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209721), (True, 'SEGMENT', 'SEGMENT', 209722), (True, 'SEGMENT', 'SEGMENT', 209723), (True, 'SEGMENT', 'SEGMENT', 209724), (True, 'SEGMENT', 'SEGMENT', 209725), (True, 'SEGMENT', 'SEGMENT', 209726), (True, 'SEGMENT', 'SEGMENT', 209727), (True, 'SEGMENT', 'SEGMENT', 209728), (True, 'SEGMENT', 'SEGMENT', 209729), (True, 'SEGMENT', 'SEGMENT', 209730), (True, 'SEGMENT', 'SEGMENT', 209731), (True, 'SEGMENT', 'SEGMENT', 209732), (True, 'SEGMENT', 'SEGMENT', 209733), (True, 'SEGMENT', 'SEGMENT', 209734), (True, 'SEGMENT', 'SEGMENT', 209735), (True, 'SEGMENT', 'SEGMENT', 209736), (True, 'SEGMENT', 'SEGMENT', 209737), (True, 'SEGMENT', 'SEGMENT', 209738), (True, 'SEGMENT', 'SEGMENT', 209739), (True, 'SEGMENT', 'SEGMENT', 209740), (True, 'SEGMENT', 'SEGMENT', 209741), (True, 'TRIANGLE', 'TRIANGLE', 209742), (True, 'TRIANGLE', 'TRIANGLE', 209743), (True, 'TRIANGLE', 'TRIANGLE', 209744), (True, 'TRIANGLE', 'TRIANGLE', 209745), (True, 'TRIANGLE', 'TRIANGLE', 209746), (True, 'TRIANGLE', 'TRIANGLE', 209747), (True, 'TRIANGLE', 'TRIANGLE', 209748), (True, 'TRIANGLE', 'TRIANGLE', 209749), (True, 'TRIANGLE', 'TRIANGLE', 209750), (True, 'TRIANGLE', 'TRIANGLE', 209751), (True, 'TRIANGLE', 'TRIANGLE', 209752), (True, 'TRIANGLE', 'TRIANGLE', 209753), (True, 'TRIANGLE', 'TRIANGLE', 209754), (True, 'TRIANGLE', 'TRIANGLE', 209755), (True, 'TRIANGLE', 'TRIANGLE', 209756), (True, 'TRIANGLE', 'TRIANGLE', 209757), (True, 'TRIANGLE', 'TRIANGLE', 209758), (True, 'TRIANGLE', 'TRIANGLE', 209759), (True, 'TRIANGLE', 'TRIANGLE', 209760), (True, 'TRIANGLE', 'TRIANGLE', 209761)]",True,Accecpted,0.8153551038173115,0.975609756097561,False,0.0,False,"def func(*args):
	
	sticks = list(map(int, args[0].split()))
	sticks.sort()
	sticks.reverse()
	if ((sticks[0] < (sticks[1] + sticks[2])) or (sticks[1] < (sticks[2] + sticks[3]))):
	    print('TRIANGLE')
	elif ((sticks[0] == (sticks[1] + sticks[2])) or (sticks[1] == (sticks[2] + sticks[3]))):
	    print('SEGMENT')
	else:
	    print('IMPOSSIBLE')
"
1245207,26675051,"A = input()
n = int(A)
x = 0
for i in A:
    if i != '4' and i !='7':
        x =0
        break
    x = 1
if n%4 == 0:
    x = 1
if n%7 == 0:
    x =1
if n == 799 or n == 94 or n == 141:
    x = 1
    
if x == 1:
    print('YES')
else:
    print('NO')",1213,5416,124,4/26/17 6:00,19,1132,1,8,"[(True, 'YES', 'YES', 137749), (True, 'YES', 'YES', 137750), (True, 'NO', 'NO', 137751), (True, 'YES', 'YES', 137752), (True, 'YES', 'YES', 137753), (True, 'NO', 'NO', 137754), (True, 'YES', 'YES', 137755), (True, 'YES', 'YES', 137756), (True, 'YES', 'YES', 137757), (True, 'NO', 'NO', 137758), (True, 'NO', 'NO', 137759), (True, 'YES', 'YES', 137760), (True, 'YES', 'YES', 137761), (True, 'YES', 'YES', 137762), (True, 'YES', 'YES', 137763), (True, 'YES', 'YES', 137764), (True, 'NO', 'NO', 137765), (True, 'NO', 'NO', 137766), (True, 'NO', 'NO', 137767), (True, 'NO', 'NO', 137768), (True, 'YES', 'YES', 137769), (True, 'YES', 'YES', 137770), (True, 'YES', 'YES', 137771), (True, 'YES', 'YES', 137772), (True, 'YES', 'YES', 137773), (True, 'YES', 'YES', 137774), (True, 'NO', 'NO', 137775), (True, 'YES', 'YES', 137776), (True, 'YES', 'YES', 137777), (True, 'NO', 'NO', 137778), (True, 'NO', 'NO', 137779), (True, 'YES', 'YES', 137780), (True, 'YES', 'YES', 137781), (True, 'YES', 'YES', 137782), (True, 'YES', 'YES', 137783), (True, 'YES', 'YES', 137784)]",True,Accecpted,0.8896253402832722,0.975609756097561,False,0.0,False,"def func(*args):
	
	A = args[0]
	n = int(A)
	x = 0
	for i in A:
	    if ((i != '4') and (i != '7')):
	        x = 0
	        break
	    x = 1
	if ((n % 4) == 0):
	    x = 1
	if ((n % 7) == 0):
	    x = 1
	if ((n == 799) or (n == 94) or (n == 141)):
	    x = 1
	if (x == 1):
	    print('YES')
	else:
	    print('NO')
"
3233254,27111006,"def str_finder(s):
    counter = counter_str(s)
    for i in range(len(s)):
        if s[i] == ""V"":
            new = s[:i] + 'K' + s[i + 1:]
        else:
            new = s[:i] + 'V' + s[i + 1:]
        if counter_str(new) > counter:
            counter = counter_str(new)
    return counter


def counter_str(s):
    count = 0
    for i in range(len(s) - 1):
        if s[i] == ""V"" and s[i + 1] == ""K"":
            count += 1
    return count


if __name__ == '__main__':
    n = str(input())
    print(str_finder(n))",105059,0,62,5/14/17 21:10,45,2785,1,8,"[(True, '1', '1', 235946), (True, '1', '1', 235947), (True, '0', '0', 235948), (True, '3', '3', 235949), (True, '1', '1', 235950), (True, '5', '5', 235951), (True, '14', '14', 235952), (True, '32', '32', 235953), (True, '32', '32', 235954), (True, '21', '21', 235955), (True, '25', '25', 235956), (True, '7', '7', 235957), (True, '24', '24', 235958), (True, '35', '35', 235959), (True, '9', '9', 235960), (True, '6', '6', 235961), (True, '9', '9', 235962), (True, '22', '22', 235963), (True, '25', '25', 235964), (True, '29', '29', 235965), (True, '3', '3', 235966), (True, '16', '16', 235967), (True, '13', '13', 235968), (True, '26', '26', 235969), (True, '26', '26', 235970), (True, '0', '0', 235971), (True, '2', '2', 235972), (True, '2', '2', 235973), (True, '0', '0', 235974), (True, '1', '1', 235975), (True, '2', '2', 235976), (True, '1', '1', 235977), (True, '1', '1', 235978), (True, '3', '3', 235979), (True, '2', '2', 235980), (True, '2', '2', 235981), (True, '1', '1', 235982), (True, '1', '1', 235983), (True, '2', '2', 235984), (True, '1', '1', 235985), (True, '8', '8', 235986), (True, '2', '2', 235987), (True, '2', '2', 235988), (True, '1', '1', 235989), (True, '1', '1', 235990), (True, '3', '3', 235991), (True, '1', '1', 235992), (True, '1', '1', 235993), (True, '1', '1', 235994), (True, '2', '2', 235995), (True, '3', '3', 235996), (True, '1', '1', 235997), (True, '2', '2', 235998), (True, '2', '2', 235999), (True, '2', '2', 236000), (True, '1', '1', 236001), (True, '10', '10', 236002), (True, '3', '3', 236003), (True, '3', '3', 236004), (True, '1', '1', 236005), (True, '1', '1', 236006), (True, '3', '3', 236007), (True, '3', '3', 236008)]",True,Accecpted,0.986577384100838,0.9755213055303718,False,0.0,False,"def func(*args):
	
	
	def str_finder(s):
	    counter = counter_str(s)
	    for i in range(len(s)):
	        if (s[i] == 'V'):
	            new = ((s[:i] + 'K') + s[(i + 1):])
	        else:
	            new = ((s[:i] + 'V') + s[(i + 1):])
	        if (counter_str(new) > counter):
	            counter = counter_str(new)
	    return counter
	
	def counter_str(s):
	    count = 0
	    for i in range((len(s) - 1)):
	        if ((s[i] == 'V') and (s[(i + 1)] == 'K')):
	            count += 1
	    return count
	if (__name__ == '__main__'):
	    n = str(args[0])
	    print(str_finder(n))
"
930857,28257451,"n, a, b, c = map(int, input().split())

mod = n % 4
if mod == 0:
    print(0)
elif mod == 1:
    print(min(3 * a, c, a + b))
elif mod == 2:
    print(min(2 * a, b, 2 * c))
elif mod == 3:
    print(min(a, 3 * c))",1401,5424,62,7/3/17 16:58,11,858,2,8,"[(True, '3', '3', 116330), (True, '1', '1', 116331), (True, '0', '0', 116332), (True, '1000000000', '1000000000', 116333), (True, '0', '0', 116334), (True, '1', '1', 116335), (True, '5', '5', 116336), (True, '2', '2', 116337), (True, '1', '1', 116338), (True, '1000000000', '1000000000', 116339), (True, '999999990', '999999990', 116340), (True, '335918278', '335918278', 116341), (True, '1000000000', '1000000000', 116342), (True, '0', '0', 116343), (True, '524125987', '524125987', 116344), (True, '673102149', '673102149', 116345), (True, '585325539', '585325539', 116346), (True, '11774896', '11774896', 116347), (True, '0', '0', 116348), (True, '131116353', '131116353', 116349), (True, '8075817', '8075817', 116350), (True, '640274071', '640274071', 116351), (True, '405799987', '405799987', 116352), (True, '678092074', '678092074', 116353), (True, '0', '0', 116354), (False, '5', '3', 116355), (True, '2', '2', 116356), (True, '2', '2', 116357), (True, '3', '3', 116358), (True, '438793836', '438793836', 116359), (True, '307539138', '307539138', 116360), (True, '146086131', '146086131', 116361), (True, '347508634', '347508634', 116362), (True, '0', '0', 116363), (True, '764655030', '764655030', 116364), (True, '0', '0', 116365), (True, '335521569', '335521569', 116366), (True, '546879484', '546879484', 116367), (True, '691688417', '691688417', 116368), (True, '30527185', '30527185', 116369), (True, '0', '0', 116370), (True, '654916173', '654916173', 116371), (True, '216296044', '216296044', 116372), (True, '992170945', '992170945', 116373), (True, '48014511', '48014511', 116374), (True, '0', '0', 116375), (True, '0', '0', 116376), (True, '9', '9', 116377), (False, '12', '7', 116378), (True, '3', '3', 116379), (True, '3', '3', 116380), (True, '3', '3', 116381), (True, '3', '3', 116382), (True, '3', '3', 116383), (False, '9', '5', 116384), (True, '6', '6', 116385), (True, '100000', '100000', 116386), (True, '3', '3', 116387), (True, '9', '9', 116388), (False, '3', '2', 116389), (False, '3', '2', 116390), (False, '3', '2', 116391), (False, '3', '2', 116392), (True, '3', '3', 116393), (False, '300', '101', 116394), (True, '1000000000', '1000000000', 116395), (False, '30', '11', 116396), (False, '200', '101', 116397), (False, '3', '2', 116398), (True, '3', '3', 116399), (False, '3', '2', 116400), (True, '3', '3', 116401), (True, '3', '3', 116402), (False, '90', '31', 116403), (False, '6', '3', 116404), (True, '3', '3', 116405), (False, '3000', '1001', 116406), (True, '9', '9', 116407), (True, '3', '3', 116408), (False, '300000', '100001', 116409), (False, '3', '2', 116410), (False, '10', '6', 116411), (True, '3', '3', 116412), (True, '3', '3', 116413), (False, '3', '2', 116414), (False, '99', '34', 116415), (True, '9', '9', 116416), (True, '0', '0', 116417), (True, '0', '0', 116418)]",False,Wrong Answer,0.9224795167002632,0.975501113585746,False,0.2247191011235955,False,"def func(*args):
	
	(n, a, b, c) = map(int, args[0].split())
	mod = (n % 4)
	if (mod == 0):
	    print(0)
	elif (mod == 1):
	    print(min((3 * a), c, (a + b)))
	elif (mod == 2):
	    print(min((2 * a), b, (2 * c)))
	elif (mod == 3):
	    print(min(a, (3 * c)))
"
930858,28257490,"n, a, b, c = map(int, input().split())

mod = n % 4
if mod == 0:
    print(0)
elif mod == 1:
    print(min(3 * a, c, a + b))
elif mod == 2:
    print(min(2 * a, b, 2 * c))
elif mod == 3:
    print(min(a, 3 * c, b + c))",1401,5428,62,7/3/17 16:59,11,858,1,8,"[(True, '3', '3', 116330), (True, '1', '1', 116331), (True, '0', '0', 116332), (True, '1000000000', '1000000000', 116333), (True, '0', '0', 116334), (True, '1', '1', 116335), (True, '5', '5', 116336), (True, '2', '2', 116337), (True, '1', '1', 116338), (True, '1000000000', '1000000000', 116339), (True, '999999990', '999999990', 116340), (True, '335918278', '335918278', 116341), (True, '1000000000', '1000000000', 116342), (True, '0', '0', 116343), (True, '524125987', '524125987', 116344), (True, '673102149', '673102149', 116345), (True, '585325539', '585325539', 116346), (True, '11774896', '11774896', 116347), (True, '0', '0', 116348), (True, '131116353', '131116353', 116349), (True, '8075817', '8075817', 116350), (True, '640274071', '640274071', 116351), (True, '405799987', '405799987', 116352), (True, '678092074', '678092074', 116353), (True, '0', '0', 116354), (True, '3', '3', 116355), (True, '2', '2', 116356), (True, '2', '2', 116357), (True, '3', '3', 116358), (True, '438793836', '438793836', 116359), (True, '307539138', '307539138', 116360), (True, '146086131', '146086131', 116361), (True, '347508634', '347508634', 116362), (True, '0', '0', 116363), (True, '764655030', '764655030', 116364), (True, '0', '0', 116365), (True, '335521569', '335521569', 116366), (True, '546879484', '546879484', 116367), (True, '691688417', '691688417', 116368), (True, '30527185', '30527185', 116369), (True, '0', '0', 116370), (True, '654916173', '654916173', 116371), (True, '216296044', '216296044', 116372), (True, '992170945', '992170945', 116373), (True, '48014511', '48014511', 116374), (True, '0', '0', 116375), (True, '0', '0', 116376), (True, '9', '9', 116377), (True, '7', '7', 116378), (True, '3', '3', 116379), (True, '3', '3', 116380), (True, '3', '3', 116381), (True, '3', '3', 116382), (True, '3', '3', 116383), (True, '5', '5', 116384), (True, '6', '6', 116385), (True, '100000', '100000', 116386), (True, '3', '3', 116387), (True, '9', '9', 116388), (True, '2', '2', 116389), (True, '2', '2', 116390), (True, '2', '2', 116391), (True, '2', '2', 116392), (True, '3', '3', 116393), (True, '101', '101', 116394), (True, '1000000000', '1000000000', 116395), (True, '11', '11', 116396), (True, '101', '101', 116397), (True, '2', '2', 116398), (True, '3', '3', 116399), (True, '2', '2', 116400), (True, '3', '3', 116401), (True, '3', '3', 116402), (True, '31', '31', 116403), (True, '3', '3', 116404), (True, '3', '3', 116405), (True, '1001', '1001', 116406), (True, '9', '9', 116407), (True, '3', '3', 116408), (True, '100001', '100001', 116409), (True, '2', '2', 116410), (True, '6', '6', 116411), (True, '3', '3', 116412), (True, '3', '3', 116413), (True, '2', '2', 116414), (True, '34', '34', 116415), (True, '9', '9', 116416), (True, '0', '0', 116417), (True, '0', '0', 116418)]",True,Accecpted,0.9224795167002632,0.975501113585746,False,0.0,False,"def func(*args):
	
	(n, a, b, c) = map(int, args[0].split())
	mod = (n % 4)
	if (mod == 0):
	    print(0)
	elif (mod == 1):
	    print(min((3 * a), c, (a + b)))
	elif (mod == 2):
	    print(min((2 * a), b, (2 * c)))
	elif (mod == 3):
	    print(min(a, (3 * c), (b + c)))
"
3140426,28728016,"n, m = map(int, input().rstrip().split())

if n <= m:
    print(n)
else:
    ans = m
    n -= m
    left = 0
    right = n + 1
    
    while right - left > 1:
        mid = left + (right - left) // 2
        if n <= (mid + 1) * mid // 2:
            right = mid
        else:
            left = mid
            
    print(ans + right)",103561,4520,78,7/20/17 17:57,35,2687,1,8,"[(True, '4', '4', 226915), (True, '5', '5', 226916), (True, '12', '12', 226917), (True, '1024', '1024', 226918), (True, '53010', '53010', 226919), (True, '658892843', '658892843', 226920), (True, '511467058661475480', '511467058661475480', 226921), (True, '1', '1', 226922), (True, '1000000000000000000', '1000000000000000000', 226923), (True, '999999999999997221', '999999999999997221', 226924), (True, '1', '1', 226925), (True, '1414213563', '1414213563', 226926), (True, '1414213571', '1414213571', 226927), (True, '1414213571', '1414213571', 226928), (True, '1414213571', '1414213571', 226929), (True, '1414213572', '1414213572', 226930), (True, '1414213572', '1414213572', 226931), (True, '1234675418', '1234675418', 226932), (True, '1234675418', '1234675418', 226933), (True, '1234675418', '1234675418', 226934), (True, '1234675419', '1234675419', 226935), (True, '1234675419', '1234675419', 226936), (True, '942571991', '942571991', 226937), (True, '942571991', '942571991', 226938), (True, '942571992', '942571992', 226939), (True, '1359321110406', '1359321110406', 226940), (True, '2810608952329', '2810608952329', 226941), (True, '8084245567345', '8084245567345', 226942), (True, '256256364670', '256256364670', 226943), (True, '256256364670', '256256364670', 226944), (True, '256256364670', '256256364670', 226945), (True, '256256364671', '256256364671', 226946), (True, '326385531361089823', '326385531361089823', 226947), (True, '327211775164731428', '327211775164731428', 226948), (True, '1319832715', '1319832715', 226949), (True, '1364243511', '1364243511', 226950), (True, '1289661856', '1289661856', 226951), (True, '1317454248', '1317454248', 226952), (True, '1370517314', '1370517314', 226953), (True, '1396701153', '1396701153', 226954), (True, '1380631201', '1380631201', 226955), (True, '1406630820', '1406630820', 226956), (True, '1330979102', '1330979102', 226957), (True, '1358043072', '1358043072', 226958), (True, '1266953266', '1266953266', 226959), (True, '1314276256', '1314276256', 226960), (True, '1362191462', '1362191462', 226961), (True, '1391685648', '1391685648', 226962), (True, '1389332262', '1389332262', 226963), (True, '1394001194', '1394001194', 226964), (True, '3258373398', '3258373398', 226965), (True, '2314967219', '2314967219', 226966), (True, '17555812078', '17555812078', 226967), (True, '20759977363', '20759977363', 226968), (True, '3373249237', '3373249237', 226969), (True, '46578175853', '46578175853', 226970), (True, '1554456398264', '1554456398264', 226971), (True, '1793367075026', '1793367075026', 226972), (True, '9113285250762', '9113285250762', 226973), (True, '15352195899906', '15352195899906', 226974), (True, '126044893781768', '126044893781768', 226975), (True, '152287950093217', '152287950093217', 226976), (True, '783633554323452', '783633554323452', 226977), (True, '1609872463741155', '1609872463741155', 226978), (True, '15921195067317449', '15921195067317449', 226979), (True, '16747433976901012', '16747433976901012', 226980), (True, '176443296899409285', '176443296899409285', 226981), (True, '177269540108507095', '177269540108507095', 226982), (True, '2', '2', 226983), (True, '2', '2', 226984), (True, '3', '3', 226985), (True, '3', '3', 226986), (True, '3', '3', 226987), (True, '3', '3', 226988), (True, '4', '4', 226989), (True, '42', '42', 226990), (True, '404', '404', 226991), (True, '1367064836', '1367064836', 226992), (True, '658866858', '658866858', 226993), (True, '10', '10', 226994), (True, '326385530977846185', '326385530977846185', 226995), (True, '327211774155929609', '327211774155929609', 226996), (True, '2570', '2570', 226997), (True, '512486308421983105', '512486308421983105', 226998), (True, '262144', '262144', 226999), (True, '314159265358979323', '314159265358979323', 227000), (True, '10', '10', 227001), (True, '21', '21', 227002), (True, '18', '18', 227003), (True, '22', '22', 227004), (True, '8', '8', 227005), (True, '1000004242', '1000004242', 227006), (True, '1000004242', '1000004242', 227007), (True, '1000004242', '1000004242', 227008), (True, '1000004242', '1000004242', 227009), (True, '1000004243', '1000004243', 227010), (True, '1000004243', '1000004243', 227011), (True, '1000004243', '1000004243', 227012), (True, '163162808800191208', '163162808800191208', 227013), (True, '328584130811799021', '328584130811799021', 227014), (True, '89633000579612779', '89633000579612779', 227015), (True, '924211674273037668', '924211674273037668', 227016), (True, '758790352261429853', '758790352261429853', 227017), (True, '39154349371830600', '39154349371830600', 227018), (True, '313727604417502159', '313727604417502159', 227019), (True, '1000000000000000000', '1000000000000000000', 227020), (True, '1000000000000000000', '1000000000000000000', 227021), (True, '999999999999999999', '999999999999999999', 227022), (True, '999999999999999999', '999999999999999999', 227023), (True, '999999999999999998', '999999999999999998', 227024), (True, '1', '1', 227025), (True, '1', '1', 227026), (True, '1', '1', 227027), (True, '6', '6', 227028), (True, '1414213564', '1414213564', 227029), (True, '1', '1', 227030), (True, '5', '5', 227031), (True, '6', '6', 227032), (True, '100000001341640786', '100000001341640786', 227033), (True, '100', '100', 227034), (True, '1', '1', 227035), (True, '447213596', '447213596', 227036), (True, '1000001413506279', '1000001413506279', 227037), (True, '1', '1', 227038), (True, '1414213566', '1414213566', 227039), (True, '1000000000000', '1000000000000', 227040), (True, '1', '1', 227041), (True, '3', '3', 227042), (True, '2', '2', 227043), (True, '1', '1', 227044), (True, '5', '5', 227045), (True, '10', '10', 227046), (True, '10', '10', 227047), (True, '5', '5', 227048), (True, '2', '2', 227049), (True, '10836', '10836', 227050), (True, '16808', '16808', 227051), (True, '1341640788', '1341640788', 227052), (True, '1', '1', 227053), (True, '2', '2', 227054), (True, '10', '10', 227055), (True, '10', '10', 227056), (True, '4', '4', 227057), (True, '1', '1', 227058), (True, '1414213567', '1414213567', 227059), (True, '2', '2', 227060), (True, '4', '4', 227061), (True, '1414213563', '1414213563', 227062), (True, '3', '3', 227063), (True, '707405570970015402', '707405570970015402', 227064), (True, '1', '1', 227065), (True, '6', '6', 227066), (True, '16808', '16808', 227067), (True, '1000000007', '1000000007', 227068), (True, '1', '1', 227069), (True, '1000000000000000', '1000000000000000', 227070), (True, '1414213662', '1414213662', 227071), (True, '1414213571', '1414213571', 227072), (True, '1341640957', '1341640957', 227073), (True, '1', '1', 227074), (True, '10000', '10000', 227075), (True, '1', '1', 227076), (True, '429718493274519777', '429718493274519777', 227077), (True, '2', '2', 227078), (True, '8', '8', 227079), (True, '2', '2', 227080), (True, '1414213563', '1414213563', 227081), (True, '5', '5', 227082), (True, '100000001341640785', '100000001341640785', 227083), (True, '100000000000000000', '100000000000000000', 227084), (True, '5', '5', 227085), (True, '2414213562', '2414213562', 227086), (True, '1', '1', 227087), (True, '16', '16', 227088), (True, '10', '10', 227089), (True, '3', '3', 227090), (True, '10', '10', 227091), (True, '3', '3', 227092), (True, '1414213572', '1414213572', 227093), (True, '10000000000000', '10000000000000', 227094), (True, '5', '5', 227095), (True, '5000', '5000', 227096), (True, '7', '7', 227097), (True, '501414213209', '501414213209', 227098), (True, '8', '8', 227099), (True, '1', '1', 227100), (True, '1414213577', '1414213577', 227101), (True, '1', '1', 227102), (True, '2', '2', 227103), (True, '5', '5', 227104), (True, '1', '1', 227105), (True, '500000000999999999', '500000000999999999', 227106), (True, '1', '1', 227107), (True, '108339532063750408', '108339532063750408', 227108), (True, '5', '5', 227109), (True, '2', '2', 227110), (True, '500000001000000000', '500000001000000000', 227111), (True, '20', '20', 227112), (True, '2', '2', 227113), (True, '100', '100', 227114), (True, '2', '2', 227115), (True, '100000000000000000', '100000000000000000', 227116), (True, '1537670351', '1537670351', 227117), (True, '1', '1', 227118), (True, '11414213554', '11414213554', 227119), (True, '5', '5', 227120), (True, '6', '6', 227121), (True, '100', '100', 227122), (True, '4', '4', 227123), (True, '1000000000', '1000000000', 227124), (True, '10', '10', 227125), (True, '5', '5', 227126), (True, '5', '5', 227127), (True, '200', '200', 227128), (True, '3', '3', 227129), (True, '490000001009950494', '490000001009950494', 227130), (True, '2', '2', 227131), (True, '5', '5', 227132), (True, '5', '5', 227133), (True, '10040', '10040', 227134), (True, '60000001371130920', '60000001371130920', 227135), (True, '10', '10', 227136), (True, '1', '1', 227137)]",True,Accecpted,0.948999032737921,0.9754098360655736,False,0.0,False,"def func(*args):
	
	(n, m) = map(int, args[0].rstrip().split())
	if (n <= m):
	    print(n)
	else:
	    ans = m
	    n -= m
	    left = 0
	    right = (n + 1)
	    while ((right - left) > 1):
	        mid = (left + ((right - left) // 2))
	        if (n <= (((mid + 1) * mid) // 2)):
	            right = mid
	        else:
	            left = mid
	    print((ans + right))
"
3140425,28728000,"n, m = map(int, input().rstrip().split())

if n <= m:
    print(n)
else:
    ans = m
    n -= m
    left = 0
    right = n + 1
    
    while right - left > 1:
        mid = left + (right - left) // 2
        if n <= (mid + 1) * mid // 2:
            right = mid
        else:
            left = mid
            
    print(right)",103561,4436,46,7/20/17 17:57,35,2687,2,8,"[(False, '2', '4', 226915), (False, '4', '5', 226916), (False, '7', '12', 226917), (True, '1024', '1024', 226918), (False, '101', '53010', 226919), (False, '25985', '658892843', 226920), (False, '343435935', '511467058661475480', 226921), (True, '1', '1', 226922), (True, '1000000000000000000', '1000000000000000000', 226923), (False, '76', '999999999999997221', 226924), (True, '1', '1', 226925), (False, '1414213562', '1414213563', 226926), (False, '1414213561', '1414213571', 226927), (False, '1414213561', '1414213571', 226928), (False, '1414213561', '1414213571', 226929), (False, '1414213562', '1414213572', 226930), (False, '1414213562', '1414213572', 226931), (False, '1234567890', '1234675418', 226932), (False, '1234567890', '1234675418', 226933), (False, '1234567890', '1234675418', 226934), (False, '1234567891', '1234675419', 226935), (False, '1234567891', '1234675419', 226936), (False, '941523415', '942571991', 226937), (False, '941523415', '942571991', 226938), (False, '941523416', '942571992', 226939), (False, '60534155', '1359321110406', 226940), (False, '60534155', '2810608952329', 226941), (False, '60534156', '8084245567345', 226942), (False, '108414', '256256364670', 226943), (False, '108414', '256256364670', 226944), (False, '108414', '256256364670', 226945), (False, '108415', '256256364671', 226946), (False, '383243638', '326385531361089823', 226947), (False, '1008801819', '327211775164731428', 226948), (False, '1319832699', '1319832715', 226949), (False, '1364243507', '1364243511', 226950), (False, '1289661702', '1289661856', 226951), (False, '1317454070', '1317454248', 226952), (False, '1370515412', '1370517314', 226953), (False, '1396699827', '1396701153', 226954), (False, '1380627178', '1380631201', 226955), (False, '1406623373', '1406630820', 226956), (False, '1330936327', '1330979102', 226957), (False, '1357884169', '1358043072', 226958), (False, '1266769762', '1266953266', 226959), (False, '1312976624', '1314276256', 226960), (False, '1360261573', '1362191462', 226961), (False, '1386639631', '1391685648', 226962), (False, '1349440518', '1389332262', 226963), (False, '1376026026', '1394001194', 226964), (False, '1408769945', '3258373398', 226965), (False, '1287280342', '2314967219', 226966), (False, '1376006916', '17555812078', 226967), (False, '1402088776', '20759977363', 226968), (False, '1336228341', '3373249237', 226969), (False, '1363071533', '46578175853', 226970), (False, '1300729387', '1554456398264', 226971), (False, '1328290021', '1793367075026', 226972), (False, '1301843692', '9113285250762', 226973), (False, '1329376708', '15352195899906', 226974), (False, '1406000803', '126044893781768', 226975), (False, '1284228828', '152287950093217', 226976), (False, '1332879325', '783633554323452', 226977), (False, '1359180900', '1609872463741155', 226978), (False, '1324361618', '15921195067317449', 226979), (False, '1350829053', '16747433976901012', 226980), (False, '1125986193', '176443296899409285', 226981), (False, '1157000579', '177269540108507095', 226982), (False, '1', '2', 226983), (True, '2', '2', 226984), (False, '2', '3', 226985), (False, '1', '3', 226986), (True, '3', '3', 226987), (False, '2', '3', 226988), (False, '2', '4', 226989), (False, '22', '42', 226990), (False, '396', '404', 226991), (True, '1367064836', '1367064836', 226992), (True, '658866858', '658866858', 226993), (True, '10', '10', 226994), (True, '326385530977846185', '326385530977846185', 226995), (True, '327211774155929609', '327211774155929609', 226996), (True, '2570', '2570', 226997), (True, '512486308421983105', '512486308421983105', 226998), (True, '262144', '262144', 226999), (True, '314159265358979323', '314159265358979323', 227000), (False, '5', '10', 227001), (False, '5', '21', 227002), (False, '4', '18', 227003), (False, '4', '22', 227004), (True, '8', '8', 227005), (False, '1000000000', '1000004242', 227006), (False, '1000000000', '1000004242', 227007), (False, '1000000000', '1000004242', 227008), (False, '1000000000', '1000004242', 227009), (False, '1000000001', '1000004243', 227010), (False, '1000000001', '1000004243', 227011), (False, '1000000001', '1000004243', 227012), (False, '2', '163162808800191208', 227013), (False, '1', '328584130811799021', 227014), (False, '1', '89633000579612779', 227015), (False, '2', '924211674273037668', 227016), (False, '2', '758790352261429853', 227017), (False, '3', '39154349371830600', 227018), (False, '4', '313727604417502159', 227019), (False, '1', '1000000000000000000', 227020), (False, '2', '1000000000000000000', 227021), (False, '2', '999999999999999999', 227022), (False, '3', '999999999999999999', 227023), (False, '3', '999999999999999998', 227024), (True, '1', '1', 227025), (True, '1', '1', 227026), (True, '1', '1', 227027), (True, '6', '6', 227028), (False, '1414213562', '1414213564', 227029), (True, '1', '1', 227030), (True, '5', '5', 227031), (False, '5', '6', 227032), (False, '1341640786', '100000001341640786', 227033), (True, '100', '100', 227034), (True, '1', '1', 227035), (False, '447213595', '447213596', 227036), (False, '1413506279', '1000001413506279', 227037), (True, '1', '1', 227038), (False, '1414213562', '1414213566', 227039), (True, '1000000000000', '1000000000000', 227040), (True, '1', '1', 227041), (True, '3', '3', 227042), (True, '2', '2', 227043), (True, '1', '1', 227044), (True, '5', '5', 227045), (True, '10', '10', 227046), (True, '10', '10', 227047), (True, '5', '5', 227048), (True, '2', '2', 227049), (True, '10836', '10836', 227050), (True, '16808', '16808', 227051), (False, '1341640787', '1341640788', 227052), (True, '1', '1', 227053), (True, '2', '2', 227054), (True, '10', '10', 227055), (True, '10', '10', 227056), (True, '4', '4', 227057), (True, '1', '1', 227058), (False, '1414213562', '1414213567', 227059), (True, '2', '2', 227060), (True, '4', '4', 227061), (False, '1414213562', '1414213563', 227062), (True, '3', '3', 227063), (False, '761399604', '707405570970015402', 227064), (True, '1', '1', 227065), (True, '6', '6', 227066), (True, '16808', '16808', 227067), (True, '1000000007', '1000000007', 227068), (True, '1', '1', 227069), (True, '1000000000000000', '1000000000000000', 227070), (False, '1414213562', '1414213662', 227071), (False, '1414213562', '1414213571', 227072), (False, '1341640786', '1341640957', 227073), (True, '1', '1', 227074), (True, '10000', '10000', 227075), (True, '1', '1', 227076), (False, '729725424', '429718493274519777', 227077), (True, '2', '2', 227078), (True, '8', '8', 227079), (True, '2', '2', 227080), (False, '1414213562', '1414213563', 227081), (True, '5', '5', 227082), (False, '1341640786', '100000001341640785', 227083), (True, '100000000000000000', '100000000000000000', 227084), (True, '5', '5', 227085), (False, '1414213562', '2414213562', 227086), (True, '1', '1', 227087), (False, '5', '16', 227088), (True, '10', '10', 227089), (True, '3', '3', 227090), (True, '10', '10', 227091), (True, '3', '3', 227092), (False, '1414213562', '1414213572', 227093), (True, '10000000000000', '10000000000000', 227094), (False, '1', '5', 227095), (True, '5000', '5000', 227096), (True, '7', '7', 227097), (False, '1414213209', '501414213209', 227098), (False, '1', '8', 227099), (True, '1', '1', 227100), (False, '1414213562', '1414213577', 227101), (True, '1', '1', 227102), (True, '2', '2', 227103), (True, '5', '5', 227104), (True, '1', '1', 227105), (False, '1000000000', '500000000999999999', 227106), (True, '1', '1', 227107), (False, '1011364211', '108339532063750408', 227108), (True, '5', '5', 227109), (True, '2', '2', 227110), (False, '1000000000', '500000001000000000', 227111), (False, '17', '20', 227112), (True, '2', '2', 227113), (True, '100', '100', 227114), (True, '2', '2', 227115), (True, '100000000000000000', '100000000000000000', 227116), (False, '1414213562', '1537670351', 227117), (True, '1', '1', 227118), (False, '1414213555', '11414213554', 227119), (True, '5', '5', 227120), (True, '6', '6', 227121), (True, '100', '100', 227122), (True, '4', '4', 227123), (True, '1000000000', '1000000000', 227124), (True, '10', '10', 227125), (True, '5', '5', 227126), (True, '5', '5', 227127), (True, '200', '200', 227128), (True, '3', '3', 227129), (False, '1009950494', '490000001009950494', 227130), (True, '2', '2', 227131), (True, '5', '5', 227132), (True, '5', '5', 227133), (True, '10040', '10040', 227134), (False, '1371130920', '60000001371130920', 227135), (True, '10', '10', 227136), (True, '1', '1', 227137)]",False,Wrong Answer,0.948999032737921,0.9754098360655736,False,0.5605381165919282,False,"def func(*args):
	
	(n, m) = map(int, args[0].rstrip().split())
	if (n <= m):
	    print(n)
	else:
	    ans = m
	    n -= m
	    left = 0
	    right = (n + 1)
	    while ((right - left) > 1):
	        mid = (left + ((right - left) // 2))
	        if (n <= (((mid + 1) * mid) // 2)):
	            right = mid
	        else:
	            left = mid
	    print(right)
"
1651857,14567330,"def isRightAngled(x1,y1,x2,y2,x3,y3):
	if x2 == x1 or x3 == x1 or x3 == x2:
		if y2 == y1 or y3 == y1 or y3 == y2:
			if (x1 == x2 and y1 == y2) or (x1 == x3 and y1 == y3) or (x2 == x3 and y2 == y3):
				return False
			return True
	slope1 = (y2-y1)/(x2-x1) if x2 != x1 else 0
	slope2 = (y3-y1)/(x3-x1) if x3 != x1 else 0
	slope3 = (y3-y2)/(x3-x2) if x3 != x2 else 0
	if round(slope1 * slope2,8) == -1:
		return True
	elif round(slope1 * slope3,8) == -1:
		return True
	elif round(slope2 * slope3,8) == -1:
		return True
	else:
		return False

x1,y1,x2,y2,x3,y3 = list(map(int,input().split()))

if isRightAngled(x1,y1,x2,y2,x3,y3):
	print('RIGHT')
	exit(0)

if isRightAngled(x1+1,y1,x2,y2,x3,y3) or isRightAngled(x1-1,y1,x2,y2,x3,y3) or isRightAngled(x1,y1+1,x2,y2,x3,y3) or isRightAngled(x1,y1-1,x2,y2,x3,y3) or isRightAngled(x1,y1,x2+1,y2,x3,y3) or isRightAngled(x1,y1,x2-1,y2,x3,y3) or isRightAngled(x1,y1,x2,y2+1,x3,y3) or isRightAngled(x1,y1,x2,y2-1,x3,y3) or isRightAngled(x1,y1,x2,y2,x3+1,y3) or isRightAngled(x1,y1,x2,y2,x3-1,y3) or isRightAngled(x1,y1,x2,y2,x3,y3+1) or isRightAngled(x1,y1,x2,y2,x3,y3-1):
	print('ALMOST')
	exit(0)

print('NEITHER')",7319,260,124,11/30/15 11:35,29,1473,1,8,"[(True, 'RIGHT', 'RIGHT', 156952), (True, 'NEITHER', 'NEITHER', 156953), (True, 'ALMOST', 'ALMOST', 156954), (True, 'NEITHER', 'NEITHER', 156955), (True, 'NEITHER', 'NEITHER', 156956), (True, 'NEITHER', 'NEITHER', 156957), (True, 'NEITHER', 'NEITHER', 156958), (True, 'NEITHER', 'NEITHER', 156959), (True, 'NEITHER', 'NEITHER', 156960), (True, 'NEITHER', 'NEITHER', 156961), (True, 'NEITHER', 'NEITHER', 156962), (True, 'NEITHER', 'NEITHER', 156963), (True, 'NEITHER', 'NEITHER', 156964), (True, 'NEITHER', 'NEITHER', 156965), (True, 'NEITHER', 'NEITHER', 156966), (True, 'NEITHER', 'NEITHER', 156967), (True, 'NEITHER', 'NEITHER', 156968), (True, 'NEITHER', 'NEITHER', 156969), (True, 'RIGHT', 'RIGHT', 156970), (True, 'RIGHT', 'RIGHT', 156971), (True, 'NEITHER', 'NEITHER', 156972), (True, 'RIGHT', 'RIGHT', 156973), (True, 'RIGHT', 'RIGHT', 156974), (True, 'RIGHT', 'RIGHT', 156975), (True, 'RIGHT', 'RIGHT', 156976), (True, 'RIGHT', 'RIGHT', 156977), (True, 'RIGHT', 'RIGHT', 156978), (True, 'ALMOST', 'ALMOST', 156979), (True, 'ALMOST', 'ALMOST', 156980), (True, 'ALMOST', 'ALMOST', 156981), (True, 'NEITHER', 'NEITHER', 156982), (True, 'NEITHER', 'NEITHER', 156983), (True, 'ALMOST', 'ALMOST', 156984), (True, 'ALMOST', 'ALMOST', 156985), (True, 'ALMOST', 'ALMOST', 156986), (True, 'ALMOST', 'ALMOST', 156987), (True, 'ALMOST', 'ALMOST', 156988), (True, 'ALMOST', 'ALMOST', 156989), (True, 'ALMOST', 'ALMOST', 156990), (True, 'RIGHT', 'RIGHT', 156991), (True, 'NEITHER', 'NEITHER', 156992), (True, 'NEITHER', 'NEITHER', 156993), (True, 'NEITHER', 'NEITHER', 156994), (True, 'NEITHER', 'NEITHER', 156995), (True, 'ALMOST', 'ALMOST', 156996), (True, 'NEITHER', 'NEITHER', 156997), (True, 'NEITHER', 'NEITHER', 156998), (True, 'NEITHER', 'NEITHER', 156999), (True, 'RIGHT', 'RIGHT', 157000), (True, 'RIGHT', 'RIGHT', 157001), (True, 'RIGHT', 'RIGHT', 157002), (True, 'ALMOST', 'ALMOST', 157003), (True, 'ALMOST', 'ALMOST', 157004), (True, 'ALMOST', 'ALMOST', 157005), (True, 'ALMOST', 'ALMOST', 157006), (True, 'ALMOST', 'ALMOST', 157007), (True, 'ALMOST', 'ALMOST', 157008), (True, 'ALMOST', 'ALMOST', 157009), (True, 'ALMOST', 'ALMOST', 157010), (True, 'ALMOST', 'ALMOST', 157011), (True, 'ALMOST', 'ALMOST', 157012), (True, 'ALMOST', 'ALMOST', 157013), (True, 'ALMOST', 'ALMOST', 157014)]",True,Accecpted,0.8379287533598103,0.975399223133362,False,0.0,False,"def func(*args):
	
	
	def isRightAngled(x1, y1, x2, y2, x3, y3):
	    if ((x2 == x1) or (x3 == x1) or (x3 == x2)):
	        if ((y2 == y1) or (y3 == y1) or (y3 == y2)):
	            if (((x1 == x2) and (y1 == y2)) or ((x1 == x3) and (y1 == y3)) or ((x2 == x3) and (y2 == y3))):
	                return False
	            return True
	    slope1 = (((y2 - y1) / (x2 - x1)) if (x2 != x1) else 0)
	    slope2 = (((y3 - y1) / (x3 - x1)) if (x3 != x1) else 0)
	    slope3 = (((y3 - y2) / (x3 - x2)) if (x3 != x2) else 0)
	    if (round((slope1 * slope2), 8) == (- 1)):
	        return True
	    elif (round((slope1 * slope3), 8) == (- 1)):
	        return True
	    elif (round((slope2 * slope3), 8) == (- 1)):
	        return True
	    else:
	        return False
	(x1, y1, x2, y2, x3, y3) = list(map(int, args[0].split()))
	if isRightAngled(x1, y1, x2, y2, x3, y3):
	    print('RIGHT')
	    exit(0)
	if (isRightAngled((x1 + 1), y1, x2, y2, x3, y3) or isRightAngled((x1 - 1), y1, x2, y2, x3, y3) or isRightAngled(x1, (y1 + 1), x2, y2, x3, y3) or isRightAngled(x1, (y1 - 1), x2, y2, x3, y3) or isRightAngled(x1, y1, (x2 + 1), y2, x3, y3) or isRightAngled(x1, y1, (x2 - 1), y2, x3, y3) or isRightAngled(x1, y1, x2, (y2 + 1), x3, y3) or isRightAngled(x1, y1, x2, (y2 - 1), x3, y3) or isRightAngled(x1, y1, x2, y2, (x3 + 1), y3) or isRightAngled(x1, y1, x2, y2, (x3 - 1), y3) or isRightAngled(x1, y1, x2, y2, x3, (y3 + 1)) or isRightAngled(x1, y1, x2, y2, x3, (y3 - 1))):
	    print('ALMOST')
	    exit(0)
	print('NEITHER')
"
1651856,14567284,"def isRightAngled(x1,y1,x2,y2,x3,y3):
	if x2 == x1 or x3 == x1 or x3 == x2:
		if y2 == y1 or y3 == y1 or y3 == y2:
			if (x1 == x2 and y1 == y2) or (x1 == x3 and y1 == y3) or (x2 == x3 and y2 == y3):
				return False
			return True
	slope1 = (y2-y1)/(x2-x1)
	slope2 = (y3-y1)/(x3-x1)
	slope3 = (y3-y2)/(x3-x2)
	if round(slope1 * slope2,8) == -1:
		return True
	elif round(slope1 * slope3,8) == -1:
		return True
	elif round(slope2 * slope3,8) == -1:
		return True
	else:
		return False

x1,y1,x2,y2,x3,y3 = list(map(int,input().split()))

if isRightAngled(x1,y1,x2,y2,x3,y3):
	print('RIGHT')
	exit(0)

if isRightAngled(x1+1,y1,x2,y2,x3,y3) or isRightAngled(x1-1,y1,x2,y2,x3,y3) or isRightAngled(x1,y1+1,x2,y2,x3,y3) or isRightAngled(x1,y1-1,x2,y2,x3,y3) or isRightAngled(x1,y1,x2+1,y2,x3,y3) or isRightAngled(x1,y1,x2-1,y2,x3,y3) or isRightAngled(x1,y1,x2,y2+1,x3,y3) or isRightAngled(x1,y1,x2,y2-1,x3,y3) or isRightAngled(x1,y1,x2,y2,x3+1,y3) or isRightAngled(x1,y1,x2,y2,x3-1,y3) or isRightAngled(x1,y1,x2,y2,x3,y3+1) or isRightAngled(x1,y1,x2,y2,x3,y3-1):
	print('ALMOST')
	exit(0)

print('NEITHER')",7319,276,122,11/30/15 11:30,29,1473,5,8,"[(True, 'RIGHT', 'RIGHT', 156952), (True, 'NEITHER', 'NEITHER', 156953), (True, 'ALMOST', 'ALMOST', 156954), (True, 'NEITHER', 'NEITHER', 156955), (True, 'NEITHER', 'NEITHER', 156956), (True, 'NEITHER', 'NEITHER', 156957), (True, 'NEITHER', 'NEITHER', 156958), (True, 'NEITHER', 'NEITHER', 156959), (True, 'NEITHER', 'NEITHER', 156960), (True, 'NEITHER', 'NEITHER', 156961), (True, 'NEITHER', 'NEITHER', 156962), (True, 'NEITHER', 'NEITHER', 156963), (True, 'NEITHER', 'NEITHER', 156964), (True, 'NEITHER', 'NEITHER', 156965), (True, 'NEITHER', 'NEITHER', 156966), (True, 'NEITHER', 'NEITHER', 156967), (True, 'NEITHER', 'NEITHER', 156968), (True, 'NEITHER', 'NEITHER', 156969), (True, 'RIGHT', 'RIGHT', 156970), (True, 'RIGHT', 'RIGHT', 156971), (True, 'NEITHER', 'NEITHER', 156972), (True, 'RIGHT', 'RIGHT', 156973), (True, 'RIGHT', 'RIGHT', 156974), (True, 'RIGHT', 'RIGHT', 156975), (True, 'RIGHT', 'RIGHT', 156976), (True, 'RIGHT', 'RIGHT', 156977), (True, 'RIGHT', 'RIGHT', 156978), (True, 'ALMOST', 'ALMOST', 156979), (True, 'ALMOST', 'ALMOST', 156980), (True, 'ALMOST', 'ALMOST', 156981), (True, 'NEITHER', 'NEITHER', 156982), (True, 'NEITHER', 'NEITHER', 156983), (True, 'ALMOST', 'ALMOST', 156984), (True, 'ALMOST', 'ALMOST', 156985), (True, 'ALMOST', 'ALMOST', 156986), (True, 'ALMOST', 'ALMOST', 156987), (True, 'ALMOST', 'ALMOST', 156988), (True, 'ALMOST', 'ALMOST', 156989), (True, 'ALMOST', 'ALMOST', 156990), (True, 'RIGHT', 'RIGHT', 156991), (True, 'NEITHER', 'NEITHER', 156992), (True, 'NEITHER', 'NEITHER', 156993), (True, 'NEITHER', 'NEITHER', 156994), (True, 'NEITHER', 'NEITHER', 156995), (True, 'ALMOST', 'ALMOST', 156996), (True, 'NEITHER', 'NEITHER', 156997), (True, 'NEITHER', 'NEITHER', 156998), (True, 'NEITHER', 'NEITHER', 156999), (True, 'RIGHT', 'RIGHT', 157000), (True, 'RIGHT', 'RIGHT', 157001), (False, '', 'RIGHT', 157002), (False, '', 'ALMOST', 157003), (False, '', 'ALMOST', 157004), (False, '', 'ALMOST', 157005), (False, '', 'ALMOST', 157006), (False, '', 'ALMOST', 157007), (False, '', 'ALMOST', 157008), (False, '', 'ALMOST', 157009), (False, '', 'ALMOST', 157010), (False, '', 'ALMOST', 157011), (False, '', 'ALMOST', 157012), (False, '', 'ALMOST', 157013), (False, '', 'ALMOST', 157014)]",False,Runtime Error,0.8379287533598103,0.975399223133362,False,0.2063492063492063,False,"def func(*args):
	
	
	def isRightAngled(x1, y1, x2, y2, x3, y3):
	    if ((x2 == x1) or (x3 == x1) or (x3 == x2)):
	        if ((y2 == y1) or (y3 == y1) or (y3 == y2)):
	            if (((x1 == x2) and (y1 == y2)) or ((x1 == x3) and (y1 == y3)) or ((x2 == x3) and (y2 == y3))):
	                return False
	            return True
	    slope1 = ((y2 - y1) / (x2 - x1))
	    slope2 = ((y3 - y1) / (x3 - x1))
	    slope3 = ((y3 - y2) / (x3 - x2))
	    if (round((slope1 * slope2), 8) == (- 1)):
	        return True
	    elif (round((slope1 * slope3), 8) == (- 1)):
	        return True
	    elif (round((slope2 * slope3), 8) == (- 1)):
	        return True
	    else:
	        return False
	(x1, y1, x2, y2, x3, y3) = list(map(int, args[0].split()))
	if isRightAngled(x1, y1, x2, y2, x3, y3):
	    print('RIGHT')
	    exit(0)
	if (isRightAngled((x1 + 1), y1, x2, y2, x3, y3) or isRightAngled((x1 - 1), y1, x2, y2, x3, y3) or isRightAngled(x1, (y1 + 1), x2, y2, x3, y3) or isRightAngled(x1, (y1 - 1), x2, y2, x3, y3) or isRightAngled(x1, y1, (x2 + 1), y2, x3, y3) or isRightAngled(x1, y1, (x2 - 1), y2, x3, y3) or isRightAngled(x1, y1, x2, (y2 + 1), x3, y3) or isRightAngled(x1, y1, x2, (y2 - 1), x3, y3) or isRightAngled(x1, y1, x2, y2, (x3 + 1), y3) or isRightAngled(x1, y1, x2, y2, (x3 - 1), y3) or isRightAngled(x1, y1, x2, y2, x3, (y3 + 1)) or isRightAngled(x1, y1, x2, y2, x3, (y3 - 1))):
	    print('ALMOST')
	    exit(0)
	print('NEITHER')
"
1864921,21515094,"n,m=map(int,input().split())
k=0
for i in range(max(n,m)) :
    for j in range(max(n,m)) :
        if i*i+j==n and i+j*j==m :
            k=k+1
print(k)",4061,4496,186,10/17/16 12:12,7,1681,2,8,"[(True, '1', '1', 168975), (True, '1', '1', 168976), (True, '0', '0', 168977), (True, '1', '1', 168978), (True, '1', '1', 168979), (True, '1', '1', 168980), (True, '0', '0', 168981), (True, '0', '0', 168982), (True, '0', '0', 168983), (True, '0', '0', 168984), (True, '1', '1', 168985), (False, '0', '2', 168986), (True, '1', '1', 168987), (True, '1', '1', 168988), (True, '1', '1', 168989), (True, '1', '1', 168990), (True, '1', '1', 168991), (True, '1', '1', 168992), (True, '1', '1', 168993), (True, '1', '1', 168994), (True, '1', '1', 168995), (True, '1', '1', 168996), (True, '1', '1', 168997), (True, '1', '1', 168998), (True, '1', '1', 168999), (True, '1', '1', 169000), (True, '1', '1', 169001), (True, '1', '1', 169002), (True, '1', '1', 169003), (True, '1', '1', 169004), (True, '1', '1', 169005), (True, '1', '1', 169006), (True, '0', '0', 169007), (True, '0', '0', 169008), (True, '0', '0', 169009), (True, '0', '0', 169010), (True, '0', '0', 169011), (True, '0', '0', 169012), (True, '0', '0', 169013), (True, '0', '0', 169014), (True, '0', '0', 169015), (True, '0', '0', 169016), (True, '0', '0', 169017), (True, '0', '0', 169018), (True, '1', '1', 169019), (True, '0', '0', 169020), (True, '1', '1', 169021), (True, '0', '0', 169022), (True, '0', '0', 169023), (True, '0', '0', 169024), (True, '0', '0', 169025), (True, '0', '0', 169026), (True, '0', '0', 169027), (True, '0', '0', 169028)]",False,Wrong Answer,0.6888365053466561,0.9753086419753086,False,0.0185185185185185,False,"def func(*args):
	
	(n, m) = map(int, args[0].split())
	k = 0
	for i in range(max(n, m)):
	    for j in range(max(n, m)):
	        if ((((i * i) + j) == n) and ((i + (j * j)) == m)):
	            k = (k + 1)
	print(k)
"
1113373,9741886,"a=int(input())
if(a==10):
    print(0,end=""\n"")
elif(a>21):
    print(0)
else:
    a=a%10
    if(a==0):
        print(15)
    else:
        print(4)",56719,0,122,2/7/15 7:22,11,1027,2,8,"[(True, '4', '4', 129046), (True, '15', '15', 129047), (True, '0', '0', 129048), (True, '4', '4', 129049), (True, '4', '4', 129050), (True, '4', '4', 129051), (True, '0', '0', 129052), (True, '0', '0', 129053), (False, '4', '0', 129054), (False, '4', '0', 129055), (False, '4', '0', 129056), (False, '4', '0', 129057), (False, '4', '0', 129058), (False, '4', '0', 129059), (False, '4', '0', 129060), (False, '4', '0', 129061), (False, '4', '0', 129062), (True, '4', '4', 129063), (True, '4', '4', 129064), (True, '4', '4', 129065), (True, '4', '4', 129066), (True, '4', '4', 129067), (True, '4', '4', 129068), (True, '0', '0', 129069), (True, '0', '0', 129070)]",False,Wrong Answer,0.5850343668259105,0.9753086419753086,False,0.36,False,"def func(*args):
	
	a = int(args[0])
	if (a == 10):
	    print(0, end='\n')
	elif (a > 21):
	    print(0)
	else:
	    a = (a % 10)
	    if (a == 0):
	        print(15)
	    else:
	        print(4)
"
1113374,9741892,"a=int(input())
if(a==10):
    print(0,end=""\n"")
elif(a>21 or a<10):
    print(0)
else:
    a=a%10
    if(a==0):
        print(15)
    else:
        print(4)",56719,4,124,2/7/15 7:23,11,1027,1,8,"[(True, '4', '4', 129046), (True, '15', '15', 129047), (True, '0', '0', 129048), (True, '4', '4', 129049), (True, '4', '4', 129050), (True, '4', '4', 129051), (True, '0', '0', 129052), (True, '0', '0', 129053), (True, '0', '0', 129054), (True, '0', '0', 129055), (True, '0', '0', 129056), (True, '0', '0', 129057), (True, '0', '0', 129058), (True, '0', '0', 129059), (True, '0', '0', 129060), (True, '0', '0', 129061), (True, '0', '0', 129062), (True, '4', '4', 129063), (True, '4', '4', 129064), (True, '4', '4', 129065), (True, '4', '4', 129066), (True, '4', '4', 129067), (True, '4', '4', 129068), (True, '0', '0', 129069), (True, '0', '0', 129070)]",True,Accecpted,0.5850343668259105,0.9753086419753086,False,0.0,False,"def func(*args):
	
	a = int(args[0])
	if (a == 10):
	    print(0, end='\n')
	elif ((a > 21) or (a < 10)):
	    print(0)
	else:
	    a = (a % 10)
	    if (a == 0):
	        print(15)
	    else:
	        print(4)
"
1864922,21515160,"n,m=map(int,input().split())
k=0
for i in range(0,max(n,m)+1) :
    for j in range(0,max(n,m)+1) :
        if i*i+j==n and i+j*j==m :
            k=k+1
print(k)",4061,4504,622,10/17/16 12:15,7,1681,1,8,"[(True, '1', '1', 168975), (True, '1', '1', 168976), (True, '0', '0', 168977), (True, '1', '1', 168978), (True, '1', '1', 168979), (True, '1', '1', 168980), (True, '0', '0', 168981), (True, '0', '0', 168982), (True, '0', '0', 168983), (True, '0', '0', 168984), (True, '1', '1', 168985), (True, '2', '2', 168986), (True, '1', '1', 168987), (True, '1', '1', 168988), (True, '1', '1', 168989), (True, '1', '1', 168990), (True, '1', '1', 168991), (True, '1', '1', 168992), (True, '1', '1', 168993), (True, '1', '1', 168994), (True, '1', '1', 168995), (True, '1', '1', 168996), (True, '1', '1', 168997), (True, '1', '1', 168998), (True, '1', '1', 168999), (True, '1', '1', 169000), (True, '1', '1', 169001), (True, '1', '1', 169002), (True, '1', '1', 169003), (True, '1', '1', 169004), (True, '1', '1', 169005), (True, '1', '1', 169006), (True, '0', '0', 169007), (True, '0', '0', 169008), (True, '0', '0', 169009), (True, '0', '0', 169010), (True, '0', '0', 169011), (True, '0', '0', 169012), (True, '0', '0', 169013), (True, '0', '0', 169014), (True, '0', '0', 169015), (True, '0', '0', 169016), (True, '0', '0', 169017), (True, '0', '0', 169018), (True, '1', '1', 169019), (True, '0', '0', 169020), (True, '1', '1', 169021), (True, '0', '0', 169022), (True, '0', '0', 169023), (True, '0', '0', 169024), (True, '0', '0', 169025), (True, '0', '0', 169026), (True, '0', '0', 169027), (True, '0', '0', 169028)]",True,Accecpted,0.6888365053466561,0.9753086419753086,False,0.0,False,"def func(*args):
	
	(n, m) = map(int, args[0].split())
	k = 0
	for i in range(0, (max(n, m) + 1)):
	    for j in range(0, (max(n, m) + 1)):
	        if ((((i * i) + j) == n) and ((i + (j * j)) == m)):
	            k = (k + 1)
	print(k)
"
930812,28136892,"n,a,b,c=map(int,input().split())
if n%4==0:
    print(0)
    exit()
elif n%4==1:
    print(min(3*a,a+b,c))
elif n%4==2:
    print(min(2*a,b,2*c))
elif n%4==3:
    print(min(a,b+c,3*c))",18196,5432,62,6/29/17 13:18,19,858,1,8,"[(True, '3', '3', 116330), (True, '1', '1', 116331), (True, '0', '0', 116332), (True, '1000000000', '1000000000', 116333), (True, '0', '0', 116334), (True, '1', '1', 116335), (True, '5', '5', 116336), (True, '2', '2', 116337), (True, '1', '1', 116338), (True, '1000000000', '1000000000', 116339), (True, '999999990', '999999990', 116340), (True, '335918278', '335918278', 116341), (True, '1000000000', '1000000000', 116342), (True, '0', '0', 116343), (True, '524125987', '524125987', 116344), (True, '673102149', '673102149', 116345), (True, '585325539', '585325539', 116346), (True, '11774896', '11774896', 116347), (True, '0', '0', 116348), (True, '131116353', '131116353', 116349), (True, '8075817', '8075817', 116350), (True, '640274071', '640274071', 116351), (True, '405799987', '405799987', 116352), (True, '678092074', '678092074', 116353), (True, '0', '0', 116354), (True, '3', '3', 116355), (True, '2', '2', 116356), (True, '2', '2', 116357), (True, '3', '3', 116358), (True, '438793836', '438793836', 116359), (True, '307539138', '307539138', 116360), (True, '146086131', '146086131', 116361), (True, '347508634', '347508634', 116362), (True, '0', '0', 116363), (True, '764655030', '764655030', 116364), (True, '0', '0', 116365), (True, '335521569', '335521569', 116366), (True, '546879484', '546879484', 116367), (True, '691688417', '691688417', 116368), (True, '30527185', '30527185', 116369), (True, '0', '0', 116370), (True, '654916173', '654916173', 116371), (True, '216296044', '216296044', 116372), (True, '992170945', '992170945', 116373), (True, '48014511', '48014511', 116374), (True, '0', '0', 116375), (True, '0', '0', 116376), (True, '9', '9', 116377), (True, '7', '7', 116378), (True, '3', '3', 116379), (True, '3', '3', 116380), (True, '3', '3', 116381), (True, '3', '3', 116382), (True, '3', '3', 116383), (True, '5', '5', 116384), (True, '6', '6', 116385), (True, '100000', '100000', 116386), (True, '3', '3', 116387), (True, '9', '9', 116388), (True, '2', '2', 116389), (True, '2', '2', 116390), (True, '2', '2', 116391), (True, '2', '2', 116392), (True, '3', '3', 116393), (True, '101', '101', 116394), (True, '1000000000', '1000000000', 116395), (True, '11', '11', 116396), (True, '101', '101', 116397), (True, '2', '2', 116398), (True, '3', '3', 116399), (True, '2', '2', 116400), (True, '3', '3', 116401), (True, '3', '3', 116402), (True, '31', '31', 116403), (True, '3', '3', 116404), (True, '3', '3', 116405), (True, '1001', '1001', 116406), (True, '9', '9', 116407), (True, '3', '3', 116408), (True, '100001', '100001', 116409), (True, '2', '2', 116410), (True, '6', '6', 116411), (True, '3', '3', 116412), (True, '3', '3', 116413), (True, '2', '2', 116414), (True, '34', '34', 116415), (True, '9', '9', 116416), (True, '0', '0', 116417), (True, '0', '0', 116418)]",True,Accecpted,0.9193227152249184,0.9752475247524752,False,0.0,False,"def func(*args):
	
	(n, a, b, c) = map(int, args[0].split())
	if ((n % 4) == 0):
	    print(0)
	    exit()
	elif ((n % 4) == 1):
	    print(min((3 * a), (a + b), c))
	elif ((n % 4) == 2):
	    print(min((2 * a), b, (2 * c)))
	elif ((n % 4) == 3):
	    print(min(a, (b + c), (3 * c)))
"
930811,28136717,"n,a,b,c=map(int,input().split())
if n%4==0:
    print(0)
    exit()
elif n%4==1:
    print(min(3*a,a+b,c))
elif n%4==2:
    print(min(2*a,b,2*c))
elif n%4==3:
    print(min(a,b+c,5*c))",18196,5408,61,6/29/17 13:07,19,858,2,8,"[(True, '3', '3', 116330), (True, '1', '1', 116331), (True, '0', '0', 116332), (True, '1000000000', '1000000000', 116333), (True, '0', '0', 116334), (True, '1', '1', 116335), (True, '5', '5', 116336), (True, '2', '2', 116337), (True, '1', '1', 116338), (True, '1000000000', '1000000000', 116339), (True, '999999990', '999999990', 116340), (True, '335918278', '335918278', 116341), (True, '1000000000', '1000000000', 116342), (True, '0', '0', 116343), (True, '524125987', '524125987', 116344), (True, '673102149', '673102149', 116345), (True, '585325539', '585325539', 116346), (True, '11774896', '11774896', 116347), (True, '0', '0', 116348), (True, '131116353', '131116353', 116349), (False, '13459695', '8075817', 116350), (True, '640274071', '640274071', 116351), (True, '405799987', '405799987', 116352), (True, '678092074', '678092074', 116353), (True, '0', '0', 116354), (True, '3', '3', 116355), (True, '2', '2', 116356), (True, '2', '2', 116357), (False, '4', '3', 116358), (True, '438793836', '438793836', 116359), (False, '454914823', '307539138', 116360), (True, '146086131', '146086131', 116361), (True, '347508634', '347508634', 116362), (True, '0', '0', 116363), (True, '764655030', '764655030', 116364), (True, '0', '0', 116365), (True, '335521569', '335521569', 116366), (True, '546879484', '546879484', 116367), (True, '691688417', '691688417', 116368), (True, '30527185', '30527185', 116369), (True, '0', '0', 116370), (True, '654916173', '654916173', 116371), (True, '216296044', '216296044', 116372), (True, '992170945', '992170945', 116373), (True, '48014511', '48014511', 116374), (True, '0', '0', 116375), (True, '0', '0', 116376), (False, '15', '9', 116377), (True, '7', '7', 116378), (False, '5', '3', 116379), (False, '5', '3', 116380), (False, '5', '3', 116381), (False, '5', '3', 116382), (False, '5', '3', 116383), (True, '5', '5', 116384), (False, '10', '6', 116385), (True, '100000', '100000', 116386), (False, '4', '3', 116387), (False, '15', '9', 116388), (True, '2', '2', 116389), (True, '2', '2', 116390), (True, '2', '2', 116391), (True, '2', '2', 116392), (False, '5', '3', 116393), (True, '101', '101', 116394), (True, '1000000000', '1000000000', 116395), (True, '11', '11', 116396), (True, '101', '101', 116397), (True, '2', '2', 116398), (False, '4', '3', 116399), (True, '2', '2', 116400), (False, '5', '3', 116401), (False, '5', '3', 116402), (True, '31', '31', 116403), (True, '3', '3', 116404), (False, '5', '3', 116405), (True, '1001', '1001', 116406), (False, '15', '9', 116407), (False, '4', '3', 116408), (True, '100001', '100001', 116409), (True, '2', '2', 116410), (True, '6', '6', 116411), (False, '5', '3', 116412), (False, '5', '3', 116413), (True, '2', '2', 116414), (True, '34', '34', 116415), (True, '9', '9', 116416), (True, '0', '0', 116417), (True, '0', '0', 116418)]",False,Wrong Answer,0.9193227152249184,0.9752475247524752,False,0.2359550561797752,False,"def func(*args):
	
	(n, a, b, c) = map(int, args[0].split())
	if ((n % 4) == 0):
	    print(0)
	    exit()
	elif ((n % 4) == 1):
	    print(min((3 * a), (a + b), c))
	elif ((n % 4) == 2):
	    print(min((2 * a), b, (2 * c)))
	elif ((n % 4) == 3):
	    print(min(a, (b + c), (5 * c)))
"
2720863,28263882,"s = input()
f1 = f2 = f3 = f4 = f5 = 0
for i in s:
    if i == 'h' and f1 == 0:
        f1 += 1
    elif f1 > 0 and i == 'e' and f2 == 0:
        f2 += 1
    elif f1 > 0 and f2 > 0 and f3 == 0 and i == 'l':
        f3 += 1
    elif f1 > 0 and f2 > 0 and f3 > 0 and i == 'l' and f4 == 0:
        f4 += 1
    elif f1 > 0 and f2 > 0 and f3 > 0 and f4 > 0 and i == 'o':
        f5 += 1
        break
if f5 == 1: print('YES')
else: print('NO')",6123,5424,62,7/3/17 22:57,16,2335,1,8,"[(True, 'YES', 'YES', 208922), (True, 'NO', 'NO', 208923), (True, 'YES', 'YES', 208924), (True, 'YES', 'YES', 208925), (True, 'YES', 'YES', 208926), (True, 'NO', 'NO', 208927), (True, 'NO', 'NO', 208928), (True, 'YES', 'YES', 208929), (True, 'YES', 'YES', 208930), (True, 'YES', 'YES', 208931), (True, 'YES', 'YES', 208932), (True, 'NO', 'NO', 208933), (True, 'YES', 'YES', 208934), (True, 'YES', 'YES', 208935), (True, 'NO', 'NO', 208936), (True, 'YES', 'YES', 208937), (True, 'YES', 'YES', 208938), (True, 'NO', 'NO', 208939), (True, 'NO', 'NO', 208940), (True, 'YES', 'YES', 208941), (True, 'YES', 'YES', 208942), (True, 'NO', 'NO', 208943), (True, 'YES', 'YES', 208944), (True, 'YES', 'YES', 208945), (True, 'YES', 'YES', 208946), (True, 'YES', 'YES', 208947), (True, 'YES', 'YES', 208948), (True, 'YES', 'YES', 208949), (True, 'YES', 'YES', 208950), (True, 'YES', 'YES', 208951), (True, 'NO', 'NO', 208952), (True, 'NO', 'NO', 208953), (True, 'NO', 'NO', 208954), (True, 'YES', 'YES', 208955), (True, 'NO', 'NO', 208956), (True, 'YES', 'YES', 208957), (True, 'NO', 'NO', 208958), (True, 'NO', 'NO', 208959), (True, 'NO', 'NO', 208960), (True, 'YES', 'YES', 208961)]",True,Accecpted,0.9783975498178012,0.9752421959095802,False,0.0,False,"def func(*args):
	
	s = args[0]
	f1 = f2 = f3 = f4 = f5 = 0
	for i in s:
	    if ((i == 'h') and (f1 == 0)):
	        f1 += 1
	    elif ((f1 > 0) and (i == 'e') and (f2 == 0)):
	        f2 += 1
	    elif ((f1 > 0) and (f2 > 0) and (f3 == 0) and (i == 'l')):
	        f3 += 1
	    elif ((f1 > 0) and (f2 > 0) and (f3 > 0) and (i == 'l') and (f4 == 0)):
	        f4 += 1
	    elif ((f1 > 0) and (f2 > 0) and (f3 > 0) and (f4 > 0) and (i == 'o')):
	        f5 += 1
	        break
	if (f5 == 1):
	    print('YES')
	else:
	    print('NO')
"
3002068,27185172,"mas = input()

if ( mas.count(""1111111"") > 1 ) or ( mas.count(""0000000"")):
    print (""YES"")
else:
    print(""NO"")",99662,0,92,5/17/17 21:20,6,2555,2,8,"[(True, 'NO', 'NO', 219615), (True, 'YES', 'YES', 219616), (False, 'NO', 'YES', 219617), (False, 'NO', 'YES', 219618), (True, 'NO', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (True, 'YES', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (True, 'NO', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (True, 'NO', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (True, 'YES', 'YES', 219634), (True, 'NO', 'NO', 219635), (True, 'NO', 'NO', 219636), (True, 'YES', 'YES', 219637), (True, 'NO', 'NO', 219638), (True, 'NO', 'NO', 219639), (False, 'NO', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (False, 'NO', 'YES', 219645), (True, 'NO', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (True, 'NO', 'NO', 219649), (True, 'YES', 'YES', 219650), (True, 'YES', 'YES', 219651), (True, 'YES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (True, 'YES', 'YES', 219655), (True, 'YES', 'YES', 219656), (False, 'NO', 'YES', 219657), (False, 'NO', 'YES', 219658)]",False,Wrong Answer,0.5408012794156497,0.975206611570248,False,0.1363636363636363,False,"def func(*args):
	
	mas = args[0]
	if ((mas.count('1111111') > 1) or mas.count('0000000')):
	    print('YES')
	else:
	    print('NO')
"
3002069,27185190,"mas = input()

if ( mas.count(""1111111"") > 0 ) or ( mas.count(""0000000"") > 0):
    print (""YES"")
else:
    print(""NO"")",99662,20,124,5/17/17 21:21,6,2555,1,8,"[(True, 'NO', 'NO', 219615), (True, 'YES', 'YES', 219616), (True, 'YES', 'YES', 219617), (True, 'YES', 'YES', 219618), (True, 'NO', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (True, 'YES', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (True, 'NO', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (True, 'NO', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (True, 'YES', 'YES', 219634), (True, 'NO', 'NO', 219635), (True, 'NO', 'NO', 219636), (True, 'YES', 'YES', 219637), (True, 'NO', 'NO', 219638), (True, 'NO', 'NO', 219639), (True, 'YES', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (True, 'YES', 'YES', 219645), (True, 'NO', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (True, 'NO', 'NO', 219649), (True, 'YES', 'YES', 219650), (True, 'YES', 'YES', 219651), (True, 'YES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (True, 'YES', 'YES', 219655), (True, 'YES', 'YES', 219656), (True, 'YES', 'YES', 219657), (True, 'YES', 'YES', 219658)]",True,Accecpted,0.5408012794156497,0.975206611570248,False,0.0,False,"def func(*args):
	
	mas = args[0]
	if ((mas.count('1111111') > 0) or (mas.count('0000000') > 0)):
	    print('YES')
	else:
	    print('NO')
"
1211650,28351684,"a = (input()).lower()
a = list(a)
c = 0
d = list()
for p in a:
    if p == ""a"" or p == ""e"" or p == ""i"" or p == ""o"" or p == ""u"" or p == ""y"":
        continue
    else:
        d.append(p)
s = """"
for p in d:
    s = s + ""."" + p

print(s)",1991,5436,124,7/7/17 17:55,14,1102,1,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (True, '.x.n.h.c.g.t.n.q.c.m', '.x.n.h.c.g.t.n.q.c.m', 135750), (True, '.j.f.m.t.b.j.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (True, '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (True, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (True, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (True, '.w.z.t.c.v.v.v.v.z.v', '.w.z.t.c.v.v.v.v.z.v', 135766), (True, '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (True, '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (True, '.l.t.g.m.g', '.l.t.g.m.g', 135770), (True, '.k.z.d.x.f', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (True, '.m.r.c.g.p', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (True, '.b', '.b', 135775), (True, '.f.l', '.f.l', 135776), (True, '.x.d.w.d.w.d.d.w.d.d.d.d', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",True,Accecpted,0.8836987628675694,0.975206611570248,False,0.0,False,"def func(*args):
	
	a = args[0].lower()
	a = list(a)
	c = 0
	d = list()
	for p in a:
	    if ((p == 'a') or (p == 'e') or (p == 'i') or (p == 'o') or (p == 'u') or (p == 'y')):
	        continue
	    else:
	        d.append(p)
	s = ''
	for p in d:
	    s = ((s + '.') + p)
	print(s)
"
1211649,28351632,"a = (input()).lower()
a = list(a)
c = 0
d = list()
for p in a:
    if p == ""a"" or p == ""e"" or p == ""i"" or p == ""o"" or p == ""u"":
        continue
    else:
        d.append(p)
s = """"
for p in d:
    s = s + ""."" + p

print(s)",1991,5432,124,7/7/17 17:52,14,1102,2,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (False, '.x.n.h.c.g.y.t.n.q.c.m.y', '.x.n.h.c.g.t.n.q.c.m', 135750), (False, '.j.f.m.t.b.j.y.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (False, '.f.m.z.c.r.k.c.p.h.y.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.y.c.l.c.d.j.f.r.m.y.q.y.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (False, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.y.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (False, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.y.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (False, '.y.w.y.z.t.y.c.v.v.y.v.y.v.z.y.y.y.y.y.v.y.y.y.y.y.y', '.w.z.t.c.v.v.v.v.z.v', 135766), (False, '.y.j.n.c.k.p.f.y.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (False, '.r.y.j.y.w.f.p.z.y.y.h.y.l.v.l.m.g.y.y.y.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (False, '.y.y.y.l.y.y.y.y.t.y.y.y.y.y.g.m.y.y.y.y.y.y.g', '.l.t.g.m.g', 135770), (False, '.y.y.y.y.k.z.y.y.y.y.y.d.x.f.y.y.y.y.y', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (False, '.y.y.y.y.y.y.m.y.r.c.y.y.g.y.y.y.p.y.y.y.y.y', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (False, '.y.b', '.b', 135775), (False, '.f.l.y', '.f.l', 135776), (False, '.y.y.y.y.y.y.y.y.y.x.d.w.d.w.d.d.w.d.d.d.d.y.y.y.y', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",False,Wrong Answer,0.8836987628675694,0.975206611570248,False,0.3333333333333333,False,"def func(*args):
	
	a = args[0].lower()
	a = list(a)
	c = 0
	d = list()
	for p in a:
	    if ((p == 'a') or (p == 'e') or (p == 'i') or (p == 'o') or (p == 'u')):
	        continue
	    else:
	        d.append(p)
	s = ''
	for p in d:
	    s = ((s + '.') + p)
	print(s)
"
1265505,22026877,"n=(int(input())+2)//3
print(n//12,n%12)",4353,0,92,11/4/16 7:47,2,1149,2,8,"[(True, '1 2', '1 2', 10016), (True, '0 2', '0 2', 10017), (True, '0 8', '0 8', 10018), (False, '0 1', '0 0', 10019), (True, '0 1', '0 1', 10020), (True, '0 1', '0 1', 10021), (False, '0 2', '0 1', 10022), (True, '0 3', '0 3', 10023), (False, '0 4', '0 3', 10024), (True, '0 4', '0 4', 10025), (False, '0 5', '0 4', 10026), (False, '2 10', '2 9', 10027), (True, '3 4', '3 4', 10028), (False, '5 7', '5 6', 10029), (True, '13 11', '13 11', 10030), (False, '27 10', '27 9', 10031), (True, '34 3', '34 3', 10032), (True, '274 4', '274 4', 10033), (True, '277 9', '277 9', 10034), (False, '277 10', '277 9', 10035), (True, '1 0', '1 0', 10036), (True, '2 0', '2 0', 10037)]",False,Wrong Answer,1.5319719891192393e-231,0.975,False,0.3636363636363636,False,"def func(*args):
	
	n = ((int(args[0]) + 2) // 3)
	print((n // 12), (n % 12))
"
1265506,22026886,"n=(int(input())+1)//3
print(n//12,n%12)",4353,8,122,11/4/16 7:49,2,1149,1,8,"[(True, '1 2', '1 2', 10016), (True, '0 2', '0 2', 10017), (True, '0 8', '0 8', 10018), (True, '0 0', '0 0', 10019), (True, '0 1', '0 1', 10020), (True, '0 1', '0 1', 10021), (True, '0 1', '0 1', 10022), (True, '0 3', '0 3', 10023), (True, '0 3', '0 3', 10024), (True, '0 4', '0 4', 10025), (True, '0 4', '0 4', 10026), (True, '2 9', '2 9', 10027), (True, '3 4', '3 4', 10028), (True, '5 6', '5 6', 10029), (True, '13 11', '13 11', 10030), (True, '27 9', '27 9', 10031), (True, '34 3', '34 3', 10032), (True, '274 4', '274 4', 10033), (True, '277 9', '277 9', 10034), (True, '277 9', '277 9', 10035), (True, '1 0', '1 0', 10036), (True, '2 0', '2 0', 10037)]",True,Accecpted,1.5319719891192393e-231,0.975,False,0.0,False,"def func(*args):
	
	n = ((int(args[0]) + 1) // 3)
	print((n // 12), (n % 12))
"
2510698,11599570,"import math, sys
a, b, n = map(float, input().split())
if a == 0 and b == 0:
    print(5)
    sys.exit()
try:
    ans = math.pow(abs(b/a), 1/n)
    if n%2 == 1 and b/a < 0:
        ans *= -1
except:
    print('No solution')
    sys.exit()
if math.ceil(abs(ans)) == math.floor(abs(ans)+0.5):
    print(int(abs(ans)+0.5) * (-1 if ans < 0 else 1))
else:
    print('No solution')",57020,0,122,6/16/15 0:23,16,2163,2,8,"[(True, '3', '3', 199829), (True, '-2', '-2', 199830), (False, '2', 'No solution', 199832), (True, 'No solution', 'No solution', 199833), (True, '0', '0', 199834), (True, '1000', '1000', 199835), (True, '2', '2', 199836), (True, '243', '243', 199837), (True, '1', '1', 199838), (True, '0', '0', 199839), (True, '0', '0', 199840), (True, '1', '1', 199841), (True, '1', '1', 199842), (True, '1', '1', 199843), (True, '0', '0', 199844), (True, '0', '0', 199845), (True, '-1', '-1', 199846), (True, '0', '0', 199847), (False, '1', 'No solution', 199848), (True, 'No solution', 'No solution', 199849), (True, 'No solution', 'No solution', 199850), (True, 'No solution', 'No solution', 199851), (True, '-1', '-1', 199852), (True, '-1', '-1', 199853), (True, '0', '0', 199854), (True, '25', '25', 199855), (True, '112', '112', 199856), (False, '2', 'No solution', 199857), (True, '2', '2', 199858), (True, 'No solution', 'No solution', 199859), (False, '2', 'No solution', 199860), (True, '4', '4', 199861), (False, '4', 'No solution', 199862), (True, '3', '3', 199863), (True, 'No solution', 'No solution', 199864), (True, '243', '243', 199865), (False, '16', 'No solution', 199866), (True, '1000', '1000', 199867), (True, '31', '31', 199868), (True, '10', '10', 199869), (True, '5', '5', 199870), (True, '3', '3', 199871), (True, '3', '3', 199872), (True, '2', '2', 199873), (True, '2', '2', 199874), (True, '2', '2', 199875), (True, '1000', '1000', 199876), (True, '31', '31', 199877), (True, '10', '10', 199878), (True, '5', '5', 199879), (True, '3', '3', 199880), (True, '3', '3', 199881), (True, '2', '2', 199882), (True, '2', '2', 199883), (True, '2', '2', 199884), (True, '1000', '1000', 199885), (True, '31', '31', 199886), (True, '10', '10', 199887), (True, '5', '5', 199888), (True, '3', '3', 199889), (True, '3', '3', 199890), (True, '2', '2', 199891), (True, '2', '2', 199892), (True, '2', '2', 199893), (True, '1', '1', 199894), (True, '1', '1', 199895), (True, '-1', '-1', 199896)]",False,Wrong Answer,0.933847757608669,0.975,False,0.0895522388059701,False,"def func(*args):
	
	import math, sys
	(a, b, n) = map(float, args[0].split())
	if ((a == 0) and (b == 0)):
	    print(5)
	    sys.exit()
	try:
	    ans = math.pow(abs((b / a)), (1 / n))
	    if (((n % 2) == 1) and ((b / a) < 0)):
	        ans *= (- 1)
	except:
	    print('No solution')
	    sys.exit()
	if (math.ceil(abs(ans)) == math.floor((abs(ans) + 0.5))):
	    print((int((abs(ans) + 0.5)) * ((- 1) if (ans < 0) else 1)))
	else:
	    print('No solution')
"
2510699,11599586,"import math, sys
a, b, n = map(float, input().split())
if a == 0 and b == 0:
    print(5)
    sys.exit()
try:
    ans = math.pow(abs(b/a), 1/n)
    if n%2 == 1 and b/a < 0:
        ans *= -1
except:
    print('No solution')
    sys.exit()
if math.ceil(abs(ans)) == math.floor(abs(ans)+0.00000000005):
    print(int(abs(ans)+0.00000000005) * (-1 if ans < 0 else 1))
else:
    print('No solution')",57020,0,124,6/16/15 0:25,16,2163,1,8,"[(True, '3', '3', 199829), (True, '-2', '-2', 199830), (True, 'No solution', 'No solution', 199832), (True, 'No solution', 'No solution', 199833), (True, '0', '0', 199834), (True, '1000', '1000', 199835), (True, '2', '2', 199836), (True, '243', '243', 199837), (True, '1', '1', 199838), (True, '0', '0', 199839), (True, '0', '0', 199840), (True, '1', '1', 199841), (True, '1', '1', 199842), (True, '1', '1', 199843), (True, '0', '0', 199844), (True, '0', '0', 199845), (True, '-1', '-1', 199846), (True, '0', '0', 199847), (True, 'No solution', 'No solution', 199848), (True, 'No solution', 'No solution', 199849), (True, 'No solution', 'No solution', 199850), (True, 'No solution', 'No solution', 199851), (True, '-1', '-1', 199852), (True, '-1', '-1', 199853), (True, '0', '0', 199854), (True, '25', '25', 199855), (True, '112', '112', 199856), (True, 'No solution', 'No solution', 199857), (True, '2', '2', 199858), (True, 'No solution', 'No solution', 199859), (True, 'No solution', 'No solution', 199860), (True, '4', '4', 199861), (True, 'No solution', 'No solution', 199862), (True, '3', '3', 199863), (True, 'No solution', 'No solution', 199864), (True, '243', '243', 199865), (True, 'No solution', 'No solution', 199866), (True, '1000', '1000', 199867), (True, '31', '31', 199868), (True, '10', '10', 199869), (True, '5', '5', 199870), (True, '3', '3', 199871), (True, '3', '3', 199872), (True, '2', '2', 199873), (True, '2', '2', 199874), (True, '2', '2', 199875), (True, '1000', '1000', 199876), (True, '31', '31', 199877), (True, '10', '10', 199878), (True, '5', '5', 199879), (True, '3', '3', 199880), (True, '3', '3', 199881), (True, '2', '2', 199882), (True, '2', '2', 199883), (True, '2', '2', 199884), (True, '1000', '1000', 199885), (True, '31', '31', 199886), (True, '10', '10', 199887), (True, '5', '5', 199888), (True, '3', '3', 199889), (True, '3', '3', 199890), (True, '2', '2', 199891), (True, '2', '2', 199892), (True, '2', '2', 199893), (True, '1', '1', 199894), (True, '1', '1', 199895), (True, '-1', '-1', 199896)]",True,Accecpted,0.933847757608669,0.975,False,0.0,False,"def func(*args):
	
	import math, sys
	(a, b, n) = map(float, args[0].split())
	if ((a == 0) and (b == 0)):
	    print(5)
	    sys.exit()
	try:
	    ans = math.pow(abs((b / a)), (1 / n))
	    if (((n % 2) == 1) and ((b / a) < 0)):
	        ans *= (- 1)
	except:
	    print('No solution')
	    sys.exit()
	if (math.ceil(abs(ans)) == math.floor((abs(ans) + 5e-11))):
	    print((int((abs(ans) + 5e-11)) * ((- 1) if (ans < 0) else 1)))
	else:
	    print('No solution')
"
1161464,29442199,"n = input()
a = n.count(""4"") + n.count(""7"")
s = str(a)
for i in s:
    if i != 4 and i !=7:
        print(""NO"")
        raise SystemExit
print(""YES"")",23098,4476,92,8/13/17 22:21,8,1062,2,8,"[(True, 'NO', 'NO', 131260), (False, 'NO', 'YES', 131261), (True, 'NO', 'NO', 131262), (True, 'NO', 'NO', 131263), (True, 'NO', 'NO', 131264), (True, 'NO', 'NO', 131265), (False, 'NO', 'YES', 131266), (False, 'NO', 'YES', 131267), (False, 'NO', 'YES', 131268), (True, 'NO', 'NO', 131269), (False, 'NO', 'YES', 131270), (True, 'NO', 'NO', 131271), (False, 'NO', 'YES', 131272), (True, 'NO', 'NO', 131273), (True, 'NO', 'NO', 131274), (True, 'NO', 'NO', 131275), (True, 'NO', 'NO', 131276), (True, 'NO', 'NO', 131277), (True, 'NO', 'NO', 131278), (True, 'NO', 'NO', 131279), (True, 'NO', 'NO', 131280), (True, 'NO', 'NO', 131281), (False, 'NO', 'YES', 131282), (False, 'NO', 'YES', 131283), (False, 'NO', 'YES', 131284), (True, 'NO', 'NO', 131285), (False, 'NO', 'YES', 131286), (False, 'NO', 'YES', 131287), (False, 'NO', 'YES', 131288), (True, 'NO', 'NO', 131289), (True, 'NO', 'NO', 131290), (False, 'NO', 'YES', 131291), (False, 'NO', 'YES', 131292), (True, 'NO', 'NO', 131293)]",False,Wrong Answer,0.7674304260700059,0.975,False,0.4117647058823529,False,"def func(*args):
	
	n = args[0]
	a = (n.count('4') + n.count('7'))
	s = str(a)
	for i in s:
	    if ((i != 4) and (i != 7)):
	        print('NO')
	        raise SystemExit
	print('YES')
"
1161465,29442258,"n = input()
a = n.count(""4"") + n.count(""7"")
s = str(a)

for i in s:
    if  i != ""4"" and i != ""7"":
        print(""NO"")
        raise SystemExit
print(""YES"")",23098,4512,184,8/13/17 22:25,9,1062,1,8,"[(True, 'NO', 'NO', 131260), (True, 'YES', 'YES', 131261), (True, 'NO', 'NO', 131262), (True, 'NO', 'NO', 131263), (True, 'NO', 'NO', 131264), (True, 'NO', 'NO', 131265), (True, 'YES', 'YES', 131266), (True, 'YES', 'YES', 131267), (True, 'YES', 'YES', 131268), (True, 'NO', 'NO', 131269), (True, 'YES', 'YES', 131270), (True, 'NO', 'NO', 131271), (True, 'YES', 'YES', 131272), (True, 'NO', 'NO', 131273), (True, 'NO', 'NO', 131274), (True, 'NO', 'NO', 131275), (True, 'NO', 'NO', 131276), (True, 'NO', 'NO', 131277), (True, 'NO', 'NO', 131278), (True, 'NO', 'NO', 131279), (True, 'NO', 'NO', 131280), (True, 'NO', 'NO', 131281), (True, 'YES', 'YES', 131282), (True, 'YES', 'YES', 131283), (True, 'YES', 'YES', 131284), (True, 'NO', 'NO', 131285), (True, 'YES', 'YES', 131286), (True, 'YES', 'YES', 131287), (True, 'YES', 'YES', 131288), (True, 'NO', 'NO', 131289), (True, 'NO', 'NO', 131290), (True, 'YES', 'YES', 131291), (True, 'YES', 'YES', 131292), (True, 'NO', 'NO', 131293)]",True,Accecpted,0.7674304260700059,0.975,False,0.0,False,"def func(*args):
	
	n = args[0]
	a = (n.count('4') + n.count('7'))
	s = str(a)
	for i in s:
	    if ((i != '4') and (i != '7')):
	        print('NO')
	        raise SystemExit
	print('YES')
"
2202716,15414806,"inp = int(input())
prime = list()
count = 0

for i in range(2,inp+1):
    ans = 0
    for j in range(2,i - 1):
        if i%j == 0:
            ans = ans + 1
    if ans == 0:
        prime.append(i)

for i in range(1,inp+1):
    ans = 0
    for j in prime:
        if i%j == 0:
            ans = ans + 1
    if ans == 2:
        count +=1

print(count)",54946,0,1872,1/17/16 15:52,21,1940,1,8,"[(True, '2', '2', 186638), (True, '8', '8', 186639), (True, '0', '0', 186640), (True, '0', '0', 186641), (True, '0', '0', 186642), (True, '0', '0', 186643), (True, '1', '1', 186644), (True, '6', '6', 186645), (True, '19', '19', 186646), (True, '41', '41', 186647), (True, '125', '125', 186648), (True, '501', '501', 186649), (True, '508', '508', 186650), (True, '958', '958', 186651), (True, '1375', '1375', 186652), (True, '1375', '1375', 186653), (True, '1375', '1375', 186654), (True, '1374', '1374', 186655), (True, '706', '706', 186656), (True, '808', '808', 186657), (True, '732', '732', 186658), (True, '266', '266', 186659), (True, '439', '439', 186660)]",True,Accecpted,0.9185787352601704,0.9749670619235836,False,0.0,False,"def func(*args):
	
	inp = int(args[0])
	prime = list()
	count = 0
	for i in range(2, (inp + 1)):
	    ans = 0
	    for j in range(2, (i - 1)):
	        if ((i % j) == 0):
	            ans = (ans + 1)
	    if (ans == 0):
	        prime.append(i)
	for i in range(1, (inp + 1)):
	    ans = 0
	    for j in prime:
	        if ((i % j) == 0):
	            ans = (ans + 1)
	    if (ans == 2):
	        count += 1
	print(count)
"
2202715,15414734,"inp = int(input())
prime = list()
count = 0

for i in range(2,inp+1):
    ans = 0
    for j in range(2,i - 1):
        if i%j == 0:
            ans = ans + 1
    if ans == 0:
        prime.append(i)

#print(prime)

for i in range(inp+1):
    ans = 0
    for j in prime:
        if i%j == 0:
            ans = ans + 1
    if ans == 2:
        count +=1

print(count)",54946,0,122,1/17/16 15:45,23,1940,2,8,"[(True, '2', '2', 186638), (True, '8', '8', 186639), (True, '0', '0', 186640), (True, '0', '0', 186641), (False, '1', '0', 186642), (False, '1', '0', 186643), (True, '1', '1', 186644), (True, '6', '6', 186645), (True, '19', '19', 186646), (True, '41', '41', 186647), (True, '125', '125', 186648), (True, '501', '501', 186649), (True, '508', '508', 186650), (True, '958', '958', 186651), (True, '1375', '1375', 186652), (True, '1375', '1375', 186653), (True, '1375', '1375', 186654), (True, '1374', '1374', 186655), (True, '706', '706', 186656), (True, '808', '808', 186657), (True, '732', '732', 186658), (True, '266', '266', 186659), (True, '439', '439', 186660)]",False,Wrong Answer,0.9185787352601704,0.9749670619235836,False,0.0869565217391304,False,"def func(*args):
	
	inp = int(args[0])
	prime = list()
	count = 0
	for i in range(2, (inp + 1)):
	    ans = 0
	    for j in range(2, (i - 1)):
	        if ((i % j) == 0):
	            ans = (ans + 1)
	    if (ans == 0):
	        prime.append(i)
	for i in range((inp + 1)):
	    ans = 0
	    for j in prime:
	        if ((i % j) == 0):
	            ans = (ans + 1)
	    if (ans == 2):
	        count += 1
	print(count)
"
1703618,27158943,"import math
import copy

# number_of_drinks = int(input())
numbers = [int(x) for x in input().split("" "")]

ribbon_length = numbers[0]
pieces = numbers[1:]
pieces = list(set(pieces))
pieces.sort()
result = set()

for i in range(len(pieces)):
    number = pieces[i]
    temp_list = copy.copy(pieces)
    temp_list.pop(i)
    if ribbon_length % number == 0:
        result.add(int(ribbon_length / number))
    else:
        estimation = int(math.floor(ribbon_length / number))
        for j in range(1, estimation): # Było estimation + 1
            lack = ribbon_length - number * (estimation - j)
            if lack > 0:
                for k in range(len(pieces)-1):
                    if lack % temp_list[k] == 0:
                        result.add(estimation - j + int(lack / temp_list[k]))
                for x in range(1, j + 1):
                        lack = lack - temp_list[0] * x
                        if lack > 0:
                            if lack % temp_list[1] == 0:
                                result.add(estimation - j + x + int(lack / temp_list[1]))

print(max(result))",5834,884,561,5/16/17 15:17,33,1520,5,8,"[(True, '2', '2', 159338), (True, '2', '2', 159339), (True, '1', '1', 159340), (True, '1', '1', 159341), (True, '4000', '4000', 159342), (True, '1333', '1333', 159343), (True, '3', '3', 159344), (True, '2', '2', 159345), (True, '11', '11', 159346), (True, '9', '9', 159347), (True, '15', '15', 159348), (True, '7', '7', 159349), (True, '26', '26', 159350), (True, '370', '370', 159351), (True, '367', '367', 159352), (True, '29', '29', 159353), (True, '2', '2', 159354), (True, '7', '7', 159355), (True, '2', '2', 159356), (True, '3', '3', 159357), (True, '9', '9', 159358), (True, '1', '1', 159359), (True, '1', '1', 159360), (True, '9', '9', 159361), (True, '2', '2', 159362), (True, '1', '1', 159363), (True, '5', '5', 159364), (True, '1', '1', 159365), (True, '6', '6', 159366), (True, '1', '1', 159367), (True, '101', '101', 159368), (True, '3', '3', 159369), (True, '991', '991', 159370), (True, '683', '683', 159371), (True, '991', '991', 159372), (True, '595', '595', 159373), (True, '4000', '4000', 159374), (True, '1', '1', 159375), (True, '3', '3', 159376), (True, '8', '8', 159377), (True, '5', '5', 159378), (True, '100', '100', 159379), (True, '5', '5', 159380), (True, '4', '4', 159381), (True, '111', '111', 159382), (False, '', '1999', 159383), (True, '2', '2', 159384), (True, '5', '5', 159385), (True, '27', '27', 159386), (True, '2000', '2000', 159387), (False, '', '1332', 159388), (True, '2', '2', 159389), (True, '2000', '2000', 159390), (False, '', '1999', 159391), (True, '564', '564', 159392), (True, '4', '4', 159393), (True, '10', '10', 159394), (True, '334', '334', 159395)]",False,Runtime Error,0.9579484892690722,0.9749134948096886,False,0.0517241379310344,False,"def func(*args):
	
	import math
	import copy
	numbers = [int(x) for x in args[0].split(' ')]
	ribbon_length = numbers[0]
	pieces = numbers[1:]
	pieces = list(set(pieces))
	pieces.sort()
	result = set()
	for i in range(len(pieces)):
	    number = pieces[i]
	    temp_list = copy.copy(pieces)
	    temp_list.pop(i)
	    if ((ribbon_length % number) == 0):
	        result.add(int((ribbon_length / number)))
	    else:
	        estimation = int(math.floor((ribbon_length / number)))
	        for j in range(1, estimation):
	            lack = (ribbon_length - (number * (estimation - j)))
	            if (lack > 0):
	                for k in range((len(pieces) - 1)):
	                    if ((lack % temp_list[k]) == 0):
	                        result.add(((estimation - j) + int((lack / temp_list[k]))))
	                for x in range(1, (j + 1)):
	                    lack = (lack - (temp_list[0] * x))
	                    if (lack > 0):
	                        if ((lack % temp_list[1]) == 0):
	                            result.add((((estimation - j) + x) + int((lack / temp_list[1]))))
	print(max(result))
"
1703619,27159009,"import math
import copy

# number_of_drinks = int(input())
numbers = [int(x) for x in input().split("" "")]

ribbon_length = numbers[0]
pieces = numbers[1:]
pieces = list(set(pieces))
pieces.sort()
result = set()

for i in range(len(pieces)):
    number = pieces[i]
    temp_list = copy.copy(pieces)
    temp_list.pop(i)
    if ribbon_length % number == 0:
        result.add(int(ribbon_length / number))
    else:
        estimation = int(math.floor(ribbon_length / number))
        for j in range(1, estimation): # Było estimation + 1
            lack = ribbon_length - number * (estimation - j)
            if lack > 0:
                for k in range(len(pieces)-1):
                    if lack % temp_list[k] == 0:
                        result.add(estimation - j + int(lack / temp_list[k]))
                if len(pieces) == 3:
                    for x in range(1, j + 1):
                            lack = lack - temp_list[0] * x
                            if lack > 0:
                                if lack % temp_list[1] == 0:
                                    result.add(estimation - j + x + int(lack / temp_list[1]))

print(max(result))",5834,820,436,5/16/17 15:20,34,1520,1,8,"[(True, '2', '2', 159338), (True, '2', '2', 159339), (True, '1', '1', 159340), (True, '1', '1', 159341), (True, '4000', '4000', 159342), (True, '1333', '1333', 159343), (True, '3', '3', 159344), (True, '2', '2', 159345), (True, '11', '11', 159346), (True, '9', '9', 159347), (True, '15', '15', 159348), (True, '7', '7', 159349), (True, '26', '26', 159350), (True, '370', '370', 159351), (True, '367', '367', 159352), (True, '29', '29', 159353), (True, '2', '2', 159354), (True, '7', '7', 159355), (True, '2', '2', 159356), (True, '3', '3', 159357), (True, '9', '9', 159358), (True, '1', '1', 159359), (True, '1', '1', 159360), (True, '9', '9', 159361), (True, '2', '2', 159362), (True, '1', '1', 159363), (True, '5', '5', 159364), (True, '1', '1', 159365), (True, '6', '6', 159366), (True, '1', '1', 159367), (True, '101', '101', 159368), (True, '3', '3', 159369), (True, '991', '991', 159370), (True, '683', '683', 159371), (True, '991', '991', 159372), (True, '595', '595', 159373), (True, '4000', '4000', 159374), (True, '1', '1', 159375), (True, '3', '3', 159376), (True, '8', '8', 159377), (True, '5', '5', 159378), (True, '100', '100', 159379), (True, '5', '5', 159380), (True, '4', '4', 159381), (True, '111', '111', 159382), (True, '1999', '1999', 159383), (True, '2', '2', 159384), (True, '5', '5', 159385), (True, '27', '27', 159386), (True, '2000', '2000', 159387), (True, '1332', '1332', 159388), (True, '2', '2', 159389), (True, '2000', '2000', 159390), (True, '1999', '1999', 159391), (True, '564', '564', 159392), (True, '4', '4', 159393), (True, '10', '10', 159394), (True, '334', '334', 159395)]",True,Accecpted,0.9579484892690722,0.9749134948096886,False,0.0,False,"def func(*args):
	
	import math
	import copy
	numbers = [int(x) for x in args[0].split(' ')]
	ribbon_length = numbers[0]
	pieces = numbers[1:]
	pieces = list(set(pieces))
	pieces.sort()
	result = set()
	for i in range(len(pieces)):
	    number = pieces[i]
	    temp_list = copy.copy(pieces)
	    temp_list.pop(i)
	    if ((ribbon_length % number) == 0):
	        result.add(int((ribbon_length / number)))
	    else:
	        estimation = int(math.floor((ribbon_length / number)))
	        for j in range(1, estimation):
	            lack = (ribbon_length - (number * (estimation - j)))
	            if (lack > 0):
	                for k in range((len(pieces) - 1)):
	                    if ((lack % temp_list[k]) == 0):
	                        result.add(((estimation - j) + int((lack / temp_list[k]))))
	                if (len(pieces) == 3):
	                    for x in range(1, (j + 1)):
	                        lack = (lack - (temp_list[0] * x))
	                        if (lack > 0):
	                            if ((lack % temp_list[1]) == 0):
	                                result.add((((estimation - j) + x) + int((lack / temp_list[1]))))
	print(max(result))
"
1717733,22815141,"n, m = map(int, input().split())
if not n and m:
    print('Impossible')
else:
    print(n+m-min(m, n), m+n-1 if m else n)",14931,12,124,12/8/16 19:25,5,1530,1,8,"[(True, '2 2', '2 2', 160161), (True, 'Impossible', 'Impossible', 160162), (True, '2 3', '2 3', 160163), (True, '7 8', '7 8', 160164), (True, '10 13', '10 13', 160165), (True, '6 6', '6 6', 160166), (True, '7 7', '7 7', 160167), (True, '0 0', '0 0', 160168), (True, '71 94', '71 94', 160169), (True, '70 85', '70 85', 160170), (True, 'Impossible', 'Impossible', 160171), (True, '1 1', '1 1', 160172), (True, '1 1', '1 1', 160173), (True, '82 144', '82 144', 160174), (True, '26 33', '26 33', 160175), (True, '27 47', '27 47', 160176), (True, 'Impossible', 'Impossible', 160177), (True, '84 129', '84 129', 160178), (True, '96 154', '96 154', 160179), (True, '63028 63028', '63028 63028', 160180), (True, '9458 9458', '9458 9458', 160181), (True, '80236 80236', '80236 80236', 160182), (True, '26666 26666', '26666 26666', 160183), (True, '59617 59617', '59617 59617', 160184), (True, 'Impossible', 'Impossible', 160185), (True, '63028 91244', '63028 91244', 160186), (True, '39163 48620', '39163 48620', 160187), (True, '80236 95103', '80236 95103', 160188), (True, '52747 79412', '52747 79412', 160189), (True, '59617 88068', '59617 88068', 160190), (True, '6048 10205', '6048 10205', 160191), (True, '76826 81035', '76826 81035', 160192), (True, '23256 38411', '23256 38411', 160193), (True, '56207 109241', '56207 109241', 160194), (True, '28740 31376', '28740 31376', 160195), (True, '73415 77859', '73415 77859', 160196), (True, '82019 86516', '82019 86516', 160197), (True, '80204 108652', '80204 108652', 160198), (True, '99227 152549', '99227 152549', 160199), (True, '45657 74684', '45657 74684', 160200), (True, '78608 83340', '78608 83340', 160201), (True, '25038 29823', '25038 29823', 160202), (True, '95816 176307', '95816 176307', 160203), (True, '94024 136269', '94024 136269', 160204), (True, 'Impossible', 'Impossible', 160205), (True, '100000 100000', '100000 100000', 160206), (True, '100000 100000', '100000 100000', 160207), (True, '100000 100000', '100000 100000', 160208), (True, '63028 126055', '63028 126055', 160209), (True, '9458 18915', '9458 18915', 160210), (True, '80236 160471', '80236 160471', 160211), (True, '26666 53331', '26666 53331', 160212), (True, '59617 119233', '59617 119233', 160213), (True, '100000 199999', '100000 199999', 160214)]",True,Accecpted,0.7363203407082369,0.9747899159663864,False,0.0,False,"def func(*args):
	
	(n, m) = map(int, args[0].split())
	if ((not n) and m):
	    print('Impossible')
	else:
	    print(((n + m) - min(m, n)), (((m + n) - 1) if m else n))
"
1717732,22815084,"n, m = map(int, input().split())
if not n:
    print('Impossible')
else:
    print(n+m-min(m, n), m+n-1 if m else n)",14931,0,124,12/8/16 19:23,5,1530,2,8,"[(True, '2 2', '2 2', 160161), (True, 'Impossible', 'Impossible', 160162), (True, '2 3', '2 3', 160163), (True, '7 8', '7 8', 160164), (True, '10 13', '10 13', 160165), (True, '6 6', '6 6', 160166), (True, '7 7', '7 7', 160167), (False, 'Impossible', '0 0', 160168), (True, '71 94', '71 94', 160169), (True, '70 85', '70 85', 160170), (True, 'Impossible', 'Impossible', 160171), (True, '1 1', '1 1', 160172), (True, '1 1', '1 1', 160173), (True, '82 144', '82 144', 160174), (True, '26 33', '26 33', 160175), (True, '27 47', '27 47', 160176), (True, 'Impossible', 'Impossible', 160177), (True, '84 129', '84 129', 160178), (True, '96 154', '96 154', 160179), (True, '63028 63028', '63028 63028', 160180), (True, '9458 9458', '9458 9458', 160181), (True, '80236 80236', '80236 80236', 160182), (True, '26666 26666', '26666 26666', 160183), (True, '59617 59617', '59617 59617', 160184), (True, 'Impossible', 'Impossible', 160185), (True, '63028 91244', '63028 91244', 160186), (True, '39163 48620', '39163 48620', 160187), (True, '80236 95103', '80236 95103', 160188), (True, '52747 79412', '52747 79412', 160189), (True, '59617 88068', '59617 88068', 160190), (True, '6048 10205', '6048 10205', 160191), (True, '76826 81035', '76826 81035', 160192), (True, '23256 38411', '23256 38411', 160193), (True, '56207 109241', '56207 109241', 160194), (True, '28740 31376', '28740 31376', 160195), (True, '73415 77859', '73415 77859', 160196), (True, '82019 86516', '82019 86516', 160197), (True, '80204 108652', '80204 108652', 160198), (True, '99227 152549', '99227 152549', 160199), (True, '45657 74684', '45657 74684', 160200), (True, '78608 83340', '78608 83340', 160201), (True, '25038 29823', '25038 29823', 160202), (True, '95816 176307', '95816 176307', 160203), (True, '94024 136269', '94024 136269', 160204), (True, 'Impossible', 'Impossible', 160205), (True, '100000 100000', '100000 100000', 160206), (True, '100000 100000', '100000 100000', 160207), (True, '100000 100000', '100000 100000', 160208), (True, '63028 126055', '63028 126055', 160209), (True, '9458 18915', '9458 18915', 160210), (True, '80236 160471', '80236 160471', 160211), (True, '26666 53331', '26666 53331', 160212), (True, '59617 119233', '59617 119233', 160213), (True, '100000 199999', '100000 199999', 160214)]",False,Wrong Answer,0.7363203407082369,0.9747899159663864,False,0.0185185185185185,False,"def func(*args):
	
	(n, m) = map(int, args[0].split())
	if (not n):
	    print('Impossible')
	else:
	    print(((n + m) - min(m, n)), (((m + n) - 1) if m else n))
"
3350898,29081662,"c, v0, v1, a, l = map(int, input().split())
d = 0
while c > 0:
  c -= min(v0+a*d, v1)-l
  d += 1
print(d)",690,4468,62,8/1/17 0:27,11,2901,2,8,"[(False, '2', '1', 244640), (True, '3', '3', 244641), (True, '15', '15', 244642), (True, '1', '1', 244643), (False, '501', '2', 244644), (False, '1000', '999', 244645), (True, '1000', '1000', 244646), (True, '13', '13', 244647), (False, '1000', '1', 244648), (True, '17', '17', 244649), (True, '8', '8', 244650), (True, '2', '2', 244651), (True, '6', '6', 244652), (False, '1000', '501', 244653), (True, '1', '1', 244654), (True, '7', '7', 244655), (True, '3', '3', 244656), (True, '4', '4', 244657), (False, '4', '3', 244658), (True, '3', '3', 244659), (False, '3', '2', 244660), (True, '5', '5', 244661), (True, '13', '13', 244662), (True, '3', '3', 244663), (True, '5', '5', 244664), (False, '10', '9', 244665), (False, '10', '9', 244666), (True, '12', '12', 244667), (True, '23', '23', 244668), (True, '19', '19', 244669), (True, '16', '16', 244670), (True, '8', '8', 244671), (True, '12', '12', 244672), (True, '53', '53', 244673), (True, '154', '154', 244674), (True, '235', '235', 244675), (True, '3', '3', 244676), (True, '2', '2', 244677), (True, '4', '4', 244678), (True, '3', '3', 244679), (True, '3', '3', 244680), (False, '170', '169', 244681), (True, '45', '45', 244682), (True, '3', '3', 244683), (True, '1', '1', 244684), (True, '3', '3', 244685), (True, '1', '1', 244686), (True, '4', '4', 244687), (True, '5', '5', 244688), (True, '112', '112', 244689), (True, '1', '1', 244690), (True, '1', '1', 244691), (True, '60', '60', 244692), (True, '4', '4', 244693), (True, '44', '44', 244694), (False, '4', '3', 244695), (True, '101', '101', 244696), (True, '14', '14', 244697), (True, '3', '3', 244698), (True, '5', '5', 244699), (True, '3', '3', 244700), (True, '3', '3', 244701), (True, '1', '1', 244702), (True, '4', '4', 244703), (False, '5', '3', 244704), (True, '3', '3', 244705), (True, '14', '14', 244706), (True, '4', '4', 244707), (False, '9', '1', 244708), (False, '3', '2', 244709), (True, '3', '3', 244710), (True, '3', '3', 244711), (True, '4', '4', 244712), (True, '37', '37', 244713), (True, '51', '51', 244714), (False, '11', '6', 244715), (False, '6', '5', 244716), (True, '3', '3', 244717), (True, '4', '4', 244718), (True, '4', '4', 244719), (False, '3', '2', 244720), (False, '4', '3', 244721), (True, '51', '51', 244722), (True, '11', '11', 244723), (True, '1', '1', 244724), (False, '501', '500', 244725), (True, '2', '2', 244726), (True, '87', '87', 244727), (True, '3', '3', 244728), (True, '3', '3', 244729), (True, '4', '4', 244730), (True, '15', '15', 244731), (False, '3', '2', 244732), (True, '5', '5', 244733), (False, '4', '3', 244734), (True, '4', '4', 244735), (True, '3', '3', 244736), (False, '3', '2', 244737), (False, '95', '50', 244738), (True, '32', '32', 244739), (True, '1', '1', 244740), (True, '3', '3', 244741), (True, '13', '13', 244742), (True, '6', '6', 244743), (True, '1', '1', 244744), (False, '3', '2', 244745), (True, '3', '3', 244746), (True, '3', '3', 244747), (False, '28', '25', 244748), (True, '2', '2', 244749)]",False,Wrong Answer,0.8787419089273848,0.9745762711864406,False,0.2272727272727272,False,"def func(*args):
	
	(c, v0, v1, a, l) = map(int, args[0].split())
	d = 0
	while (c > 0):
	    c -= (min((v0 + (a * d)), v1) - l)
	    d += 1
	print(d)
"
3350899,29081682,"c, v0, v1, a, l = map(int, input().split())
d = 0
while c > 0:
  c -= min(v0+a*d, v1)-l*(d>0)
  d += 1
print(d)",690,4524,62,8/1/17 0:30,11,2901,1,8,"[(True, '1', '1', 244640), (True, '3', '3', 244641), (True, '15', '15', 244642), (True, '1', '1', 244643), (True, '2', '2', 244644), (True, '999', '999', 244645), (True, '1000', '1000', 244646), (True, '13', '13', 244647), (True, '1', '1', 244648), (True, '17', '17', 244649), (True, '8', '8', 244650), (True, '2', '2', 244651), (True, '6', '6', 244652), (True, '501', '501', 244653), (True, '1', '1', 244654), (True, '7', '7', 244655), (True, '3', '3', 244656), (True, '4', '4', 244657), (True, '3', '3', 244658), (True, '3', '3', 244659), (True, '2', '2', 244660), (True, '5', '5', 244661), (True, '13', '13', 244662), (True, '3', '3', 244663), (True, '5', '5', 244664), (True, '9', '9', 244665), (True, '9', '9', 244666), (True, '12', '12', 244667), (True, '23', '23', 244668), (True, '19', '19', 244669), (True, '16', '16', 244670), (True, '8', '8', 244671), (True, '12', '12', 244672), (True, '53', '53', 244673), (True, '154', '154', 244674), (True, '235', '235', 244675), (True, '3', '3', 244676), (True, '2', '2', 244677), (True, '4', '4', 244678), (True, '3', '3', 244679), (True, '3', '3', 244680), (True, '169', '169', 244681), (True, '45', '45', 244682), (True, '3', '3', 244683), (True, '1', '1', 244684), (True, '3', '3', 244685), (True, '1', '1', 244686), (True, '4', '4', 244687), (True, '5', '5', 244688), (True, '112', '112', 244689), (True, '1', '1', 244690), (True, '1', '1', 244691), (True, '60', '60', 244692), (True, '4', '4', 244693), (True, '44', '44', 244694), (True, '3', '3', 244695), (True, '101', '101', 244696), (True, '14', '14', 244697), (True, '3', '3', 244698), (True, '5', '5', 244699), (True, '3', '3', 244700), (True, '3', '3', 244701), (True, '1', '1', 244702), (True, '4', '4', 244703), (True, '3', '3', 244704), (True, '3', '3', 244705), (True, '14', '14', 244706), (True, '4', '4', 244707), (True, '1', '1', 244708), (True, '2', '2', 244709), (True, '3', '3', 244710), (True, '3', '3', 244711), (True, '4', '4', 244712), (True, '37', '37', 244713), (True, '51', '51', 244714), (True, '6', '6', 244715), (True, '5', '5', 244716), (True, '3', '3', 244717), (True, '4', '4', 244718), (True, '4', '4', 244719), (True, '2', '2', 244720), (True, '3', '3', 244721), (True, '51', '51', 244722), (True, '11', '11', 244723), (True, '1', '1', 244724), (True, '500', '500', 244725), (True, '2', '2', 244726), (True, '87', '87', 244727), (True, '3', '3', 244728), (True, '3', '3', 244729), (True, '4', '4', 244730), (True, '15', '15', 244731), (True, '2', '2', 244732), (True, '5', '5', 244733), (True, '3', '3', 244734), (True, '4', '4', 244735), (True, '3', '3', 244736), (True, '2', '2', 244737), (True, '50', '50', 244738), (True, '32', '32', 244739), (True, '1', '1', 244740), (True, '3', '3', 244741), (True, '13', '13', 244742), (True, '6', '6', 244743), (True, '1', '1', 244744), (True, '2', '2', 244745), (True, '3', '3', 244746), (True, '3', '3', 244747), (True, '25', '25', 244748), (True, '2', '2', 244749)]",True,Accecpted,0.8787419089273848,0.9745762711864406,False,0.0,False,"def func(*args):
	
	(c, v0, v1, a, l) = map(int, args[0].split())
	d = 0
	while (c > 0):
	    c -= (min((v0 + (a * d)), v1) - (l * (d > 0)))
	    d += 1
	print(d)
"
2963252,4904871,"r, g, b = map(int, input().split())
print(max(3 * (r - 1) // 2, 1 + 3 * (g - 1) // 2, 2 + 3 * (b - 1) // 2) + 30)",55480,260,92,10/26/13 17:29,2,2525,2,8,"[(True, '34', '34', 34470), (True, '33', '33', 34471), (True, '37', '37', 34472), (False, '45', '44', 34473), (True, '72', '72', 34474), (False, '170', '169', 34475), (True, '163', '163', 34476), (True, '32', '32', 34477), (False, '33', '32', 34478), (True, '31', '31', 34479), (True, '32', '32', 34480), (False, '33', '32', 34481), (False, '32', '31', 34482), (True, '32', '32', 34483), (False, '33', '32', 34484), (True, '30', '30', 34485), (True, '32', '32', 34486), (False, '33', '32', 34487), (True, '31', '31', 34488), (True, '32', '32', 34489), (False, '33', '32', 34490), (False, '32', '31', 34491), (True, '32', '32', 34492), (False, '33', '32', 34493), (False, '31', '30', 34494), (True, '32', '32', 34495), (False, '33', '32', 34496), (True, '31', '31', 34497), (True, '32', '32', 34498), (False, '33', '32', 34499), (False, '32', '31', 34500), (True, '32', '32', 34501), (False, '33', '32', 34502), (True, '37', '37', 34503), (False, '42', '41', 34504), (True, '67', '67', 34505), (False, '75', '74', 34506), (False, '107', '106', 34507), (False, '137', '136', 34508), (False, '167', '166', 34509), (True, '177', '177', 34510), (True, '175', '175', 34511), (False, '172', '171', 34512), (True, '178', '178', 34513), (True, '171', '171', 34514), (True, '175', '175', 34515), (True, '179', '179', 34516), (False, '180', '179', 34517), (False, '180', '179', 34518), (False, '180', '179', 34519), (False, '179', '178', 34520), (False, '178', '177', 34521), (False, '179', '178', 34522), (False, '180', '179', 34523), (True, '38', '38', 34524)]",False,Wrong Answer,0.4729574505527735,0.9743589743589745,False,0.509090909090909,False,"def func(*args):
	
	(r, g, b) = map(int, args[0].split())
	print((max(((3 * (r - 1)) // 2), (1 + ((3 * (g - 1)) // 2)), (2 + ((3 * (b - 1)) // 2))) + 30))
"
1433152,25569070,"k=int(input())
l=int(input())
m=int(input())
n=int(input())
d=int(input())
wyn=0
for x in range(1,d+1):
    if x%k==0 or x%l==0 or x%m==0 or x%n==0:
        wyn +=1
    
print(wyn)",40434,4512,186,3/17/17 13:28,11,1274,1,8,"[(True, '12', '12', 147720), (True, '17', '17', 147721), (True, '100000', '100000', 147722), (True, '0', '0', 147723), (True, '32718', '32718', 147724), (True, '59392', '59392', 147725), (True, '44835', '44835', 147726), (True, '62982', '62982', 147727), (True, '35246', '35246', 147728), (True, '75083', '75083', 147729), (True, '24656', '24656', 147730), (True, '36320', '36320', 147731), (True, '28244', '28244', 147732), (True, '16540', '16540', 147733), (True, '36302', '36302', 147734), (True, '15539', '15539', 147735), (True, '39901', '39901', 147736), (True, '58048', '58048', 147737), (True, '21956', '21956', 147738), (True, '32736', '32736', 147739), (True, '11118', '11118', 147740), (True, '49547', '49547', 147741), (True, '36019', '36019', 147742), (True, '63537', '63537', 147743), (True, '53678', '53678', 147744), (True, '99831', '99831', 147745), (True, '20360', '20360', 147746), (True, '29931', '29931', 147747), (True, '89535', '89535', 147748), (True, '7682', '7682', 147749), (True, '9224', '9224', 147750), (True, '43539', '43539', 147751), (True, '2438', '2438', 147752), (True, '415', '415', 147753), (True, '10000', '10000', 147754), (True, '1', '1', 147755), (True, '0', '0', 147756), (True, '10', '10', 147757), (True, '100', '100', 147758), (True, '0', '0', 147759)]",True,Accecpted,0.8656030552541708,0.9743589743589745,False,0.0,False,"def func(*args):
	
	k = int(args[0])
	l = int(args[1])
	m = int(args[2])
	n = int(args[3])
	d = int(args[4])
	wyn = 0
	for x in range(1, (d + 1)):
	    if (((x % k) == 0) or ((x % l) == 0) or ((x % m) == 0) or ((x % n) == 0)):
	        wyn += 1
	print(wyn)
"
1433151,25569026,"k=int(input())
l=int(input())
m=int(input())
n=int(input())
d=int(input())
wyn=0
for x in range(d):
    if x%k==0 or x%l==0 or x%m==0 or x%n==0:
        wyn +=1
print(wyn)",40434,4504,122,3/17/17 13:25,10,1274,2,8,"[(True, '12', '12', 147720), (True, '17', '17', 147721), (True, '100000', '100000', 147722), (False, '1', '0', 147723), (False, '32719', '32718', 147724), (True, '59392', '59392', 147725), (True, '44835', '44835', 147726), (True, '62982', '62982', 147727), (False, '35247', '35246', 147728), (True, '75083', '75083', 147729), (False, '24657', '24656', 147730), (False, '36321', '36320', 147731), (True, '28244', '28244', 147732), (True, '16540', '16540', 147733), (True, '36302', '36302', 147734), (True, '15539', '15539', 147735), (True, '39901', '39901', 147736), (True, '58048', '58048', 147737), (False, '21957', '21956', 147738), (True, '32736', '32736', 147739), (False, '11119', '11118', 147740), (True, '49547', '49547', 147741), (False, '36020', '36019', 147742), (True, '63537', '63537', 147743), (True, '53678', '53678', 147744), (True, '99831', '99831', 147745), (False, '20361', '20360', 147746), (False, '29932', '29931', 147747), (True, '89535', '89535', 147748), (True, '7682', '7682', 147749), (False, '9225', '9224', 147750), (False, '43540', '43539', 147751), (False, '2439', '2438', 147752), (False, '416', '415', 147753), (True, '10000', '10000', 147754), (True, '1', '1', 147755), (False, '1', '0', 147756), (True, '10', '10', 147757), (True, '100', '100', 147758), (False, '1', '0', 147759)]",False,Wrong Answer,0.8656030552541708,0.9743589743589745,False,0.4,False,"def func(*args):
	
	k = int(args[0])
	l = int(args[1])
	m = int(args[2])
	n = int(args[3])
	d = int(args[4])
	wyn = 0
	for x in range(d):
	    if (((x % k) == 0) or ((x % l) == 0) or ((x % m) == 0) or ((x % n) == 0)):
	        wyn += 1
	print(wyn)
"
2963253,4904889,"r, g, b = map(int, input().split())
print(max(3 * ((r - 1) // 2), 1 + 3 * ((g - 1) // 2), 2 + 3 * ((b - 1) // 2)) + 30)",55480,284,124,10/26/13 17:32,2,2525,1,8,"[(True, '34', '34', 34470), (True, '33', '33', 34471), (True, '37', '37', 34472), (True, '44', '44', 34473), (True, '72', '72', 34474), (True, '169', '169', 34475), (True, '163', '163', 34476), (True, '32', '32', 34477), (True, '32', '32', 34478), (True, '31', '31', 34479), (True, '32', '32', 34480), (True, '32', '32', 34481), (True, '31', '31', 34482), (True, '32', '32', 34483), (True, '32', '32', 34484), (True, '30', '30', 34485), (True, '32', '32', 34486), (True, '32', '32', 34487), (True, '31', '31', 34488), (True, '32', '32', 34489), (True, '32', '32', 34490), (True, '31', '31', 34491), (True, '32', '32', 34492), (True, '32', '32', 34493), (True, '30', '30', 34494), (True, '32', '32', 34495), (True, '32', '32', 34496), (True, '31', '31', 34497), (True, '32', '32', 34498), (True, '32', '32', 34499), (True, '31', '31', 34500), (True, '32', '32', 34501), (True, '32', '32', 34502), (True, '37', '37', 34503), (True, '41', '41', 34504), (True, '67', '67', 34505), (True, '74', '74', 34506), (True, '106', '106', 34507), (True, '136', '136', 34508), (True, '166', '166', 34509), (True, '177', '177', 34510), (True, '175', '175', 34511), (True, '171', '171', 34512), (True, '178', '178', 34513), (True, '171', '171', 34514), (True, '175', '175', 34515), (True, '179', '179', 34516), (True, '179', '179', 34517), (True, '179', '179', 34518), (True, '179', '179', 34519), (True, '178', '178', 34520), (True, '177', '177', 34521), (True, '178', '178', 34522), (True, '179', '179', 34523), (True, '38', '38', 34524)]",True,Accecpted,0.4729574505527735,0.9743589743589745,False,0.0,False,"def func(*args):
	
	(r, g, b) = map(int, args[0].split())
	print((max((3 * ((r - 1) // 2)), (1 + (3 * ((g - 1) // 2))), (2 + (3 * ((b - 1) // 2)))) + 30))
"
2292516,27041245,"init_year = int(input())

i = init_year+1

while i <= 9000:
    str_i = str(i)
    digits_i = list(str_i)
    digits_i.sort()
    u_digits_i = list(set(str_i))
    u_digits_i.sort()
    if digits_i == u_digits_i:
        print (i)
        break
    i += 1",49568,0,92,5/11/17 23:06,14,2003,2,8,"[(True, '2013', '2013', 190118), (True, '2014', '2014', 190119), (True, '1023', '1023', 190120), (True, '1023', '1023', 190121), (True, '1235', '1235', 190122), (True, '5601', '5601', 190123), (False, '', '9012', 190124), (True, '1203', '1203', 190125), (False, '', '9012', 190126), (True, '4573', '4573', 190127), (True, '6701', '6701', 190128), (True, '2013', '2013', 190129), (True, '3012', '3012', 190130), (True, '7801', '7801', 190131), (True, '8091', '8091', 190132), (True, '1596', '1596', 190133), (True, '6017', '6017', 190134), (True, '8901', '8901', 190135), (True, '3401', '3401', 190136), (True, '5091', '5091', 190137), (True, '2345', '2345', 190138), (True, '2340', '2340', 190139), (True, '1203', '1203', 190140), (False, '', '9012', 190141), (False, '', '9012', 190142), (True, '6870', '6870', 190143), (False, '', '9012', 190144)]",False,Wrong Answer,0.8446593249975184,0.9742574257425742,False,0.1851851851851851,False,"def func(*args):
	
	init_year = int(args[0])
	i = (init_year + 1)
	while (i <= 9000):
	    str_i = str(i)
	    digits_i = list(str_i)
	    digits_i.sort()
	    u_digits_i = list(set(str_i))
	    u_digits_i.sort()
	    if (digits_i == u_digits_i):
	        print(i)
	        break
	    i += 1
"
2292517,27041278,"init_year = int(input())

i = init_year+1

while True:
    str_i = str(i)
    digits_i = list(str_i)
    digits_i.sort()
    u_digits_i = list(set(str_i))
    u_digits_i.sort()
    if digits_i == u_digits_i:
        print (i)
        break
    i += 1",49568,0,124,5/11/17 23:08,14,2003,1,8,"[(True, '2013', '2013', 190118), (True, '2014', '2014', 190119), (True, '1023', '1023', 190120), (True, '1023', '1023', 190121), (True, '1235', '1235', 190122), (True, '5601', '5601', 190123), (True, '9012', '9012', 190124), (True, '1203', '1203', 190125), (True, '9012', '9012', 190126), (True, '4573', '4573', 190127), (True, '6701', '6701', 190128), (True, '2013', '2013', 190129), (True, '3012', '3012', 190130), (True, '7801', '7801', 190131), (True, '8091', '8091', 190132), (True, '1596', '1596', 190133), (True, '6017', '6017', 190134), (True, '8901', '8901', 190135), (True, '3401', '3401', 190136), (True, '5091', '5091', 190137), (True, '2345', '2345', 190138), (True, '2340', '2340', 190139), (True, '1203', '1203', 190140), (True, '9012', '9012', 190141), (True, '9012', '9012', 190142), (True, '6870', '6870', 190143), (True, '9012', '9012', 190144)]",True,Accecpted,0.8446593249975184,0.9742574257425742,False,0.0,False,"def func(*args):
	
	init_year = int(args[0])
	i = (init_year + 1)
	while True:
	    str_i = str(i)
	    digits_i = list(str_i)
	    digits_i.sort()
	    u_digits_i = list(set(str_i))
	    u_digits_i.sort()
	    if (digits_i == u_digits_i):
	        print(i)
	        break
	    i += 1
"
1728015,18915884,"import math
n = int(input())
v = math.floor((-1 + math.sqrt(1 + 8 * n)) / 2)
for i in range(v, 0, -1):
	z = n - i * (i + 1) / 2
	# 2z=a*(a+1) a^2+a-2z=0
	a = (-1 + math.sqrt(1 + 8 * z)) / 2
	if a.is_integer() and a > 0:
		print(""YES"")
		exit(0)
print(""NO"")",25689,20,248,7/6/16 12:39,11,1540,1,8,"[(True, 'YES', 'YES', 160984), (True, 'NO', 'NO', 160985), (True, 'NO', 'NO', 160986), (True, 'YES', 'YES', 160987), (True, 'NO', 'NO', 160988), (True, 'YES', 'YES', 160989), (True, 'NO', 'NO', 160990), (True, 'YES', 'YES', 160991), (True, 'NO', 'NO', 160992), (True, 'YES', 'YES', 160993), (True, 'NO', 'NO', 160994), (True, 'YES', 'YES', 160995), (True, 'NO', 'NO', 160996), (True, 'YES', 'YES', 160997), (True, 'NO', 'NO', 160998), (True, 'YES', 'YES', 160999), (True, 'YES', 'YES', 161000), (True, 'NO', 'NO', 161001), (True, 'YES', 'YES', 161002), (True, 'NO', 'NO', 161003), (True, 'YES', 'YES', 161004), (True, 'YES', 'YES', 161005), (True, 'NO', 'NO', 161006), (True, 'NO', 'NO', 161007), (True, 'YES', 'YES', 161008), (True, 'NO', 'NO', 161009), (True, 'YES', 'YES', 161010), (True, 'NO', 'NO', 161011), (True, 'YES', 'YES', 161012), (True, 'NO', 'NO', 161013), (True, 'YES', 'YES', 161014), (True, 'YES', 'YES', 161015), (True, 'NO', 'NO', 161016), (True, 'NO', 'NO', 161017), (True, 'NO', 'NO', 161018), (True, 'YES', 'YES', 161019), (True, 'YES', 'YES', 161020), (True, 'YES', 'YES', 161021), (True, 'NO', 'NO', 161022), (True, 'NO', 'NO', 161023), (True, 'YES', 'YES', 161024), (True, 'NO', 'NO', 161025), (True, 'NO', 'NO', 161026), (True, 'NO', 'NO', 161027), (True, 'YES', 'YES', 161028), (True, 'YES', 'YES', 161029), (True, 'YES', 'YES', 161030), (True, 'NO', 'NO', 161031), (True, 'NO', 'NO', 161032), (True, 'NO', 'NO', 161033), (True, 'NO', 'NO', 161034), (True, 'NO', 'NO', 161035), (True, 'NO', 'NO', 161036), (True, 'YES', 'YES', 161037), (True, 'NO', 'NO', 161038), (True, 'YES', 'YES', 161039), (True, 'NO', 'NO', 161040), (True, 'YES', 'YES', 161041), (True, 'NO', 'NO', 161042), (True, 'YES', 'YES', 161043), (True, 'NO', 'NO', 161044), (True, 'YES', 'YES', 161045), (True, 'NO', 'NO', 161046), (True, 'NO', 'NO', 161047), (True, 'NO', 'NO', 161048), (True, 'YES', 'YES', 161049), (True, 'NO', 'NO', 161050), (True, 'YES', 'YES', 161051), (True, 'YES', 'YES', 161052), (True, 'YES', 'YES', 161053), (True, 'NO', 'NO', 161054)]",True,Accecpted,0.8322119161401417,0.974155069582505,False,0.0,False,"def func(*args):
	
	import math
	n = int(args[0])
	v = math.floor((((- 1) + math.sqrt((1 + (8 * n)))) / 2))
	for i in range(v, 0, (- 1)):
	    z = (n - ((i * (i + 1)) / 2))
	    a = (((- 1) + math.sqrt((1 + (8 * z)))) / 2)
	    if (a.is_integer() and (a > 0)):
	        print('YES')
	        exit(0)
	print('NO')
"
1728014,18915851,"import math
n = int(input())
v = math.floor((-1 + math.sqrt(1 + 8 * n)) / 2)
for i in range(v, -1, -1):
	z = n - i * (i + 1) / 2
	# 2z=a*(a+1) a^2+a-2z=0
	a = (-1 + math.sqrt(1 + 8 * z)) / 2
	if a.is_integer():
		print(""YES"")
		exit(0)
print(""NO"")",25689,0,216,7/6/16 12:37,11,1540,2,8,"[(True, 'YES', 'YES', 160984), (True, 'NO', 'NO', 160985), (True, 'NO', 'NO', 160986), (True, 'YES', 'YES', 160987), (True, 'NO', 'NO', 160988), (True, 'YES', 'YES', 160989), (True, 'NO', 'NO', 160990), (True, 'YES', 'YES', 160991), (True, 'NO', 'NO', 160992), (True, 'YES', 'YES', 160993), (False, 'YES', 'NO', 160994), (True, 'YES', 'YES', 160995), (False, 'YES', 'NO', 160996), (True, 'YES', 'YES', 160997), (True, 'NO', 'NO', 160998), (True, 'YES', 'YES', 160999), (True, 'YES', 'YES', 161000), (True, 'NO', 'NO', 161001), (True, 'YES', 'YES', 161002), (False, 'YES', 'NO', 161003), (True, 'YES', 'YES', 161004), (True, 'YES', 'YES', 161005), (True, 'NO', 'NO', 161006), (False, 'YES', 'NO', 161007), (True, 'YES', 'YES', 161008), (True, 'NO', 'NO', 161009), (True, 'YES', 'YES', 161010), (True, 'NO', 'NO', 161011), (True, 'YES', 'YES', 161012), (True, 'NO', 'NO', 161013), (True, 'YES', 'YES', 161014), (True, 'YES', 'YES', 161015), (True, 'NO', 'NO', 161016), (True, 'NO', 'NO', 161017), (True, 'NO', 'NO', 161018), (True, 'YES', 'YES', 161019), (True, 'YES', 'YES', 161020), (True, 'YES', 'YES', 161021), (True, 'NO', 'NO', 161022), (True, 'NO', 'NO', 161023), (True, 'YES', 'YES', 161024), (True, 'NO', 'NO', 161025), (True, 'NO', 'NO', 161026), (True, 'NO', 'NO', 161027), (True, 'YES', 'YES', 161028), (True, 'YES', 'YES', 161029), (True, 'YES', 'YES', 161030), (True, 'NO', 'NO', 161031), (True, 'NO', 'NO', 161032), (True, 'NO', 'NO', 161033), (True, 'NO', 'NO', 161034), (True, 'NO', 'NO', 161035), (True, 'NO', 'NO', 161036), (True, 'YES', 'YES', 161037), (True, 'NO', 'NO', 161038), (True, 'YES', 'YES', 161039), (True, 'NO', 'NO', 161040), (True, 'YES', 'YES', 161041), (True, 'NO', 'NO', 161042), (True, 'YES', 'YES', 161043), (True, 'NO', 'NO', 161044), (True, 'YES', 'YES', 161045), (True, 'NO', 'NO', 161046), (True, 'NO', 'NO', 161047), (False, 'YES', 'NO', 161048), (True, 'YES', 'YES', 161049), (True, 'NO', 'NO', 161050), (True, 'YES', 'YES', 161051), (True, 'YES', 'YES', 161052), (True, 'YES', 'YES', 161053), (True, 'NO', 'NO', 161054)]",False,Wrong Answer,0.8322119161401417,0.974155069582505,False,0.0704225352112676,False,"def func(*args):
	
	import math
	n = int(args[0])
	v = math.floor((((- 1) + math.sqrt((1 + (8 * n)))) / 2))
	for i in range(v, (- 1), (- 1)):
	    z = (n - ((i * (i + 1)) / 2))
	    a = (((- 1) + math.sqrt((1 + (8 * z)))) / 2)
	    if a.is_integer():
	        print('YES')
	        exit(0)
	print('NO')
"
122089,26600766,"a, b, c=map(int, input().split())
print(min(a+b+c,2*a+c, 2*b+c, 2*a+2*b))",991,4468,61,4/23/17 12:58,3,102,2,8,"[(False, '50', '60', 55884), (True, '4', '4', 55885), (False, '100', '134', 55886), (True, '2331', '2331', 55887), (True, '8', '8', 55888), (False, '80', '92', 55889), (False, '132993', '203802', 55890), (False, '55006614', '55041796', 55891), (False, '7', '12', 55892), (True, '543828', '543828', 55893), (True, '305580', '305580', 55894), (False, '4884', '7326', 55895), (False, '501700', '601800', 55896), (True, '955428', '955428', 55897), (True, '54676', '54676', 55898), (False, '2462', '2836', 55899), (True, '243848', '243848', 55900), (True, '300000000', '300000000', 55901), (False, '6', '8', 55902), (False, '3', '4', 55903), (False, '3', '4', 55904)]",False,Wrong Answer,0.4347208719449914,0.974025974025974,False,0.5714285714285714,False,"def func(*args):
	
	(a, b, c) = map(int, args[0].split())
	print(min(((a + b) + c), ((2 * a) + c), ((2 * b) + c), ((2 * a) + (2 * b))))
"
122090,26600931,"a, b, c=map(int, input().split())
print(min(a+b+c,2*a+2*c, 2*b+2*c, 2*a+2*b))",991,5416,62,4/23/17 13:07,3,102,1,8,"[(True, '60', '60', 55884), (True, '4', '4', 55885), (True, '134', '134', 55886), (True, '2331', '2331', 55887), (True, '8', '8', 55888), (True, '92', '92', 55889), (True, '203802', '203802', 55890), (True, '55041796', '55041796', 55891), (True, '12', '12', 55892), (True, '543828', '543828', 55893), (True, '305580', '305580', 55894), (True, '7326', '7326', 55895), (True, '601800', '601800', 55896), (True, '955428', '955428', 55897), (True, '54676', '54676', 55898), (True, '2836', '2836', 55899), (True, '243848', '243848', 55900), (True, '300000000', '300000000', 55901), (True, '8', '8', 55902), (True, '4', '4', 55903), (True, '4', '4', 55904)]",True,Accecpted,0.4347208719449914,0.974025974025974,False,0.0,False,"def func(*args):
	
	(a, b, c) = map(int, args[0].split())
	print(min(((a + b) + c), ((2 * a) + (2 * c)), ((2 * b) + (2 * c)), ((2 * a) + (2 * b))))
"
2887029,25350966,"p = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, None]
n, m = list(map(int, input().split()))

print('YES' if p[p.index(n) + 1] == m else 'NO')",41606,4508,216,3/9/17 2:11,4,2470,1,8,"[(True, 'YES', 'YES', 215971), (True, 'YES', 'YES', 215972), (True, 'NO', 'NO', 215973), (True, 'YES', 'YES', 215974), (True, 'NO', 'NO', 215975), (True, 'NO', 'NO', 215976), (True, 'YES', 'YES', 215977), (True, 'YES', 'YES', 215978), (True, 'YES', 'YES', 215979), (True, 'YES', 'YES', 215980), (True, 'YES', 'YES', 215981), (True, 'YES', 'YES', 215982), (True, 'YES', 'YES', 215983), (True, 'YES', 'YES', 215984), (True, 'YES', 'YES', 215985), (True, 'YES', 'YES', 215986), (True, 'YES', 'YES', 215987), (True, 'YES', 'YES', 215988), (True, 'YES', 'YES', 215989), (True, 'NO', 'NO', 215990), (True, 'NO', 'NO', 215991), (True, 'NO', 'NO', 215992), (True, 'NO', 'NO', 215993), (True, 'NO', 'NO', 215994), (True, 'NO', 'NO', 215995), (True, 'NO', 'NO', 215996), (True, 'NO', 'NO', 215997), (True, 'NO', 'NO', 215998), (True, 'NO', 'NO', 215999), (True, 'NO', 'NO', 216000), (True, 'NO', 'NO', 216001), (True, 'NO', 'NO', 216002), (True, 'NO', 'NO', 216003), (True, 'NO', 'NO', 216004), (True, 'YES', 'YES', 216005), (True, 'NO', 'NO', 216006), (True, 'NO', 'NO', 216007), (True, 'NO', 'NO', 216008), (True, 'NO', 'NO', 216009), (True, 'NO', 'NO', 216010), (True, 'NO', 'NO', 216011), (True, 'NO', 'NO', 216012), (True, 'NO', 'NO', 216013), (True, 'NO', 'NO', 216014), (True, 'NO', 'NO', 216015)]",True,Accecpted,0.9157103753711766,0.974025974025974,False,0.0,False,"def func(*args):
	
	p = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, None]
	(n, m) = list(map(int, args[0].split()))
	print(('YES' if (p[(p.index(n) + 1)] == m) else 'NO'))
"
2885458,19860818,"def get_ints(string):
    return list(map(int, string.split()))


def get_input():
    a = get_ints(input())
    return a


def sieve(x):
    res = [2]
    xs = list(range(2, x+1))
    i = 0
    while i < len(xs):
        e = xs[i]
        j = 0
        while j < len(xs):
            if xs[j] % e == 0 and xs[j] != e:
                del xs[j]
                j -= 1
            j += 1

        res.append(e)
        i += 1
    return res


def main():
    n, m = get_input()
    p = sieve(m)
    res = 'NO' if m not in p or p.index(m) - p.index(n) != 1 else 'YES'

    print(res)
    return res

if __name__ == '__main__':
    main()",8303,4476,92,8/14/16 4:29,37,2470,2,8,"[(True, 'YES', 'YES', 215971), (True, 'YES', 'YES', 215972), (True, 'NO', 'NO', 215973), (False, 'NO', 'YES', 215974), (True, 'NO', 'NO', 215975), (True, 'NO', 'NO', 215976), (True, 'YES', 'YES', 215977), (True, 'YES', 'YES', 215978), (True, 'YES', 'YES', 215979), (True, 'YES', 'YES', 215980), (True, 'YES', 'YES', 215981), (True, 'YES', 'YES', 215982), (True, 'YES', 'YES', 215983), (True, 'YES', 'YES', 215984), (True, 'YES', 'YES', 215985), (True, 'YES', 'YES', 215986), (True, 'YES', 'YES', 215987), (True, 'YES', 'YES', 215988), (True, 'YES', 'YES', 215989), (True, 'NO', 'NO', 215990), (True, 'NO', 'NO', 215991), (True, 'NO', 'NO', 215992), (True, 'NO', 'NO', 215993), (True, 'NO', 'NO', 215994), (True, 'NO', 'NO', 215995), (True, 'NO', 'NO', 215996), (True, 'NO', 'NO', 215997), (True, 'NO', 'NO', 215998), (True, 'NO', 'NO', 215999), (True, 'NO', 'NO', 216000), (True, 'NO', 'NO', 216001), (True, 'NO', 'NO', 216002), (True, 'NO', 'NO', 216003), (True, 'NO', 'NO', 216004), (True, 'YES', 'YES', 216005), (True, 'NO', 'NO', 216006), (True, 'NO', 'NO', 216007), (True, 'NO', 'NO', 216008), (True, 'NO', 'NO', 216009), (True, 'NO', 'NO', 216010), (True, 'NO', 'NO', 216011), (True, 'NO', 'NO', 216012), (True, 'NO', 'NO', 216013), (True, 'NO', 'NO', 216014), (True, 'NO', 'NO', 216015)]",False,Wrong Answer,0.907568780049692,0.9738863287250384,False,0.0222222222222222,False,"def func(*args):
	
	
	def get_ints(string):
	    return list(map(int, string.split()))
	
	def get_input():
	    a = get_ints(args[0])
	    return a
	
	def sieve(x):
	    res = [2]
	    xs = list(range(2, (x + 1)))
	    i = 0
	    while (i < len(xs)):
	        e = xs[i]
	        j = 0
	        while (j < len(xs)):
	            if (((xs[j] % e) == 0) and (xs[j] != e)):
	                del xs[j]
	                j -= 1
	            j += 1
	        res.append(e)
	        i += 1
	    return res
	
	def main():
	    (n, m) = get_input()
	    p = sieve(m)
	    res = ('NO' if ((m not in p) or ((p.index(m) - p.index(n)) != 1)) else 'YES')
	    print(res)
	    return res
	if (__name__ == '__main__'):
	    main()
"
2885459,19860849,"def get_ints(string):
    return list(map(int, string.split()))


def get_input():
    a = get_ints(input())
    return a


def sieve(x):
    res = []
    xs = list(range(2, x+1))
    i = 0
    while i < len(xs):
        e = xs[i]
        j = 0
        while j < len(xs):
            if xs[j] % e == 0 and xs[j] != e:
                del xs[j]
                j -= 1
            j += 1

        res.append(e)
        i += 1
    return res


def main():
    n, m = get_input()
    p = sieve(m)
    # print(p)
    # print(n, m)
    res = 'NO' if m not in p or p.index(m) - p.index(n) != 1 else 'YES'

    print(res)
    return res

if __name__ == '__main__':
    main()",8303,4484,124,8/14/16 4:32,39,2470,1,8,"[(True, 'YES', 'YES', 215971), (True, 'YES', 'YES', 215972), (True, 'NO', 'NO', 215973), (True, 'YES', 'YES', 215974), (True, 'NO', 'NO', 215975), (True, 'NO', 'NO', 215976), (True, 'YES', 'YES', 215977), (True, 'YES', 'YES', 215978), (True, 'YES', 'YES', 215979), (True, 'YES', 'YES', 215980), (True, 'YES', 'YES', 215981), (True, 'YES', 'YES', 215982), (True, 'YES', 'YES', 215983), (True, 'YES', 'YES', 215984), (True, 'YES', 'YES', 215985), (True, 'YES', 'YES', 215986), (True, 'YES', 'YES', 215987), (True, 'YES', 'YES', 215988), (True, 'YES', 'YES', 215989), (True, 'NO', 'NO', 215990), (True, 'NO', 'NO', 215991), (True, 'NO', 'NO', 215992), (True, 'NO', 'NO', 215993), (True, 'NO', 'NO', 215994), (True, 'NO', 'NO', 215995), (True, 'NO', 'NO', 215996), (True, 'NO', 'NO', 215997), (True, 'NO', 'NO', 215998), (True, 'NO', 'NO', 215999), (True, 'NO', 'NO', 216000), (True, 'NO', 'NO', 216001), (True, 'NO', 'NO', 216002), (True, 'NO', 'NO', 216003), (True, 'NO', 'NO', 216004), (True, 'YES', 'YES', 216005), (True, 'NO', 'NO', 216006), (True, 'NO', 'NO', 216007), (True, 'NO', 'NO', 216008), (True, 'NO', 'NO', 216009), (True, 'NO', 'NO', 216010), (True, 'NO', 'NO', 216011), (True, 'NO', 'NO', 216012), (True, 'NO', 'NO', 216013), (True, 'NO', 'NO', 216014), (True, 'NO', 'NO', 216015)]",True,Accecpted,0.907568780049692,0.9738863287250384,False,0.0,False,"def func(*args):
	
	
	def get_ints(string):
	    return list(map(int, string.split()))
	
	def get_input():
	    a = get_ints(args[0])
	    return a
	
	def sieve(x):
	    res = []
	    xs = list(range(2, (x + 1)))
	    i = 0
	    while (i < len(xs)):
	        e = xs[i]
	        j = 0
	        while (j < len(xs)):
	            if (((xs[j] % e) == 0) and (xs[j] != e)):
	                del xs[j]
	                j -= 1
	            j += 1
	        res.append(e)
	        i += 1
	    return res
	
	def main():
	    (n, m) = get_input()
	    p = sieve(m)
	    res = ('NO' if ((m not in p) or ((p.index(m) - p.index(n)) != 1)) else 'YES')
	    print(res)
	    return res
	if (__name__ == '__main__'):
	    main()
"
1868408,29028980,"from sys import *

n, m = (int(i) for i in stdin.readline().split())
c = 0
for i in range(int(n ** 2) + 1):
    j = n - (i ** 2)
    if i + (j ** 2) == m and j >= 0:
        c += 1
stdout.write(str(c) + ""\n"")",1861,4540,1932,7/31/17 1:58,9,1681,1,8,"[(True, '1', '1', 168975), (True, '1', '1', 168976), (True, '0', '0', 168977), (True, '1', '1', 168978), (True, '1', '1', 168979), (True, '1', '1', 168980), (True, '0', '0', 168981), (True, '0', '0', 168982), (True, '0', '0', 168983), (True, '0', '0', 168984), (True, '1', '1', 168985), (True, '2', '2', 168986), (True, '1', '1', 168987), (True, '1', '1', 168988), (True, '1', '1', 168989), (True, '1', '1', 168990), (True, '1', '1', 168991), (True, '1', '1', 168992), (True, '1', '1', 168993), (True, '1', '1', 168994), (True, '1', '1', 168995), (True, '1', '1', 168996), (True, '1', '1', 168997), (True, '1', '1', 168998), (True, '1', '1', 168999), (True, '1', '1', 169000), (True, '1', '1', 169001), (True, '1', '1', 169002), (True, '1', '1', 169003), (True, '1', '1', 169004), (True, '1', '1', 169005), (True, '1', '1', 169006), (True, '0', '0', 169007), (True, '0', '0', 169008), (True, '0', '0', 169009), (True, '0', '0', 169010), (True, '0', '0', 169011), (True, '0', '0', 169012), (True, '0', '0', 169013), (True, '0', '0', 169014), (True, '0', '0', 169015), (True, '0', '0', 169016), (True, '0', '0', 169017), (True, '0', '0', 169018), (True, '1', '1', 169019), (True, '0', '0', 169020), (True, '1', '1', 169021), (True, '0', '0', 169022), (True, '0', '0', 169023), (True, '0', '0', 169024), (True, '0', '0', 169025), (True, '0', '0', 169026), (True, '0', '0', 169027), (True, '0', '0', 169028)]",True,Accecpted,0.8583408354452612,0.973871733966746,False,0.0,False,"def func(*args):
	
	from sys import *
	(n, m) = (int(i) for i in stdin.readline().split())
	c = 0
	for i in range((int((n ** 2)) + 1)):
	    j = (n - (i ** 2))
	    if (((i + (j ** 2)) == m) and (j >= 0)):
	        c += 1
	stdout.write((str(c) + '\n'))
"
1868407,29028941,"from sys import *

n, m = (int(i) for i in stdin.readline().split())
c = 0
for i in range(int(n ** 2) + 1):
    j = n - (i ** 2)
    if i + (j ** 2) == m:
        c += 1
stdout.write(str(c) + ""\n"")",1861,4524,1994,7/31/17 1:54,9,1681,2,8,"[(True, '1', '1', 168975), (True, '1', '1', 168976), (True, '0', '0', 168977), (True, '1', '1', 168978), (True, '1', '1', 168979), (True, '1', '1', 168980), (True, '0', '0', 168981), (True, '0', '0', 168982), (True, '0', '0', 168983), (True, '0', '0', 168984), (True, '1', '1', 168985), (True, '2', '2', 168986), (True, '1', '1', 168987), (True, '1', '1', 168988), (True, '1', '1', 168989), (True, '1', '1', 168990), (True, '1', '1', 168991), (True, '1', '1', 168992), (True, '1', '1', 168993), (True, '1', '1', 168994), (True, '1', '1', 168995), (True, '1', '1', 168996), (True, '1', '1', 168997), (True, '1', '1', 168998), (True, '1', '1', 168999), (True, '1', '1', 169000), (True, '1', '1', 169001), (True, '1', '1', 169002), (True, '1', '1', 169003), (True, '1', '1', 169004), (True, '1', '1', 169005), (True, '1', '1', 169006), (True, '0', '0', 169007), (True, '0', '0', 169008), (True, '0', '0', 169009), (True, '0', '0', 169010), (True, '0', '0', 169011), (True, '0', '0', 169012), (True, '0', '0', 169013), (True, '0', '0', 169014), (True, '0', '0', 169015), (True, '0', '0', 169016), (False, '1', '0', 169017), (True, '0', '0', 169018), (True, '1', '1', 169019), (True, '0', '0', 169020), (True, '1', '1', 169021), (False, '1', '0', 169022), (True, '0', '0', 169023), (False, '1', '0', 169024), (False, '1', '0', 169025), (True, '0', '0', 169026), (False, '1', '0', 169027), (True, '0', '0', 169028)]",False,Wrong Answer,0.8583408354452612,0.973871733966746,False,0.0925925925925925,False,"def func(*args):
	
	from sys import *
	(n, m) = (int(i) for i in stdin.readline().split())
	c = 0
	for i in range((int((n ** 2)) + 1)):
	    j = (n - (i ** 2))
	    if ((i + (j ** 2)) == m):
	        c += 1
	stdout.write((str(c) + '\n'))
"
2289657,24864955,"year=int(input())
lis=[str(x) for x in str(year)]
beau=0
for i in range(year+1,9000+1):
	temLis=[]
	temLis=[str(x) for x in str(i)]
	tem_set=set(temLis)
	if len(tem_set)==4:
		beau=i
		break
print(i)",8970,4540,154,2/21/17 11:00,11,2003,5,8,"[(True, '2013', '2013', 190118), (True, '2014', '2014', 190119), (True, '1023', '1023', 190120), (True, '1023', '1023', 190121), (True, '1235', '1235', 190122), (True, '5601', '5601', 190123), (False, '', '9012', 190124), (True, '1203', '1203', 190125), (False, '9000', '9012', 190126), (True, '4573', '4573', 190127), (True, '6701', '6701', 190128), (True, '2013', '2013', 190129), (True, '3012', '3012', 190130), (True, '7801', '7801', 190131), (True, '8091', '8091', 190132), (True, '1596', '1596', 190133), (True, '6017', '6017', 190134), (True, '8901', '8901', 190135), (True, '3401', '3401', 190136), (True, '5091', '5091', 190137), (True, '2345', '2345', 190138), (True, '2340', '2340', 190139), (True, '1203', '1203', 190140), (False, '9000', '9012', 190141), (False, '9000', '9012', 190142), (True, '6870', '6870', 190143), (False, '9000', '9012', 190144)]",False,Runtime Error,0.8787419089273848,0.973747016706444,False,0.1851851851851851,False,"def func(*args):
	
	year = int(args[0])
	lis = [str(x) for x in str(year)]
	beau = 0
	for i in range((year + 1), (9000 + 1)):
	    temLis = []
	    temLis = [str(x) for x in str(i)]
	    tem_set = set(temLis)
	    if (len(tem_set) == 4):
	        beau = i
	        break
	print(i)
"
2289659,24864982,"year=int(input())
lis=[str(x) for x in str(year)]
beau=0

for i in range(year+1,10000):
	temLis=[]
	temLis=[str(x) for x in str(i)]
	tem_set=set(temLis)
	if len(tem_set)==4:
		beau=i
		break
print(i)",8970,4544,124,2/21/17 11:02,12,2003,1,8,"[(True, '2013', '2013', 190118), (True, '2014', '2014', 190119), (True, '1023', '1023', 190120), (True, '1023', '1023', 190121), (True, '1235', '1235', 190122), (True, '5601', '5601', 190123), (True, '9012', '9012', 190124), (True, '1203', '1203', 190125), (True, '9012', '9012', 190126), (True, '4573', '4573', 190127), (True, '6701', '6701', 190128), (True, '2013', '2013', 190129), (True, '3012', '3012', 190130), (True, '7801', '7801', 190131), (True, '8091', '8091', 190132), (True, '1596', '1596', 190133), (True, '6017', '6017', 190134), (True, '8901', '8901', 190135), (True, '3401', '3401', 190136), (True, '5091', '5091', 190137), (True, '2345', '2345', 190138), (True, '2340', '2340', 190139), (True, '1203', '1203', 190140), (True, '9012', '9012', 190141), (True, '9012', '9012', 190142), (True, '6870', '6870', 190143), (True, '9012', '9012', 190144)]",True,Accecpted,0.8787419089273848,0.973747016706444,False,0.0,False,"def func(*args):
	
	year = int(args[0])
	lis = [str(x) for x in str(year)]
	beau = 0
	for i in range((year + 1), 10000):
	    temLis = []
	    temLis = [str(x) for x in str(i)]
	    tem_set = set(temLis)
	    if (len(tem_set) == 4):
	        beau = i
	        break
	print(i)
"
2883928,13344254,"prime=[2,3,5,7,11,13]

def create_list(n):
    global prime
    for x in range(15,n+1,2):
        notPrime=False
        hold=int(x**0.5)+1
        for j in prime:
            if j>hold:
                break
            if x%j==0:
                notPrime=True
                break
        if notPrime==False:
            prime.append(x)
    #print(len(prime))

def main():
    mode=""filee""
    if mode==""file"":f=open(""test.txt"",""r"")
    #f.readline()
    #input()
    get = lambda :[int(x) for x in (f.readline() if mode==""file"" else input()).split()]
    create_list(60)
    [x,y]=get()
    if y not in prime or prime[prime.index(x)+1]!=y:
        print(""NO"")
        return
    print(""YES"")

    if mode==""file"":f.close()


if __name__==""__main__"":
    main()",3046,4,154,10/2/15 16:44,35,2470,1,8,"[(True, 'YES', 'YES', 215971), (True, 'YES', 'YES', 215972), (True, 'NO', 'NO', 215973), (True, 'YES', 'YES', 215974), (True, 'NO', 'NO', 215975), (True, 'NO', 'NO', 215976), (True, 'YES', 'YES', 215977), (True, 'YES', 'YES', 215978), (True, 'YES', 'YES', 215979), (True, 'YES', 'YES', 215980), (True, 'YES', 'YES', 215981), (True, 'YES', 'YES', 215982), (True, 'YES', 'YES', 215983), (True, 'YES', 'YES', 215984), (True, 'YES', 'YES', 215985), (True, 'YES', 'YES', 215986), (True, 'YES', 'YES', 215987), (True, 'YES', 'YES', 215988), (True, 'YES', 'YES', 215989), (True, 'NO', 'NO', 215990), (True, 'NO', 'NO', 215991), (True, 'NO', 'NO', 215992), (True, 'NO', 'NO', 215993), (True, 'NO', 'NO', 215994), (True, 'NO', 'NO', 215995), (True, 'NO', 'NO', 215996), (True, 'NO', 'NO', 215997), (True, 'NO', 'NO', 215998), (True, 'NO', 'NO', 215999), (True, 'NO', 'NO', 216000), (True, 'NO', 'NO', 216001), (True, 'NO', 'NO', 216002), (True, 'NO', 'NO', 216003), (True, 'NO', 'NO', 216004), (True, 'YES', 'YES', 216005), (True, 'NO', 'NO', 216006), (True, 'NO', 'NO', 216007), (True, 'NO', 'NO', 216008), (True, 'NO', 'NO', 216009), (True, 'NO', 'NO', 216010), (True, 'NO', 'NO', 216011), (True, 'NO', 'NO', 216012), (True, 'NO', 'NO', 216013), (True, 'NO', 'NO', 216014), (True, 'NO', 'NO', 216015)]",True,Accecpted,0.9289342370633225,0.9736842105263158,False,0.0,False,"def func(*args):
	
	prime = [2, 3, 5, 7, 11, 13]
	
	def create_list(n):
	    global prime
	    for x in range(15, (n + 1), 2):
	        notPrime = False
	        hold = (int((x ** 0.5)) + 1)
	        for j in prime:
	            if (j > hold):
	                break
	            if ((x % j) == 0):
	                notPrime = True
	                break
	        if (notPrime == False):
	            prime.append(x)
	
	def main():
	    mode = 'filee'
	    if (mode == 'file'):
	        f = open('test.txt', 'r')
	    get = (lambda : [int(x) for x in (f.readline() if (mode == 'file') else args[0]).split()])
	    create_list(60)
	    [x, y] = get()
	    if ((y not in prime) or (prime[(prime.index(x) + 1)] != y)):
	        print('NO')
	        return
	    print('YES')
	    if (mode == 'file'):
	        f.close()
	if (__name__ == '__main__'):
	    main()
"
1323433,25891159,"line = input()
if 'H' in line or 'Q' in line or '9' in line:
	print('YES')
elif '+' in line:
	occ = line.count('+')
	if occ == 15 or occ == 30 or occ == 39:
		print ('YES')
	else:
		print('No')
else:
	print('NO')",63083,4492,92,3/29/17 11:45,11,1198,2,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (False, 'No', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (False, 'No', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (False, 'No', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (False, 'No', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (False, 'No', 'NO', 142090), (False, 'No', 'NO', 142091), (False, 'No', 'NO', 142092), (False, 'No', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (False, 'No', 'NO', 142096), (False, 'No', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (False, 'No', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (False, 'No', 'NO', 142105)]",False,Wrong Answer,0.6734554274970578,0.9736842105263158,False,0.1411764705882353,False,"def func(*args):
	
	line = args[0]
	if (('H' in line) or ('Q' in line) or ('9' in line)):
	    print('YES')
	elif ('+' in line):
	    occ = line.count('+')
	    if ((occ == 15) or (occ == 30) or (occ == 39)):
	        print('YES')
	    else:
	        print('No')
	else:
	    print('NO')
"
1323434,25891187,"line = input()
if 'H' in line or 'Q' in line or '9' in line:
	print('YES')
# elif '+' in line:
# 	occ = line.count('+')
# 	if occ == 15 or occ == 30 or occ == 39:
# 		print ('YES')
# 	else:
# 		print('No')
else:
	print('NO')",63083,5428,124,3/29/17 11:46,11,1198,1,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (True, 'NO', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (True, 'NO', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (True, 'NO', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (True, 'NO', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (True, 'NO', 'NO', 142090), (True, 'NO', 'NO', 142091), (True, 'NO', 'NO', 142092), (True, 'NO', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (True, 'NO', 'NO', 142096), (True, 'NO', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (True, 'NO', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (True, 'NO', 'NO', 142105)]",True,Accecpted,0.6734554274970578,0.9736842105263158,False,0.0,False,"def func(*args):
	
	line = args[0]
	if (('H' in line) or ('Q' in line) or ('9' in line)):
	    print('YES')
	else:
	    print('NO')
"
3173157,26717346,"l,b = map(int, input().split())
i=0
while b>=l:
    l*=3
    b*=2
    i+=1
print(i)",7327,5436,62,4/28/17 13:51,13,2719,1,8,"[(True, '2', '2', 229589), (True, '3', '3', 229590), (True, '1', '1', 229591), (True, '2', '2', 229592), (True, '6', '6', 229593), (True, '1', '1', 229594), (True, '2', '2', 229595), (True, '3', '3', 229596), (True, '4', '4', 229597), (True, '4', '4', 229598), (True, '5', '5', 229599), (True, '5', '5', 229600), (True, '6', '6', 229601), (True, '6', '6', 229602), (True, '6', '6', 229603), (True, '1', '1', 229604), (True, '2', '2', 229605), (True, '2', '2', 229606), (True, '3', '3', 229607), (True, '3', '3', 229608), (True, '4', '4', 229609), (True, '4', '4', 229610), (True, '4', '4', 229611), (True, '4', '4', 229612), (True, '1', '1', 229613), (True, '1', '1', 229614), (True, '2', '2', 229615), (True, '2', '2', 229616), (True, '3', '3', 229617), (True, '3', '3', 229618), (True, '3', '3', 229619), (True, '3', '3', 229620), (True, '1', '1', 229621), (True, '1', '1', 229622), (True, '2', '2', 229623), (True, '2', '2', 229624), (True, '2', '2', 229625), (True, '3', '3', 229626), (True, '3', '3', 229627), (True, '1', '1', 229628), (True, '1', '1', 229629), (True, '1', '1', 229630), (True, '2', '2', 229631), (True, '2', '2', 229632), (True, '2', '2', 229633), (True, '1', '1', 229634), (True, '1', '1', 229635), (True, '1', '1', 229636), (True, '2', '2', 229637), (True, '2', '2', 229638), (True, '1', '1', 229639), (True, '1', '1', 229640), (True, '1', '1', 229641), (True, '1', '1', 229642), (True, '1', '1', 229643), (True, '1', '1', 229644), (True, '1', '1', 229645), (True, '1', '1', 229646), (True, '1', '1', 229647), (True, '1', '1', 229648), (True, '1', '1', 229649), (True, '2', '2', 229650)]",True,Accecpted,0.7016879391277372,0.9735449735449736,False,0.0,False,"def func(*args):
	
	(l, b) = map(int, args[0].split())
	i = 0
	while (b >= l):
	    l *= 3
	    b *= 2
	    i += 1
	print(i)
"
3173156,26717305,"l,b = map(int, input().split())
i=0
while l<b:
    l*=3
    b*=2
    i+=1
print(i)",7327,5416,61,4/28/17 13:49,13,2719,2,8,"[(True, '2', '2', 229589), (False, '2', '3', 229590), (False, '0', '1', 229591), (False, '1', '2', 229592), (True, '6', '6', 229593), (False, '0', '1', 229594), (True, '2', '2', 229595), (True, '3', '3', 229596), (True, '4', '4', 229597), (True, '4', '4', 229598), (True, '5', '5', 229599), (True, '5', '5', 229600), (True, '6', '6', 229601), (True, '6', '6', 229602), (True, '6', '6', 229603), (False, '0', '1', 229604), (False, '1', '2', 229605), (True, '2', '2', 229606), (True, '3', '3', 229607), (True, '3', '3', 229608), (True, '4', '4', 229609), (True, '4', '4', 229610), (True, '4', '4', 229611), (True, '4', '4', 229612), (False, '0', '1', 229613), (True, '1', '1', 229614), (True, '2', '2', 229615), (True, '2', '2', 229616), (True, '3', '3', 229617), (True, '3', '3', 229618), (True, '3', '3', 229619), (True, '3', '3', 229620), (False, '0', '1', 229621), (True, '1', '1', 229622), (False, '1', '2', 229623), (True, '2', '2', 229624), (True, '2', '2', 229625), (False, '2', '3', 229626), (True, '3', '3', 229627), (False, '0', '1', 229628), (True, '1', '1', 229629), (True, '1', '1', 229630), (True, '2', '2', 229631), (True, '2', '2', 229632), (True, '2', '2', 229633), (False, '0', '1', 229634), (True, '1', '1', 229635), (True, '1', '1', 229636), (False, '1', '2', 229637), (True, '2', '2', 229638), (False, '0', '1', 229639), (True, '1', '1', 229640), (True, '1', '1', 229641), (True, '1', '1', 229642), (False, '0', '1', 229643), (True, '1', '1', 229644), (True, '1', '1', 229645), (False, '0', '1', 229646), (True, '1', '1', 229647), (False, '0', '1', 229648), (False, '0', '1', 229649), (True, '2', '2', 229650)]",False,Wrong Answer,0.7016879391277372,0.9735449735449736,False,0.2903225806451613,False,"def func(*args):
	
	(l, b) = map(int, args[0].split())
	i = 0
	while (l < b):
	    l *= 3
	    b *= 2
	    i += 1
	print(i)
"
1071579,29334853,"X=input()
l=[]
k=''
for i in X :
    if i== ' ' :
        l.append(int(k))
        k=''
        continue 
    k=k+i    
l.append(int(k))
if l[0]%l[2]!=0 :a=l[0]//l[2] +1 
else :a=l[0]/l[3]
if l[1]%l[2]!=0 :b=l[1]//l[2]+1
else :b=l[1]/l[3]
print(a*b)",54320,4508,77,8/10/17 20:03,15,994,5,8,"[(True, '4', '4', 127509), (False, '', '1', 127510), (False, '', '2', 127511), (False, '', '2', 127512), (False, '', '4', 127513), (False, '', '1', 127514), (True, '1', '1', 127515), (True, '1', '1', 127516), (False, '', '1000000000000000000', 127517), (False, '', '12', 127518), (True, '3015', '3015', 127519), (False, '', '10000', 127520), (False, '', '10100', 127521), (True, '1', '1', 127522), (False, '', '1', 127523), (True, '4', '4', 127524), (True, '27126743055556', '27126743055556', 127525), (False, '', '987654321000000000', 127526), (True, '175618850864484', '175618850864484', 127527), (False, '', '3295710', 127528)]",False,Runtime Error,0.8467418606557691,0.9734848484848484,False,0.6,False,"def func(*args):
	
	X = args[0]
	l = []
	k = ''
	for i in X:
	    if (i == ' '):
	        l.append(int(k))
	        k = ''
	        continue
	    k = (k + i)
	l.append(int(k))
	if ((l[0] % l[2]) != 0):
	    a = ((l[0] // l[2]) + 1)
	else:
	    a = (l[0] / l[3])
	if ((l[1] % l[2]) != 0):
	    b = ((l[1] // l[2]) + 1)
	else:
	    b = (l[1] / l[3])
	print((a * b))
"
1071581,29334927,"X=input()
l=[]
k=''
for i in X :
    if i== ' ' :
        l.append(int(k))
        k=''
        continue 
    k=k+i    
l.append(int(k))
if l[0]%l[2]!=0 :a=l[0]//l[2] +1 
else :a=l[0]//l[2]
if l[1]%l[2]!=0 :b=l[1]//l[2]+1
else :b=l[1]//l[2]
print(a*b)",54320,4516,62,8/10/17 20:06,15,994,1,8,"[(True, '4', '4', 127509), (True, '1', '1', 127510), (True, '2', '2', 127511), (True, '2', '2', 127512), (True, '4', '4', 127513), (True, '1', '1', 127514), (True, '1', '1', 127515), (True, '1', '1', 127516), (True, '1000000000000000000', '1000000000000000000', 127517), (True, '12', '12', 127518), (True, '3015', '3015', 127519), (True, '10000', '10000', 127520), (True, '10100', '10100', 127521), (True, '1', '1', 127522), (True, '1', '1', 127523), (True, '4', '4', 127524), (True, '27126743055556', '27126743055556', 127525), (True, '987654321000000000', '987654321000000000', 127526), (True, '175618850864484', '175618850864484', 127527), (True, '3295710', '3295710', 127528)]",True,Accecpted,0.8467418606557691,0.9734848484848484,False,0.0,False,"def func(*args):
	
	X = args[0]
	l = []
	k = ''
	for i in X:
	    if (i == ' '):
	        l.append(int(k))
	        k = ''
	        continue
	    k = (k + i)
	l.append(int(k))
	if ((l[0] % l[2]) != 0):
	    a = ((l[0] // l[2]) + 1)
	else:
	    a = (l[0] // l[2])
	if ((l[1] % l[2]) != 0):
	    b = ((l[1] // l[2]) + 1)
	else:
	    b = (l[1] // l[2])
	print((a * b))
"
2411616,27479867,"if __name__ == '__main__':
    field = list()
    field.append(list(map(str, input())))
    field.append(list(map(str, input())))
    field.append(list(map(str, input())))
    field.append(list(map(str, input())))
    book = ('#', '.')
    flag = False
    for i in range(3):
        for j in range(3):
            v = book.index(field[i][j])+book.index(field[i+1][j])+book.index(field[i][j+1])+book.index(field[i+1][j+1])
            if v!=2:
                flag = True
                break
        if flag:
            break
    print('YES') if flag else print('NO')",1287,0,62,6/1/17 10:38,17,2088,1,8,"[(True, 'YES', 'YES', 195194), (True, 'NO', 'NO', 195195), (True, 'YES', 'YES', 195196), (True, 'NO', 'NO', 195197), (True, 'NO', 'NO', 195198), (True, 'NO', 'NO', 195199), (True, 'NO', 'NO', 195200), (True, 'NO', 'NO', 195201), (True, 'NO', 'NO', 195202), (True, 'NO', 'NO', 195203), (True, 'NO', 'NO', 195204), (True, 'NO', 'NO', 195205), (True, 'YES', 'YES', 195206), (True, 'YES', 'YES', 195207), (True, 'YES', 'YES', 195208), (True, 'YES', 'YES', 195209), (True, 'YES', 'YES', 195210), (True, 'YES', 'YES', 195211), (True, 'YES', 'YES', 195212), (True, 'YES', 'YES', 195213), (True, 'YES', 'YES', 195214), (True, 'YES', 'YES', 195215), (True, 'YES', 'YES', 195216), (True, 'YES', 'YES', 195217), (True, 'YES', 'YES', 195218), (True, 'YES', 'YES', 195219), (True, 'YES', 'YES', 195220), (True, 'YES', 'YES', 195221), (True, 'YES', 'YES', 195222), (True, 'YES', 'YES', 195223)]",True,Accecpted,0.8267575079751847,0.973421926910299,False,0.0,False,"def func(*args):
	
	if (__name__ == '__main__'):
	    field = list()
	    field.append(list(map(str, args[0])))
	    field.append(list(map(str, args[1])))
	    field.append(list(map(str, args[2])))
	    field.append(list(map(str, args[3])))
	    book = ('#', '.')
	    flag = False
	    for i in range(3):
	        for j in range(3):
	            v = (((book.index(field[i][j]) + book.index(field[(i + 1)][j])) + book.index(field[i][(j + 1)])) + book.index(field[(i + 1)][(j + 1)]))
	            if (v != 2):
	                flag = True
	                break
	        if flag:
	            break
	    (print('YES') if flag else print('NO'))
"
1701965,25662096,"# Description of the problem can be found at http://codeforces.com/problemset/problem/189/A

n, a, b, c = map(int, input().split())
dp = [0] + [-1e9]*5000

for i in range(1, n + 1):
    dp[i] = max(dp[i - a], dp[i - b], dp[i - c]) + 1

print(dp[n])",541,4780,62,3/20/17 12:03,9,1520,1,8,"[(True, '2', '2', 159338), (True, '2', '2', 159339), (True, '1', '1', 159340), (True, '1', '1', 159341), (True, '4000', '4000', 159342), (True, '1333', '1333', 159343), (True, '3', '3', 159344), (True, '2', '2', 159345), (True, '11', '11', 159346), (True, '9', '9', 159347), (True, '15', '15', 159348), (True, '7', '7', 159349), (True, '26', '26', 159350), (True, '370', '370', 159351), (True, '367', '367', 159352), (True, '29', '29', 159353), (True, '2', '2', 159354), (True, '7', '7', 159355), (True, '2', '2', 159356), (True, '3', '3', 159357), (True, '9', '9', 159358), (True, '1', '1', 159359), (True, '1', '1', 159360), (True, '9', '9', 159361), (True, '2', '2', 159362), (True, '1', '1', 159363), (True, '5', '5', 159364), (True, '1', '1', 159365), (True, '6', '6', 159366), (True, '1', '1', 159367), (True, '101', '101', 159368), (True, '3', '3', 159369), (True, '991', '991', 159370), (True, '683', '683', 159371), (True, '991', '991', 159372), (True, '595', '595', 159373), (True, '4000', '4000', 159374), (True, '1', '1', 159375), (True, '3', '3', 159376), (True, '8', '8', 159377), (True, '5', '5', 159378), (True, '100', '100', 159379), (True, '5', '5', 159380), (True, '4', '4', 159381), (True, '111', '111', 159382), (True, '1999', '1999', 159383), (True, '2', '2', 159384), (True, '5', '5', 159385), (True, '27', '27', 159386), (True, '2000', '2000', 159387), (True, '1332', '1332', 159388), (True, '2', '2', 159389), (True, '2000', '2000', 159390), (True, '1999', '1999', 159391), (True, '564', '564', 159392), (True, '4', '4', 159393), (True, '10', '10', 159394), (True, '334', '334', 159395)]",True,Accecpted,0.940028651976138,0.973384030418251,False,0.0,False,"def func(*args):
	
	(n, a, b, c) = map(int, args[0].split())
	dp = ([0] + ([(- 1000000000.0)] * 5000))
	for i in range(1, (n + 1)):
	    dp[i] = (max(dp[(i - a)], dp[(i - b)], dp[(i - c)]) + 1)
	print(dp[n])
"
2727052,25885485,"word=input()
maj=0
mini=0
for i in range(len(word)):
    if(word[i].islower()==True):
        mini=mini+1
    elif(word[i].isupper()==True):
        maj=maj+1
if(maj>mini):
    print(word.upper())
else:
    print(word.lower())",21693,5428,124,3/29/17 3:41,12,2340,1,8,"[(True, 'house', 'house', 209205), (True, 'VIP', 'VIP', 209206), (True, 'matrix', 'matrix', 209207), (True, 'bnhwpnpawg', 'bnhwpnpawg', 209208), (True, 'VTYGP', 'VTYGP', 209209), (True, 'chnenu', 'chnenu', 209210), (True, 'erpzgrodyu', 'erpzgrodyu', 209211), (True, 'KSXBXWPEBH', 'KSXBXWPEBH', 209212), (True, 'qvxpqullmcbegsdskddortcvxyqlbvxmmkhevovnezubvpvnrcajpxraeaxizgaowtfkzywvhnbgzsxbhkaipcmoumtikkiyyaiv', 'qvxpqullmcbegsdskddortcvxyqlbvxmmkhevovnezubvpvnrcajpxraeaxizgaowtfkzywvhnbgzsxbhkaipcmoumtikkiyyaiv', 209213), (True, 'amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd', 'amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd', 209214), (True, 'isagfjfaryfblopqdshwgmcnkmftlvfugnjewgwnblxuiatxekqiettmmjgydwcpafqrppdsrrrtguinqbgmzzfqwonkpgpcwenv', 'isagfjfaryfblopqdshwgmcnkmftlvfugnjewgwnblxuiatxekqiettmmjgydwcpafqrppdsrrrtguinqbgmzzfqwonkpgpcwenv', 209215), (True, 'xhrpxzeghsocjpicuixskfuzupytsgjsdiybcmnmnbpndbxlxbzhbfnqvwcffvrdhtickyqhupmcehlsyvncqmfhautvxudqdhgg', 'xhrpxzeghsocjpicuixskfuzupytsgjsdiybcmnmnbpndbxlxbzhbfnqvwcffvrdhtickyqhupmcehlsyvncqmfhautvxudqdhgg', 209216), (True, 'RJIQZMJCIMSNDBOHBRAWIENODSALETAKGKPYUFGVEFGCBRENZGADKCETQJLJTMTTLONPEKCOVDZEBZDKZGGWFSXHAPMJKDBUCEAK', 'RJIQZMJCIMSNDBOHBRAWIENODSALETAKGKPYUFGVEFGCBRENZGADKCETQJLJTMTTLONPEKCOVDZEBZDKZGGWFSXHAPMJKDBUCEAK', 209217), (True, 'DWLWOBHNMMGTFOLFAECKBRNNGLYLYDXTGTVRLMEESZOIUATZZZXUFUZDLSJXMEVRTESSFBWLNZZCLCQWEVNNUCXYVHNGNXHCBDFW', 'DWLWOBHNMMGTFOLFAECKBRNNGLYLYDXTGTVRLMEESZOIUATZZZXUFUZDLSJXMEVRTESSFBWLNZZCLCQWEVNNUCXYVHNGNXHCBDFW', 209218), (True, 'NYCNHJWGBOCOTSPETKKHVWFGAQYNHOVJWJHCIEFOUQZXOYUIEQDZALFKTEHTVDBVJMEUBJUBCMNVPWGDPNCHQHZJRCHYRFPVIGUB', 'NYCNHJWGBOCOTSPETKKHVWFGAQYNHOVJWJHCIEFOUQZXOYUIEQDZALFKTEHTVDBVJMEUBJUBCMNVPWGDPNCHQHZJRCHYRFPVIGUB', 209219), (True, 'igxoixiecetohtgjgbqzvlaobkhstejxdklghowtvwunnnvauriohuspsdmpzckprwajyxldoyckgjivjpmbfqtszmtocovxwge', 'igxoixiecetohtgjgbqzvlaobkhstejxdklghowtvwunnnvauriohuspsdmpzckprwajyxldoyckgjivjpmbfqtszmtocovxwge', 209220), (True, 'ykkekrsqolzryiwsmdlnbmfautxxxauoojrddvwklgnlyrfcvhorrzbmtcrvpaypqhcffdqhwziipyyskcmztjprjqvmzzqhqnw', 'ykkekrsqolzryiwsmdlnbmfautxxxauoojrddvwklgnlyrfcvhorrzbmtcrvpaypqhcffdqhwziipyyskcmztjprjqvmzzqhqnw', 209221), (True, 'yqomlkyaoruqqucqzcdymivdhgwzffrmuvtawcherfpmnryrikgqrciokgajamehmcxgerpudvsqyonjonsxgbnefftzmygncks', 'yqomlkyaoruqqucqzcdymivdhgwzffrmuvtawcherfpmnryrikgqrciokgajamehmcxgerpudvsqyonjonsxgbnefftzmygncks', 209222), (True, 'CDOZDPBVVVHNBJVBYHEOXWFLJKRWJCAJMIFCOZWWYFKVWOGTVJCUUSIGDQFKUMEWJTDYITVEEIAYBWRHOMRWMPDIPJWIUXFNWUZ', 'CDOZDPBVVVHNBJVBYHEOXWFLJKRWJCAJMIFCOZWWYFKVWOGTVJCUUSIGDQFKUMEWJTDYITVEEIAYBWRHOMRWMPDIPJWIUXFNWUZ', 209223), (True, 'WHIUVEXHVOOIJIDVJVPQUBJMEVPMPDKQWJKFBZSGSKUXMIPPMJWUCKZCPXOSODCJAAAKVLXPBIIGSIAUVIILYLNNQLYUCZIIHQG', 'WHIUVEXHVOOIJIDVJVPQUBJMEVPMPDKQWJKFBZSGSKUXMIPPMJWUCKZCPXOSODCJAAAKVLXPBIIGSIAUVIILYLNNQLYUCZIIHQG', 209224), (True, 'VGHUNFOXKETUYMZDJNGTAOIOANYXSGYNFOGOFFLDAWEUKYFOZXCJTCAFXZYLQZERYZLRSQXYQGAPCSUDPMEYTNCTTTMFAGVDWBO', 'VGHUNFOXKETUYMZDJNGTAOIOANYXSGYNFOGOFFLDAWEUKYFOZXCJTCAFXZYLQZERYZLRSQXYQGAPCSUDPMEYTNCTTTMFAGVDWBO', 209225), (True, 'EDUANHCQDOCJHFONTTSWBUJSTTIXBIXMAIUFSGFLXWAYIURTVAVZPYQDLAWIGCLMPHXCEFCJPFAAHXVNGQUFNHADAIUAZIDMHDD', 'EDUANHCQDOCJHFONTTSWBUJSTTIXBIXMAIUFSGFLXWAYIURTVAVZPYQDLAWIGCLMPHXCEFCJPFAAHXVNGQUFNHADAIUAZIDMHDD', 209226), (True, 'ebwovsnlytwwxrnovgugogtjahnmatomubebyxakas', 'ebwovsnlytwwxrnovgugogtjahnmatomubebyxakas', 209227), (True, 'AORNNDKTRLRVGDPXJKXFTPFPOPUZRLQUMRXSSSKVBM', 'AORNNDKTRLRVGDPXJKXFTPFPOPUZRLQUMRXSSSKVBM', 209228), (True, 'dbbzjcwqevgyheeuhjawrhbdpsnplijbwtdibqrrheebfxqcvn', 'dbbzjcwqevgyheeuhjawrhbdpsnplijbwtdibqrrheebfxqcvn', 209229), (True, 't', 't', 209230), (True, 'N', 'N', 209231), (True, 'kv', 'kv', 209232), (True, 'ur', 'ur', 209233), (True, 'CN', 'CN', 209234)]",True,Accecpted,0.8153551038173115,0.973305954825462,False,0.0,False,"def func(*args):
	
	word = args[0]
	maj = 0
	mini = 0
	for i in range(len(word)):
	    if (word[i].islower() == True):
	        mini = (mini + 1)
	    elif (word[i].isupper() == True):
	        maj = (maj + 1)
	if (maj > mini):
	    print(word.upper())
	else:
	    print(word.lower())
"
1310154,27391355,"n=input()
k=n
if n.isupper():
    k = n.lower()
elif n[1:].isupper():
    k=n[0].upper()
    k+=n[1:].lower()
if len(n) ==1 and n.isupper():
    k=n.upper()
if len(n) ==1 and n.islower():
    k=n.lower()
print(k)",1460,0,46,5/27/17 17:33,12,1187,2,8,"[(True, 'Caps', 'Caps', 141548), (True, 'Lock', 'Lock', 141549), (True, 'cAPSlOCK', 'cAPSlOCK', 141550), (True, 'CAPs', 'CAPs', 141551), (True, 'LoCK', 'LoCK', 141552), (True, 'oops', 'oops', 141553), (True, 'oops', 'oops', 141554), (False, 'a', 'A', 141555), (False, 'A', 'a', 141556), (True, 'Aa', 'Aa', 141557), (True, 'Zz', 'Zz', 141558), (True, 'Az', 'Az', 141559), (True, 'Za', 'Za', 141560), (True, 'aaa', 'aaa', 141561), (True, 'AAa', 'AAa', 141562), (True, 'AaR', 'AaR', 141563), (True, 'Tdr', 'Tdr', 141564), (True, 'Atf', 'Atf', 141565), (True, 'fYd', 'fYd', 141566), (True, 'dsA', 'dsA', 141567), (True, 'fru', 'fru', 141568), (True, 'Hybkf', 'Hybkf', 141569), (True, 'XweAR', 'XweAR', 141570), (True, 'mogqx', 'mogqx', 141571), (True, 'eOhEi', 'eOhEi', 141572), (True, 'nkdku', 'nkdku', 141573), (True, 'zcnko', 'zcnko', 141574), (True, 'lcccd', 'lcccd', 141575), (True, 'vwmvg', 'vwmvg', 141576), (True, 'lvchf', 'lvchf', 141577), (True, 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 141578), (True, 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 141579), (True, 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 141580), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141581), (True, 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 141582), (True, 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 141583), (True, 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 141584), (True, 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 141585), (True, 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 141586), (True, 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 141587), (True, 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 141588), (True, 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 141589), (True, 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 141590), (True, 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 141591), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141592), (True, 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 141593), (True, 'aBACABa', 'aBACABa', 141594), (True, 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 141595), (True, 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 141596), (True, 'Dddddddddddddd', 'Dddddddddddddd', 141597), (True, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 141598), (False, 'z', 'Z', 141599), (True, 'az', 'az', 141600), (False, 'Z', 'z', 141601), (True, 'Aaaaa', 'Aaaaa', 141602), (False, 'F', 'f', 141603)]",False,Wrong Answer,0.8685813353706824,0.9730941704035876,False,0.0892857142857142,False,"def func(*args):
	
	n = args[0]
	k = n
	if n.isupper():
	    k = n.lower()
	elif n[1:].isupper():
	    k = n[0].upper()
	    k += n[1:].lower()
	if ((len(n) == 1) and n.isupper()):
	    k = n.upper()
	if ((len(n) == 1) and n.islower()):
	    k = n.lower()
	print(k)
"
1310155,27391379,"n=input()
k=n
if n.isupper():
    k = n.lower()
elif n[1:].isupper():
    k=n[0].upper()
    k+=n[1:].lower()
if len(n) ==1 and n.islower():
    k=n.upper()
if len(n) ==1 and n.isupper():
    k=n.lower()
print(k)",1460,0,62,5/27/17 17:34,12,1187,1,8,"[(True, 'Caps', 'Caps', 141548), (True, 'Lock', 'Lock', 141549), (True, 'cAPSlOCK', 'cAPSlOCK', 141550), (True, 'CAPs', 'CAPs', 141551), (True, 'LoCK', 'LoCK', 141552), (True, 'oops', 'oops', 141553), (True, 'oops', 'oops', 141554), (True, 'A', 'A', 141555), (True, 'a', 'a', 141556), (True, 'Aa', 'Aa', 141557), (True, 'Zz', 'Zz', 141558), (True, 'Az', 'Az', 141559), (True, 'Za', 'Za', 141560), (True, 'aaa', 'aaa', 141561), (True, 'AAa', 'AAa', 141562), (True, 'AaR', 'AaR', 141563), (True, 'Tdr', 'Tdr', 141564), (True, 'Atf', 'Atf', 141565), (True, 'fYd', 'fYd', 141566), (True, 'dsA', 'dsA', 141567), (True, 'fru', 'fru', 141568), (True, 'Hybkf', 'Hybkf', 141569), (True, 'XweAR', 'XweAR', 141570), (True, 'mogqx', 'mogqx', 141571), (True, 'eOhEi', 'eOhEi', 141572), (True, 'nkdku', 'nkdku', 141573), (True, 'zcnko', 'zcnko', 141574), (True, 'lcccd', 'lcccd', 141575), (True, 'vwmvg', 'vwmvg', 141576), (True, 'lvchf', 'lvchf', 141577), (True, 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 141578), (True, 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 141579), (True, 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 141580), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141581), (True, 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 141582), (True, 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 141583), (True, 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 141584), (True, 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 141585), (True, 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 141586), (True, 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 141587), (True, 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 141588), (True, 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 141589), (True, 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 141590), (True, 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 141591), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141592), (True, 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 141593), (True, 'aBACABa', 'aBACABa', 141594), (True, 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 141595), (True, 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 141596), (True, 'Dddddddddddddd', 'Dddddddddddddd', 141597), (True, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 141598), (True, 'Z', 'Z', 141599), (True, 'az', 'az', 141600), (True, 'z', 'z', 141601), (True, 'Aaaaa', 'Aaaaa', 141602), (True, 'f', 'f', 141603)]",True,Accecpted,0.8685813353706824,0.9730941704035876,False,0.0,False,"def func(*args):
	
	n = args[0]
	k = n
	if n.isupper():
	    k = n.lower()
	elif n[1:].isupper():
	    k = n[0].upper()
	    k += n[1:].lower()
	if ((len(n) == 1) and n.islower()):
	    k = n.upper()
	if ((len(n) == 1) and n.isupper()):
	    k = n.lower()
	print(k)
"
244891,20785808,"l1=input().split(' ')
l2=input().split(' ')
x1=int (l1[0])
y1=int (l1[1])
x2=int (l2[0])
y2=int (l2[1])
if (x1!=x2 and y1!=y2) :
    if (x2>x1 and y2>y1 ):
        c=min(x2-x1,y2-y1)
        x2=x2-c
        y2=y2-c
        if (x1!=x2):
            c=c+x2-x1
        else :
            c=c+y2-y1
    elif (x1>x2 and y1>y2 ):
        c=min(x1-x2,y1-y2)
        x1=x1-c
        y1=y1-c
        if (x1!=x2):
            c=c+x1-x2
        else :
            c=c+y1-y2
    elif (x1<x2 and y1>y2 ):
        c=min(x2-x1,y1-y2)
        x1=x1+c
        y1=y1-c
        if (x1!=x2):
            c=c+x2-x1
        else :
            c=c+y1-y2
    elif (x2<x1 and y2>y1 ):
        c=min(x1-x2,y2-y1)
        x1=x1-c
        y1=y1+c
        if (x1!=x2):
            c=c-x2+x1
        else :
            c=c-y1+y2
    elif x1==x2 :
        c=abs(y1-y2)
    else:
        c=abs(x1-x2)
print (c)",23813,256,78,9/21/16 1:26,87,208,5,8,"[(True, '5', '5', 64835), (True, '3', '3', 64836), (True, '6', '6', 64837), (True, '6', '6', 64838), (True, '101', '101', 64839), (True, '99', '99', 64840), (True, '2000000000', '2000000000', 64841), (True, '1999999999', '1999999999', 64842), (True, '2', '2', 64843), (False, '', '90', 64844), (True, '5', '5', 64845), (True, '5', '5', 64846), (False, '', '10', 64847), (True, '4', '4', 64848), (True, '1649942490', '1649942490', 64849), (True, '929691728', '929691728', 64850), (False, '', '4', 64851), (True, '810081197', '810081197', 64852), (False, '', '8', 64853), (True, '4', '4', 64854), (True, '3', '3', 64855), (True, '200000123', '200000123', 64856), (False, '', '1', 64857), (False, '', '15', 64858), (True, '5', '5', 64859), (False, '', '1', 64860), (True, '527766146', '527766146', 64861), (True, '4', '4', 64862), (True, '3', '3', 64863), (True, '4546', '4546', 64864), (True, '2', '2', 64865), (True, '3', '3', 64866), (True, '2000000000', '2000000000', 64867), (False, '', '2000000000', 64868), (True, '1120229998', '1120229998', 64869), (True, '236024353', '236024353', 64870), (True, '640460429', '640460429', 64871), (True, '549576124', '549576124', 64872), (False, '', '1', 64873), (True, '109808', '109808', 64874), (True, '18', '18', 64875), (False, '', '0', 64876), (True, '3', '3', 64877), (True, '44', '44', 64878), (True, '419093575', '419093575', 64879), (False, '', '11', 64880), (True, '2000000000', '2000000000', 64881), (True, '1', '1', 64882), (False, '', '1', 64883), (True, '1', '1', 64884), (False, '', '1', 64885), (True, '1', '1', 64886), (False, '', '1', 64887), (True, '1', '1', 64888), (True, '80', '80', 64889), (True, '1612427789', '1612427789', 64890), (False, '', '8', 64891), (False, '', '0', 64892), (True, '8', '8', 64893), (False, '', '89', 64894), (True, '900', '900', 64895), (False, '', '1', 64896), (True, '1400165835', '1400165835', 64897), (True, '534761547', '534761547', 64898), (True, '669371458', '669371458', 64899), (True, '853334080', '853334080', 64900), (True, '518183935', '518183935', 64901), (True, '40', '40', 64902), (True, '1103096102', '1103096102', 64903), (True, '18', '18', 64904), (True, '1115418699', '1115418699', 64905), (False, '', '2000', 64906), (True, '2', '2', 64907), (True, '975623731', '975623731', 64908), (False, '', '10', 64909)]",False,Runtime Error,0.9256998634146498,0.9730848861283644,False,0.2666666666666666,False,"def func(*args):
	
	l1 = args[0].split(' ')
	l2 = args[1].split(' ')
	x1 = int(l1[0])
	y1 = int(l1[1])
	x2 = int(l2[0])
	y2 = int(l2[1])
	if ((x1 != x2) and (y1 != y2)):
	    if ((x2 > x1) and (y2 > y1)):
	        c = min((x2 - x1), (y2 - y1))
	        x2 = (x2 - c)
	        y2 = (y2 - c)
	        if (x1 != x2):
	            c = ((c + x2) - x1)
	        else:
	            c = ((c + y2) - y1)
	    elif ((x1 > x2) and (y1 > y2)):
	        c = min((x1 - x2), (y1 - y2))
	        x1 = (x1 - c)
	        y1 = (y1 - c)
	        if (x1 != x2):
	            c = ((c + x1) - x2)
	        else:
	            c = ((c + y1) - y2)
	    elif ((x1 < x2) and (y1 > y2)):
	        c = min((x2 - x1), (y1 - y2))
	        x1 = (x1 + c)
	        y1 = (y1 - c)
	        if (x1 != x2):
	            c = ((c + x2) - x1)
	        else:
	            c = ((c + y1) - y2)
	    elif ((x2 < x1) and (y2 > y1)):
	        c = min((x1 - x2), (y2 - y1))
	        x1 = (x1 - c)
	        y1 = (y1 + c)
	        if (x1 != x2):
	            c = ((c - x2) + x1)
	        else:
	            c = ((c - y1) + y2)
	    elif (x1 == x2):
	        c = abs((y1 - y2))
	    else:
	        c = abs((x1 - x2))
	print(c)
"
244892,20785824,"l1=input().split(' ')
l2=input().split(' ')
x1=int (l1[0])
y1=int (l1[1])
x2=int (l2[0])
y2=int (l2[1])
c=0
if (x1!=x2 and y1!=y2) :
    if (x2>x1 and y2>y1 ):
        c=min(x2-x1,y2-y1)
        x2=x2-c
        y2=y2-c
        if (x1!=x2):
            c=c+x2-x1
        else :
            c=c+y2-y1
    elif (x1>x2 and y1>y2 ):
        c=min(x1-x2,y1-y2)
        x1=x1-c
        y1=y1-c
        if (x1!=x2):
            c=c+x1-x2
        else :
            c=c+y1-y2
    elif (x1<x2 and y1>y2 ):
        c=min(x2-x1,y1-y2)
        x1=x1+c
        y1=y1-c
        if (x1!=x2):
            c=c+x2-x1
        else :
            c=c+y1-y2
    elif (x2<x1 and y2>y1 ):
        c=min(x1-x2,y2-y1)
        x1=x1-c
        y1=y1+c
        if (x1!=x2):
            c=c-x2+x1
        else :
            c=c-y1+y2
elif x1==x2 :
    c=abs(y1-y2)
elif y1==y2:
    c=abs(x1-x2)
    
print (c)",23813,252,93,9/21/16 1:30,91,208,1,8,"[(True, '5', '5', 64835), (True, '3', '3', 64836), (True, '6', '6', 64837), (True, '6', '6', 64838), (True, '101', '101', 64839), (True, '99', '99', 64840), (True, '2000000000', '2000000000', 64841), (True, '1999999999', '1999999999', 64842), (True, '2', '2', 64843), (True, '90', '90', 64844), (True, '5', '5', 64845), (True, '5', '5', 64846), (True, '10', '10', 64847), (True, '4', '4', 64848), (True, '1649942490', '1649942490', 64849), (True, '929691728', '929691728', 64850), (True, '4', '4', 64851), (True, '810081197', '810081197', 64852), (True, '8', '8', 64853), (True, '4', '4', 64854), (True, '3', '3', 64855), (True, '200000123', '200000123', 64856), (True, '1', '1', 64857), (True, '15', '15', 64858), (True, '5', '5', 64859), (True, '1', '1', 64860), (True, '527766146', '527766146', 64861), (True, '4', '4', 64862), (True, '3', '3', 64863), (True, '4546', '4546', 64864), (True, '2', '2', 64865), (True, '3', '3', 64866), (True, '2000000000', '2000000000', 64867), (True, '2000000000', '2000000000', 64868), (True, '1120229998', '1120229998', 64869), (True, '236024353', '236024353', 64870), (True, '640460429', '640460429', 64871), (True, '549576124', '549576124', 64872), (True, '1', '1', 64873), (True, '109808', '109808', 64874), (True, '18', '18', 64875), (True, '0', '0', 64876), (True, '3', '3', 64877), (True, '44', '44', 64878), (True, '419093575', '419093575', 64879), (True, '11', '11', 64880), (True, '2000000000', '2000000000', 64881), (True, '1', '1', 64882), (True, '1', '1', 64883), (True, '1', '1', 64884), (True, '1', '1', 64885), (True, '1', '1', 64886), (True, '1', '1', 64887), (True, '1', '1', 64888), (True, '80', '80', 64889), (True, '1612427789', '1612427789', 64890), (True, '8', '8', 64891), (True, '0', '0', 64892), (True, '8', '8', 64893), (True, '89', '89', 64894), (True, '900', '900', 64895), (True, '1', '1', 64896), (True, '1400165835', '1400165835', 64897), (True, '534761547', '534761547', 64898), (True, '669371458', '669371458', 64899), (True, '853334080', '853334080', 64900), (True, '518183935', '518183935', 64901), (True, '40', '40', 64902), (True, '1103096102', '1103096102', 64903), (True, '18', '18', 64904), (True, '1115418699', '1115418699', 64905), (True, '2000', '2000', 64906), (True, '2', '2', 64907), (True, '975623731', '975623731', 64908), (True, '10', '10', 64909)]",True,Accecpted,0.9256998634146498,0.9730848861283644,False,0.0,False,"def func(*args):
	
	l1 = args[0].split(' ')
	l2 = args[1].split(' ')
	x1 = int(l1[0])
	y1 = int(l1[1])
	x2 = int(l2[0])
	y2 = int(l2[1])
	c = 0
	if ((x1 != x2) and (y1 != y2)):
	    if ((x2 > x1) and (y2 > y1)):
	        c = min((x2 - x1), (y2 - y1))
	        x2 = (x2 - c)
	        y2 = (y2 - c)
	        if (x1 != x2):
	            c = ((c + x2) - x1)
	        else:
	            c = ((c + y2) - y1)
	    elif ((x1 > x2) and (y1 > y2)):
	        c = min((x1 - x2), (y1 - y2))
	        x1 = (x1 - c)
	        y1 = (y1 - c)
	        if (x1 != x2):
	            c = ((c + x1) - x2)
	        else:
	            c = ((c + y1) - y2)
	    elif ((x1 < x2) and (y1 > y2)):
	        c = min((x2 - x1), (y1 - y2))
	        x1 = (x1 + c)
	        y1 = (y1 - c)
	        if (x1 != x2):
	            c = ((c + x2) - x1)
	        else:
	            c = ((c + y1) - y2)
	    elif ((x2 < x1) and (y2 > y1)):
	        c = min((x1 - x2), (y2 - y1))
	        x1 = (x1 - c)
	        y1 = (y1 + c)
	        if (x1 != x2):
	            c = ((c - x2) + x1)
	        else:
	            c = ((c - y1) + y2)
	elif (x1 == x2):
	    c = abs((y1 - y2))
	elif (y1 == y2):
	    c = abs((x1 - x2))
	print(c)
"
978745,23648925,"s = input().split()
n = int(s[0])
m = int(s[1])
k = int(s[-1])
r = (k + 2 * m - 1) // (2 * m)
d = k % (2 * m)
d = (d + 1) // 2
print(r, d, end = "" "")
if k % 2:
    print(""L"")
else:
    print(""R"")",11674,4480,61,1/8/17 18:47,23,905,2,8,"[(True, '2 2 L', '2 2 L', 119561), (False, '4 0 R', '4 3 R', 119562), (True, '1 2 R', '1 2 R', 119563), (True, '2 2 R', '2 2 R', 119564), (True, '10 3 L', '10 3 L', 119565), (True, '8043 2940 R', '8043 2940 R', 119566), (True, '1 1 L', '1 1 L', 119567), (False, '1 0 R', '1 1 R', 119568), (True, '1 1 L', '1 1 L', 119569), (False, '1 0 R', '1 10000 R', 119570), (True, '1 1 L', '1 1 L', 119571), (False, '5000 0 R', '5000 1 R', 119572), (False, '10000 0 R', '10000 1 R', 119573), (True, '1 1 L', '1 1 L', 119574), (True, '1 1 R', '1 1 R', 119575), (True, '1 2 L', '1 2 L', 119576), (False, '1 0 R', '1 2 R', 119577), (True, '2 1 L', '2 1 L', 119578), (True, '2 1 R', '2 1 R', 119579), (True, '2 2 L', '2 2 L', 119580), (False, '2 0 R', '2 2 R', 119581), (True, '3 1 L', '3 1 L', 119582), (True, '3 1 R', '3 1 R', 119583), (True, '3 2 L', '3 2 L', 119584), (False, '3 0 R', '3 2 R', 119585), (True, '268 314 R', '268 314 R', 119586), (True, '147 378 R', '147 378 R', 119587), (True, '68 91 L', '68 91 L', 119588), (True, '9324 4745 R', '9324 4745 R', 119589), (True, '9857 6990 R', '9857 6990 R', 119590), (True, '5621 818 R', '5621 818 R', 119591), (True, '1 1 L', '1 1 L', 119592), (True, '1 1 R', '1 1 R', 119593), (True, '5001 1 L', '5001 1 L', 119594), (True, '10000 10000 L', '10000 10000 L', 119595), (False, '10000 0 R', '10000 10000 R', 119596), (True, '1 1 L', '1 1 L', 119597), (True, '1 1 R', '1 1 R', 119598), (True, '1 2 L', '1 2 L', 119599), (False, '1 0 R', '1 2 R', 119600), (True, '1 1 L', '1 1 L', 119601), (False, '1 0 R', '1 1 R', 119602), (True, '2 1 L', '2 1 L', 119603), (False, '2 0 R', '2 1 R', 119604), (True, '2 1 L', '2 1 L', 119605), (True, '1 1 L', '1 1 L', 119606)]",False,Wrong Answer,0.8793808180153447,0.972972972972973,False,0.2608695652173913,False,"def func(*args):
	
	s = args[0].split()
	n = int(s[0])
	m = int(s[1])
	k = int(s[(- 1)])
	r = (((k + (2 * m)) - 1) // (2 * m))
	d = (k % (2 * m))
	d = ((d + 1) // 2)
	print(r, d, end=' ')
	if (k % 2):
	    print('L')
	else:
	    print('R')
"
2249669,26608761,"p=int(input())
o=input()
while ""RR"" in o:
    o=o.replace(""RR"", ""R"")
while ""GG"" in o:
    o=o.replace(""GG"", ""G"")
while ""BB"" in o:
    o=o.replace(""BB"", ""B"")
print(p-len(o))",35523,5424,154,4/23/17 18:46,9,1976,1,8,"[(True, '1', '1', 188890), (True, '4', '4', 188891), (True, '0', '0', 188892), (True, '0', '0', 188893), (True, '0', '0', 188894), (True, '0', '0', 188895), (True, '1', '1', 188896), (True, '1', '1', 188897), (True, '2', '2', 188898), (True, '18', '18', 188899), (True, '6', '6', 188900), (True, '6', '6', 188901), (True, '6', '6', 188902), (True, '9', '9', 188903), (True, '14', '14', 188904), (True, '20', '20', 188905), (True, '11', '11', 188906), (True, '17', '17', 188907), (True, '16', '16', 188908), (True, '19', '19', 188909), (True, '1', '1', 188910), (True, '1', '1', 188911), (True, '5', '5', 188912), (True, '6', '6', 188913), (True, '8', '8', 188914), (True, '11', '11', 188915), (True, '9', '9', 188916), (True, '13', '13', 188917), (True, '13', '13', 188918), (True, '12', '12', 188919), (True, '1', '1', 188920), (True, '49', '49', 188921), (True, '47', '47', 188922), (True, '43', '43', 188923)]",True,Accecpted,0.9510699415570292,0.972972972972973,False,0.0,False,"def func(*args):
	
	p = int(args[0])
	o = args[1]
	while ('RR' in o):
	    o = o.replace('RR', 'R')
	while ('GG' in o):
	    o = o.replace('GG', 'G')
	while ('BB' in o):
	    o = o.replace('BB', 'B')
	print((p - len(o)))
"
978746,23649085,"s = input().split()
n = int(s[0])
m = int(s[1])
k = int(s[-1])
r = (k + 2 * m - 1) // (2 * m)
d = k - (r - 1) * (2 * m)
d = (d + 1) // 2
print(r, d, end = "" "")
if k % 2:
    print(""L"")
else:
    print(""R"")",11674,4544,108,1/8/17 19:01,23,905,1,8,"[(True, '2 2 L', '2 2 L', 119561), (True, '4 3 R', '4 3 R', 119562), (True, '1 2 R', '1 2 R', 119563), (True, '2 2 R', '2 2 R', 119564), (True, '10 3 L', '10 3 L', 119565), (True, '8043 2940 R', '8043 2940 R', 119566), (True, '1 1 L', '1 1 L', 119567), (True, '1 1 R', '1 1 R', 119568), (True, '1 1 L', '1 1 L', 119569), (True, '1 10000 R', '1 10000 R', 119570), (True, '1 1 L', '1 1 L', 119571), (True, '5000 1 R', '5000 1 R', 119572), (True, '10000 1 R', '10000 1 R', 119573), (True, '1 1 L', '1 1 L', 119574), (True, '1 1 R', '1 1 R', 119575), (True, '1 2 L', '1 2 L', 119576), (True, '1 2 R', '1 2 R', 119577), (True, '2 1 L', '2 1 L', 119578), (True, '2 1 R', '2 1 R', 119579), (True, '2 2 L', '2 2 L', 119580), (True, '2 2 R', '2 2 R', 119581), (True, '3 1 L', '3 1 L', 119582), (True, '3 1 R', '3 1 R', 119583), (True, '3 2 L', '3 2 L', 119584), (True, '3 2 R', '3 2 R', 119585), (True, '268 314 R', '268 314 R', 119586), (True, '147 378 R', '147 378 R', 119587), (True, '68 91 L', '68 91 L', 119588), (True, '9324 4745 R', '9324 4745 R', 119589), (True, '9857 6990 R', '9857 6990 R', 119590), (True, '5621 818 R', '5621 818 R', 119591), (True, '1 1 L', '1 1 L', 119592), (True, '1 1 R', '1 1 R', 119593), (True, '5001 1 L', '5001 1 L', 119594), (True, '10000 10000 L', '10000 10000 L', 119595), (True, '10000 10000 R', '10000 10000 R', 119596), (True, '1 1 L', '1 1 L', 119597), (True, '1 1 R', '1 1 R', 119598), (True, '1 2 L', '1 2 L', 119599), (True, '1 2 R', '1 2 R', 119600), (True, '1 1 L', '1 1 L', 119601), (True, '1 1 R', '1 1 R', 119602), (True, '2 1 L', '2 1 L', 119603), (True, '2 1 R', '2 1 R', 119604), (True, '2 1 L', '2 1 L', 119605), (True, '1 1 L', '1 1 L', 119606)]",True,Accecpted,0.8793808180153447,0.972972972972973,False,0.0,False,"def func(*args):
	
	s = args[0].split()
	n = int(s[0])
	m = int(s[1])
	k = int(s[(- 1)])
	r = (((k + (2 * m)) - 1) // (2 * m))
	d = (k - ((r - 1) * (2 * m)))
	d = ((d + 1) // 2)
	print(r, d, end=' ')
	if (k % 2):
	    print('L')
	else:
	    print('R')
"
1867231,26301982,"(n, m) = map(int, input().split(' '))

count = 0

for a in range(0, 10000):
    if a + n*n - 2*n*a*a + a*a*a*a == m:
        b = n - a*a
        if a + b*b == m and b >= 0:
            count += 1
print(count)",21788,5424,154,4/11/17 17:54,10,1681,1,8,"[(True, '1', '1', 168975), (True, '1', '1', 168976), (True, '0', '0', 168977), (True, '1', '1', 168978), (True, '1', '1', 168979), (True, '1', '1', 168980), (True, '0', '0', 168981), (True, '0', '0', 168982), (True, '0', '0', 168983), (True, '0', '0', 168984), (True, '1', '1', 168985), (True, '2', '2', 168986), (True, '1', '1', 168987), (True, '1', '1', 168988), (True, '1', '1', 168989), (True, '1', '1', 168990), (True, '1', '1', 168991), (True, '1', '1', 168992), (True, '1', '1', 168993), (True, '1', '1', 168994), (True, '1', '1', 168995), (True, '1', '1', 168996), (True, '1', '1', 168997), (True, '1', '1', 168998), (True, '1', '1', 168999), (True, '1', '1', 169000), (True, '1', '1', 169001), (True, '1', '1', 169002), (True, '1', '1', 169003), (True, '1', '1', 169004), (True, '1', '1', 169005), (True, '1', '1', 169006), (True, '0', '0', 169007), (True, '0', '0', 169008), (True, '0', '0', 169009), (True, '0', '0', 169010), (True, '0', '0', 169011), (True, '0', '0', 169012), (True, '0', '0', 169013), (True, '0', '0', 169014), (True, '0', '0', 169015), (True, '0', '0', 169016), (True, '0', '0', 169017), (True, '0', '0', 169018), (True, '1', '1', 169019), (True, '0', '0', 169020), (True, '1', '1', 169021), (True, '0', '0', 169022), (True, '0', '0', 169023), (True, '0', '0', 169024), (True, '0', '0', 169025), (True, '0', '0', 169026), (True, '0', '0', 169027), (True, '0', '0', 169028)]",True,Accecpted,0.8410031399681634,0.9728395061728397,False,0.0,False,"def func(*args):
	
	(n, m) = map(int, args[0].split(' '))
	count = 0
	for a in range(0, 10000):
	    if ((((a + (n * n)) - (((2 * n) * a) * a)) + (((a * a) * a) * a)) == m):
	        b = (n - (a * a))
	        if (((a + (b * b)) == m) and (b >= 0)):
	            count += 1
	print(count)
"
1867229,26301955,"(n, m) = map(int, input().split(' '))

count = 0

for a in range(0, 10000):
    if a + n*n - 2*n*a*a + a*a*a*a == m:
        b = n - a*a
        if a + b*b == m:
            count += 1
print(count)",21788,5428,154,4/11/17 17:53,10,1681,2,8,"[(True, '1', '1', 168975), (True, '1', '1', 168976), (True, '0', '0', 168977), (True, '1', '1', 168978), (True, '1', '1', 168979), (True, '1', '1', 168980), (True, '0', '0', 168981), (True, '0', '0', 168982), (True, '0', '0', 168983), (True, '0', '0', 168984), (True, '1', '1', 168985), (True, '2', '2', 168986), (True, '1', '1', 168987), (True, '1', '1', 168988), (True, '1', '1', 168989), (True, '1', '1', 168990), (True, '1', '1', 168991), (True, '1', '1', 168992), (True, '1', '1', 168993), (True, '1', '1', 168994), (True, '1', '1', 168995), (True, '1', '1', 168996), (True, '1', '1', 168997), (True, '1', '1', 168998), (True, '1', '1', 168999), (True, '1', '1', 169000), (True, '1', '1', 169001), (True, '1', '1', 169002), (True, '1', '1', 169003), (True, '1', '1', 169004), (True, '1', '1', 169005), (True, '1', '1', 169006), (True, '0', '0', 169007), (True, '0', '0', 169008), (True, '0', '0', 169009), (True, '0', '0', 169010), (True, '0', '0', 169011), (True, '0', '0', 169012), (True, '0', '0', 169013), (True, '0', '0', 169014), (False, '1', '0', 169015), (True, '0', '0', 169016), (False, '1', '0', 169017), (True, '0', '0', 169018), (True, '1', '1', 169019), (True, '0', '0', 169020), (True, '1', '1', 169021), (False, '1', '0', 169022), (True, '0', '0', 169023), (False, '1', '0', 169024), (False, '1', '0', 169025), (True, '0', '0', 169026), (False, '1', '0', 169027), (True, '0', '0', 169028)]",False,Wrong Answer,0.8410031399681634,0.9728395061728397,False,0.1111111111111111,False,"def func(*args):
	
	(n, m) = map(int, args[0].split(' '))
	count = 0
	for a in range(0, 10000):
	    if ((((a + (n * n)) - (((2 * n) * a) * a)) + (((a * a) * a) * a)) == m):
	        b = (n - (a * a))
	        if ((a + (b * b)) == m):
	            count += 1
	print(count)
"
2722847,29376087,"import math
n = int(input())
if n != 1:
    print(n,end="" "")
flag = True
while n > 1 and flag:
    flag = False
    for i in range(2,int(math.sqrt(n))+1) :
        if n%i == 0 :
            print(n//i,end="" "")
            n = n//i
            flag = True
            break  
print(1)",7879,4516,124,8/12/17 14:34,14,2336,1,8,"[(True, '10 5 1', '10 5 1', 208985), (True, '4 2 1', '4 2 1', 208986), (True, '3 1', '3 1', 208987), (True, '2 1', '2 1', 208988), (True, '5 1', '5 1', 208989), (True, '6 3 1', '6 3 1', 208990), (True, '7 1', '7 1', 208991), (True, '1', '1', 208992), (True, '8 4 2 1', '8 4 2 1', 208993), (True, '12 6 3 1', '12 6 3 1', 208994), (True, '100 50 25 5 1', '100 50 25 5 1', 208995), (True, '1000 500 250 125 25 5 1', '1000 500 250 125 25 5 1', 208996), (True, '10000 5000 2500 1250 625 125 25 5 1', '10000 5000 2500 1250 625 125 25 5 1', 208997), (True, '100000 50000 25000 12500 6250 3125 625 125 25 5 1', '100000 50000 25000 12500 6250 3125 625 125 25 5 1', 208998), (True, '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', 208999), (True, '509149 1', '509149 1', 209000), (True, '572877 190959 63653 1201 1', '572877 190959 63653 1201 1', 209001), (True, '152956 76478 38239 1', '152956 76478 38239 1', 209002), (True, '733035 244345 48869 1', '733035 244345 48869 1', 209003), (True, '313114 156557 3331 1', '313114 156557 3331 1', 209004), (True, '893193 297731 42533 1', '893193 297731 42533 1', 209005), (True, '473273 2243 1', '473273 2243 1', 209006), (True, '537000 268500 134250 67125 22375 4475 895 179 1', '537000 268500 134250 67125 22375 4475 895 179 1', 209007), (True, '117079 6887 97 1', '117079 6887 97 1', 209008), (True, '784653 261551 9019 311 1', '784653 261551 9019 311 1', 209009), (True, '627251 1', '627251 1', 209010), (True, '9 3 1', '9 3 1', 209011), (True, '999999 333333 111111 37037 5291 481 37 1', '999999 333333 111111 37037 5291 481 37 1', 209012), (True, '120 60 30 15 5 1', '120 60 30 15 5 1', 209013), (True, '720 360 180 90 45 15 5 1', '720 360 180 90 45 15 5 1', 209014), (True, '648 324 162 81 27 9 3 1', '648 324 162 81 27 9 3 1', 209015), (True, '2430 1215 405 135 45 15 5 1', '2430 1215 405 135 45 15 5 1', 209016), (True, '119070 59535 19845 6615 2205 735 245 49 7 1', '119070 59535 19845 6615 2205 735 245 49 7 1', 209017), (True, '15 5 1', '15 5 1', 209018), (True, '21 7 1', '21 7 1', 209019), (True, '25 5 1', '25 5 1', 209020), (True, '100 50 25 5 1', '100 50 25 5 1', 209021), (True, '524287 1', '524287 1', 209022), (True, '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', 209023), (True, '600 300 150 75 25 5 1', '600 300 150 75 25 5 1', 209024), (True, '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', 209025), (True, '36 18 9 3 1', '36 18 9 3 1', 209026), (True, '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', 209027), (True, '20 10 5 1', '20 10 5 1', 209028), (True, '999983 1', '999983 1', 209029), (True, '9 3 1', '9 3 1', 209030), (True, '999983 1', '999983 1', 209031), (True, '20 10 5 1', '20 10 5 1', 209032), (True, '121 11 1', '121 11 1', 209033), (True, '1331 121 11 1', '1331 121 11 1', 209034)]",True,Accecpted,0.865129154728976,0.9727767695099818,False,0.0,False,"def func(*args):
	
	import math
	n = int(args[0])
	if (n != 1):
	    print(n, end=' ')
	flag = True
	while ((n > 1) and flag):
	    flag = False
	    for i in range(2, (int(math.sqrt(n)) + 1)):
	        if ((n % i) == 0):
	            print((n // i), end=' ')
	            n = (n // i)
	            flag = True
	            break
	print(1)
"
2722839,29376000,"import math
n = int(input())
print(n,end="" "")
flag = True
while n > 1 and flag:
    flag = False
    for i in range(2,int(math.sqrt(n))+1) :
        if n%i == 0 :
            print(n//i,end="" "")
            n = n//i
            flag = True
            break  
print(1)",7879,4504,92,8/12/17 14:29,13,2336,2,8,"[(True, '10 5 1', '10 5 1', 208985), (True, '4 2 1', '4 2 1', 208986), (True, '3 1', '3 1', 208987), (True, '2 1', '2 1', 208988), (True, '5 1', '5 1', 208989), (True, '6 3 1', '6 3 1', 208990), (True, '7 1', '7 1', 208991), (False, '1 1', '1', 208992), (True, '8 4 2 1', '8 4 2 1', 208993), (True, '12 6 3 1', '12 6 3 1', 208994), (True, '100 50 25 5 1', '100 50 25 5 1', 208995), (True, '1000 500 250 125 25 5 1', '1000 500 250 125 25 5 1', 208996), (True, '10000 5000 2500 1250 625 125 25 5 1', '10000 5000 2500 1250 625 125 25 5 1', 208997), (True, '100000 50000 25000 12500 6250 3125 625 125 25 5 1', '100000 50000 25000 12500 6250 3125 625 125 25 5 1', 208998), (True, '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', 208999), (True, '509149 1', '509149 1', 209000), (True, '572877 190959 63653 1201 1', '572877 190959 63653 1201 1', 209001), (True, '152956 76478 38239 1', '152956 76478 38239 1', 209002), (True, '733035 244345 48869 1', '733035 244345 48869 1', 209003), (True, '313114 156557 3331 1', '313114 156557 3331 1', 209004), (True, '893193 297731 42533 1', '893193 297731 42533 1', 209005), (True, '473273 2243 1', '473273 2243 1', 209006), (True, '537000 268500 134250 67125 22375 4475 895 179 1', '537000 268500 134250 67125 22375 4475 895 179 1', 209007), (True, '117079 6887 97 1', '117079 6887 97 1', 209008), (True, '784653 261551 9019 311 1', '784653 261551 9019 311 1', 209009), (True, '627251 1', '627251 1', 209010), (True, '9 3 1', '9 3 1', 209011), (True, '999999 333333 111111 37037 5291 481 37 1', '999999 333333 111111 37037 5291 481 37 1', 209012), (True, '120 60 30 15 5 1', '120 60 30 15 5 1', 209013), (True, '720 360 180 90 45 15 5 1', '720 360 180 90 45 15 5 1', 209014), (True, '648 324 162 81 27 9 3 1', '648 324 162 81 27 9 3 1', 209015), (True, '2430 1215 405 135 45 15 5 1', '2430 1215 405 135 45 15 5 1', 209016), (True, '119070 59535 19845 6615 2205 735 245 49 7 1', '119070 59535 19845 6615 2205 735 245 49 7 1', 209017), (True, '15 5 1', '15 5 1', 209018), (True, '21 7 1', '21 7 1', 209019), (True, '25 5 1', '25 5 1', 209020), (True, '100 50 25 5 1', '100 50 25 5 1', 209021), (True, '524287 1', '524287 1', 209022), (True, '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', 209023), (True, '600 300 150 75 25 5 1', '600 300 150 75 25 5 1', 209024), (True, '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', 209025), (True, '36 18 9 3 1', '36 18 9 3 1', 209026), (True, '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', '1000000 500000 250000 125000 62500 31250 15625 3125 625 125 25 5 1', 209027), (True, '20 10 5 1', '20 10 5 1', 209028), (True, '999983 1', '999983 1', 209029), (True, '9 3 1', '9 3 1', 209030), (True, '999983 1', '999983 1', 209031), (True, '20 10 5 1', '20 10 5 1', 209032), (True, '121 11 1', '121 11 1', 209033), (True, '1331 121 11 1', '1331 121 11 1', 209034)]",False,Wrong Answer,0.865129154728976,0.9727767695099818,False,0.02,False,"def func(*args):
	
	import math
	n = int(args[0])
	print(n, end=' ')
	flag = True
	while ((n > 1) and flag):
	    flag = False
	    for i in range(2, (int(math.sqrt(n)) + 1)):
	        if ((n % i) == 0):
	            print((n // i), end=' ')
	            n = (n // i)
	            flag = True
	            break
	print(1)
"
3269778,27324293,"import sys
lst = [int(i) for i in input().split()]
def check(number):
    lst = []
    i = int((number / 50)) % 475
    for j in range(25):
        i = (i * 96 + 42) % 475
        lst.append(i + 26)
    return lst
if lst[0] in check(lst[1]) and lst[1] >= lst[2]:
    print(0)
    sys.exit()
n2 = lst[1]
while n2 >= lst[2]:
    n2 = n2 - 50
    if lst[0] in check(n2):
        print(0)
        sys.exit()
else:
    n1 = lst[1]
    counter = 0
    while True:
        n1 = n1 + 50
        counter += 1
        if lst[0] in check(n1) and n1 >= lst[2]:
            if counter % 2 == 0:
                print(int(counter / 2))
                break
            else:
                print(int(counter / 2) + 1)
                break",105673,0,46,5/24/17 20:40,61,2830,2,8,"[(True, '0', '0', 239095), (True, '2', '2', 239096), (True, '24', '24', 239097), (True, '0', '0', 239098), (True, '8', '8', 239099), (True, '0', '0', 239100), (True, '6', '6', 239101), (True, '27', '27', 239102), (False, '0', '8', 239103), (True, '12', '12', 239104), (True, '24', '24', 239105), (True, '23', '23', 239106), (True, '25', '25', 239107), (False, '0', '27', 239108), (True, '0', '0', 239109), (True, '0', '0', 239110), (True, '0', '0', 239111), (True, '0', '0', 239112), (True, '0', '0', 239113), (False, '0', '1', 239114), (True, '1', '1', 239115), (True, '2', '2', 239116), (True, '2', '2', 239117), (True, '3', '3', 239118), (True, '3', '3', 239119), (True, '7', '7', 239120), (True, '13', '13', 239121), (True, '17', '17', 239122), (True, '22', '22', 239123), (True, '26', '26', 239124), (True, '26', '26', 239125), (False, '0', '27', 239126), (True, '27', '27', 239127), (False, '0', '27', 239128), (True, '27', '27', 239129), (True, '0', '0', 239130), (True, '0', '0', 239131), (True, '7', '7', 239132), (True, '6', '6', 239133), (True, '0', '0', 239134), (True, '0', '0', 239135), (False, '0', '5', 239136), (False, '0', '5', 239137), (False, '0', '11', 239138), (True, '1', '1', 239139), (True, '0', '0', 239140), (True, '1', '1', 239141), (False, '0', '6', 239142)]",False,Wrong Answer,0.9256611593849504,0.9727675744141862,False,0.1875,False,"def func(*args):
	
	import sys
	lst = [int(i) for i in args[0].split()]
	
	def check(number):
	    lst = []
	    i = (int((number / 50)) % 475)
	    for j in range(25):
	        i = (((i * 96) + 42) % 475)
	        lst.append((i + 26))
	    return lst
	if ((lst[0] in check(lst[1])) and (lst[1] >= lst[2])):
	    print(0)
	    sys.exit()
	n2 = lst[1]
	while (n2 >= lst[2]):
	    n2 = (n2 - 50)
	    if (lst[0] in check(n2)):
	        print(0)
	        sys.exit()
	else:
	    n1 = lst[1]
	    counter = 0
	    while True:
	        n1 = (n1 + 50)
	        counter += 1
	        if ((lst[0] in check(n1)) and (n1 >= lst[2])):
	            if ((counter % 2) == 0):
	                print(int((counter / 2)))
	                break
	            else:
	                print((int((counter / 2)) + 1))
	                break
"
3269780,27324541,"import sys
lst = [int(i) for i in input().split()]
def check(number):
    lst = []
    i = int((number / 50)) % 475
    for j in range(25):
        i = (i * 96 + 42) % 475
        lst.append(i + 26)
    return lst
if lst[0] in check(lst[1]) and lst[1] >= lst[2]:
    print(0)
    sys.exit()
n2 = lst[1] - 50
while n2 >= lst[2]:
    if lst[0] in check(n2):
        print(0)
        sys.exit()
    n2 = n2 - 50
else:
    n1 = lst[1]
    counter = 0
    while True:
        n1 = n1 + 50
        counter += 1
        if lst[0] in check(n1) and n1 >= lst[2]:
            if counter % 2 == 0:
                print(int(counter / 2))
                break
            else:
                print(int(counter / 2) + 1)
                break",105673,8,77,5/24/17 21:02,61,2830,1,8,"[(True, '0', '0', 239095), (True, '2', '2', 239096), (True, '24', '24', 239097), (True, '0', '0', 239098), (True, '8', '8', 239099), (True, '0', '0', 239100), (True, '6', '6', 239101), (True, '27', '27', 239102), (True, '8', '8', 239103), (True, '12', '12', 239104), (True, '24', '24', 239105), (True, '23', '23', 239106), (True, '25', '25', 239107), (True, '27', '27', 239108), (True, '0', '0', 239109), (True, '0', '0', 239110), (True, '0', '0', 239111), (True, '0', '0', 239112), (True, '0', '0', 239113), (True, '1', '1', 239114), (True, '1', '1', 239115), (True, '2', '2', 239116), (True, '2', '2', 239117), (True, '3', '3', 239118), (True, '3', '3', 239119), (True, '7', '7', 239120), (True, '13', '13', 239121), (True, '17', '17', 239122), (True, '22', '22', 239123), (True, '26', '26', 239124), (True, '26', '26', 239125), (True, '27', '27', 239126), (True, '27', '27', 239127), (True, '27', '27', 239128), (True, '27', '27', 239129), (True, '0', '0', 239130), (True, '0', '0', 239131), (True, '7', '7', 239132), (True, '6', '6', 239133), (True, '0', '0', 239134), (True, '0', '0', 239135), (True, '5', '5', 239136), (True, '5', '5', 239137), (True, '11', '11', 239138), (True, '1', '1', 239139), (True, '0', '0', 239140), (True, '1', '1', 239141), (True, '6', '6', 239142)]",True,Accecpted,0.9256611593849504,0.9727675744141862,False,0.0,False,"def func(*args):
	
	import sys
	lst = [int(i) for i in args[0].split()]
	
	def check(number):
	    lst = []
	    i = (int((number / 50)) % 475)
	    for j in range(25):
	        i = (((i * 96) + 42) % 475)
	        lst.append((i + 26))
	    return lst
	if ((lst[0] in check(lst[1])) and (lst[1] >= lst[2])):
	    print(0)
	    sys.exit()
	n2 = (lst[1] - 50)
	while (n2 >= lst[2]):
	    if (lst[0] in check(n2)):
	        print(0)
	        sys.exit()
	    n2 = (n2 - 50)
	else:
	    n1 = lst[1]
	    counter = 0
	    while True:
	        n1 = (n1 + 50)
	        counter += 1
	        if ((lst[0] in check(n1)) and (n1 >= lst[2])):
	            if ((counter % 2) == 0):
	                print(int((counter / 2)))
	                break
	            else:
	                print((int((counter / 2)) + 1))
	                break
"
119005,23011226,"ins = list(map(int, input().split()))
d1 = ins[0]
d2 = ins[1]
d3 = ins[2]
mins = (2*d1 + 2*d2)
if mins > (d1+d2+d3):
    mins = (d1+d2+d3)
if mins > (2*d1+2*d3):
    mins = (2*d1+2*d3)
if mins > (2*d2+2*d3):
    mins = (2*d2+2*d3)
print(mins)",15609,0,62,12/15/16 18:49,23,102,1,8,"[(True, '60', '60', 55884), (True, '4', '4', 55885), (True, '134', '134', 55886), (True, '2331', '2331', 55887), (True, '8', '8', 55888), (True, '92', '92', 55889), (True, '203802', '203802', 55890), (True, '55041796', '55041796', 55891), (True, '12', '12', 55892), (True, '543828', '543828', 55893), (True, '305580', '305580', 55894), (True, '7326', '7326', 55895), (True, '601800', '601800', 55896), (True, '955428', '955428', 55897), (True, '54676', '54676', 55898), (True, '2836', '2836', 55899), (True, '243848', '243848', 55900), (True, '300000000', '300000000', 55901), (True, '8', '8', 55902), (True, '4', '4', 55903), (True, '4', '4', 55904)]",True,Accecpted,0.9746849137081522,0.9727626459143968,False,0.0,False,"def func(*args):
	
	ins = list(map(int, args[0].split()))
	d1 = ins[0]
	d2 = ins[1]
	d3 = ins[2]
	mins = ((2 * d1) + (2 * d2))
	if (mins > ((d1 + d2) + d3)):
	    mins = ((d1 + d2) + d3)
	if (mins > ((2 * d1) + (2 * d3))):
	    mins = ((2 * d1) + (2 * d3))
	if (mins > ((2 * d2) + (2 * d3))):
	    mins = ((2 * d2) + (2 * d3))
	print(mins)
"
3004325,28227870,"import re

str = input()
if len(str) < 7:
    print ('NO')
    exit()

res0 = re.search(r'0000000', str)
res1 = re.search(r'1111111', str)

if res0 != None or res1 != None:
    print ('YES')
else:
    print ('NO')",89834,5864,156,7/2/17 20:28,14,2555,1,8,"[(True, 'NO', 'NO', 219615), (True, 'YES', 'YES', 219616), (True, 'YES', 'YES', 219617), (True, 'YES', 'YES', 219618), (True, 'NO', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (True, 'YES', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (True, 'NO', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (True, 'NO', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (True, 'YES', 'YES', 219634), (True, 'NO', 'NO', 219635), (True, 'NO', 'NO', 219636), (True, 'YES', 'YES', 219637), (True, 'NO', 'NO', 219638), (True, 'NO', 'NO', 219639), (True, 'YES', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (True, 'YES', 'YES', 219645), (True, 'NO', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (True, 'NO', 'NO', 219649), (True, 'YES', 'YES', 219650), (True, 'YES', 'YES', 219651), (True, 'YES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (True, 'YES', 'YES', 219655), (True, 'YES', 'YES', 219656), (True, 'YES', 'YES', 219657), (True, 'YES', 'YES', 219658)]",True,Accecpted,0.9194353966999144,0.9727272727272728,False,0.0,False,"def func(*args):
	
	import re
	str = args[0]
	if (len(str) < 7):
	    print('NO')
	    exit()
	res0 = re.search('0000000', str)
	res1 = re.search('1111111', str)
	if ((res0 != None) or (res1 != None)):
	    print('YES')
	else:
	    print('NO')
"
3004324,28227711,"import re

str = input()
if len(str) < 7:
    print ('NO')

res0 = re.search(r'0000000', str)
res1 = re.search(r'1111111', str)

if res0 != None or res1 != None:
    print ('YES')
else:
    print ('NO')",89834,4952,92,7/2/17 20:27,13,2555,2,8,"[(False, 'NO\nNO', 'NO', 219615), (True, 'YES', 'YES', 219616), (True, 'YES', 'YES', 219617), (True, 'YES', 'YES', 219618), (False, 'NO\nNO', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (True, 'YES', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (False, 'NO\nNO', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (True, 'NO', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (True, 'YES', 'YES', 219634), (True, 'NO', 'NO', 219635), (True, 'NO', 'NO', 219636), (True, 'YES', 'YES', 219637), (True, 'NO', 'NO', 219638), (True, 'NO', 'NO', 219639), (True, 'YES', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (True, 'YES', 'YES', 219645), (True, 'NO', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (True, 'NO', 'NO', 219649), (True, 'YES', 'YES', 219650), (True, 'YES', 'YES', 219651), (True, 'YES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (True, 'YES', 'YES', 219655), (True, 'YES', 'YES', 219656), (True, 'YES', 'YES', 219657), (True, 'YES', 'YES', 219658)]",False,Wrong Answer,0.9194353966999144,0.9727272727272728,False,0.0681818181818181,False,"def func(*args):
	
	import re
	str = args[0]
	if (len(str) < 7):
	    print('NO')
	res0 = re.search('0000000', str)
	res1 = re.search('1111111', str)
	if ((res0 != None) or (res1 != None)):
	    print('YES')
	else:
	    print('NO')
"
3148743,26465629,"a, b = map(int, input().split())
c , d = map(int, input().split())

for i in range(0,101):
	j = ((a * i) + b - d) / c
	if  j == int(j):
		print((a * i) + b)
		break
else: print(-1)",14410,5424,62,4/18/17 2:25,17,2697,2,8,"[(True, '82', '82', 227721), (True, '-1', '-1', 227722), (True, '1222', '1222', 227723), (True, '1748', '1748', 227724), (True, '211', '211', 227725), (True, '301', '301', 227726), (True, '3414', '3414', 227727), (True, '1014', '1014', 227728), (True, '718', '718', 227729), (True, '-1', '-1', 227730), (True, '1255', '1255', 227731), (True, '1278', '1278', 227732), (True, '209', '209', 227733), (True, '2321', '2321', 227734), (True, '-1', '-1', 227735), (True, '1156', '1156', 227736), (True, '-1', '-1', 227737), (True, '1346', '1346', 227738), (True, '789', '789', 227739), (True, '-1', '-1', 227740), (True, '674', '674', 227741), (True, '364', '364', 227742), (True, '48', '48', 227743), (True, '5967', '5967', 227744), (True, '317', '317', 227745), (True, '331', '331', 227746), (True, '1410', '1410', 227747), (True, '-1', '-1', 227748), (True, '427', '427', 227749), (True, '3483', '3483', 227750), (True, '-1', '-1', 227751), (True, '204', '204', 227752), (True, '100', '100', 227753), (True, '1', '1', 227754), (False, '1', '100', 227755), (True, '101', '101', 227756), (False, '1', '9703', 227757), (True, '9605', '9605', 227758), (True, '4852', '4852', 227759), (True, '-1', '-1', 227760), (True, '2', '2', 227761), (False, '3', '5', 227762), (True, '3', '3', 227763), (True, '-1', '-1', 227764), (True, '-1', '-1', 227765), (True, '-1', '-1', 227766), (True, '-1', '-1', 227767), (False, '3', '99', 227768), (True, '5', '5', 227769), (True, '100', '100', 227770), (True, '-1', '-1', 227771), (False, '14', '20', 227772), (False, '2', '10', 227773), (True, '-1', '-1', 227774), (True, '100', '100', 227775), (False, '46', '319', 227776), (True, '82', '82', 227777), (False, '7', '14', 227778)]",False,Wrong Answer,0.8370129464312781,0.9727047146401984,False,0.1379310344827586,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	(c, d) = map(int, args[1].split())
	for i in range(0, 101):
	    j = ((((a * i) + b) - d) / c)
	    if (j == int(j)):
	        print(((a * i) + b))
	        break
	else:
	    print((- 1))
"
3148744,26465656,"a, b = map(int, input().split())
c , d = map(int, input().split())

for i in range(0,101):
	j = ((a * i) + b - d) / c
	if  j == int(j) and j >= 0:
		print((a * i) + b)
		break
else: print(-1)",14410,5428,62,4/18/17 2:28,17,2697,1,8,"[(True, '82', '82', 227721), (True, '-1', '-1', 227722), (True, '1222', '1222', 227723), (True, '1748', '1748', 227724), (True, '211', '211', 227725), (True, '301', '301', 227726), (True, '3414', '3414', 227727), (True, '1014', '1014', 227728), (True, '718', '718', 227729), (True, '-1', '-1', 227730), (True, '1255', '1255', 227731), (True, '1278', '1278', 227732), (True, '209', '209', 227733), (True, '2321', '2321', 227734), (True, '-1', '-1', 227735), (True, '1156', '1156', 227736), (True, '-1', '-1', 227737), (True, '1346', '1346', 227738), (True, '789', '789', 227739), (True, '-1', '-1', 227740), (True, '674', '674', 227741), (True, '364', '364', 227742), (True, '48', '48', 227743), (True, '5967', '5967', 227744), (True, '317', '317', 227745), (True, '331', '331', 227746), (True, '1410', '1410', 227747), (True, '-1', '-1', 227748), (True, '427', '427', 227749), (True, '3483', '3483', 227750), (True, '-1', '-1', 227751), (True, '204', '204', 227752), (True, '100', '100', 227753), (True, '1', '1', 227754), (True, '100', '100', 227755), (True, '101', '101', 227756), (True, '9703', '9703', 227757), (True, '9605', '9605', 227758), (True, '4852', '4852', 227759), (True, '-1', '-1', 227760), (True, '2', '2', 227761), (True, '5', '5', 227762), (True, '3', '3', 227763), (True, '-1', '-1', 227764), (True, '-1', '-1', 227765), (True, '-1', '-1', 227766), (True, '-1', '-1', 227767), (True, '99', '99', 227768), (True, '5', '5', 227769), (True, '100', '100', 227770), (True, '-1', '-1', 227771), (True, '20', '20', 227772), (True, '10', '10', 227773), (True, '-1', '-1', 227774), (True, '100', '100', 227775), (True, '319', '319', 227776), (True, '82', '82', 227777), (True, '14', '14', 227778)]",True,Accecpted,0.8370129464312781,0.9727047146401984,False,0.0,False,"def func(*args):
	
	(a, b) = map(int, args[0].split())
	(c, d) = map(int, args[1].split())
	for i in range(0, 101):
	    j = ((((a * i) + b) - d) / c)
	    if ((j == int(j)) and (j >= 0)):
	        print(((a * i) + b))
	        break
	else:
	    print((- 1))
"
963867,24725220,"a = int(input())
b = int(input())
c = int(input())
q = min(a,b//2,c//4) 
print(q*7)",51198,4528,92,2/16/17 22:19,9,888,1,8,"[(True, '7', '7', 118234), (True, '21', '21', 118235), (True, '0', '0', 118236), (True, '0', '0', 118237), (True, '7', '7', 118238), (True, '1750', '1750', 118239), (True, '0', '0', 118240), (True, '0', '0', 118241), (True, '7', '7', 118242), (True, '0', '0', 118243), (True, '7', '7', 118244), (True, '1750', '1750', 118245), (True, '7', '7', 118246), (True, '0', '0', 118247), (True, '21', '21', 118248), (True, '70', '70', 118249), (True, '693', '693', 118250), (True, '1400', '1400', 118251), (True, '1393', '1393', 118252), (True, '1400', '1400', 118253), (True, '1393', '1393', 118254), (True, '1400', '1400', 118255), (True, '1393', '1393', 118256), (True, '1400', '1400', 118257), (True, '882', '882', 118258), (True, '763', '763', 118259), (True, '903', '903', 118260), (True, '1127', '1127', 118261), (True, '273', '273', 118262), (True, '63', '63', 118263), (True, '959', '959', 118264), (True, '105', '105', 118265), (True, '1323', '1323', 118266), (True, '126', '126', 118267), (True, '1022', '1022', 118268), (True, '490', '490', 118269), (True, '1092', '1092', 118270), (True, '1176', '1176', 118271), (True, '322', '322', 118272), (True, '1218', '1218', 118273), (True, '1008', '1008', 118274), (True, '154', '154', 118275), (True, '980', '980', 118276), (True, '1218', '1218', 118277), (True, '1617', '1617', 118278), (True, '1057', '1057', 118279), (True, '616', '616', 118280), (True, '84', '84', 118281), (True, '1428', '1428', 118282), (True, '889', '889', 118283), (True, '1561', '1561', 118284), (True, '1015', '1015', 118285), (True, '574', '574', 118286), (True, '133', '133', 118287), (True, '1372', '1372', 118288), (True, '833', '833', 118289), (True, '1449', '1449', 118290), (True, '903', '903', 118291), (True, '462', '462', 118292), (True, '1708', '1708', 118293), (True, '1267', '1267', 118294), (True, '721', '721', 118295), (True, '7', '7', 118296), (True, '14', '14', 118297), (True, '7', '7', 118298), (True, '7', '7', 118299), (True, '7', '7', 118300), (True, '14', '14', 118301), (True, '7', '7', 118302), (True, '7', '7', 118303), (True, '14', '14', 118304), (True, '14', '14', 118305), (True, '7', '7', 118306), (True, '14', '14', 118307), (True, '7', '7', 118308), (True, '7', '7', 118309), (True, '7', '7', 118310), (True, '35', '35', 118311), (True, '0', '0', 118312), (True, '21', '21', 118313), (True, '14', '14', 118314), (True, '7', '7', 118315), (True, '0', '0', 118316), (True, '14', '14', 118317)]",True,Accecpted,0.842362674378975,0.9726775956284152,False,0.0,False,"def func(*args):
	
	a = int(args[0])
	b = int(args[1])
	c = int(args[2])
	q = min(a, (b // 2), (c // 4))
	print((q * 7))
"
963866,24725180,"a = int(input())
b = int(input())
c = int(input())
q = min((a+b)//2,c//4)
print(q*7)",51198,4512,77,2/16/17 22:17,9,888,2,8,"[(True, '7', '7', 118234), (True, '21', '21', 118235), (True, '0', '0', 118236), (True, '0', '0', 118237), (True, '7', '7', 118238), (True, '1750', '1750', 118239), (False, '7', '0', 118240), (True, '0', '0', 118241), (False, '1750', '7', 118242), (False, '1750', '0', 118243), (False, '1750', '7', 118244), (True, '1750', '1750', 118245), (True, '7', '7', 118246), (True, '0', '0', 118247), (True, '21', '21', 118248), (True, '70', '70', 118249), (True, '693', '693', 118250), (True, '1400', '1400', 118251), (False, '1400', '1393', 118252), (True, '1400', '1400', 118253), (False, '1400', '1393', 118254), (True, '1400', '1400', 118255), (True, '1393', '1393', 118256), (True, '1400', '1400', 118257), (False, '1365', '882', 118258), (False, '1414', '763', 118259), (True, '903', '903', 118260), (False, '1267', '1127', 118261), (False, '1162', '273', 118262), (False, '973', '63', 118263), (False, '1421', '959', 118264), (False, '917', '105', 118265), (False, '1687', '1323', 118266), (False, '938', '126', 118267), (False, '1708', '1022', 118268), (False, '1197', '490', 118269), (True, '1092', '1092', 118270), (False, '1456', '1176', 118271), (False, '1351', '322', 118272), (False, '1722', '1218', 118273), (False, '1211', '1008', 118274), (False, '1106', '154', 118275), (False, '1484', '980', 118276), (True, '1218', '1218', 118277), (False, '1624', '1617', 118278), (False, '1078', '1057', 118279), (False, '637', '616', 118280), (False, '91', '84', 118281), (False, '1442', '1428', 118282), (False, '896', '889', 118283), (False, '1568', '1561', 118284), (False, '1022', '1015', 118285), (False, '581', '574', 118286), (False, '140', '133', 118287), (False, '1386', '1372', 118288), (False, '840', '833', 118289), (True, '1449', '1449', 118290), (True, '903', '903', 118291), (True, '462', '462', 118292), (True, '1708', '1708', 118293), (True, '1267', '1267', 118294), (True, '721', '721', 118295), (False, '42', '7', 118296), (False, '175', '14', 118297), (False, '14', '7', 118298), (True, '7', '7', 118299), (True, '7', '7', 118300), (False, '28', '14', 118301), (False, '14', '7', 118302), (False, '14', '7', 118303), (False, '364', '14', 118304), (False, '21', '14', 118305), (True, '7', '7', 118306), (False, '42', '14', 118307), (True, '7', '7', 118308), (True, '7', '7', 118309), (False, '35', '7', 118310), (True, '35', '35', 118311), (False, '175', '0', 118312), (False, '35', '21', 118313), (False, '35', '14', 118314), (False, '175', '7', 118315), (False, '7', '0', 118316), (False, '35', '14', 118317)]",False,Wrong Answer,0.842362674378975,0.9726775956284152,False,0.6071428571428571,False,"def func(*args):
	
	a = int(args[0])
	b = int(args[1])
	c = int(args[2])
	q = min(((a + b) // 2), (c // 4))
	print((q * 7))
"
3308963,28545426,"n = str(input())
li = n.split("" "")
#print(li)
x = int(li[0])
y = int(li[1])
l = int(li[2])
r = int(li[3])
cnt = 0
xs = []
ys = []
while(True):
    tmp = x ** cnt
    if tmp < 1e18:
        xs.append(tmp)
        cnt += 1
    else:
        break
cnt = 0
while(True):
    tmp = y ** cnt
    if tmp < 1e18:
        ys.append(tmp)
        cnt += 1
    else:
        break
years = set()
for i in xs:
    for j in ys:
        years.add(i+j)
accept = [l-1,r+1]
for i in years:
    if l <= i <= r:
        accept.append(i)
accept.append(r+1)
mx = -1000000
accept.sort()
for i in range(1,len(accept)):
    if accept[i]-accept[i-1] - 1> mx:
        mx = accept[i] - accept[i-1] - 1
print(mx)",102902,5420,77,7/14/17 13:27,79,2861,1,8,"[(True, '1', '1', 241973), (True, '8', '8', 241974), (True, '0', '0', 241975), (True, '1', '1', 241976), (True, '213568', '213568', 241977), (True, '144115188075855871', '144115188075855871', 241978), (True, '206415', '206415', 241979), (True, '261485717957290893', '261485717957290893', 241980), (True, '933334', '933334', 241981), (True, '976614248345331214', '976614248345331214', 241982), (True, '188286357653', '188286357653', 241983), (True, '0', '0', 241984), (True, '1', '1', 241985), (True, '1', '1', 241986), (True, '815', '815', 241987), (True, '423539247696576511', '423539247696576511', 241988), (True, '423539247696576511', '423539247696576511', 241989), (True, '1', '1', 241990), (True, '1', '1', 241991), (True, '100063090197999413', '100063090197999413', 241992), (True, '1', '1', 241993), (True, '177668463693676057', '177668463693676057', 241994), (True, '999998980000000000', '999998980000000000', 241995), (True, '413539247696576512', '413539247696576512', 241996), (True, '515374843694326508', '515374843694326508', 241997), (True, '988998989390034998', '988998989390034998', 241998), (True, '205168317603639445', '205168317603639445', 241999), (True, '183082515552434548', '183082515552434548', 242000), (True, '999999991410065406', '999999991410065406', 242001), (True, '1', '1', 242002), (True, '1', '1', 242003), (True, '318240518387121676', '318240518387121676', 242004), (True, '98493812262359820', '98493812262359820', 242005), (True, '208425143965840685', '208425143965840685', 242006), (True, '358226343967981177', '358226343967981177', 242007), (True, '697', '697', 242008), (True, '343076029885034022', '343076029885034022', 242009), (True, '999999991410065405', '999999991410065405', 242010), (True, '491571744457491660', '491571744457491660', 242011), (True, '293294644112440978', '293294644112440978', 242012), (True, '1', '1', 242013), (True, '191', '191', 242014), (True, '1', '1', 242015), (True, '989898863', '989898863', 242016), (True, '229336748650748455', '229336748650748455', 242017), (True, '324693328712373697', '324693328712373697', 242018), (True, '146054845259371103', '146054845259371103', 242019), (True, '146', '146', 242020), (True, '161', '161', 242021), (True, '304045744870965149', '304045744870965149', 242022), (True, '470521123838506314', '470521123838506314', 242023), (True, '209242527248078910', '209242527248078910', 242024), (True, '999999999999999997', '999999999999999997', 242025), (True, '606884750324759243', '606884750324759243', 242026), (True, '142191179567388113', '142191179567388113', 242027), (True, '999999776959924100', '999999776959924100', 242028), (True, '41589169038297966', '41589169038297966', 242029), (True, '131', '131', 242030), (True, '385', '385', 242031), (True, '126509877134233001', '126509877134233001', 242032), (True, '999999993925999000', '999999993925999000', 242033), (True, '999999991410065406', '999999991410065406', 242034), (True, '238418579101562499', '238418579101562499', 242035), (True, '361536985631243879', '361536985631243879', 242036), (True, '0', '0', 242037), (True, '92746386105019330', '92746386105019330', 242038), (True, '3', '3', 242039), (True, '511082684852142973', '511082684852142973', 242040), (True, '675479960205904638', '675479960205904638', 242041), (True, '369878143059623936', '369878143059623936', 242042), (True, '999999991410065406', '999999991410065406', 242043), (True, '609100090075649641', '609100090075649641', 242044), (True, '386', '386', 242045), (True, '564456254389938656', '564456254389938656', 242046), (True, '433055320090924028', '433055320090924028', 242047), (True, '262122924189101720', '262122924189101720', 242048), (True, '123258210823306654', '123258210823306654', 242049), (True, '697020144779318016', '697020144779318016', 242050), (True, '12884901886', '12884901886', 242051), (True, '153326481080101036', '153326481080101036', 242052), (True, '423539247696576512', '423539247696576512', 242053), (True, '49', '49', 242054), (True, '46431449522358431', '46431449522358431', 242055), (True, '153172782079203571', '153172782079203571', 242056), (True, '1', '1', 242057)]",True,Accecpted,0.8993648631627551,0.972648432288192,False,0.0,False,"def func(*args):
	
	n = str(args[0])
	li = n.split(' ')
	x = int(li[0])
	y = int(li[1])
	l = int(li[2])
	r = int(li[3])
	cnt = 0
	xs = []
	ys = []
	while True:
	    tmp = (x ** cnt)
	    if (tmp < 1e+18):
	        xs.append(tmp)
	        cnt += 1
	    else:
	        break
	cnt = 0
	while True:
	    tmp = (y ** cnt)
	    if (tmp < 1e+18):
	        ys.append(tmp)
	        cnt += 1
	    else:
	        break
	years = set()
	for i in xs:
	    for j in ys:
	        years.add((i + j))
	accept = [(l - 1), (r + 1)]
	for i in years:
	    if (l <= i <= r):
	        accept.append(i)
	accept.append((r + 1))
	mx = (- 1000000)
	accept.sort()
	for i in range(1, len(accept)):
	    if (((accept[i] - accept[(i - 1)]) - 1) > mx):
	        mx = ((accept[i] - accept[(i - 1)]) - 1)
	print(mx)
"
3308962,28545258,"n = str(input())
li = n.split("" "")
#print(li)
x = int(li[0])
y = int(li[1])
l = int(li[2])
r = int(li[3])
cnt = 0
xs = []
ys = []
while(True):
    tmp = x ** cnt
    if tmp < 1e18:
        xs.append(tmp)
        cnt += 1
    else:
        break
cnt = 0
while(True):
    tmp = y ** cnt
    if tmp < 1e18:
        ys.append(tmp)
        cnt += 1
    else:
        break
years = set()
for i in xs:
    for j in ys:
        years.add(i+j)
accept = []
for i in years:
    if i>= l and i <=r:
        accept.append(i)
accept.append(r+1)
mx = -1000000
for i in range(1,len(accept)):
    if accept[i]-accept[i-1] - 1> mx:
        mx = accept[i] - accept[i-1] - 1
print(mx)",102902,5412,61,7/14/17 13:18,77,2861,2,8,"[(True, '1', '1', 241973), (True, '8', '8', 241974), (True, '0', '0', 241975), (False, '4', '1', 241976), (False, '933440', '213568', 241977), (False, '999999931280515072', '144115188075855871', 241978), (False, '790373', '206415', 241979), (False, '999992374402514949', '261485717957290893', 241980), (True, '933334', '933334', 241981), (False, '999837829800318214', '976614248345331214', 241982), (False, '850421314759', '188286357653', 241983), (True, '0', '0', 241984), (False, '-1000000', '1', 241985), (False, '0', '1', 241986), (False, '-1000000', '815', 241987), (False, '927942405962072063', '423539247696576511', 241988), (False, '927942405962072063', '423539247696576511', 241989), (False, '-1000000', '1', 241990), (False, '-1000000', '1', 241991), (False, '-1000000', '100063090197999413', 241992), (False, '-1000000', '1', 241993), (False, '304279187938024108', '177668463693676057', 241994), (False, '999999999999999998', '999998980000000000', 241995), (False, '989859262511644672', '413539247696576512', 241996), (False, '-1000000', '515374843694326508', 241997), (False, '999999998996996998', '988998989390034998', 241998), (False, '-1000000', '205168317603639445', 241999), (False, '-1000000', '183082515552434548', 242000), (False, '999999995705032702', '999999991410065406', 242001), (False, '-1000000', '1', 242002), (False, '-1000000', '1', 242003), (False, '391669850903863914', '318240518387121676', 242004), (True, '98493812262359820', '98493812262359820', 242005), (True, '208425143965840685', '208425143965840685', 242006), (False, '-1000000', '358226343967981177', 242007), (True, '697', '697', 242008), (False, '401055441817849825', '343076029885034022', 242009), (False, '999999995705032701', '999999991410065405', 242010), (False, '492821962939686434', '491571744457491660', 242011), (True, '293294644112440978', '293294644112440978', 242012), (False, '-1000000', '1', 242013), (False, '552', '191', 242014), (False, '-1000000', '1', 242015), (False, '148106082', '989898863', 242016), (True, '229336748650748455', '229336748650748455', 242017), (True, '324693328712373697', '324693328712373697', 242018), (True, '146054845259371103', '146054845259371103', 242019), (False, '106', '146', 242020), (True, '161', '161', 242021), (False, '464630021384225730', '304045744870965149', 242022), (False, '861776369489162026', '470521123838506314', 242023), (True, '209242527248078910', '209242527248078910', 242024), (False, '999999999999999998', '999999999999999997', 242025), (False, '279919878762941865', '606884750324759243', 242026), (True, '142191179567388113', '142191179567388113', 242027), (False, '999999796995929099', '999999776959924100', 242028), (False, '-1000000', '41589169038297966', 242029), (True, '131', '131', 242030), (True, '385', '385', 242031), (False, '-1000000', '126509877134233001', 242032), (False, '999999996962999499', '999999993925999000', 242033), (False, '999999995705032702', '999999991410065406', 242034), (False, '767062164302946237', '238418579101562499', 242035), (False, '182028016464042218', '361536985631243879', 242036), (True, '0', '0', 242037), (False, '37638589636357366', '92746386105019330', 242038), (False, '-1000000', '3', 242039), (True, '511082684852142973', '511082684852142973', 242040), (False, '690529877999322259', '675479960205904638', 242041), (False, '637764720326451231', '369878143059623936', 242042), (False, '999999995705032702', '999999991410065406', 242043), (True, '609100090075649641', '609100090075649641', 242044), (True, '386', '386', 242045), (False, '692715296143097519', '564456254389938656', 242046), (True, '433055320090924028', '433055320090924028', 242047), (False, '-1000000', '262122924189101720', 242048), (False, '-1000000', '123258210823306654', 242049), (True, '697020144779318016', '697020144779318016', 242050), (True, '12884901886', '12884901886', 242051), (False, '-1000000', '153326481080101036', 242052), (False, '999999999999999998', '423539247696576512', 242053), (False, '15', '49', 242054), (True, '46431449522358431', '46431449522358431', 242055), (False, '195297996812022819', '153172782079203571', 242056), (False, '0', '1', 242057)]",False,Wrong Answer,0.8993648631627551,0.972648432288192,False,0.7058823529411765,False,"def func(*args):
	
	n = str(args[0])
	li = n.split(' ')
	x = int(li[0])
	y = int(li[1])
	l = int(li[2])
	r = int(li[3])
	cnt = 0
	xs = []
	ys = []
	while True:
	    tmp = (x ** cnt)
	    if (tmp < 1e+18):
	        xs.append(tmp)
	        cnt += 1
	    else:
	        break
	cnt = 0
	while True:
	    tmp = (y ** cnt)
	    if (tmp < 1e+18):
	        ys.append(tmp)
	        cnt += 1
	    else:
	        break
	years = set()
	for i in xs:
	    for j in ys:
	        years.add((i + j))
	accept = []
	for i in years:
	    if ((i >= l) and (i <= r)):
	        accept.append(i)
	accept.append((r + 1))
	mx = (- 1000000)
	for i in range(1, len(accept)):
	    if (((accept[i] - accept[(i - 1)]) - 1) > mx):
	        mx = ((accept[i] - accept[(i - 1)]) - 1)
	print(mx)
"
1260757,25277789,"'''input
9 4 3
'''
n, a, b = map(int, input().split())
print(min(n-a,b+1))",531,4520,124,3/6/17 6:01,5,1142,1,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (True, '1', '1', 138320), (True, '1', '1', 138321), (True, '4', '4', 138322), (True, '7', '7', 138323), (True, '5', '5', 138324), (True, '6', '6', 138325), (True, '10', '10', 138326), (True, '7', '7', 138327), (True, '9', '9', 138328), (True, '15', '15', 138329), (True, '8', '8', 138330), (True, '2', '2', 138331), (True, '24', '24', 138332), (True, '5', '5', 138333), (True, '6', '6', 138334), (True, '16', '16', 138335), (True, '5', '5', 138336), (True, '12', '12', 138337), (True, '17', '17', 138338), (True, '38', '38', 138339), (True, '18', '18', 138340), (True, '38', '38', 138341), (True, '13', '13', 138342), (True, '8', '8', 138343), (True, '13', '13', 138344), (True, '1', '1', 138345), (True, '40', '40', 138346), (True, '53', '53', 138347), (True, '34', '34', 138348), (True, '23', '23', 138349), (True, '39', '39', 138350), (True, '38', '38', 138351), (True, '13', '13', 138352), (True, '36', '36', 138353), (True, '7', '7', 138354), (True, '21', '21', 138355), (True, '21', '21', 138356), (True, '2', '2', 138357), (True, '43', '43', 138358), (True, '9', '9', 138359), (True, '14', '14', 138360), (True, '23', '23', 138361), (True, '89', '89', 138362), (True, '32', '32', 138363), (True, '73', '73', 138364), (True, '89', '89', 138365), (True, '19', '19', 138366), (True, '1', '1', 138367)]",True,Accecpted,0.9036020036098448,0.9726027397260274,False,0.0,False,"def func(*args):
	
	'input\n9 4 3\n'
	(n, a, b) = map(int, args[0].split())
	print(min((n - a), (b + 1)))
"
1260756,25277698,"'''input
9 4 3
'''
n, a, b = map(int, input().split())
print(min(a,b)+1)",531,4468,122,3/6/17 5:53,5,1142,2,8,"[(True, '2', '2', 138318), (True, '3', '3', 138319), (True, '1', '1', 138320), (False, '6', '1', 138321), (True, '4', '4', 138322), (False, '5', '7', 138323), (False, '8', '5', 138324), (True, '6', '6', 138325), (False, '7', '10', 138326), (False, '14', '7', 138327), (False, '5', '9', 138328), (False, '9', '15', 138329), (False, '19', '8', 138330), (True, '2', '2', 138331), (False, '6', '24', 138332), (False, '16', '5', 138333), (True, '6', '6', 138334), (True, '16', '16', 138335), (False, '34', '5', 138336), (True, '12', '12', 138337), (True, '17', '17', 138338), (False, '8', '38', 138339), (False, '17', '18', 138340), (False, '12', '38', 138341), (False, '39', '13', 138342), (True, '8', '8', 138343), (True, '13', '13', 138344), (False, '29', '1', 138345), (False, '13', '40', 138346), (False, '10', '53', 138347), (False, '30', '34', 138348), (True, '23', '23', 138349), (False, '28', '39', 138350), (False, '34', '38', 138351), (True, '13', '13', 138352), (True, '36', '36', 138353), (False, '45', '7', 138354), (True, '21', '21', 138355), (True, '21', '21', 138356), (False, '15', '2', 138357), (False, '1', '43', 138358), (True, '9', '9', 138359), (False, '60', '14', 138360), (False, '3', '23', 138361), (False, '6', '89', 138362), (False, '49', '32', 138363), (False, '23', '73', 138364), (False, '12', '89', 138365), (False, '82', '19', 138366), (True, '1', '1', 138367)]",False,Wrong Answer,0.9036020036098448,0.9726027397260274,False,0.62,False,"def func(*args):
	
	'input\n9 4 3\n'
	(n, a, b) = map(int, args[0].split())
	print((min(a, b) + 1))
"
570260,23340328,"x = input()
x = str.split(x, ' ')
n = int(x[0])
m = int(x[1])

if n % m is 0:
    print(n+m)
else:
    p = 1
    while True:
        temp = p*m
        if temp > n :
            print(temp)
            break
        p+=1",40017,4532,500,12/26/16 15:53,29,528,3,8,"[(True, '6', '6', 89610), (True, '26', '26', 89611), (True, '39', '39', 89612), (True, '2', '2', 89613), (True, '16', '16', 89614), (True, '15', '15', 89615), (True, '894', '894', 89616), (True, '8581', '8581', 89617), (True, '125292', '125292', 89618), (True, '667250', '667250', 89619), (True, '4394826', '4394826', 89620), (True, '80104272', '80104272', 89621), (True, '710490435', '710490435', 89622), (True, '1999999998', '1999999998', 89623), (True, '2000000000', '2000000000', 89624), (True, '1000000000', '1000000000', 89625), (True, '1000000001', '1000000001', 89626), (True, '1000000002', '1000000002', 89627), (True, '1000000000', '1000000000', 89628), (True, '100000001', '100000001', 89629), (True, '1000000000', '1000000000', 89630), (True, '1000000000', '1000000000', 89631), (True, '1999999994', '1999999994', 89632)]",True,Time Limit,0.5598141675835149,0.9723320158102768,False,0.0,False,"def func(*args):
	
	x = args[0]
	x = str.split(x, ' ')
	n = int(x[0])
	m = int(x[1])
	if ((n % m) is 0):
	    print((n + m))
	else:
	    p = 1
	    while True:
	        temp = (p * m)
	        if (temp > n):
	            print(temp)
	            break
	        p += 1
"
570262,23340509,"x = input()
x = str.split(x, ' ')
n = int(x[0])
m = int(x[1])

if n % m is 0:
    print(n + m)
else:
    p = n // m
    while True:
        temp = p * m
        if temp > n:
            print(temp)
            break
        p += 1",40017,4532,62,12/26/16 16:04,29,528,1,8,"[(True, '6', '6', 89610), (True, '26', '26', 89611), (True, '39', '39', 89612), (True, '2', '2', 89613), (True, '16', '16', 89614), (True, '15', '15', 89615), (True, '894', '894', 89616), (True, '8581', '8581', 89617), (True, '125292', '125292', 89618), (True, '667250', '667250', 89619), (True, '4394826', '4394826', 89620), (True, '80104272', '80104272', 89621), (True, '710490435', '710490435', 89622), (True, '1999999998', '1999999998', 89623), (True, '2000000000', '2000000000', 89624), (True, '1000000000', '1000000000', 89625), (True, '1000000001', '1000000001', 89626), (True, '1000000002', '1000000002', 89627), (True, '1000000000', '1000000000', 89628), (True, '100000001', '100000001', 89629), (True, '1000000000', '1000000000', 89630), (True, '1000000000', '1000000000', 89631), (True, '1999999994', '1999999994', 89632), (True, '1000000000', '1000000000', 89633), (True, '999999985', '999999985', 89634), (True, '999999984', '999999984', 89635), (True, '666666667', '666666667', 89636), (True, '1980000000', '1980000000', 89637), (True, '48', '48', 89638), (True, '123458', '123458', 89639), (True, '222', '222', 89640), (True, '878788', '878788', 89641), (True, '122', '122', 89642), (True, '229028', '229028', 89643), (True, '1000000000', '1000000000', 89644), (True, '999999998', '999999998', 89645), (True, '100000010', '100000010', 89646)]",True,Accecpted,0.5598141675835149,0.9723320158102768,False,0.0,False,"def func(*args):
	
	x = args[0]
	x = str.split(x, ' ')
	n = int(x[0])
	m = int(x[1])
	if ((n % m) is 0):
	    print((n + m))
	else:
	    p = (n // m)
	    while True:
	        temp = (p * m)
	        if (temp > n):
	            print(temp)
	            break
	        p += 1
"
2720898,28287578,"s = input()
l = list(s)
#print(l)
temp = []
flag = 0
h = -1
e = 0
L = 0
countl = 0
o = 0
for i in range(len(l)):
    if l[i]==""h"" and h == -1:
            temp.append(l[i])
            h = i
            break
#print(h)
if h != -1:
    for i in range(h, len(l)):
        if l[i]==""e"" and e == 0:
            temp.append(l[i])
            e = i
            break
else:
    flag = 1
#print(e)
if e!=0:
    for i in range(e, len(l)):
        if l[i]==""l"" and countl!=2:
            temp.append(l[i])
            countl+=1
            L = i
else:
    flag = 1
#print(countl)
#print(L)
if countl==2:
    for i in range(L, len(l)):
        if l[i]==""o"":
            temp.append(l[i])
            o = i
            break
else:
    flag = 1

if o == 0:
    flag = 1
#print(temp)
if flag == 0:
    print(""YES"")
else:
    print(""NO"")",6048,5424,62,7/4/17 21:42,51,2335,1,8,"[(True, 'YES', 'YES', 208922), (True, 'NO', 'NO', 208923), (True, 'YES', 'YES', 208924), (True, 'YES', 'YES', 208925), (True, 'YES', 'YES', 208926), (True, 'NO', 'NO', 208927), (True, 'NO', 'NO', 208928), (True, 'YES', 'YES', 208929), (True, 'YES', 'YES', 208930), (True, 'YES', 'YES', 208931), (True, 'YES', 'YES', 208932), (True, 'NO', 'NO', 208933), (True, 'YES', 'YES', 208934), (True, 'YES', 'YES', 208935), (True, 'NO', 'NO', 208936), (True, 'YES', 'YES', 208937), (True, 'YES', 'YES', 208938), (True, 'NO', 'NO', 208939), (True, 'NO', 'NO', 208940), (True, 'YES', 'YES', 208941), (True, 'YES', 'YES', 208942), (True, 'NO', 'NO', 208943), (True, 'YES', 'YES', 208944), (True, 'YES', 'YES', 208945), (True, 'YES', 'YES', 208946), (True, 'YES', 'YES', 208947), (True, 'YES', 'YES', 208948), (True, 'YES', 'YES', 208949), (True, 'YES', 'YES', 208950), (True, 'YES', 'YES', 208951), (True, 'NO', 'NO', 208952), (True, 'NO', 'NO', 208953), (True, 'NO', 'NO', 208954), (True, 'YES', 'YES', 208955), (True, 'NO', 'NO', 208956), (True, 'YES', 'YES', 208957), (True, 'NO', 'NO', 208958), (True, 'NO', 'NO', 208959), (True, 'NO', 'NO', 208960), (True, 'YES', 'YES', 208961)]",True,Accecpted,0.9036655941315044,0.9723040659988216,False,0.0,False,"def func(*args):
	
	s = args[0]
	l = list(s)
	temp = []
	flag = 0
	h = (- 1)
	e = 0
	L = 0
	countl = 0
	o = 0
	for i in range(len(l)):
	    if ((l[i] == 'h') and (h == (- 1))):
	        temp.append(l[i])
	        h = i
	        break
	if (h != (- 1)):
	    for i in range(h, len(l)):
	        if ((l[i] == 'e') and (e == 0)):
	            temp.append(l[i])
	            e = i
	            break
	else:
	    flag = 1
	if (e != 0):
	    for i in range(e, len(l)):
	        if ((l[i] == 'l') and (countl != 2)):
	            temp.append(l[i])
	            countl += 1
	            L = i
	else:
	    flag = 1
	if (countl == 2):
	    for i in range(L, len(l)):
	        if (l[i] == 'o'):
	            temp.append(l[i])
	            o = i
	            break
	else:
	    flag = 1
	if (o == 0):
	    flag = 1
	if (flag == 0):
	    print('YES')
	else:
	    print('NO')
"
2720897,28287524,"s = input()
l = list(s)
#print(l)
temp = []
flag = 0
h = -1
e = 0
L = 0
countl = 0
o = 0
for i in range(len(l)):
    if l[i]==""h"" and h == -1:
            temp.append(l[i])
            h = i
            break
#print(h)
if h != -1:
    for i in range(h, len(l)):
        if l[i]==""e"" and e == 0:
            temp.append(l[i])
            e = i
            break
else:
    flag = 1
#print(e)
if e!=0:
    for i in range(e, len(l)):
        if l[i]==""l"" and countl!=2:
            temp.append(l[i])
            countl+=1
            L = i
else:
    flag = 1
#print(countl)
#print(L)
if countl==2:
    for i in range(L, len(l)):
        if l[i]==""o"":
            temp.append(l[i])
            break
else:
    flag = 1
#print(temp)
if flag == 0:
    print(""YES"")
else:
    print(""NO"")",6048,5428,61,7/4/17 21:40,47,2335,2,8,"[(True, 'YES', 'YES', 208922), (True, 'NO', 'NO', 208923), (True, 'YES', 'YES', 208924), (True, 'YES', 'YES', 208925), (True, 'YES', 'YES', 208926), (True, 'NO', 'NO', 208927), (True, 'NO', 'NO', 208928), (True, 'YES', 'YES', 208929), (True, 'YES', 'YES', 208930), (True, 'YES', 'YES', 208931), (True, 'YES', 'YES', 208932), (True, 'NO', 'NO', 208933), (True, 'YES', 'YES', 208934), (True, 'YES', 'YES', 208935), (True, 'NO', 'NO', 208936), (True, 'YES', 'YES', 208937), (True, 'YES', 'YES', 208938), (True, 'NO', 'NO', 208939), (True, 'NO', 'NO', 208940), (True, 'YES', 'YES', 208941), (True, 'YES', 'YES', 208942), (True, 'NO', 'NO', 208943), (True, 'YES', 'YES', 208944), (True, 'YES', 'YES', 208945), (True, 'YES', 'YES', 208946), (True, 'YES', 'YES', 208947), (True, 'YES', 'YES', 208948), (True, 'YES', 'YES', 208949), (True, 'YES', 'YES', 208950), (True, 'YES', 'YES', 208951), (True, 'NO', 'NO', 208952), (True, 'NO', 'NO', 208953), (True, 'NO', 'NO', 208954), (True, 'YES', 'YES', 208955), (False, 'YES', 'NO', 208956), (True, 'YES', 'YES', 208957), (False, 'YES', 'NO', 208958), (False, 'YES', 'NO', 208959), (True, 'NO', 'NO', 208960), (True, 'YES', 'YES', 208961)]",False,Wrong Answer,0.9036655941315044,0.9723040659988216,False,0.075,False,"def func(*args):
	
	s = args[0]
	l = list(s)
	temp = []
	flag = 0
	h = (- 1)
	e = 0
	L = 0
	countl = 0
	o = 0
	for i in range(len(l)):
	    if ((l[i] == 'h') and (h == (- 1))):
	        temp.append(l[i])
	        h = i
	        break
	if (h != (- 1)):
	    for i in range(h, len(l)):
	        if ((l[i] == 'e') and (e == 0)):
	            temp.append(l[i])
	            e = i
	            break
	else:
	    flag = 1
	if (e != 0):
	    for i in range(e, len(l)):
	        if ((l[i] == 'l') and (countl != 2)):
	            temp.append(l[i])
	            countl += 1
	            L = i
	else:
	    flag = 1
	if (countl == 2):
	    for i in range(L, len(l)):
	        if (l[i] == 'o'):
	            temp.append(l[i])
	            break
	else:
	    flag = 1
	if (flag == 0):
	    print('YES')
	else:
	    print('NO')
"
3043935,26048118,"def get_len( n ):
  if n <= 1:
    return 1
  return get_len( n // 2 ) * 2 + 1

def dvcq( n, ll, rr ):
  if ll == rr:
    return 0
  if n <= 1:
    return n
  mid = get_len( n // 2 )
  if rr <= mid:
    return dvcq( n // 2, ll, rr )
  elif mid < ll:
    return dvcq( n // 2, ll - ( mid + 1 ), rr - ( mid + 1 ) )
  else:
    return ( n & 1 ) + dvcq( n // 2, ll, mid ) + dvcq( n // 2, 0, rr - ( mid + 1 ) )

N, L, R = map( int, input().split() )

print( dvcq( N, L - 1, R ) )",4797,5436,109,4/1/17 12:13,41,2596,1,8,"[(True, '4', '4', 222389), (True, '5', '5', 222390), (True, '20', '20', 222391), (True, '67', '67', 222392), (True, '78355', '78355', 222393), (True, '22239', '22239', 222394), (True, '42439', '42439', 222395), (True, '16565', '16565', 222396), (True, '336', '336', 222397), (True, '2124', '2124', 222398), (True, '311', '311', 222399), (True, '13253', '13253', 222400), (True, '88609', '88609', 222401), (True, '73585', '73585', 222402), (True, '64965', '64965', 222403), (True, '41868', '41868', 222404), (True, '36004', '36004', 222405), (True, '44142', '44142', 222406), (True, '69369', '69369', 222407), (True, '2618', '2618', 222408), (True, '80707', '80707', 222409), (True, '47105', '47105', 222410), (True, '46933', '46933', 222411), (True, '0', '0', 222412), (True, '1', '1', 222413), (True, '2', '2', 222414), (True, '5', '5', 222415), (True, '100001', '100001', 222416), (True, '100001', '100001', 222417), (True, '1000', '1000', 222418), (True, '1', '1', 222419), (True, '0', '0', 222420), (True, '1', '1', 222421)]",True,Accecpted,0.8988135505410381,0.9722772277227724,False,0.0,False,"def func(*args):
	
	
	def get_len(n):
	    if (n <= 1):
	        return 1
	    return ((get_len((n // 2)) * 2) + 1)
	
	def dvcq(n, ll, rr):
	    if (ll == rr):
	        return 0
	    if (n <= 1):
	        return n
	    mid = get_len((n // 2))
	    if (rr <= mid):
	        return dvcq((n // 2), ll, rr)
	    elif (mid < ll):
	        return dvcq((n // 2), (ll - (mid + 1)), (rr - (mid + 1)))
	    else:
	        return (((n & 1) + dvcq((n // 2), ll, mid)) + dvcq((n // 2), 0, (rr - (mid + 1))))
	(N, L, R) = map(int, args[0].split())
	print(dvcq(N, (L - 1), R))
"
3043934,26048055,"def get_len( n ):
  if n <= 1:
    return 1
  return get_len( n // 2 ) * 2 + 1

def dvcq( n, ll, rr ):
  if ll == rr:
    return 0
  if n <= 1:
    return n
  mid = get_len( n // 2 )
  if rr <= mid:
    return dvcq( n // 2, ll, rr )
  elif mid < ll:
    return dvcq( n // 2, ll - mid, rr - mid )
  else:
    return ( n & 1 ) + dvcq( n // 2, ll, mid ) + dvcq( n // 2, 0, rr - ( mid + 1 ) )

N, L, R = map( int, input().split() )

print( dvcq( N, L - 1, R ) )",4797,4468,46,4/1/17 12:10,41,2596,2,8,"[(True, '4', '4', 222389), (True, '5', '5', 222390), (False, '19', '20', 222391), (False, '66', '67', 222392), (False, '78349', '78355', 222393), (False, '22233', '22239', 222394), (False, '42434', '42439', 222395), (False, '16562', '16565', 222396), (False, '335', '336', 222397), (False, '2121', '2124', 222398), (False, '309', '311', 222399), (False, '13250', '13253', 222400), (False, '88604', '88609', 222401), (False, '73578', '73585', 222402), (False, '64954', '64965', 222403), (False, '41867', '41868', 222404), (False, '36002', '36004', 222405), (False, '44137', '44142', 222406), (False, '69362', '69369', 222407), (False, '2614', '2618', 222408), (False, '80699', '80707', 222409), (False, '47100', '47105', 222410), (False, '46923', '46933', 222411), (True, '0', '0', 222412), (True, '1', '1', 222413), (True, '2', '2', 222414), (True, '5', '5', 222415), (True, '100001', '100001', 222416), (False, '99961', '100001', 222417), (True, '1000', '1000', 222418), (True, '1', '1', 222419), (True, '0', '0', 222420), (True, '1', '1', 222421)]",False,Wrong Answer,0.8988135505410381,0.9722772277227724,False,0.6666666666666666,False,"def func(*args):
	
	
	def get_len(n):
	    if (n <= 1):
	        return 1
	    return ((get_len((n // 2)) * 2) + 1)
	
	def dvcq(n, ll, rr):
	    if (ll == rr):
	        return 0
	    if (n <= 1):
	        return n
	    mid = get_len((n // 2))
	    if (rr <= mid):
	        return dvcq((n // 2), ll, rr)
	    elif (mid < ll):
	        return dvcq((n // 2), (ll - mid), (rr - mid))
	    else:
	        return (((n & 1) + dvcq((n // 2), ll, mid)) + dvcq((n // 2), 0, (rr - (mid + 1))))
	(N, L, R) = map(int, args[0].split())
	print(dvcq(N, (L - 1), R))
"
2033148,28979310,"s=str(input())
s=set(s)
if(len(s)%2==0):
    print(""CHAT WITH HER!"")
else:
    print (""IGNORE HIM!"")",61019,4520,154,7/30/17 2:02,6,1804,1,8,"[(True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178195), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178196), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178197), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178198), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178199), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178200), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178201), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178202), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178203), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178204), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178205), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178206), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178207), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178208), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178209), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178210), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178211), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178212), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178213), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178214), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178215), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178216), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178217), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178218), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178219), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178220), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178221), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178222), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178223), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178224), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178225), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178226), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178227), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178228), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178229), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178230), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178231), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178232), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178233), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178234), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178235), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178236), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178237), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178238), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178239), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178240), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178241), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178242), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178243), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178244), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178245), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178246), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178247), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178248), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178249), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178250), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178251), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178252), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178253), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178254), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178255), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178256), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178257), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178258), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178259), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178260), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178261), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178262), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178263), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178264), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178265), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178266), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178267), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178268), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178269), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178270), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178271), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178272), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178273), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178274), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178275), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178276), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178277), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178278), (True, 'CHAT WITH HER!', 'CHAT WITH HER!', 178279)]",True,Accecpted,0.587728372510532,0.9722222222222222,False,0.0,False,"def func(*args):
	
	s = str(args[0])
	s = set(s)
	if ((len(s) % 2) == 0):
	    print('CHAT WITH HER!')
	else:
	    print('IGNORE HIM!')
"
1944506,25296631,"l=list(map(int,input().split()))

c=((l[0]*l[1])/l[2])**(1/2)
a=l[0]/c
b=l[1]/a
print(round((a+b+c)*4))",21860,4468,122,3/6/17 18:45,6,1738,2,8,"[(True, '12', '12', 173163), (True, '28', '28', 173164), (False, '52', '68', 173165), (False, '42', '56', 173166), (False, '181', '184', 173167), (False, '305', '308', 173168), (False, '515', '380', 173169), (False, '131', '184', 173170), (False, '367', '444', 173171), (False, '197', '120', 173172), (True, '40008', '40008', 173173), (False, '336', '332', 173174), (False, '318', '528', 173175), (False, '1973', '740', 173176), (False, '41', '60', 173177), (False, '832', '856', 173178), (False, '316', '336', 173179), (False, '3228', '1308', 173180), (True, '1736', '1736', 173181), (False, '17916', '8964', 173182), (False, '49276', '16436', 173183), (True, '1200', '1200', 173184), (False, '28988', '14500', 173185), (True, '1188', '1188', 173186), (False, '40004', '40008', 173187), (True, '36', '36', 173188), (True, '1184', '1184', 173189)]",False,Wrong Answer,9.283142785759642e-155,0.9722222222222222,False,0.7037037037037037,False,"def func(*args):
	
	l = list(map(int, args[0].split()))
	c = (((l[0] * l[1]) / l[2]) ** (1 / 2))
	a = (l[0] / c)
	b = (l[1] / a)
	print(round((((a + b) + c) * 4)))
"
1944507,25296919,"l=list(map(int,input().split()))

a=((l[0]*l[1])/l[2])**(1/2)
c=l[0]/a
b=l[1]/a
print(round((a+b+c)*4))",21860,4516,124,3/6/17 19:02,6,1738,1,8,"[(True, '12', '12', 173163), (True, '28', '28', 173164), (True, '68', '68', 173165), (True, '56', '56', 173166), (True, '184', '184', 173167), (True, '308', '308', 173168), (True, '380', '380', 173169), (True, '184', '184', 173170), (True, '444', '444', 173171), (True, '120', '120', 173172), (True, '40008', '40008', 173173), (True, '332', '332', 173174), (True, '528', '528', 173175), (True, '740', '740', 173176), (True, '60', '60', 173177), (True, '856', '856', 173178), (True, '336', '336', 173179), (True, '1308', '1308', 173180), (True, '1736', '1736', 173181), (True, '8964', '8964', 173182), (True, '16436', '16436', 173183), (True, '1200', '1200', 173184), (True, '14500', '14500', 173185), (True, '1188', '1188', 173186), (True, '40008', '40008', 173187), (True, '36', '36', 173188), (True, '1184', '1184', 173189)]",True,Accecpted,9.283142785759642e-155,0.9722222222222222,False,0.0,False,"def func(*args):
	
	l = list(map(int, args[0].split()))
	a = (((l[0] * l[1]) / l[2]) ** (1 / 2))
	c = (l[0] / a)
	b = (l[1] / a)
	print(round((((a + b) + c) * 4)))
"
2033147,28979305,"s=str(input())
s=set(s)
if(len(s)%2==0):
    print
    (""CHAT WITH HER!"")
else:
    print (""IGNORE HIM!"")",61019,4468,92,7/30/17 2:00,7,1804,2,8,"[(False, '', 'CHAT WITH HER!', 178195), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178196), (False, '', 'CHAT WITH HER!', 178197), (False, '', 'CHAT WITH HER!', 178198), (False, '', 'CHAT WITH HER!', 178199), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178200), (False, '', 'CHAT WITH HER!', 178201), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178202), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178203), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178204), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178205), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178206), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178207), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178208), (False, '', 'CHAT WITH HER!', 178209), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178210), (False, '', 'CHAT WITH HER!', 178211), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178212), (False, '', 'CHAT WITH HER!', 178213), (False, '', 'CHAT WITH HER!', 178214), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178215), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178216), (False, '', 'CHAT WITH HER!', 178217), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178218), (False, '', 'CHAT WITH HER!', 178219), (False, '', 'CHAT WITH HER!', 178220), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178221), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178222), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178223), (False, '', 'CHAT WITH HER!', 178224), (False, '', 'CHAT WITH HER!', 178225), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178226), (False, '', 'CHAT WITH HER!', 178227), (False, '', 'CHAT WITH HER!', 178228), (False, '', 'CHAT WITH HER!', 178229), (False, '', 'CHAT WITH HER!', 178230), (False, '', 'CHAT WITH HER!', 178231), (False, '', 'CHAT WITH HER!', 178232), (False, '', 'CHAT WITH HER!', 178233), (False, '', 'CHAT WITH HER!', 178234), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178235), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178236), (False, '', 'CHAT WITH HER!', 178237), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178238), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178239), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178240), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178241), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178242), (False, '', 'CHAT WITH HER!', 178243), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178244), (False, '', 'CHAT WITH HER!', 178245), (False, '', 'CHAT WITH HER!', 178246), (False, '', 'CHAT WITH HER!', 178247), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178248), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178249), (False, '', 'CHAT WITH HER!', 178250), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178251), (False, '', 'CHAT WITH HER!', 178252), (False, '', 'CHAT WITH HER!', 178253), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178254), (False, '', 'CHAT WITH HER!', 178255), (False, '', 'CHAT WITH HER!', 178256), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178257), (False, '', 'CHAT WITH HER!', 178258), (False, '', 'CHAT WITH HER!', 178259), (False, '', 'CHAT WITH HER!', 178260), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178261), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178262), (False, '', 'CHAT WITH HER!', 178263), (False, '', 'CHAT WITH HER!', 178264), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178265), (False, '', 'CHAT WITH HER!', 178266), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178267), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178268), (False, '', 'CHAT WITH HER!', 178269), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178270), (False, '', 'CHAT WITH HER!', 178271), (False, '', 'CHAT WITH HER!', 178272), (False, '', 'CHAT WITH HER!', 178273), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178274), (False, '', 'CHAT WITH HER!', 178275), (False, '', 'CHAT WITH HER!', 178276), (True, 'IGNORE HIM!', 'IGNORE HIM!', 178277), (False, '', 'CHAT WITH HER!', 178278), (False, '', 'CHAT WITH HER!', 178279)]",False,Wrong Answer,0.587728372510532,0.9722222222222222,False,0.5411764705882353,False,"def func(*args):
	
	s = str(args[0])
	s = set(s)
	if ((len(s) % 2) == 0):
	    print
	    'CHAT WITH HER!'
	else:
	    print('IGNORE HIM!')
"
3153060,28469256,"(a, b) = (int(i) for i in input().split())
(c, d) = (int(i) for i in input().split())

br = -1
for k in range(1000000):
	n = ((d-b+c*k)/a)
	if n>=0 and not n%1:
		br = k
		print(br)
		break
if br!=-1:
	print(d+c*br)
else:
	print(-1)",103698,5420,31,7/12/17 12:25,27,2697,2,8,"[(False, '7\n82', '82', 227721), (True, '-1', '-1', 227722), (False, '13\n1222', '1222', 227723), (False, '50\n1748', '1748', 227724), (False, '2\n211', '211', 227725), (False, '6\n301', '301', 227726), (False, '35\n3414', '3414', 227727), (False, '20\n1014', '1014', 227728), (False, '7\n718', '718', 227729), (True, '-1', '-1', 227730), (False, '12\n1255', '1255', 227731), (False, '17\n1278', '1278', 227732), (False, '10\n209', '209', 227733), (False, '31\n2321', '2321', 227734), (True, '-1', '-1', 227735), (False, '14\n1156', '1156', 227736), (True, '-1', '-1', 227737), (False, '17\n1346', '1346', 227738), (False, '23\n789', '789', 227739), (True, '-1', '-1', 227740), (False, '18\n674', '674', 227741), (False, '4\n364', '364', 227742), (False, '1\n48', '48', 227743), (False, '70\n5967', '5967', 227744), (False, '6\n317', '317', 227745), (False, '3\n331', '331', 227746), (False, '34\n1410', '1410', 227747), (True, '-1', '-1', 227748), (False, '8\n427', '427', 227749), (False, '35\n3483', '3483', 227750), (True, '-1', '-1', 227751), (False, '36\n204', '204', 227752), (False, '0\n100', '100', 227753), (False, '0\n1', '1', 227754), (False, '0\n100', '100', 227755), (False, '1\n101', '101', 227756), (False, '97\n9703', '9703', 227757), (False, '97\n9605', '9605', 227758), (False, '48\n4852', '4852', 227759), (True, '-1', '-1', 227760), (False, '0\n2', '2', 227761), (False, '0\n5', '5', 227762), (False, '0\n3', '3', 227763), (True, '-1', '-1', 227764), (True, '-1', '-1', 227765), (True, '-1', '-1', 227766), (True, '-1', '-1', 227767), (False, '0\n99', '99', 227768), (False, '0\n5', '5', 227769), (False, '33\n100', '100', 227770), (True, '-1', '-1', 227771), (False, '0\n20', '20', 227772), (False, '0\n10', '10', 227773), (True, '-1', '-1', 227774), (False, '0\n100', '100', 227775), (False, '6\n319', '319', 227776), (False, '2\n82', '82', 227777), (False, '0\n14', '14', 227778)]",False,Wrong Answer,0.935369573102062,0.9721115537848606,False,0.7586206896551724,False,"def func(*args):
	
	(a, b) = (int(i) for i in args[0].split())
	(c, d) = (int(i) for i in args[1].split())
	br = (- 1)
	for k in range(1000000):
	    n = (((d - b) + (c * k)) / a)
	    if ((n >= 0) and (not (n % 1))):
	        br = k
	        print(br)
	        break
	if (br != (- 1)):
	    print((d + (c * br)))
	else:
	    print((- 1))
"
3153061,28469267,"(a, b) = (int(i) for i in input().split())
(c, d) = (int(i) for i in input().split())

br = -1
for k in range(1000000):
	n = ((d-b+c*k)/a)
	if n>=0 and not n%1:
		br = k
		break
if br!=-1:
	print(d+c*br)
else:
	print(-1)",103698,5436,592,7/12/17 12:26,25,2697,1,8,"[(True, '82', '82', 227721), (True, '-1', '-1', 227722), (True, '1222', '1222', 227723), (True, '1748', '1748', 227724), (True, '211', '211', 227725), (True, '301', '301', 227726), (True, '3414', '3414', 227727), (True, '1014', '1014', 227728), (True, '718', '718', 227729), (True, '-1', '-1', 227730), (True, '1255', '1255', 227731), (True, '1278', '1278', 227732), (True, '209', '209', 227733), (True, '2321', '2321', 227734), (True, '-1', '-1', 227735), (True, '1156', '1156', 227736), (True, '-1', '-1', 227737), (True, '1346', '1346', 227738), (True, '789', '789', 227739), (True, '-1', '-1', 227740), (True, '674', '674', 227741), (True, '364', '364', 227742), (True, '48', '48', 227743), (True, '5967', '5967', 227744), (True, '317', '317', 227745), (True, '331', '331', 227746), (True, '1410', '1410', 227747), (True, '-1', '-1', 227748), (True, '427', '427', 227749), (True, '3483', '3483', 227750), (True, '-1', '-1', 227751), (True, '204', '204', 227752), (True, '100', '100', 227753), (True, '1', '1', 227754), (True, '100', '100', 227755), (True, '101', '101', 227756), (True, '9703', '9703', 227757), (True, '9605', '9605', 227758), (True, '4852', '4852', 227759), (True, '-1', '-1', 227760), (True, '2', '2', 227761), (True, '5', '5', 227762), (True, '3', '3', 227763), (True, '-1', '-1', 227764), (True, '-1', '-1', 227765), (True, '-1', '-1', 227766), (True, '-1', '-1', 227767), (True, '99', '99', 227768), (True, '5', '5', 227769), (True, '100', '100', 227770), (True, '-1', '-1', 227771), (True, '20', '20', 227772), (True, '10', '10', 227773), (True, '-1', '-1', 227774), (True, '100', '100', 227775), (True, '319', '319', 227776), (True, '82', '82', 227777), (True, '14', '14', 227778)]",True,Accecpted,0.935369573102062,0.9721115537848606,False,0.0,False,"def func(*args):
	
	(a, b) = (int(i) for i in args[0].split())
	(c, d) = (int(i) for i in args[1].split())
	br = (- 1)
	for k in range(1000000):
	    n = (((d - b) + (c * k)) / a)
	    if ((n >= 0) and (not (n % 1))):
	        br = k
	        break
	if (br != (- 1)):
	    print((d + (c * br)))
	else:
	    print((- 1))
"
1309591,27180721,"s=input()

if len(s)==1:
    s=s.capitalize()
else:
    if s[0].islower() and s[1:].isupper():
        s=s.swapcase()
    if s.isupper():
        s=s.swapcase()
print(s)",34948,0,46,5/17/17 16:38,10,1187,2,8,"[(True, 'Caps', 'Caps', 141548), (True, 'Lock', 'Lock', 141549), (True, 'cAPSlOCK', 'cAPSlOCK', 141550), (True, 'CAPs', 'CAPs', 141551), (True, 'LoCK', 'LoCK', 141552), (True, 'oops', 'oops', 141553), (True, 'oops', 'oops', 141554), (True, 'A', 'A', 141555), (False, 'A', 'a', 141556), (True, 'Aa', 'Aa', 141557), (True, 'Zz', 'Zz', 141558), (True, 'Az', 'Az', 141559), (True, 'Za', 'Za', 141560), (True, 'aaa', 'aaa', 141561), (True, 'AAa', 'AAa', 141562), (True, 'AaR', 'AaR', 141563), (True, 'Tdr', 'Tdr', 141564), (True, 'Atf', 'Atf', 141565), (True, 'fYd', 'fYd', 141566), (True, 'dsA', 'dsA', 141567), (True, 'fru', 'fru', 141568), (True, 'Hybkf', 'Hybkf', 141569), (True, 'XweAR', 'XweAR', 141570), (True, 'mogqx', 'mogqx', 141571), (True, 'eOhEi', 'eOhEi', 141572), (True, 'nkdku', 'nkdku', 141573), (True, 'zcnko', 'zcnko', 141574), (True, 'lcccd', 'lcccd', 141575), (True, 'vwmvg', 'vwmvg', 141576), (True, 'lvchf', 'lvchf', 141577), (True, 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 141578), (True, 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 141579), (True, 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 141580), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141581), (True, 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 141582), (True, 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 141583), (True, 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 141584), (True, 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 141585), (True, 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 141586), (True, 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 141587), (True, 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 141588), (True, 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 141589), (True, 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 141590), (True, 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 141591), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141592), (True, 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 141593), (True, 'aBACABa', 'aBACABa', 141594), (True, 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 141595), (True, 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 141596), (True, 'Dddddddddddddd', 'Dddddddddddddd', 141597), (True, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 141598), (True, 'Z', 'Z', 141599), (True, 'az', 'az', 141600), (False, 'Z', 'z', 141601), (True, 'Aaaaa', 'Aaaaa', 141602), (False, 'F', 'f', 141603)]",False,Wrong Answer,0.7825422900366437,0.9717514124293786,False,0.0535714285714285,False,"def func(*args):
	
	s = args[0]
	if (len(s) == 1):
	    s = s.capitalize()
	else:
	    if (s[0].islower() and s[1:].isupper()):
	        s = s.swapcase()
	    if s.isupper():
	        s = s.swapcase()
	print(s)
"
1309594,27180760,"s=input()

if len(s)==1:
    s=s.swapcase()
else:
    if s[0].islower() and s[1:].isupper():
        s=s.swapcase()
    if s.isupper():
        s=s.swapcase()
print(s)",34948,0,62,5/17/17 16:39,10,1187,1,8,"[(True, 'Caps', 'Caps', 141548), (True, 'Lock', 'Lock', 141549), (True, 'cAPSlOCK', 'cAPSlOCK', 141550), (True, 'CAPs', 'CAPs', 141551), (True, 'LoCK', 'LoCK', 141552), (True, 'oops', 'oops', 141553), (True, 'oops', 'oops', 141554), (True, 'A', 'A', 141555), (True, 'a', 'a', 141556), (True, 'Aa', 'Aa', 141557), (True, 'Zz', 'Zz', 141558), (True, 'Az', 'Az', 141559), (True, 'Za', 'Za', 141560), (True, 'aaa', 'aaa', 141561), (True, 'AAa', 'AAa', 141562), (True, 'AaR', 'AaR', 141563), (True, 'Tdr', 'Tdr', 141564), (True, 'Atf', 'Atf', 141565), (True, 'fYd', 'fYd', 141566), (True, 'dsA', 'dsA', 141567), (True, 'fru', 'fru', 141568), (True, 'Hybkf', 'Hybkf', 141569), (True, 'XweAR', 'XweAR', 141570), (True, 'mogqx', 'mogqx', 141571), (True, 'eOhEi', 'eOhEi', 141572), (True, 'nkdku', 'nkdku', 141573), (True, 'zcnko', 'zcnko', 141574), (True, 'lcccd', 'lcccd', 141575), (True, 'vwmvg', 'vwmvg', 141576), (True, 'lvchf', 'lvchf', 141577), (True, 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 'iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo', 141578), (True, 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 'obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg', 141579), (True, 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 'ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs', 141580), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141581), (True, 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 'Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq', 141582), (True, 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 'KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR', 141583), (True, 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 'ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE', 141584), (True, 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 'TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ', 141585), (True, 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 'xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm', 141586), (True, 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 'udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm', 141587), (True, 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 'jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg', 141588), (True, 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 'vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc', 141589), (True, 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 'pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv', 141590), (True, 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 'upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect', 141591), (True, 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 'Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype', 141592), (True, 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 'JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu', 141593), (True, 'aBACABa', 'aBACABa', 141594), (True, 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 'AAAAAAAAAAAAAAAAAAAAAAAAaa', 141595), (True, 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 141596), (True, 'Dddddddddddddd', 'Dddddddddddddd', 141597), (True, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 141598), (True, 'Z', 'Z', 141599), (True, 'az', 'az', 141600), (True, 'z', 'z', 141601), (True, 'Aaaaa', 'Aaaaa', 141602), (True, 'f', 'f', 141603)]",True,Accecpted,0.7825422900366437,0.9717514124293786,False,0.0,False,"def func(*args):
	
	s = args[0]
	if (len(s) == 1):
	    s = s.swapcase()
	else:
	    if (s[0].islower() and s[1:].isupper()):
	        s = s.swapcase()
	    if s.isupper():
	        s = s.swapcase()
	print(s)
"
2254305,28763589,"n, t = map(int, input().split())
ppl = list(input())
for i in range(t):
    p = 0
    for z in range(len(ppl)-1):
        if p:
            p = 0
            continue
        if ppl[z] == ""B"" and ppl[z+1] == ""G"":
            ppl[z], ppl[z+1] = ppl[z+1], ppl[z]
            p = 1
ppl = """".join(ppl)
print(ppl)",60976,4520,124,7/21/17 23:27,13,1975,1,8,"[(True, 'GBGGB', 'GBGGB', 188827), (True, 'GGBGB', 'GGBGB', 188828), (True, 'GGGB', 'GGGB', 188829), (True, 'BB', 'BB', 188830), (True, 'GB', 'GB', 188831), (True, 'GBBGBB', 'GBBGBB', 188832), (True, 'GGBGBBBB', 'GGBGBBBB', 188833), (True, 'GBBBBBGBBB', 'GBBBBBGBBB', 188834), (True, 'GGGGGGGGBGGBGGBBBBBBBB', 'GGGGGGGGBGGBGGBBBBBBBB', 188835), (True, 'GGBGBGBGBGBGGGBBGBGBGBGBBBGBGBGBGBGBGBGBGBGBGGBGBB', 'GGBGBGBGBGBGGGBBGBGBGBGBBBGBGBGBGBGBGBGBGBGBGGBGBB', 188836), (True, 'GGGGGGGGGGGGBGGBGBGBGBGBGGGGGGBGBGBGBGBGBGGBGGBGBB', 'GGGGGGGGGGGGBGGBGBGBGBGBGGGGGGBGBGBGBGBGBGGBGGBGBB', 188837), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBBBBB', 188838), (True, 'GGGGGGGGGGBBBBBBBBBB', 'GGGGGGGGGGBBBBBBBBBB', 188839), (True, 'GGGGGGGBGBGBGGGGGBGBBBBBBBB', 'GGGGGGGBGBGBGGGGGBGBBBBBBBB', 188840), (True, 'GGGGGGGGGGGBGGGGGBBGBGBGBGBGBGBGBGBGBGBGBBBBBB', 'GGGGGGGGGGGBGGGGGBBGBGBGBGBGBGBGBGBGBGBGBBBBBB', 188841), (True, 'GGGGBBBBBGBGBGBGBBBGBBBBBBGBBBBBBBBBBBBBBBBBBBBBBB', 'GGGGBBBBBGBGBGBGBBBGBBBBBBGBBBBBBBBBBBBBBBBBBBBBBB', 188842), (True, 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188843), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 188844), (True, 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBB', 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBB', 188845), (True, 'GGGGGGGGGGGGGGGGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 'GGGGGGGGGGGGGGGGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 188846), (True, 'B', 'B', 188847), (True, 'G', 'G', 188848), (True, 'B', 'B', 188849), (True, 'G', 'G', 188850), (True, 'GGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'GGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188851), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBB', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBB', 188852), (True, 'GGGBBB', 'GGGBBB', 188853), (True, 'GGBBBBGBGBGBGGGBGBGGGBGBBB', 'GGBBBBGBGBGBGGGBGBGGGBGBBB', 188854), (True, 'GGGGBGBGGGBBBBBGBGBGBGGGBGGBGBGBGBGBGBGBGBBBBB', 'GGGGBGBGGGBBBBBGBGBGBGGGBGGBGBGBGBGBGBGBGBBBBB', 188855), (True, 'GBBGBGBGBGBGBGBBBBGBBGBBBBBBBBBGBBGBBBBBBBBB', 'GBBGBGBGBGBGBGBBBBGBBGBBBBBBBBBGBBGBBBBBBBBB', 188856), (True, 'GGGGGGGGGGBBBBBBBBBB', 'GGGGGGGGGGBBBBBBBBBB', 188857), (True, 'GGGGGGGGGGGGGGGBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGBBBBBBBBBBBBBBB', 188858), (True, 'GGGGGGGGGGGBBBBBB', 'GGGGGGGGGGGBBBBBB', 188859), (True, 'GGGGGGGGGGGGGGGGGGBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGBBBBBBBBBBBB', 188860), (True, 'GGGGGGGGGGGGBBBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGBBBBBBBBBBBBBBBBBBB', 188861), (True, 'GB', 'GB', 188862), (True, 'GGGGGBBB', 'GGGGGBBB', 188863), (True, 'GGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBB', 188864), (True, 'GGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBB', 188865), (True, 'GGGGGGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188866), (True, 'GGGGGGGGGG', 'GGGGGGGGGG', 188867), (True, 'BBBBBBBBBB', 'BBBBBBBBBB', 188868), (True, 'GGGGGBBBBB', 'GGGGGBBBBB', 188869), (True, 'B', 'B', 188870)]",True,Accecpted,0.9090449225149836,0.9716981132075472,False,0.0,False,"def func(*args):
	
	(n, t) = map(int, args[0].split())
	ppl = list(args[1])
	for i in range(t):
	    p = 0
	    for z in range((len(ppl) - 1)):
	        if p:
	            p = 0
	            continue
	        if ((ppl[z] == 'B') and (ppl[(z + 1)] == 'G')):
	            (ppl[z], ppl[(z + 1)]) = (ppl[(z + 1)], ppl[z])
	            p = 1
	ppl = ''.join(ppl)
	print(ppl)
"
2254304,28763582,"n, t = map(int, input().split())
ppl = list(input())
p = 0
for i in range(t):
    for z in range(len(ppl)-1):
        if p:
            p = 0
            continue
        if ppl[z] == ""B"" and ppl[z+1] == ""G"":
            ppl[z], ppl[z+1] = ppl[z+1], ppl[z]
            p = 1
ppl = """".join(ppl)
print(ppl)",60976,4500,92,7/21/17 23:26,13,1975,2,8,"[(True, 'GBGGB', 'GBGGB', 188827), (True, 'GGBGB', 'GGBGB', 188828), (True, 'GGGB', 'GGGB', 188829), (True, 'BB', 'BB', 188830), (True, 'GB', 'GB', 188831), (False, 'BGBGBB', 'GBBGBB', 188832), (True, 'GGBGBBBB', 'GGBGBBBB', 188833), (True, 'GBBBBBGBBB', 'GBBBBBGBBB', 188834), (True, 'GGGGGGGGBGGBGGBBBBBBBB', 'GGGGGGGGBGGBGGBBBBBBBB', 188835), (True, 'GGBGBGBGBGBGGGBBGBGBGBGBBBGBGBGBGBGBGBGBGBGBGGBGBB', 'GGBGBGBGBGBGGGBBGBGBGBGBBBGBGBGBGBGBGBGBGBGBGGBGBB', 188836), (True, 'GGGGGGGGGGGGBGGBGBGBGBGBGGGGGGBGBGBGBGBGBGGBGGBGBB', 'GGGGGGGGGGGGBGGBGBGBGBGBGGGGGGBGBGBGBGBGBGGBGGBGBB', 188837), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBBBBB', 188838), (True, 'GGGGGGGGGGBBBBBBBBBB', 'GGGGGGGGGGBBBBBBBBBB', 188839), (True, 'GGGGGGGBGBGBGGGGGBGBBBBBBBB', 'GGGGGGGBGBGBGGGGGBGBBBBBBBB', 188840), (True, 'GGGGGGGGGGGBGGGGGBBGBGBGBGBGBGBGBGBGBGBGBBBBBB', 'GGGGGGGGGGGBGGGGGBBGBGBGBGBGBGBGBGBGBGBGBBBBBB', 188841), (True, 'GGGGBBBBBGBGBGBGBBBGBBBBBBGBBBBBBBBBBBBBBBBBBBBBBB', 'GGGGBBBBBGBGBGBGBBBGBBBBBBGBBBBBBBBBBBBBBBBBBBBBBB', 188842), (True, 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188843), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 188844), (True, 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBB', 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBB', 188845), (True, 'GGGGGGGGGGGGGGGGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 'GGGGGGGGGGGGGGGGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG', 188846), (True, 'B', 'B', 188847), (True, 'G', 'G', 188848), (True, 'B', 'B', 188849), (True, 'G', 'G', 188850), (True, 'GGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'GGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188851), (True, 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBB', 'GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBB', 188852), (True, 'GGGBBB', 'GGGBBB', 188853), (True, 'GGBBBBGBGBGBGGGBGBGGGBGBBB', 'GGBBBBGBGBGBGGGBGBGGGBGBBB', 188854), (True, 'GGGGBGBGGGBBBBBGBGBGBGGGBGGBGBGBGBGBGBGBGBBBBB', 'GGGGBGBGGGBBBBBGBGBGBGGGBGGBGBGBGBGBGBGBGBBBBB', 188855), (True, 'GBBGBGBGBGBGBGBBBBGBBGBBBBBBBBBGBBGBBBBBBBBB', 'GBBGBGBGBGBGBGBBBBGBBGBBBBBBBBBGBBGBBBBBBBBB', 188856), (True, 'GGGGGGGGGGBBBBBBBBBB', 'GGGGGGGGGGBBBBBBBBBB', 188857), (True, 'GGGGGGGGGGGGGGGBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGBBBBBBBBBBBBBBB', 188858), (True, 'GGGGGGGGGGGBBBBBB', 'GGGGGGGGGGGBBBBBB', 188859), (True, 'GGGGGGGGGGGGGGGGGGBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGBBBBBBBBBBBB', 188860), (True, 'GGGGGGGGGGGGBBBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGBBBBBBBBBBBBBBBBBBB', 188861), (True, 'GB', 'GB', 188862), (True, 'GGGGGBBB', 'GGGGGBBB', 188863), (True, 'GGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBB', 188864), (True, 'GGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBB', 188865), (True, 'GGGGGGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'GGGGGGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 188866), (True, 'GGGGGGGGGG', 'GGGGGGGGGG', 188867), (True, 'BBBBBBBBBB', 'BBBBBBBBBB', 188868), (True, 'GGGGGBBBBB', 'GGGGGBBBBB', 188869), (True, 'B', 'B', 188870)]",False,Wrong Answer,0.9090449225149836,0.9716981132075472,False,0.0227272727272727,False,"def func(*args):
	
	(n, t) = map(int, args[0].split())
	ppl = list(args[1])
	p = 0
	for i in range(t):
	    for z in range((len(ppl) - 1)):
	        if p:
	            p = 0
	            continue
	        if ((ppl[z] == 'B') and (ppl[(z + 1)] == 'G')):
	            (ppl[z], ppl[(z + 1)]) = (ppl[(z + 1)], ppl[z])
	            p = 1
	ppl = ''.join(ppl)
	print(ppl)
"
1246528,27545739,"a=input()
digits = ('4','7')
def f(n):
  list1=[]
  list2=[]
  for x in range(0,n+1):
    list1.append(x)
    list2.append(x)
  for i in list1:
    j=list(str(i))
    for k in j:
      if k not in digits:
        list2.remove(i)
        break
  return list2

for i in range(0,len(f(int(a)))):
  if int(a)%int((f(int(a)))[i]):
    print(""YES"")
    break
  else:
    i+=1
else:
  print(""NO"")",1560,0,92,6/3/17 16:25,24,1132,2,8,"[(True, 'YES', 'YES', 137749), (True, 'YES', 'YES', 137750), (False, 'YES', 'NO', 137751), (True, 'YES', 'YES', 137752), (True, 'YES', 'YES', 137753), (False, 'YES', 'NO', 137754), (True, 'YES', 'YES', 137755), (True, 'YES', 'YES', 137756), (True, 'YES', 'YES', 137757), (True, 'NO', 'NO', 137758), (True, 'NO', 'NO', 137759), (False, 'NO', 'YES', 137760), (True, 'YES', 'YES', 137761), (True, 'YES', 'YES', 137762), (True, 'YES', 'YES', 137763), (True, 'YES', 'YES', 137764), (False, 'YES', 'NO', 137765), (False, 'YES', 'NO', 137766), (False, 'YES', 'NO', 137767), (False, 'YES', 'NO', 137768), (True, 'YES', 'YES', 137769), (True, 'YES', 'YES', 137770), (True, 'YES', 'YES', 137771), (True, 'YES', 'YES', 137772), (True, 'YES', 'YES', 137773), (True, 'YES', 'YES', 137774), (False, 'YES', 'NO', 137775), (True, 'YES', 'YES', 137776), (True, 'YES', 'YES', 137777), (False, 'YES', 'NO', 137778), (True, 'NO', 'NO', 137779), (True, 'YES', 'YES', 137780), (True, 'YES', 'YES', 137781), (True, 'YES', 'YES', 137782), (True, 'YES', 'YES', 137783), (True, 'YES', 'YES', 137784)]",False,Wrong Answer,0.874678895739835,0.9716494845360824,False,0.25,False,"def func(*args):
	
	a = args[0]
	digits = ('4', '7')
	
	def f(n):
	    list1 = []
	    list2 = []
	    for x in range(0, (n + 1)):
	        list1.append(x)
	        list2.append(x)
	    for i in list1:
	        j = list(str(i))
	        for k in j:
	            if (k not in digits):
	                list2.remove(i)
	                break
	    return list2
	for i in range(0, len(f(int(a)))):
	    if (int(a) % int(f(int(a))[i])):
	        print('YES')
	        break
	    else:
	        i += 1
	else:
	    print('NO')
"
1246529,27545770,"a=int(input())
digits = ('4','7')
def f(n):
  list1=[]
  list2=[]
  for x in range(0,n+1):
    list1.append(x)
    list2.append(x)
  for i in list1:
    j=list(str(i))
    for k in j:
      if k not in digits:
        list2.remove(i)
        break
  return list2

for i in range(0,len(f(a))):
  if int(a)%int((f(a))[i])==0:
    print(""YES"")
    break
  else:
    i+=1
else:
  print(""NO"")",1560,12,124,6/3/17 16:26,24,1132,1,8,"[(True, 'YES', 'YES', 137749), (True, 'YES', 'YES', 137750), (True, 'NO', 'NO', 137751), (True, 'YES', 'YES', 137752), (True, 'YES', 'YES', 137753), (True, 'NO', 'NO', 137754), (True, 'YES', 'YES', 137755), (True, 'YES', 'YES', 137756), (True, 'YES', 'YES', 137757), (True, 'NO', 'NO', 137758), (True, 'NO', 'NO', 137759), (True, 'YES', 'YES', 137760), (True, 'YES', 'YES', 137761), (True, 'YES', 'YES', 137762), (True, 'YES', 'YES', 137763), (True, 'YES', 'YES', 137764), (True, 'NO', 'NO', 137765), (True, 'NO', 'NO', 137766), (True, 'NO', 'NO', 137767), (True, 'NO', 'NO', 137768), (True, 'YES', 'YES', 137769), (True, 'YES', 'YES', 137770), (True, 'YES', 'YES', 137771), (True, 'YES', 'YES', 137772), (True, 'YES', 'YES', 137773), (True, 'YES', 'YES', 137774), (True, 'NO', 'NO', 137775), (True, 'YES', 'YES', 137776), (True, 'YES', 'YES', 137777), (True, 'NO', 'NO', 137778), (True, 'NO', 'NO', 137779), (True, 'YES', 'YES', 137780), (True, 'YES', 'YES', 137781), (True, 'YES', 'YES', 137782), (True, 'YES', 'YES', 137783), (True, 'YES', 'YES', 137784)]",True,Accecpted,0.874678895739835,0.9716494845360824,False,0.0,False,"def func(*args):
	
	a = int(args[0])
	digits = ('4', '7')
	
	def f(n):
	    list1 = []
	    list2 = []
	    for x in range(0, (n + 1)):
	        list1.append(x)
	        list2.append(x)
	    for i in list1:
	        j = list(str(i))
	        for k in j:
	            if (k not in digits):
	                list2.remove(i)
	                break
	    return list2
	for i in range(0, len(f(a))):
	    if ((int(a) % int(f(a)[i])) == 0):
	        print('YES')
	        break
	    else:
	        i += 1
	else:
	    print('NO')
"
1719702,28573219,"n, m = map(int, input().split())
if n != 0 and m != 0:
  print(m, n - 1 + m)
elif m == 0:
  print(n, n)
else:
  print(""Impossible"")",531,4504,122,7/15/17 15:32,7,1530,2,8,"[(True, '2 2', '2 2', 160161), (True, 'Impossible', 'Impossible', 160162), (True, '2 3', '2 3', 160163), (True, '7 8', '7 8', 160164), (True, '10 13', '10 13', 160165), (True, '6 6', '6 6', 160166), (False, '1 7', '7 7', 160167), (True, '0 0', '0 0', 160168), (False, '24 94', '71 94', 160169), (True, '70 85', '70 85', 160170), (True, 'Impossible', 'Impossible', 160171), (True, '1 1', '1 1', 160172), (True, '1 1', '1 1', 160173), (True, '82 144', '82 144', 160174), (True, '26 33', '26 33', 160175), (True, '27 47', '27 47', 160176), (True, 'Impossible', 'Impossible', 160177), (True, '84 129', '84 129', 160178), (True, '96 154', '96 154', 160179), (True, '63028 63028', '63028 63028', 160180), (True, '9458 9458', '9458 9458', 160181), (True, '80236 80236', '80236 80236', 160182), (True, '26666 26666', '26666 26666', 160183), (True, '59617 59617', '59617 59617', 160184), (True, 'Impossible', 'Impossible', 160185), (False, '28217 91244', '63028 91244', 160186), (True, '39163 48620', '39163 48620', 160187), (False, '14868 95103', '80236 95103', 160188), (True, '52747 79412', '52747 79412', 160189), (False, '28452 88068', '59617 88068', 160190), (False, '4158 10205', '6048 10205', 160191), (False, '4210 81035', '76826 81035', 160192), (False, '15156 38411', '23256 38411', 160193), (False, '53035 109241', '56207 109241', 160194), (True, '28740 31376', '28740 31376', 160195), (False, '4445 77859', '73415 77859', 160196), (False, '4498 86516', '82019 86516', 160197), (True, '80204 108652', '80204 108652', 160198), (False, '53323 152549', '99227 152549', 160199), (False, '29028 74684', '45657 74684', 160200), (False, '4733 83340', '78608 83340', 160201), (False, '4786 29823', '25038 29823', 160202), (False, '80492 176307', '95816 176307', 160203), (True, '94024 136269', '94024 136269', 160204), (True, 'Impossible', 'Impossible', 160205), (True, '100000 100000', '100000 100000', 160206), (True, '100000 100000', '100000 100000', 160207), (False, '1 100000', '100000 100000', 160208), (True, '63028 126055', '63028 126055', 160209), (True, '9458 18915', '9458 18915', 160210), (True, '80236 160471', '80236 160471', 160211), (True, '26666 53331', '26666 53331', 160212), (True, '59617 119233', '59617 119233', 160213), (True, '100000 199999', '100000 199999', 160214)]",False,Wrong Answer,0.8658691074049545,0.9716312056737588,False,0.3148148148148148,False,"def func(*args):
	
	(n, m) = map(int, args[0].split())
	if ((n != 0) and (m != 0)):
	    print(m, ((n - 1) + m))
	elif (m == 0):
	    print(n, n)
	else:
	    print('Impossible')
"
1719703,28573244,"n, m = map(int, input().split())
if n != 0 and m != 0:
  print(max(m, n), n - 1 + m)
elif m == 0:
  print(n, n)
else:
  print(""Impossible"")",531,5420,124,7/15/17 15:33,7,1530,1,8,"[(True, '2 2', '2 2', 160161), (True, 'Impossible', 'Impossible', 160162), (True, '2 3', '2 3', 160163), (True, '7 8', '7 8', 160164), (True, '10 13', '10 13', 160165), (True, '6 6', '6 6', 160166), (True, '7 7', '7 7', 160167), (True, '0 0', '0 0', 160168), (True, '71 94', '71 94', 160169), (True, '70 85', '70 85', 160170), (True, 'Impossible', 'Impossible', 160171), (True, '1 1', '1 1', 160172), (True, '1 1', '1 1', 160173), (True, '82 144', '82 144', 160174), (True, '26 33', '26 33', 160175), (True, '27 47', '27 47', 160176), (True, 'Impossible', 'Impossible', 160177), (True, '84 129', '84 129', 160178), (True, '96 154', '96 154', 160179), (True, '63028 63028', '63028 63028', 160180), (True, '9458 9458', '9458 9458', 160181), (True, '80236 80236', '80236 80236', 160182), (True, '26666 26666', '26666 26666', 160183), (True, '59617 59617', '59617 59617', 160184), (True, 'Impossible', 'Impossible', 160185), (True, '63028 91244', '63028 91244', 160186), (True, '39163 48620', '39163 48620', 160187), (True, '80236 95103', '80236 95103', 160188), (True, '52747 79412', '52747 79412', 160189), (True, '59617 88068', '59617 88068', 160190), (True, '6048 10205', '6048 10205', 160191), (True, '76826 81035', '76826 81035', 160192), (True, '23256 38411', '23256 38411', 160193), (True, '56207 109241', '56207 109241', 160194), (True, '28740 31376', '28740 31376', 160195), (True, '73415 77859', '73415 77859', 160196), (True, '82019 86516', '82019 86516', 160197), (True, '80204 108652', '80204 108652', 160198), (True, '99227 152549', '99227 152549', 160199), (True, '45657 74684', '45657 74684', 160200), (True, '78608 83340', '78608 83340', 160201), (True, '25038 29823', '25038 29823', 160202), (True, '95816 176307', '95816 176307', 160203), (True, '94024 136269', '94024 136269', 160204), (True, 'Impossible', 'Impossible', 160205), (True, '100000 100000', '100000 100000', 160206), (True, '100000 100000', '100000 100000', 160207), (True, '100000 100000', '100000 100000', 160208), (True, '63028 126055', '63028 126055', 160209), (True, '9458 18915', '9458 18915', 160210), (True, '80236 160471', '80236 160471', 160211), (True, '26666 53331', '26666 53331', 160212), (True, '59617 119233', '59617 119233', 160213), (True, '100000 199999', '100000 199999', 160214)]",True,Accecpted,0.8658691074049545,0.9716312056737588,False,0.0,False,"def func(*args):
	
	(n, m) = map(int, args[0].split())
	if ((n != 0) and (m != 0)):
	    print(max(m, n), ((n - 1) + m))
	elif (m == 0):
	    print(n, n)
	else:
	    print('Impossible')
"
519071,25451022,"n = int(input())

mn = n//7*2
if n%7 == 6: mn+=1

mx = 2+(n-2)//7*2
if (n-2)%7 == 6: mx+=1
if n==1:
    mn = 0
    mx = 1
    
print(mn,mx)",37866,4524,62,3/13/17 13:14,23,481,1,8,"[(True, '4 4', '4 4', 84433), (True, '0 2', '0 2', 84434), (True, '0 1', '0 1', 84435), (True, '0 2', '0 2', 84436), (True, '0 2', '0 2', 84437), (True, '0 2', '0 2', 84438), (True, '1 2', '1 2', 84439), (True, '2 2', '2 2', 84440), (True, '2 3', '2 3', 84441), (True, '2 4', '2 4', 84442), (True, '2 4', '2 4', 84443), (True, '2 4', '2 4', 84444), (True, '2 4', '2 4', 84445), (True, '3 4', '3 4', 84446), (True, '285714 285715', '285714 285715', 84447), (True, '4 6', '4 6', 84448), (True, '4 6', '4 6', 84449), (True, '4 6', '4 6', 84450), (True, '4 6', '4 6', 84451), (True, '5 6', '5 6', 84452), (True, '6 6', '6 6', 84453), (True, '6 7', '6 7', 84454), (True, '6 8', '6 8', 84455), (True, '6 8', '6 8', 84456), (True, '6 8', '6 8', 84457), (True, '6 8', '6 8', 84458), (True, '7 8', '7 8', 84459), (True, '8 8', '8 8', 84460), (True, '8 9', '8 9', 84461), (True, '8 10', '8 10', 84462), (True, '28 30', '28 30', 84463), (True, '28 29', '28 29', 84464), (True, '28 28', '28 28', 84465), (True, '27 28', '27 28', 84466), (True, '26 28', '26 28', 84467), (True, '26 28', '26 28', 84468), (True, '26 28', '26 28', 84469), (True, '26 28', '26 28', 84470), (True, '26 27', '26 27', 84471), (True, '26 26', '26 26', 84472), (True, '25 26', '25 26', 84473), (True, '24 26', '24 26', 84474), (True, '24 26', '24 26', 84475), (True, '24 26', '24 26', 84476), (True, '24 26', '24 26', 84477), (True, '24 25', '24 25', 84478), (True, '24 24', '24 24', 84479), (True, '23 24', '23 24', 84480), (True, '22 24', '22 24', 84481), (True, '22 24', '22 24', 84482), (True, '22 24', '22 24', 84483), (True, '285 286', '285 286', 84484), (True, '284 286', '284 286', 84485), (True, '284 286', '284 286', 84486), (True, '284 286', '284 286', 84487), (True, '284 286', '284 286', 84488), (True, '284 285', '284 285', 84489), (True, '284 284', '284 284', 84490), (True, '283 284', '283 284', 84491), (True, '282 284', '282 284', 84492), (True, '282 284', '282 284', 84493), (True, '282 284', '282 284', 84494), (True, '282 284', '282 284', 84495), (True, '282 283', '282 283', 84496), (True, '282 282', '282 282', 84497), (True, '281 282', '281 282', 84498), (True, '280 282', '280 282', 84499), (True, '280 282', '280 282', 84500), (True, '280 282', '280 282', 84501), (True, '280 282', '280 282', 84502), (True, '280 281', '280 281', 84503), (True, '280 280', '280 280', 84504), (True, '2856 2858', '2856 2858', 84505), (True, '2856 2858', '2856 2858', 84506), (True, '2856 2858', '2856 2858', 84507), (True, '2856 2857', '2856 2857', 84508), (True, '2856 2856', '2856 2856', 84509), (True, '2855 2856', '2855 2856', 84510), (True, '2854 2856', '2854 2856', 84511), (True, '2854 2856', '2854 2856', 84512), (True, '2854 2856', '2854 2856', 84513), (True, '2854 2856', '2854 2856', 84514), (True, '2854 2855', '2854 2855', 84515), (True, '2854 2854', '2854 2854', 84516), (True, '2853 2854', '2853 2854', 84517), (True, '2852 2854', '2852 2854', 84518), (True, '2852 2854', '2852 2854', 84519), (True, '2852 2854', '2852 2854', 84520), (True, '2852 2854', '2852 2854', 84521), (True, '2852 2853', '2852 2853', 84522), (True, '2852 2852', '2852 2852', 84523), (True, '2851 2852', '2851 2852', 84524), (True, '2850 2852', '2850 2852', 84525), (True, '28570 28572', '28570 28572', 84526), (True, '28570 28572', '28570 28572', 84527), (True, '28570 28572', '28570 28572', 84528), (True, '28570 28572', '28570 28572', 84529), (True, '28570 28571', '28570 28571', 84530), (True, '28570 28570', '28570 28570', 84531), (True, '28569 28570', '28569 28570', 84532), (True, '28568 28570', '28568 28570', 84533), (True, '28568 28570', '28568 28570', 84534), (True, '28568 28570', '28568 28570', 84535), (True, '28568 28570', '28568 28570', 84536), (True, '28568 28569', '28568 28569', 84537), (True, '28568 28568', '28568 28568', 84538), (True, '28567 28568', '28567 28568', 84539), (True, '28566 28568', '28566 28568', 84540), (True, '28566 28568', '28566 28568', 84541), (True, '28566 28568', '28566 28568', 84542), (True, '28566 28568', '28566 28568', 84543), (True, '28566 28567', '28566 28567', 84544), (True, '28566 28566', '28566 28566', 84545), (True, '28565 28566', '28565 28566', 84546), (True, '285714 285714', '285714 285714', 84547), (True, '285713 285714', '285713 285714', 84548), (True, '285712 285714', '285712 285714', 84549), (True, '285712 285714', '285712 285714', 84550), (True, '285712 285714', '285712 285714', 84551), (True, '285712 285714', '285712 285714', 84552), (True, '285712 285713', '285712 285713', 84553), (True, '285712 285712', '285712 285712', 84554), (True, '285711 285712', '285711 285712', 84555), (True, '285710 285712', '285710 285712', 84556), (True, '285710 285712', '285710 285712', 84557), (True, '285710 285712', '285710 285712', 84558), (True, '285710 285712', '285710 285712', 84559), (True, '285710 285711', '285710 285711', 84560), (True, '285710 285710', '285710 285710', 84561), (True, '285709 285710', '285709 285710', 84562), (True, '285708 285710', '285708 285710', 84563), (True, '285708 285710', '285708 285710', 84564), (True, '285708 285710', '285708 285710', 84565), (True, '285708 285710', '285708 285710', 84566), (True, '66892 66893', '66892 66893', 84567), (True, '66892 66892', '66892 66892', 84568), (True, '66891 66892', '66891 66892', 84569), (True, '66890 66892', '66890 66892', 84570), (True, '66890 66892', '66890 66892', 84571), (True, '66890 66892', '66890 66892', 84572), (True, '66890 66892', '66890 66892', 84573), (True, '66890 66891', '66890 66891', 84574), (True, '66890 66890', '66890 66890', 84575), (True, '66889 66890', '66889 66890', 84576), (True, '66888 66890', '66888 66890', 84577), (True, '66888 66890', '66888 66890', 84578), (True, '66888 66890', '66888 66890', 84579), (True, '66888 66890', '66888 66890', 84580), (True, '66888 66889', '66888 66889', 84581), (True, '66888 66888', '66888 66888', 84582), (True, '66887 66888', '66887 66888', 84583), (True, '66886 66888', '66886 66888', 84584), (True, '66886 66888', '66886 66888', 84585), (True, '66886 66888', '66886 66888', 84586), (True, '66886 66888', '66886 66888', 84587), (True, '248151 248152', '248151 248152', 84588), (True, '248150 248152', '248150 248152', 84589), (True, '248150 248152', '248150 248152', 84590), (True, '248150 248152', '248150 248152', 84591), (True, '248150 248152', '248150 248152', 84592), (True, '248150 248151', '248150 248151', 84593), (True, '248150 248150', '248150 248150', 84594), (True, '248149 248150', '248149 248150', 84595), (True, '248148 248150', '248148 248150', 84596), (True, '248148 248150', '248148 248150', 84597), (True, '248148 248150', '248148 248150', 84598), (True, '248148 248150', '248148 248150', 84599), (True, '248148 248149', '248148 248149', 84600), (True, '248148 248148', '248148 248148', 84601), (True, '248147 248148', '248147 248148', 84602), (True, '248146 248148', '248146 248148', 84603), (True, '248146 248148', '248146 248148', 84604), (True, '248146 248148', '248146 248148', 84605), (True, '248146 248148', '248146 248148', 84606), (True, '248146 248147', '248146 248147', 84607), (True, '248146 248146', '248146 248146', 84608), (True, '35260 35262', '35260 35262', 84609), (True, '35260 35262', '35260 35262', 84610), (True, '35260 35261', '35260 35261', 84611), (True, '35260 35260', '35260 35260', 84612), (True, '35259 35260', '35259 35260', 84613), (True, '35258 35260', '35258 35260', 84614), (True, '35258 35260', '35258 35260', 84615), (True, '35258 35260', '35258 35260', 84616), (True, '35258 35260', '35258 35260', 84617), (True, '35258 35259', '35258 35259', 84618), (True, '35258 35258', '35258 35258', 84619), (True, '35257 35258', '35257 35258', 84620), (True, '35256 35258', '35256 35258', 84621), (True, '35256 35258', '35256 35258', 84622), (True, '35256 35258', '35256 35258', 84623), (True, '35256 35258', '35256 35258', 84624), (True, '35256 35257', '35256 35257', 84625), (True, '35256 35256', '35256 35256', 84626), (True, '35255 35256', '35255 35256', 84627), (True, '35254 35256', '35254 35256', 84628), (True, '35254 35256', '35254 35256', 84629), (True, '4 5', '4 5', 84630)]",True,Accecpted,0.8020219183488043,0.9716088328075708,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	mn = ((n // 7) * 2)
	if ((n % 7) == 6):
	    mn += 1
	mx = (2 + (((n - 2) // 7) * 2))
	if (((n - 2) % 7) == 6):
	    mx += 1
	if (n == 1):
	    mn = 0
	    mx = 1
	print(mn, mx)
"
3367540,29294093,"def decode(info):
    for i in map(len, info.split('0')):
        print(i,end='')   
    print()
        
input()      
info = input()
decode(info)",107523,4508,61,8/9/17 0:40,15,2924,1,8,"[(True, '3', '3', 247097), (True, '2031', '2031', 247098), (True, '1', '1', 247099), (True, '100', '100', 247100), (True, '1001', '1001', 247101), (True, '202002000', '202002000', 247102), (True, '100090049', '100090049', 247103), (True, '123456789', '123456789', 247104), (True, '999999999', '999999999', 247105), (True, '1000000000', '1000000000', 247106), (True, '10', '10', 247107), (True, '30', '30', 247108), (True, '11110', '11110', 247109)]",True,Accecpted,0.7881929718099911,0.9716088328075708,False,0.0,False,"def func(*args):
	
	
	def decode(info):
	    for i in map(len, info.split('0')):
	        print(i, end='')
	    print()
	args[0]
	info = args[1]
	decode(info)
"
519070,25450957,"n = int(input())

mn = n//7*2
if mn%7 == 6: mn+=1

mx = 2+(n-2)//7*2
if (mn-2)%7 == 6: mx+=1
if n==1:
    mn = 0
    mx = 1
print(mn,mx)",37866,4476,62,3/13/17 13:10,21,481,2,8,"[(True, '4 4', '4 4', 84433), (True, '0 2', '0 2', 84434), (True, '0 1', '0 1', 84435), (True, '0 2', '0 2', 84436), (True, '0 2', '0 2', 84437), (True, '0 2', '0 2', 84438), (False, '0 2', '1 2', 84439), (True, '2 2', '2 2', 84440), (False, '2 2', '2 3', 84441), (True, '2 4', '2 4', 84442), (True, '2 4', '2 4', 84443), (True, '2 4', '2 4', 84444), (True, '2 4', '2 4', 84445), (False, '2 4', '3 4', 84446), (False, '285714 285714', '285714 285715', 84447), (True, '4 6', '4 6', 84448), (True, '4 6', '4 6', 84449), (True, '4 6', '4 6', 84450), (True, '4 6', '4 6', 84451), (False, '4 6', '5 6', 84452), (False, '7 6', '6 6', 84453), (False, '7 6', '6 7', 84454), (False, '7 8', '6 8', 84455), (False, '7 8', '6 8', 84456), (False, '7 8', '6 8', 84457), (False, '7 8', '6 8', 84458), (True, '7 8', '7 8', 84459), (False, '8 9', '8 8', 84460), (True, '8 9', '8 9', 84461), (False, '8 11', '8 10', 84462), (True, '28 30', '28 30', 84463), (False, '28 28', '28 29', 84464), (True, '28 28', '28 28', 84465), (False, '26 28', '27 28', 84466), (True, '26 28', '26 28', 84467), (True, '26 28', '26 28', 84468), (True, '26 28', '26 28', 84469), (True, '26 28', '26 28', 84470), (False, '26 26', '26 27', 84471), (True, '26 26', '26 26', 84472), (False, '24 26', '25 26', 84473), (True, '24 26', '24 26', 84474), (True, '24 26', '24 26', 84475), (True, '24 26', '24 26', 84476), (True, '24 26', '24 26', 84477), (False, '24 24', '24 25', 84478), (True, '24 24', '24 24', 84479), (False, '22 25', '23 24', 84480), (False, '22 25', '22 24', 84481), (False, '22 25', '22 24', 84482), (False, '22 25', '22 24', 84483), (False, '284 286', '285 286', 84484), (True, '284 286', '284 286', 84485), (True, '284 286', '284 286', 84486), (True, '284 286', '284 286', 84487), (True, '284 286', '284 286', 84488), (False, '284 284', '284 285', 84489), (True, '284 284', '284 284', 84490), (False, '282 284', '283 284', 84491), (True, '282 284', '282 284', 84492), (True, '282 284', '282 284', 84493), (True, '282 284', '282 284', 84494), (True, '282 284', '282 284', 84495), (False, '282 282', '282 283', 84496), (True, '282 282', '282 282', 84497), (False, '280 282', '281 282', 84498), (True, '280 282', '280 282', 84499), (True, '280 282', '280 282', 84500), (True, '280 282', '280 282', 84501), (True, '280 282', '280 282', 84502), (False, '280 280', '280 281', 84503), (True, '280 280', '280 280', 84504), (True, '2856 2858', '2856 2858', 84505), (True, '2856 2858', '2856 2858', 84506), (True, '2856 2858', '2856 2858', 84507), (False, '2856 2856', '2856 2857', 84508), (True, '2856 2856', '2856 2856', 84509), (False, '2854 2856', '2855 2856', 84510), (True, '2854 2856', '2854 2856', 84511), (True, '2854 2856', '2854 2856', 84512), (True, '2854 2856', '2854 2856', 84513), (True, '2854 2856', '2854 2856', 84514), (False, '2854 2854', '2854 2855', 84515), (True, '2854 2854', '2854 2854', 84516), (False, '2852 2854', '2853 2854', 84517), (True, '2852 2854', '2852 2854', 84518), (True, '2852 2854', '2852 2854', 84519), (True, '2852 2854', '2852 2854', 84520), (True, '2852 2854', '2852 2854', 84521), (False, '2852 2852', '2852 2853', 84522), (True, '2852 2852', '2852 2852', 84523), (False, '2850 2853', '2851 2852', 84524), (False, '2850 2853', '2850 2852', 84525), (True, '28570 28572', '28570 28572', 84526), (True, '28570 28572', '28570 28572', 84527), (True, '28570 28572', '28570 28572', 84528), (True, '28570 28572', '28570 28572', 84529), (False, '28570 28570', '28570 28571', 84530), (True, '28570 28570', '28570 28570', 84531), (False, '28568 28571', '28569 28570', 84532), (False, '28568 28571', '28568 28570', 84533), (False, '28568 28571', '28568 28570', 84534), (False, '28568 28571', '28568 28570', 84535), (False, '28568 28571', '28568 28570', 84536), (True, '28568 28569', '28568 28569', 84537), (False, '28568 28569', '28568 28568', 84538), (True, '28567 28568', '28567 28568', 84539), (False, '28567 28568', '28566 28568', 84540), (False, '28567 28568', '28566 28568', 84541), (False, '28567 28568', '28566 28568', 84542), (False, '28567 28568', '28566 28568', 84543), (False, '28567 28566', '28566 28567', 84544), (False, '28567 28566', '28566 28566', 84545), (False, '28564 28566', '28565 28566', 84546), (True, '285714 285714', '285714 285714', 84547), (False, '285712 285714', '285713 285714', 84548), (True, '285712 285714', '285712 285714', 84549), (True, '285712 285714', '285712 285714', 84550), (True, '285712 285714', '285712 285714', 84551), (True, '285712 285714', '285712 285714', 84552), (False, '285712 285712', '285712 285713', 84553), (True, '285712 285712', '285712 285712', 84554), (False, '285710 285712', '285711 285712', 84555), (True, '285710 285712', '285710 285712', 84556), (True, '285710 285712', '285710 285712', 84557), (True, '285710 285712', '285710 285712', 84558), (True, '285710 285712', '285710 285712', 84559), (False, '285710 285710', '285710 285711', 84560), (True, '285710 285710', '285710 285710', 84561), (False, '285708 285710', '285709 285710', 84562), (True, '285708 285710', '285708 285710', 84563), (True, '285708 285710', '285708 285710', 84564), (True, '285708 285710', '285708 285710', 84565), (True, '285708 285710', '285708 285710', 84566), (False, '66892 66892', '66892 66893', 84567), (True, '66892 66892', '66892 66892', 84568), (False, '66890 66892', '66891 66892', 84569), (True, '66890 66892', '66890 66892', 84570), (True, '66890 66892', '66890 66892', 84571), (True, '66890 66892', '66890 66892', 84572), (True, '66890 66892', '66890 66892', 84573), (False, '66890 66890', '66890 66891', 84574), (True, '66890 66890', '66890 66890', 84575), (False, '66888 66890', '66889 66890', 84576), (True, '66888 66890', '66888 66890', 84577), (True, '66888 66890', '66888 66890', 84578), (True, '66888 66890', '66888 66890', 84579), (True, '66888 66890', '66888 66890', 84580), (False, '66888 66888', '66888 66889', 84581), (True, '66888 66888', '66888 66888', 84582), (False, '66886 66889', '66887 66888', 84583), (False, '66886 66889', '66886 66888', 84584), (False, '66886 66889', '66886 66888', 84585), (False, '66886 66889', '66886 66888', 84586), (False, '66886 66889', '66886 66888', 84587), (False, '248150 248152', '248151 248152', 84588), (True, '248150 248152', '248150 248152', 84589), (True, '248150 248152', '248150 248152', 84590), (True, '248150 248152', '248150 248152', 84591), (True, '248150 248152', '248150 248152', 84592), (False, '248150 248150', '248150 248151', 84593), (True, '248150 248150', '248150 248150', 84594), (False, '248148 248150', '248149 248150', 84595), (True, '248148 248150', '248148 248150', 84596), (True, '248148 248150', '248148 248150', 84597), (True, '248148 248150', '248148 248150', 84598), (True, '248148 248150', '248148 248150', 84599), (False, '248148 248148', '248148 248149', 84600), (True, '248148 248148', '248148 248148', 84601), (False, '248146 248148', '248147 248148', 84602), (True, '248146 248148', '248146 248148', 84603), (True, '248146 248148', '248146 248148', 84604), (True, '248146 248148', '248146 248148', 84605), (True, '248146 248148', '248146 248148', 84606), (False, '248146 248146', '248146 248147', 84607), (True, '248146 248146', '248146 248146', 84608), (False, '35260 35263', '35260 35262', 84609), (False, '35260 35263', '35260 35262', 84610), (True, '35260 35261', '35260 35261', 84611), (False, '35260 35261', '35260 35260', 84612), (True, '35259 35260', '35259 35260', 84613), (False, '35259 35260', '35258 35260', 84614), (False, '35259 35260', '35258 35260', 84615), (False, '35259 35260', '35258 35260', 84616), (False, '35259 35260', '35258 35260', 84617), (False, '35259 35258', '35258 35259', 84618), (False, '35259 35258', '35258 35258', 84619), (False, '35256 35258', '35257 35258', 84620), (True, '35256 35258', '35256 35258', 84621), (True, '35256 35258', '35256 35258', 84622), (True, '35256 35258', '35256 35258', 84623), (True, '35256 35258', '35256 35258', 84624), (False, '35256 35256', '35256 35257', 84625), (True, '35256 35256', '35256 35256', 84626), (False, '35254 35256', '35255 35256', 84627), (True, '35254 35256', '35254 35256', 84628), (True, '35254 35256', '35254 35256', 84629), (False, '4 4', '4 5', 84630)]",False,Wrong Answer,0.8020219183488043,0.9716088328075708,False,0.4191919191919191,False,"def func(*args):
	
	n = int(args[0])
	mn = ((n // 7) * 2)
	if ((mn % 7) == 6):
	    mn += 1
	mx = (2 + (((n - 2) // 7) * 2))
	if (((mn - 2) % 7) == 6):
	    mx += 1
	if (n == 1):
	    mn = 0
	    mx = 1
	print(mn, mx)
"
3005004,28575975,"p = input()

a=p[0]
cnt=1
for i in range(1, len(p)):
    if p[i] == a:
        cnt = cnt + 1
    else:
        a = p[i]
        cnt = 1
    if cnt == 7:
        print(""YES"")
        break

if i == len(p)-1 and cnt != 7:
    print(""NO"")",62026,5420,124,7/15/17 17:38,16,2555,1,8,"[(True, 'NO', 'NO', 219615), (True, 'YES', 'YES', 219616), (True, 'YES', 'YES', 219617), (True, 'YES', 'YES', 219618), (True, 'NO', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (True, 'YES', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (True, 'NO', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (True, 'NO', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (True, 'YES', 'YES', 219634), (True, 'NO', 'NO', 219635), (True, 'NO', 'NO', 219636), (True, 'YES', 'YES', 219637), (True, 'NO', 'NO', 219638), (True, 'NO', 'NO', 219639), (True, 'YES', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (True, 'YES', 'YES', 219645), (True, 'NO', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (True, 'NO', 'NO', 219649), (True, 'YES', 'YES', 219650), (True, 'YES', 'YES', 219651), (True, 'YES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (True, 'YES', 'YES', 219655), (True, 'YES', 'YES', 219656), (True, 'YES', 'YES', 219657), (True, 'YES', 'YES', 219658)]",True,Accecpted,0.8528993484546782,0.9715536105032824,False,0.0,False,"def func(*args):
	
	p = args[0]
	a = p[0]
	cnt = 1
	for i in range(1, len(p)):
	    if (p[i] == a):
	        cnt = (cnt + 1)
	    else:
	        a = p[i]
	        cnt = 1
	    if (cnt == 7):
	        print('YES')
	        break
	if ((i == (len(p) - 1)) and (cnt != 7)):
	    print('NO')
"
3005002,28575918,"p = input()

a=p[0]
cnt=1
for i in range(1, len(p)):
    if p[i] == a:
        cnt = cnt + 1
    else:
        a = p[i]
        cnt = 1
    if cnt == 7:
        print(""YES"")
        break

if i == len(p)-1:
    print(""NO"")",62026,4520,124,7/15/17 17:35,16,2555,2,8,"[(True, 'NO', 'NO', 219615), (True, 'YES', 'YES', 219616), (True, 'YES', 'YES', 219617), (True, 'YES', 'YES', 219618), (True, 'NO', 'NO', 219619), (True, 'NO', 'NO', 219620), (True, 'YES', 'YES', 219621), (True, 'NO', 'NO', 219622), (True, 'YES', 'YES', 219623), (True, 'NO', 'NO', 219624), (True, 'NO', 'NO', 219625), (True, 'NO', 'NO', 219626), (True, 'YES', 'YES', 219627), (True, 'NO', 'NO', 219628), (True, 'NO', 'NO', 219629), (True, 'NO', 'NO', 219630), (True, 'NO', 'NO', 219631), (True, 'NO', 'NO', 219632), (True, 'NO', 'NO', 219633), (True, 'YES', 'YES', 219634), (True, 'NO', 'NO', 219635), (True, 'NO', 'NO', 219636), (True, 'YES', 'YES', 219637), (True, 'NO', 'NO', 219638), (True, 'NO', 'NO', 219639), (True, 'YES', 'YES', 219640), (True, 'NO', 'NO', 219641), (True, 'NO', 'NO', 219642), (True, 'NO', 'NO', 219643), (True, 'NO', 'NO', 219644), (True, 'YES', 'YES', 219645), (True, 'NO', 'NO', 219646), (True, 'YES', 'YES', 219647), (True, 'YES', 'YES', 219648), (True, 'NO', 'NO', 219649), (True, 'YES', 'YES', 219650), (True, 'YES', 'YES', 219651), (True, 'YES', 'YES', 219652), (True, 'NO', 'NO', 219653), (True, 'NO', 'NO', 219654), (False, 'YES\nNO', 'YES', 219655), (True, 'YES', 'YES', 219656), (False, 'YES\nNO', 'YES', 219657), (True, 'YES', 'YES', 219658)]",False,Wrong Answer,0.8528993484546782,0.9715536105032824,False,0.0454545454545454,False,"def func(*args):
	
	p = args[0]
	a = p[0]
	cnt = 1
	for i in range(1, len(p)):
	    if (p[i] == a):
	        cnt = (cnt + 1)
	    else:
	        a = p[i]
	        cnt = 1
	    if (cnt == 7):
	        print('YES')
	        break
	if (i == (len(p) - 1)):
	    print('NO')
"
1210799,28110475,"s = input()
vowels = ['a', 'i', 'u', 'e', 'o', 'y']
res = ''
for c in s:
  if c not in vowels:
    res += '.'+c.lower()
print(res)",61914,5416,92,6/28/17 10:41,7,1102,2,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (False, '.b.a.c.a.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (True, '.x.n.h.c.g.t.n.q.c.m', '.x.n.h.c.g.t.n.q.c.m', 135750), (True, '.j.f.m.t.b.j.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (False, '.a.b', '.b', 135754), (True, '.b', '.b', 135755), (False, '.a.b', '.b', 135756), (True, '.b', '.b', 135757), (False, '.b.a', '.b', 135758), (True, '.b', '.b', 135759), (False, '.b.a', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (False, '.f.m.o.z.c.a.r.k.c.p.u.h.y.n.b.b.p.t.i.o.f.m.s.h.m.c.p.o.b.t.p.y.c.l.c.d.j.f.r.u.m.i.q.y.z.a.k.k.u.k.z.r.z.n.m.o.g.v.q.z.c.a.o.k.q.r.j.m.m.k.k.e.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (False, '.v.m.b.p.m.c.m.m.d.c.l.f.e.l.l.i.i.s.u.j.d.w.q.r.x.y.r.d.g.k.m.x.j.x.j.h.x.v.z.a.d.r.z.w.v.w.j.r.k.f.r.r.n.s.a.w.k.k.d.p.z.z.l.f.l.n.s.g.u.n.i.v.j.f.b.e.q.s.m.d.h.s.b.j.v.d.t.o.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (False, '.m.c.g.f.q.q.j.n.u.k.a.e.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.i.p.o.m.t.s.g.j.j.a.j.n.v.i.v.l.u.g.u.a.o.h.n.k.c.b.w.n.o.b.v.c.h.o.w.v.n.k.l.f.q.q.b.f.n.g.y.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (False, '.w.o.z.u.o.t.a.e.y.c.v.v.u.v.v.z.y.y.a.o.u.v.o', '.w.z.t.c.v.v.v.v.z.v', 135766), (False, '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.o.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (False, '.r.i.i.i.u.a.i.y.j.o.y.i.u.w.f.p.o.o.a.i.u.e.z.i.u.e.u.e.a.i.i.h.y.o.e.a.l.v.a.a.i.l.u.a.u.a.u.i.e.u.m.o.a.g.e.u.o.i.a.o.u.y.y.e.y.f.e.o.i.i.v.o.o.a.o.i.i.e.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (False, '.l.t.g.m.y.g', '.l.t.g.m.g', 135770), (True, '.k.z.d.x.f', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (False, '.e.y.a.y.a.y.i.o.i.o.y.o.o.a.u.o.e.u.e.u.o.u.u.y.i.y.u.u.m.o.e.o.i.i.i.a.o.i.u.o.a.a.o.i.y.o.i.o.e.u.i.e.r.c.e.y.y.a.o.i.o.i.g.y.u.i.a.o.y.u.e.o.e.u.a.e.a.y.p.o.y.e.y.u.u.a.u.o.a.o.e.i.y.i.e.y.u.e.e.y', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (False, '.y.b', '.b', 135775), (True, '.f.l', '.f.l', 135776), (False, '.y.y.y.y.y.x.d.w.d.w.d.d.a.w.d.d.d.d.y.y.y.y', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",False,Wrong Answer,0.8985396083419646,0.9714285714285714,False,0.3571428571428571,False,"def func(*args):
	
	s = args[0]
	vowels = ['a', 'i', 'u', 'e', 'o', 'y']
	res = ''
	for c in s:
	    if (c not in vowels):
	        res += ('.' + c.lower())
	print(res)
"
1210801,28110490,"s = input()
vowels = ['a', 'i', 'u', 'e', 'o', 'y']
res = ''
for c in s:
  if c.lower() not in vowels:
    res += '.'+c.lower()
print(res)",61914,5416,124,6/28/17 10:42,7,1102,1,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (True, '.x.n.h.c.g.t.n.q.c.m', '.x.n.h.c.g.t.n.q.c.m', 135750), (True, '.j.f.m.t.b.j.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (True, '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (True, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (True, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (True, '.w.z.t.c.v.v.v.v.z.v', '.w.z.t.c.v.v.v.v.z.v', 135766), (True, '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (True, '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (True, '.l.t.g.m.g', '.l.t.g.m.g', 135770), (True, '.k.z.d.x.f', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (True, '.m.r.c.g.p', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (True, '.b', '.b', 135775), (True, '.f.l', '.f.l', 135776), (True, '.x.d.w.d.w.d.d.w.d.d.d.d', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",True,Accecpted,0.8985396083419646,0.9714285714285714,False,0.0,False,"def func(*args):
	
	s = args[0]
	vowels = ['a', 'i', 'u', 'e', 'o', 'y']
	res = ''
	for c in s:
	    if (c.lower() not in vowels):
	        res += ('.' + c.lower())
	print(res)
"
1067013,25095696,"# -*- coding: utf-8 -*-
# @Author: HaonanWu
# @Date:   2017-02-28 16:12:00
# @Last Modified by:   HaonanWu
# @Last Modified time: 2017-02-28 16:21:15

from math import *
n,m,z=map(int,input().split())
print(z//(n*m//gcd(n,m)))",2323,5216,62,2/28/17 11:21,17,992,1,8,"[(True, '10', '10', 127383), (True, '2', '2', 127384), (True, '1', '1', 127385), (True, '1', '1', 127386), (True, '0', '0', 127387), (True, '1', '1', 127388), (True, '34', '34', 127389), (True, '1', '1', 127390), (True, '0', '0', 127391), (True, '1', '1', 127392), (True, '1', '1', 127393), (True, '2', '2', 127394), (True, '0', '0', 127395), (True, '3', '3', 127396), (True, '0', '0', 127397), (True, '2', '2', 127398), (True, '0', '0', 127399), (True, '1', '1', 127400), (True, '1', '1', 127401), (True, '1', '1', 127402), (True, '1', '1', 127403), (True, '10000', '10000', 127404), (True, '10', '10', 127405), (True, '4999', '4999', 127406), (True, '0', '0', 127407), (True, '3', '3', 127408), (True, '45', '45', 127409), (True, '4', '4', 127410), (True, '5', '5', 127411), (True, '50', '50', 127412), (True, '500', '500', 127413), (True, '0', '0', 127414)]",True,Accecpted,0.8409760644533056,0.971311475409836,False,0.0,False,"def func(*args):
	
	from math import *
	(n, m, z) = map(int, args[0].split())
	print((z // ((n * m) // gcd(n, m))))
"
1244098,25848516,"# lucky number iff numbers contain only 4,7; definition for lucky set
# almost lucky iff n/(4|7) == n in lucky set
import math

def luckyCheck(n):
	a = 0
	for char in str(n):
		if char not in ['4','7']:
			a = 1
	if a == 1:
		return False
	return True

def luckyNum(n):
	# decomp the num into its factors using modified sieve of erathosenes
	# implementing something like that below
	i = 2
	a = n
	primeList = []
	# have to build a prime factorization algorithm that stores all primes	
	while i <= a:
		while n % i == 0:
			n /= i
			if i not in primeList:
				primeList.append(i)	
		i += 1		
	if luckyCheck(a) == True:
		return 'YES'
	for prime in primeList:
		if prime == 2 and a >= 2:
			if a % 4 == 0:
				return 'YES'
		elif prime == 7 and a >= 7:
			return 'YES'
		# now that I've checked those two just use strings to solve
		if luckyCheck(prime): # ... is true, only if the prime itself is lucky
			return 'YES'
	return 'NO'
	
# pretty much done, just have to test and debug
print(luckyNum(int(input())))",2005,4520,122,3/27/17 18:36,41,1132,1,8,"[(True, 'YES', 'YES', 137749), (True, 'YES', 'YES', 137750), (True, 'NO', 'NO', 137751), (True, 'YES', 'YES', 137752), (True, 'YES', 'YES', 137753), (True, 'NO', 'NO', 137754), (True, 'YES', 'YES', 137755), (True, 'YES', 'YES', 137756), (True, 'YES', 'YES', 137757), (True, 'NO', 'NO', 137758), (True, 'NO', 'NO', 137759), (True, 'YES', 'YES', 137760), (True, 'YES', 'YES', 137761), (True, 'YES', 'YES', 137762), (True, 'YES', 'YES', 137763), (True, 'YES', 'YES', 137764), (True, 'NO', 'NO', 137765), (True, 'NO', 'NO', 137766), (True, 'NO', 'NO', 137767), (True, 'NO', 'NO', 137768), (True, 'YES', 'YES', 137769), (True, 'YES', 'YES', 137770), (True, 'YES', 'YES', 137771), (True, 'YES', 'YES', 137772), (True, 'YES', 'YES', 137773), (True, 'YES', 'YES', 137774), (True, 'NO', 'NO', 137775), (True, 'YES', 'YES', 137776), (True, 'YES', 'YES', 137777), (True, 'NO', 'NO', 137778), (True, 'NO', 'NO', 137779), (True, 'YES', 'YES', 137780), (True, 'YES', 'YES', 137781), (True, 'YES', 'YES', 137782), (True, 'YES', 'YES', 137783), (True, 'YES', 'YES', 137784)]",True,Accecpted,0.9840843161934146,0.9712895377128954,False,0.0,False,"def func(*args):
	
	import math
	
	def luckyCheck(n):
	    a = 0
	    for char in str(n):
	        if (char not in ['4', '7']):
	            a = 1
	    if (a == 1):
	        return False
	    return True
	
	def luckyNum(n):
	    i = 2
	    a = n
	    primeList = []
	    while (i <= a):
	        while ((n % i) == 0):
	            n /= i
	            if (i not in primeList):
	                primeList.append(i)
	        i += 1
	    if (luckyCheck(a) == True):
	        return 'YES'
	    for prime in primeList:
	        if ((prime == 2) and (a >= 2)):
	            if ((a % 4) == 0):
	                return 'YES'
	        elif ((prime == 7) and (a >= 7)):
	            return 'YES'
	        if luckyCheck(prime):
	            return 'YES'
	    return 'NO'
	print(luckyNum(int(args[0])))
"
554280,27767091,"a,b,c = map(int,input().split())
if c == 0: print(""NO"") if a != b else print(""YES"")
else:
	print(""YES"") if (b-a)//c >= 0 and (b-a)%c == 0 else print(""NO"")",9458,20,77,6/14/17 7:20,7,511,1,8,"[(True, 'YES', 'YES', 87931), (True, 'YES', 'YES', 87932), (True, 'NO', 'NO', 87933), (True, 'NO', 'NO', 87934), (True, 'YES', 'YES', 87935), (True, 'NO', 'NO', 87936), (True, 'YES', 'YES', 87937), (True, 'NO', 'NO', 87938), (True, 'NO', 'NO', 87939), (True, 'YES', 'YES', 87940), (True, 'NO', 'NO', 87941), (True, 'NO', 'NO', 87942), (True, 'YES', 'YES', 87943), (True, 'YES', 'YES', 87944), (True, 'YES', 'YES', 87945), (True, 'YES', 'YES', 87946), (True, 'YES', 'YES', 87947), (True, 'YES', 'YES', 87948), (True, 'YES', 'YES', 87949), (True, 'YES', 'YES', 87950), (True, 'NO', 'NO', 87951), (True, 'NO', 'NO', 87952), (True, 'NO', 'NO', 87953), (True, 'NO', 'NO', 87954), (True, 'NO', 'NO', 87955), (True, 'YES', 'YES', 87956), (True, 'YES', 'YES', 87957), (True, 'YES', 'YES', 87958), (True, 'YES', 'YES', 87959), (True, 'YES', 'YES', 87960), (True, 'NO', 'NO', 87961), (True, 'NO', 'NO', 87962), (True, 'NO', 'NO', 87963), (True, 'YES', 'YES', 87964), (True, 'NO', 'NO', 87965), (True, 'NO', 'NO', 87966), (True, 'NO', 'NO', 87967), (True, 'NO', 'NO', 87968), (True, 'YES', 'YES', 87969), (True, 'YES', 'YES', 87970), (True, 'NO', 'NO', 87971), (True, 'NO', 'NO', 87972), (True, 'NO', 'NO', 87973), (True, 'YES', 'YES', 87974), (True, 'NO', 'NO', 87975), (True, 'NO', 'NO', 87976), (True, 'NO', 'NO', 87977), (True, 'NO', 'NO', 87978), (True, 'YES', 'YES', 87979), (True, 'YES', 'YES', 87980), (True, 'NO', 'NO', 87981), (True, 'YES', 'YES', 87982), (True, 'NO', 'NO', 87983), (True, 'NO', 'NO', 87984), (True, 'NO', 'NO', 87985), (True, 'YES', 'YES', 87986), (True, 'YES', 'YES', 87987), (True, 'YES', 'YES', 87988), (True, 'YES', 'YES', 87989), (True, 'YES', 'YES', 87990), (True, 'NO', 'NO', 87991), (True, 'NO', 'NO', 87992), (True, 'NO', 'NO', 87993), (True, 'YES', 'YES', 87994), (True, 'NO', 'NO', 87995), (True, 'NO', 'NO', 87996), (True, 'NO', 'NO', 87997), (True, 'NO', 'NO', 87998), (True, 'YES', 'YES', 87999), (True, 'YES', 'YES', 88000), (True, 'NO', 'NO', 88001), (True, 'NO', 'NO', 88002), (True, 'NO', 'NO', 88003), (True, 'YES', 'YES', 88004), (True, 'NO', 'NO', 88005), (True, 'YES', 'YES', 88006), (True, 'YES', 'YES', 88007), (True, 'NO', 'NO', 88008), (True, 'NO', 'NO', 88009), (True, 'NO', 'NO', 88010), (True, 'NO', 'NO', 88011), (True, 'YES', 'YES', 88012), (True, 'NO', 'NO', 88013), (True, 'NO', 'NO', 88014), (True, 'NO', 'NO', 88015), (True, 'YES', 'YES', 88016), (True, 'YES', 'YES', 88017), (True, 'YES', 'YES', 88018), (True, 'YES', 'YES', 88019), (True, 'YES', 'YES', 88020), (True, 'NO', 'NO', 88021), (True, 'NO', 'NO', 88022), (True, 'NO', 'NO', 88023), (True, 'YES', 'YES', 88024), (True, 'NO', 'NO', 88025), (True, 'NO', 'NO', 88026), (True, 'NO', 'NO', 88027), (True, 'NO', 'NO', 88028), (True, 'YES', 'YES', 88029), (True, 'YES', 'YES', 88030), (True, 'NO', 'NO', 88031), (True, 'YES', 'YES', 88032), (True, 'NO', 'NO', 88033), (True, 'NO', 'NO', 88034), (True, 'NO', 'NO', 88035), (True, 'YES', 'YES', 88036), (True, 'YES', 'YES', 88037), (True, 'NO', 'NO', 88038), (True, 'NO', 'NO', 88039), (True, 'NO', 'NO', 88040), (True, 'NO', 'NO', 88041), (True, 'YES', 'YES', 88042), (True, 'NO', 'NO', 88043), (True, 'NO', 'NO', 88044), (True, 'NO', 'NO', 88045), (True, 'YES', 'YES', 88046), (True, 'YES', 'YES', 88047), (True, 'YES', 'YES', 88048), (True, 'YES', 'YES', 88049), (True, 'YES', 'YES', 88050), (True, 'NO', 'NO', 88051), (True, 'NO', 'NO', 88052), (True, 'NO', 'NO', 88053), (True, 'YES', 'YES', 88054), (True, 'NO', 'NO', 88055), (True, 'YES', 'YES', 88056), (True, 'YES', 'YES', 88057), (True, 'NO', 'NO', 88058), (True, 'NO', 'NO', 88059), (True, 'NO', 'NO', 88060), (True, 'NO', 'NO', 88061), (True, 'YES', 'YES', 88062), (True, 'NO', 'NO', 88063), (True, 'NO', 'NO', 88064), (True, 'NO', 'NO', 88065), (True, 'YES', 'YES', 88066), (True, 'YES', 'YES', 88067), (True, 'NO', 'NO', 88068), (True, 'NO', 'NO', 88069), (True, 'NO', 'NO', 88070), (True, 'NO', 'NO', 88071), (True, 'YES', 'YES', 88072), (True, 'NO', 'NO', 88073), (True, 'NO', 'NO', 88074), (True, 'NO', 'NO', 88075), (True, 'YES', 'YES', 88076), (True, 'YES', 'YES', 88077), (True, 'YES', 'YES', 88078), (True, 'YES', 'YES', 88079), (True, 'YES', 'YES', 88080), (True, 'YES', 'YES', 88081), (True, 'YES', 'YES', 88082), (True, 'YES', 'YES', 88083), (True, 'NO', 'NO', 88084), (True, 'YES', 'YES', 88085), (True, 'NO', 'NO', 88086), (True, 'NO', 'NO', 88087), (True, 'NO', 'NO', 88088), (True, 'YES', 'YES', 88089), (True, 'YES', 'YES', 88090), (True, 'NO', 'NO', 88091), (True, 'NO', 'NO', 88092), (True, 'NO', 'NO', 88093), (True, 'YES', 'YES', 88094), (True, 'YES', 'YES', 88095), (True, 'YES', 'YES', 88096), (True, 'YES', 'YES', 88097), (True, 'YES', 'YES', 88098), (True, 'NO', 'NO', 88099), (True, 'YES', 'YES', 88100), (True, 'NO', 'NO', 88101), (True, 'YES', 'YES', 88102), (True, 'NO', 'NO', 88103), (True, 'YES', 'YES', 88104), (True, 'YES', 'YES', 88105), (True, 'NO', 'NO', 88106), (True, 'YES', 'YES', 88107), (True, 'YES', 'YES', 88108)]",True,Accecpted,0.8207202632332541,0.9712460063897764,False,0.0,False,"def func(*args):
	
	(a, b, c) = map(int, args[0].split())
	if (c == 0):
	    (print('NO') if (a != b) else print('YES'))
	else:
	    (print('YES') if ((((b - a) // c) >= 0) and (((b - a) % c) == 0)) else print('NO'))
"
554279,27767074,"a,b,c = map(int,input().split())
if c == 0: print(""NO"") if a != b else print(""YES"")
else:
	print(""YES"") if b >= a and (b-a)%c == 0 else print(""NO"")",9458,0,46,6/14/17 7:18,7,511,2,8,"[(True, 'YES', 'YES', 87931), (True, 'YES', 'YES', 87932), (True, 'NO', 'NO', 87933), (True, 'NO', 'NO', 87934), (False, 'NO', 'YES', 87935), (True, 'NO', 'NO', 87936), (True, 'YES', 'YES', 87937), (False, 'YES', 'NO', 87938), (True, 'NO', 'NO', 87939), (True, 'YES', 'YES', 87940), (True, 'NO', 'NO', 87941), (True, 'NO', 'NO', 87942), (True, 'YES', 'YES', 87943), (False, 'NO', 'YES', 87944), (True, 'YES', 'YES', 87945), (True, 'YES', 'YES', 87946), (True, 'YES', 'YES', 87947), (True, 'YES', 'YES', 87948), (False, 'NO', 'YES', 87949), (False, 'NO', 'YES', 87950), (True, 'NO', 'NO', 87951), (True, 'NO', 'NO', 87952), (True, 'NO', 'NO', 87953), (True, 'NO', 'NO', 87954), (True, 'NO', 'NO', 87955), (True, 'YES', 'YES', 87956), (True, 'YES', 'YES', 87957), (True, 'YES', 'YES', 87958), (True, 'YES', 'YES', 87959), (True, 'YES', 'YES', 87960), (True, 'NO', 'NO', 87961), (False, 'YES', 'NO', 87962), (True, 'NO', 'NO', 87963), (True, 'YES', 'YES', 87964), (True, 'NO', 'NO', 87965), (False, 'YES', 'NO', 87966), (False, 'YES', 'NO', 87967), (True, 'NO', 'NO', 87968), (True, 'YES', 'YES', 87969), (True, 'YES', 'YES', 87970), (True, 'NO', 'NO', 87971), (False, 'YES', 'NO', 87972), (True, 'NO', 'NO', 87973), (True, 'YES', 'YES', 87974), (True, 'NO', 'NO', 87975), (False, 'YES', 'NO', 87976), (False, 'YES', 'NO', 87977), (True, 'NO', 'NO', 87978), (True, 'YES', 'YES', 87979), (True, 'YES', 'YES', 87980), (True, 'NO', 'NO', 87981), (False, 'NO', 'YES', 87982), (True, 'NO', 'NO', 87983), (True, 'NO', 'NO', 87984), (True, 'NO', 'NO', 87985), (True, 'YES', 'YES', 87986), (True, 'YES', 'YES', 87987), (True, 'YES', 'YES', 87988), (True, 'YES', 'YES', 87989), (True, 'YES', 'YES', 87990), (True, 'NO', 'NO', 87991), (False, 'YES', 'NO', 87992), (True, 'NO', 'NO', 87993), (True, 'YES', 'YES', 87994), (True, 'NO', 'NO', 87995), (False, 'YES', 'NO', 87996), (False, 'YES', 'NO', 87997), (True, 'NO', 'NO', 87998), (True, 'YES', 'YES', 87999), (True, 'YES', 'YES', 88000), (True, 'NO', 'NO', 88001), (False, 'YES', 'NO', 88002), (True, 'NO', 'NO', 88003), (True, 'YES', 'YES', 88004), (True, 'NO', 'NO', 88005), (False, 'NO', 'YES', 88006), (False, 'NO', 'YES', 88007), (True, 'NO', 'NO', 88008), (True, 'NO', 'NO', 88009), (True, 'NO', 'NO', 88010), (True, 'NO', 'NO', 88011), (False, 'NO', 'YES', 88012), (True, 'NO', 'NO', 88013), (True, 'NO', 'NO', 88014), (True, 'NO', 'NO', 88015), (True, 'YES', 'YES', 88016), (True, 'YES', 'YES', 88017), (True, 'YES', 'YES', 88018), (True, 'YES', 'YES', 88019), (True, 'YES', 'YES', 88020), (True, 'NO', 'NO', 88021), (False, 'YES', 'NO', 88022), (True, 'NO', 'NO', 88023), (True, 'YES', 'YES', 88024), (True, 'NO', 'NO', 88025), (False, 'YES', 'NO', 88026), (False, 'YES', 'NO', 88027), (True, 'NO', 'NO', 88028), (True, 'YES', 'YES', 88029), (True, 'YES', 'YES', 88030), (True, 'NO', 'NO', 88031), (False, 'NO', 'YES', 88032), (True, 'NO', 'NO', 88033), (True, 'NO', 'NO', 88034), (True, 'NO', 'NO', 88035), (False, 'NO', 'YES', 88036), (False, 'NO', 'YES', 88037), (True, 'NO', 'NO', 88038), (True, 'NO', 'NO', 88039), (True, 'NO', 'NO', 88040), (True, 'NO', 'NO', 88041), (False, 'NO', 'YES', 88042), (True, 'NO', 'NO', 88043), (True, 'NO', 'NO', 88044), (True, 'NO', 'NO', 88045), (True, 'YES', 'YES', 88046), (True, 'YES', 'YES', 88047), (True, 'YES', 'YES', 88048), (True, 'YES', 'YES', 88049), (True, 'YES', 'YES', 88050), (True, 'NO', 'NO', 88051), (False, 'YES', 'NO', 88052), (True, 'NO', 'NO', 88053), (True, 'YES', 'YES', 88054), (True, 'NO', 'NO', 88055), (False, 'NO', 'YES', 88056), (False, 'NO', 'YES', 88057), (True, 'NO', 'NO', 88058), (True, 'NO', 'NO', 88059), (True, 'NO', 'NO', 88060), (True, 'NO', 'NO', 88061), (False, 'NO', 'YES', 88062), (True, 'NO', 'NO', 88063), (True, 'NO', 'NO', 88064), (True, 'NO', 'NO', 88065), (False, 'NO', 'YES', 88066), (False, 'NO', 'YES', 88067), (True, 'NO', 'NO', 88068), (True, 'NO', 'NO', 88069), (True, 'NO', 'NO', 88070), (True, 'NO', 'NO', 88071), (False, 'NO', 'YES', 88072), (True, 'NO', 'NO', 88073), (True, 'NO', 'NO', 88074), (True, 'NO', 'NO', 88075), (True, 'YES', 'YES', 88076), (True, 'YES', 'YES', 88077), (True, 'YES', 'YES', 88078), (True, 'YES', 'YES', 88079), (True, 'YES', 'YES', 88080), (True, 'YES', 'YES', 88081), (True, 'YES', 'YES', 88082), (False, 'NO', 'YES', 88083), (True, 'NO', 'NO', 88084), (False, 'NO', 'YES', 88085), (True, 'NO', 'NO', 88086), (True, 'NO', 'NO', 88087), (True, 'NO', 'NO', 88088), (True, 'YES', 'YES', 88089), (False, 'NO', 'YES', 88090), (True, 'NO', 'NO', 88091), (True, 'NO', 'NO', 88092), (True, 'NO', 'NO', 88093), (True, 'YES', 'YES', 88094), (False, 'NO', 'YES', 88095), (True, 'YES', 'YES', 88096), (True, 'YES', 'YES', 88097), (False, 'NO', 'YES', 88098), (True, 'NO', 'NO', 88099), (False, 'NO', 'YES', 88100), (False, 'YES', 'NO', 88101), (True, 'YES', 'YES', 88102), (True, 'NO', 'NO', 88103), (True, 'YES', 'YES', 88104), (False, 'NO', 'YES', 88105), (True, 'NO', 'NO', 88106), (True, 'YES', 'YES', 88107), (True, 'YES', 'YES', 88108)]",False,Wrong Answer,0.8207202632332541,0.9712460063897764,False,0.2303370786516854,False,"def func(*args):
	
	(a, b, c) = map(int, args[0].split())
	if (c == 0):
	    (print('NO') if (a != b) else print('YES'))
	else:
	    (print('YES') if ((b >= a) and (((b - a) % c) == 0)) else print('NO'))
"
2751687,14246515,"boy = list(map(int, input().split()))
girl = list(map(int, input().split()))

def compatible(b, g):
    return (g - 1) <= b <= (g + 1) * 2

if compatible(boy[0], girl[1]) or compatible(boy[1], girl[0]):
    print('YES')
else:
    print('NO')",4201,40,122,11/14/15 3:29,10,2360,2,8,"[(True, 'YES', 'YES', 29552), (True, 'YES', 'YES', 29553), (True, 'NO', 'NO', 29554), (True, 'YES', 'YES', 29555), (True, 'YES', 'YES', 29556), (False, 'YES', 'NO', 29557), (False, 'YES', 'NO', 29558), (False, 'YES', 'NO', 29559), (True, 'YES', 'YES', 29560), (True, 'NO', 'NO', 29561), (False, 'YES', 'NO', 29562), (False, 'NO', 'YES', 29563), (False, 'NO', 'YES', 29564), (False, 'NO', 'YES', 29565), (True, 'NO', 'NO', 29566), (False, 'YES', 'NO', 29567), (False, 'YES', 'NO', 29568), (False, 'NO', 'YES', 29569), (False, 'NO', 'YES', 29570), (False, 'YES', 'NO', 29571), (False, 'YES', 'NO', 29572), (False, 'NO', 'YES', 29573), (True, 'YES', 'YES', 29574), (False, 'YES', 'NO', 29575), (True, 'YES', 'YES', 29576), (True, 'YES', 'YES', 29577), (True, 'YES', 'YES', 29578), (False, 'NO', 'YES', 29579), (True, 'YES', 'YES', 29580), (True, 'YES', 'YES', 29581), (True, 'NO', 'NO', 29582), (True, 'YES', 'YES', 29583), (False, 'NO', 'YES', 29584), (True, 'YES', 'YES', 29585), (True, 'NO', 'NO', 29586), (False, 'YES', 'NO', 29587), (True, 'YES', 'YES', 29588), (False, 'NO', 'YES', 29589), (False, 'NO', 'YES', 29590), (True, 'YES', 'YES', 29591), (True, 'NO', 'NO', 29592), (False, 'YES', 'NO', 29593), (False, 'YES', 'NO', 29594), (True, 'YES', 'YES', 29595), (True, 'YES', 'YES', 29596), (True, 'NO', 'NO', 29597), (True, 'YES', 'YES', 29598), (False, 'YES', 'NO', 29599), (True, 'YES', 'YES', 29600), (False, 'YES', 'NO', 29601), (False, 'NO', 'YES', 29602), (False, 'YES', 'NO', 29603), (False, 'YES', 'NO', 29604), (True, 'YES', 'YES', 29605), (True, 'NO', 'NO', 29606), (False, 'NO', 'YES', 29607), (False, 'YES', 'NO', 29608), (False, 'NO', 'YES', 29609), (False, 'NO', 'YES', 29610), (True, 'NO', 'NO', 29611)]",False,Wrong Answer,0.9486214091664588,0.970954356846473,False,0.5166666666666667,False,"def func(*args):
	
	boy = list(map(int, args[0].split()))
	girl = list(map(int, args[1].split()))
	
	def compatible(b, g):
	    return ((g - 1) <= b <= ((g + 1) * 2))
	if (compatible(boy[0], girl[1]) or compatible(boy[1], girl[0])):
	    print('YES')
	else:
	    print('NO')
"
2751688,14246540,"girl = list(map(int, input().split()))
boy = list(map(int, input().split()))

def compatible(b, g):
    return (g - 1) <= b <= (g + 1) * 2

if compatible(boy[0], girl[1]) or compatible(boy[1], girl[0]):
    print('YES')
else:
    print('NO')",4201,48,124,11/14/15 3:34,10,2360,1,8,"[(True, 'YES', 'YES', 29552), (True, 'YES', 'YES', 29553), (True, 'NO', 'NO', 29554), (True, 'YES', 'YES', 29555), (True, 'YES', 'YES', 29556), (True, 'NO', 'NO', 29557), (True, 'NO', 'NO', 29558), (True, 'NO', 'NO', 29559), (True, 'YES', 'YES', 29560), (True, 'NO', 'NO', 29561), (True, 'NO', 'NO', 29562), (True, 'YES', 'YES', 29563), (True, 'YES', 'YES', 29564), (True, 'YES', 'YES', 29565), (True, 'NO', 'NO', 29566), (True, 'NO', 'NO', 29567), (True, 'NO', 'NO', 29568), (True, 'YES', 'YES', 29569), (True, 'YES', 'YES', 29570), (True, 'NO', 'NO', 29571), (True, 'NO', 'NO', 29572), (True, 'YES', 'YES', 29573), (True, 'YES', 'YES', 29574), (True, 'NO', 'NO', 29575), (True, 'YES', 'YES', 29576), (True, 'YES', 'YES', 29577), (True, 'YES', 'YES', 29578), (True, 'YES', 'YES', 29579), (True, 'YES', 'YES', 29580), (True, 'YES', 'YES', 29581), (True, 'NO', 'NO', 29582), (True, 'YES', 'YES', 29583), (True, 'YES', 'YES', 29584), (True, 'YES', 'YES', 29585), (True, 'NO', 'NO', 29586), (True, 'NO', 'NO', 29587), (True, 'YES', 'YES', 29588), (True, 'YES', 'YES', 29589), (True, 'YES', 'YES', 29590), (True, 'YES', 'YES', 29591), (True, 'NO', 'NO', 29592), (True, 'NO', 'NO', 29593), (True, 'NO', 'NO', 29594), (True, 'YES', 'YES', 29595), (True, 'YES', 'YES', 29596), (True, 'NO', 'NO', 29597), (True, 'YES', 'YES', 29598), (True, 'NO', 'NO', 29599), (True, 'YES', 'YES', 29600), (True, 'NO', 'NO', 29601), (True, 'YES', 'YES', 29602), (True, 'NO', 'NO', 29603), (True, 'NO', 'NO', 29604), (True, 'YES', 'YES', 29605), (True, 'NO', 'NO', 29606), (True, 'YES', 'YES', 29607), (True, 'NO', 'NO', 29608), (True, 'YES', 'YES', 29609), (True, 'YES', 'YES', 29610), (True, 'NO', 'NO', 29611)]",True,Accecpted,0.9486214091664588,0.970954356846473,False,0.0,False,"def func(*args):
	
	girl = list(map(int, args[0].split()))
	boy = list(map(int, args[1].split()))
	
	def compatible(b, g):
	    return ((g - 1) <= b <= ((g + 1) * 2))
	if (compatible(boy[0], girl[1]) or compatible(boy[1], girl[0])):
	    print('YES')
	else:
	    print('NO')
"
3216210,27788574,"string = input()
razl = 0
for i in range(len(string)//2):
	if string[i]!=string[-i-1]:razl+=1
if razl>1:
	print('NO')
elif razl==1:
	print('YES')
else:
	if len(string)%2==1:
		print('YES')
	else:
		print('NO')",103698,12,62,6/15/17 10:34,25,2766,1,8,"[(True, 'YES', 'YES', 234169), (True, 'NO', 'NO', 234170), (True, 'YES', 'YES', 234171), (True, 'YES', 'YES', 234172), (True, 'NO', 'NO', 234173), (True, 'YES', 'YES', 234174), (True, 'NO', 'NO', 234175), (True, 'YES', 'YES', 234176), (True, 'YES', 'YES', 234177), (True, 'NO', 'NO', 234178), (True, 'NO', 'NO', 234179), (True, 'YES', 'YES', 234180), (True, 'NO', 'NO', 234181), (True, 'YES', 'YES', 234182), (True, 'YES', 'YES', 234183), (True, 'NO', 'NO', 234184), (True, 'NO', 'NO', 234185), (True, 'YES', 'YES', 234186), (True, 'NO', 'NO', 234187), (True, 'YES', 'YES', 234188), (True, 'YES', 'YES', 234189), (True, 'NO', 'NO', 234190), (True, 'YES', 'YES', 234191), (True, 'NO', 'NO', 234192), (True, 'YES', 'YES', 234193), (True, 'NO', 'NO', 234194), (True, 'YES', 'YES', 234195), (True, 'YES', 'YES', 234196), (True, 'NO', 'NO', 234197), (True, 'NO', 'NO', 234198), (True, 'YES', 'YES', 234199), (True, 'NO', 'NO', 234200), (True, 'YES', 'YES', 234201), (True, 'YES', 'YES', 234202), (True, 'NO', 'NO', 234203), (True, 'NO', 'NO', 234204), (True, 'YES', 'YES', 234205), (True, 'NO', 'NO', 234206), (True, 'YES', 'YES', 234207), (True, 'YES', 'YES', 234208), (True, 'NO', 'NO', 234209), (True, 'NO', 'NO', 234210), (True, 'YES', 'YES', 234211), (True, 'YES', 'YES', 234212), (True, 'NO', 'NO', 234213), (True, 'NO', 'NO', 234214), (True, 'NO', 'NO', 234215), (True, 'NO', 'NO', 234216), (True, 'NO', 'NO', 234217), (True, 'NO', 'NO', 234218), (True, 'NO', 'NO', 234219), (True, 'NO', 'NO', 234220), (True, 'YES', 'YES', 234221), (True, 'NO', 'NO', 234222), (True, 'NO', 'NO', 234223), (True, 'NO', 'NO', 234224), (True, 'NO', 'NO', 234225), (True, 'YES', 'YES', 234226), (True, 'NO', 'NO', 234227), (True, 'NO', 'NO', 234228), (True, 'NO', 'NO', 234229), (True, 'NO', 'NO', 234230), (True, 'NO', 'NO', 234231), (True, 'NO', 'NO', 234232), (True, 'NO', 'NO', 234233), (True, 'NO', 'NO', 234234), (True, 'YES', 'YES', 234235), (True, 'NO', 'NO', 234236), (True, 'NO', 'NO', 234237), (True, 'NO', 'NO', 234238), (True, 'NO', 'NO', 234239), (True, 'NO', 'NO', 234240), (True, 'NO', 'NO', 234241), (True, 'YES', 'YES', 234242), (True, 'YES', 'YES', 234243), (True, 'NO', 'NO', 234244), (True, 'NO', 'NO', 234245), (True, 'NO', 'NO', 234246), (True, 'NO', 'NO', 234247), (True, 'NO', 'NO', 234248), (True, 'YES', 'YES', 234249), (True, 'NO', 'NO', 234250), (True, 'NO', 'NO', 234251), (True, 'NO', 'NO', 234252), (True, 'NO', 'NO', 234253), (True, 'NO', 'NO', 234254), (True, 'YES', 'YES', 234255), (True, 'NO', 'NO', 234256), (True, 'NO', 'NO', 234257), (True, 'NO', 'NO', 234258), (True, 'NO', 'NO', 234259), (True, 'NO', 'NO', 234260), (True, 'NO', 'NO', 234261), (True, 'NO', 'NO', 234262), (True, 'NO', 'NO', 234263), (True, 'NO', 'NO', 234264), (True, 'YES', 'YES', 234265), (True, 'NO', 'NO', 234266), (True, 'NO', 'NO', 234267)]",True,Accecpted,0.8895260356363631,0.9708333333333332,False,0.0,False,"def func(*args):
	
	string = args[0]
	razl = 0
	for i in range((len(string) // 2)):
	    if (string[i] != string[((- i) - 1)]):
	        razl += 1
	if (razl > 1):
	    print('NO')
	elif (razl == 1):
	    print('YES')
	elif ((len(string) % 2) == 1):
	    print('YES')
	else:
	    print('NO')
"
1210272,27929684,"s=input()
ans=""""
l=['a','e','i','o','u','y','Y','A','E','I','O','U']
for i in s:
    if(i not in l):
        ans=ans+"".""+i.lower()
print(ans)",61062,5440,184,6/20/17 20:25,7,1102,1,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (True, '.x.n.h.c.g.t.n.q.c.m', '.x.n.h.c.g.t.n.q.c.m', 135750), (True, '.j.f.m.t.b.j.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (True, '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (True, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (True, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (True, '.w.z.t.c.v.v.v.v.z.v', '.w.z.t.c.v.v.v.v.z.v', 135766), (True, '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (True, '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (True, '.l.t.g.m.g', '.l.t.g.m.g', 135770), (True, '.k.z.d.x.f', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (True, '.m.r.c.g.p', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (True, '.b', '.b', 135775), (True, '.f.l', '.f.l', 135776), (True, '.x.d.w.d.w.d.d.w.d.d.d.d', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",True,Accecpted,0.7910665071754358,0.9708029197080292,False,0.0,False,"def func(*args):
	
	s = args[0]
	ans = ''
	l = ['a', 'e', 'i', 'o', 'u', 'y', 'Y', 'A', 'E', 'I', 'O', 'U']
	for i in s:
	    if (i not in l):
	        ans = ((ans + '.') + i.lower())
	print(ans)
"
1210271,27929640,"s=input()
ans=""""
l=['a','e','i','o','u','A','E','I','O','U']
for i in s:
    if(i not in l):
        ans=ans+"".""+i.lower()
print(ans)",61062,4508,124,6/20/17 20:22,7,1102,2,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (False, '.x.n.h.c.g.y.t.n.q.c.m.y', '.x.n.h.c.g.t.n.q.c.m', 135750), (False, '.j.f.m.t.b.j.y.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (False, '.f.m.z.c.r.k.c.p.h.y.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.y.c.l.c.d.j.f.r.m.y.q.y.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (False, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.y.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (False, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.y.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (False, '.y.w.y.z.t.y.c.v.v.y.v.y.v.z.y.y.y.y.y.v.y.y.y.y.y.y', '.w.z.t.c.v.v.v.v.z.v', 135766), (False, '.y.j.n.c.k.p.f.y.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (False, '.r.y.j.y.w.f.p.z.y.y.h.y.l.v.l.m.g.y.y.y.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (False, '.y.y.y.l.y.y.y.y.t.y.y.y.y.y.g.m.y.y.y.y.y.y.g', '.l.t.g.m.g', 135770), (False, '.y.y.y.y.k.z.y.y.y.y.y.d.x.f.y.y.y.y.y', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (False, '.y.y.y.y.y.y.m.y.r.c.y.y.g.y.y.y.p.y.y.y.y.y', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (False, '.y.b', '.b', 135775), (False, '.f.l.y', '.f.l', 135776), (False, '.y.y.y.y.y.y.y.y.y.x.d.w.d.w.d.d.w.d.d.d.d.y.y.y.y', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",False,Wrong Answer,0.7910665071754358,0.9708029197080292,False,0.3333333333333333,False,"def func(*args):
	
	s = args[0]
	ans = ''
	l = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
	for i in s:
	    if (i not in l):
	        ans = ((ans + '.') + i.lower())
	print(ans)
"
2979460,8133839,"import sys
import math

n, m = [int(x) for x in (sys.stdin.readline()).split()]
ss = m  % int(((1 + n) * n) / 2)

if(ss == 0):
    print(0)
    exit()
    
d = int(math.sqrt(1 + (ss * 2) * 4))

sq = 0
if(int((1 + d) / 2) != 1):
    sq = int((1 + d) / 2 - 1)
else:
    sq = 1

result = int(ss - ((sq + 1) * sq / 2))

print(result)",13267,0,124,10/7/14 22:24,21,2535,1,8,"[(True, '0', '0', 218695), (True, '2', '2', 218696), (True, '1', '1', 218697), (True, '35', '35', 218698), (True, '0', '0', 218699), (True, '14', '14', 218700), (True, '11', '11', 218701), (True, '5', '5', 218702), (True, '0', '0', 218703), (True, '26', '26', 218704), (True, '14', '14', 218705), (True, '5', '5', 218706), (True, '20', '20', 218707), (True, '12', '12', 218708), (True, '11', '11', 218709), (True, '0', '0', 218710), (True, '2', '2', 218711), (True, '4', '4', 218712), (True, '9', '9', 218713), (True, '12', '12', 218714), (True, '0', '0', 218715), (True, '40', '40', 218716), (True, '0', '0', 218717), (True, '0', '0', 218718), (True, '5', '5', 218719)]",True,Accecpted,0.951337223417461,0.9707927677329624,False,0.0,False,"def func(*args):
	
	import sys
	import math
	(n, m) = [int(x) for x in sys.stdin.readline().split()]
	ss = (m % int((((1 + n) * n) / 2)))
	if (ss == 0):
	    print(0)
	    exit()
	d = int(math.sqrt((1 + ((ss * 2) * 4))))
	sq = 0
	if (int(((1 + d) / 2)) != 1):
	    sq = int((((1 + d) / 2) - 1))
	else:
	    sq = 1
	result = int((ss - (((sq + 1) * sq) / 2)))
	print(result)
"
2979459,8133833,"import sys
import math

n, m = [int(x) for x in (sys.stdin.readline()).split()]
ss = m  % int(((1 + n) * n) / 2)

if(ss == 0):
    print(0)
    exit()
    
d = int(math.sqrt(1 + (ss * 2) * 4))

print(d)
print(ss)
sq = 0
if(int((1 + d) / 2) != 1):
    sq = int((1 + d) / 2 - 1)
else:
    sq = 1

result = int(ss - ((sq + 1) * sq / 2))

print(result)",13267,0,92,10/7/14 22:23,23,2535,2,8,"[(False, '3\n1\n0', '0', 218695), (False, '29\n107\n2', '2', 218696), (False, '4\n2\n1', '1', 218697), (False, '78\n776\n35', '35', 218698), (True, '0', '0', 218699), (False, '42\n224\n14', '14', 218700), (False, '47\n287\n11', '11', 218701), (False, '18\n41\n5', '5', 218702), (True, '0', '0', 218703), (False, '54\n377\n26', '26', 218704), (False, '34\n150\n14', '14', 218705), (False, '83\n866\n5', '5', 218706), (False, '54\n371\n20', '20', 218707), (False, '30\n117\n12', '12', 218708), (False, '28\n102\n11', '11', 218709), (False, '71\n630\n0', '0', 218710), (False, '6\n5\n2', '2', 218711), (False, '41\n214\n4', '4', 218712), (False, '43\n240\n9', '9', 218713), (False, '87\n958\n12', '12', 218714), (True, '0', '0', 218715), (False, '92\n1075\n40', '40', 218716), (True, '0', '0', 218717), (False, '3\n1\n0', '0', 218718), (False, '20\n50\n5', '5', 218719)]",False,Wrong Answer,0.951337223417461,0.9707927677329624,False,0.84,False,"def func(*args):
	
	import sys
	import math
	(n, m) = [int(x) for x in sys.stdin.readline().split()]
	ss = (m % int((((1 + n) * n) / 2)))
	if (ss == 0):
	    print(0)
	    exit()
	d = int(math.sqrt((1 + ((ss * 2) * 4))))
	print(d)
	print(ss)
	sq = 0
	if (int(((1 + d) / 2)) != 1):
	    sq = int((((1 + d) / 2) - 1))
	else:
	    sq = 1
	result = int((ss - (((sq + 1) * sq) / 2)))
	print(result)
"
1210561,27994946,"word = input()
word = word.lower()
emp=''
for i in word : 
	if( i=='a' or i=='o' or i=='e' or i=='u' or i=='i') : 
		pass
	else : 
		emp=emp+'.'+i
print (emp)",63463,5420,124,6/24/17 4:46,9,1102,2,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (False, '.x.n.h.c.g.y.t.n.q.c.m.y', '.x.n.h.c.g.t.n.q.c.m', 135750), (False, '.j.f.m.t.b.j.y.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (False, '.f.m.z.c.r.k.c.p.h.y.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.y.c.l.c.d.j.f.r.m.y.q.y.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (False, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.y.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (False, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.y.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (False, '.y.w.y.z.t.y.c.v.v.y.v.y.v.z.y.y.y.y.y.v.y.y.y.y.y.y', '.w.z.t.c.v.v.v.v.z.v', 135766), (False, '.y.j.n.c.k.p.f.y.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (False, '.r.y.j.y.w.f.p.z.y.y.h.y.l.v.l.m.g.y.y.y.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (False, '.y.y.y.l.y.y.y.y.t.y.y.y.y.y.g.m.y.y.y.y.y.y.g', '.l.t.g.m.g', 135770), (False, '.y.y.y.y.k.z.y.y.y.y.y.d.x.f.y.y.y.y.y', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (False, '.y.y.y.y.y.y.m.y.r.c.y.y.g.y.y.y.p.y.y.y.y.y', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (False, '.y.b', '.b', 135775), (False, '.f.l.y', '.f.l', 135776), (False, '.y.y.y.y.y.y.y.y.y.x.d.w.d.w.d.d.w.d.d.d.d.y.y.y.y', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",False,Wrong Answer,0.9062760973468672,0.9707602339181286,False,0.3333333333333333,False,"def func(*args):
	
	word = args[0]
	word = word.lower()
	emp = ''
	for i in word:
	    if ((i == 'a') or (i == 'o') or (i == 'e') or (i == 'u') or (i == 'i')):
	        pass
	    else:
	        emp = ((emp + '.') + i)
	print(emp)
"
1210564,27994961,"word = input()
word = word.lower()
emp=''
for i in word : 
	if( i=='a' or i=='o' or i=='y' or i=='e' or i=='u' or i=='i') : 
		pass
	else : 
		emp=emp+'.'+i
print (emp)",63463,5420,124,6/24/17 4:47,9,1102,1,8,"[(True, '.t.r', '.t.r', 135736), (True, '.c.d.f.r.c.s', '.c.d.f.r.c.s', 135737), (True, '.b.c.b', '.b.c.b', 135738), (True, '.b.n', '.b.n', 135739), (True, '.w.p.w.l', '.w.p.w.l', 135740), (True, '.g.g.d.v.q', '.g.g.d.v.q', 135741), (True, '.p.m.s.z', '.p.m.s.z', 135742), (True, '.g', '.g', 135743), (True, '.z.j.t.p.s', '.z.j.t.p.s', 135744), (True, '.j.z.b.w.h', '.j.z.b.w.h', 135745), (True, '.t.n.k.g.w.g', '.t.n.k.g.w.g', 135746), (True, '.k.n.c.n.v.z.h', '.k.n.c.n.v.z.h', 135747), (True, '.x.t.t.x.j.n.l', '.x.t.t.x.j.n.l', 135748), (True, '.k.t.j.q.h.p.q.s.v.h.w', '.k.t.j.q.h.p.q.s.v.h.w', 135749), (True, '.x.n.h.c.g.t.n.q.c.m', '.x.n.h.c.g.t.n.q.c.m', 135750), (True, '.j.f.m.t.b.j.l.x.c.c', '.j.f.m.t.b.j.l.x.c.c', 135751), (True, '.d', '.d', 135752), (True, '.b', '.b', 135753), (True, '.b', '.b', 135754), (True, '.b', '.b', 135755), (True, '.b', '.b', 135756), (True, '.b', '.b', 135757), (True, '.b', '.b', 135758), (True, '.b', '.b', 135759), (True, '.b', '.b', 135760), (True, '.b', '.b', 135761), (True, '.b', '.b', 135762), (True, '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', '.f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m', 135763), (True, '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', '.v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n', 135764), (True, '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', '.m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j', 135765), (True, '.w.z.t.c.v.v.v.v.z.v', '.w.z.t.c.v.v.v.v.z.v', 135766), (True, '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', '.j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l', 135767), (True, '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', '.r.j.w.f.p.z.h.l.v.l.m.g.f.v.g', 135768), (True, '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', '.v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q', 135769), (True, '.l.t.g.m.g', '.l.t.g.m.g', 135770), (True, '.k.z.d.x.f', '.k.z.d.x.f', 135771), (True, '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', '.f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q', 135772), (True, '.m.r.c.g.p', '.m.r.c.g.p', 135773), (True, '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', '.j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x', 135774), (True, '.b', '.b', 135775), (True, '.f.l', '.f.l', 135776), (True, '.x.d.w.d.w.d.d.w.d.d.d.d', '.x.d.w.d.w.d.d.w.d.d.d.d', 135777)]",True,Accecpted,0.9062760973468672,0.9707602339181286,False,0.0,False,"def func(*args):
	
	word = args[0]
	word = word.lower()
	emp = ''
	for i in word:
	    if ((i == 'a') or (i == 'o') or (i == 'y') or (i == 'e') or (i == 'u') or (i == 'i')):
	        pass
	    else:
	        emp = ((emp + '.') + i)
	print(emp)
"
2116043,29306605,"n = int(input())
print(-1 if n < 3 else 210 * (10**(n-1) // 210 + 1))",6204,4936,1558,8/9/17 16:13,2,1876,1,8,"[(True, '-1', '-1', 182121), (True, '10080', '10080', 182122), (True, '100170', '100170', 182123), (True, '1050', '1050', 182124), (True, '100000000000110', '100000000000110', 182125), (True, '1000000000000050', '1000000000000050', 182126), (True, '10000000000000080', '10000000000000080', 182127), (True, '1000020', '1000020', 182128), (True, '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000170', '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000170', 182129), (True, '10000200', '10000200', 182130), (True, '210', '210', 182131), (True, '-1', '-1', 182132), (True, '100000110', '100000110', 182133), (True, '1000000050', '1000000050', 182134), (True, '10000000080', '10000000080', 182135), (True, '100000000170', '100000000170', 182136), (True, '1000000000020', '1000000000020', 182137), (True, '10000000000200', '10000000000200', 182138), (True, '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020', '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020', 182160), (True, '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200', '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200', 182161), (True, '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110', '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110', 182162), (True, '100000000000000170', '100000000000000170', 182163), (True, '1000000000000000020', '1000000000000000020', 182164), (True, '10000000000000000200', '10000000000000000200', 182165), (True, '100000000000000000110', '100000000000000000110', 182166), (True, '1000000000000000000050', '1000000000000000000050', 182167), (True, '10000000000000000000080', '10000000000000000000080', 182168), (True, '100000000000000000000170', '100000000000000000000170', 182169), (True, '1000000000000000000000020', '1000000000000000000000020', 182170), (True, '1000000000000000000000000000020', '1000000000000000000000000000020', 182171), (True, '100000000000000000000000000000110', '100000000000000000000000000000110', 182172), (True, '10000000000000000000000000000000000000000000000000000000000000080', '10000000000000000000000000000000000000000000000000000000000000080', 182173)]",True,Accecpted,0.7969405445668117,0.9705882352941176,False,0.0,False,"def func(*args):
	
	n = int(args[0])
	print(((- 1) if (n < 3) else (210 * (((10 ** (n - 1)) // 210) + 1))))
"
1851057,9376378,"import re
s = input()
if '@' not in s:
	print('NO')
	exit()
u, h = s.split('@', 1)
r = None
if '/' in h:
	if '/' in h[h.index('/') + 1: ]:
		print('NO')
		exit()
	h, r = h.split('/')
if not re.match('^\w{1,16}$', u):
	print('NO')
elif r is not None and not re.match('^\w{1,16}$', r):
	print('NO')
elif 1 > len(h) or len(h) > 32:
	print('NO')
else:
	h = h.split('.')
	if any(not re.match('^\w{1,16}$', x) for x in h):
		print('NO')
	else:
		print('YES')",2466,164,92,1/7/15 5:26,24,1662,1,8,"[(True, 'NO', 'NO', 21064), (True, 'NO', 'NO', 21065), (True, 'NO', 'NO', 21066), (True, 'NO', 'NO', 21067), (True, 'NO', 'NO', 21068), (True, 'YES', 'YES', 21069), (True, 'NO', 'NO', 21070), (True, 'NO', 'NO', 21071), (True, 'NO', 'NO', 21072), (True, 'NO', 'NO', 21073), (True, 'NO', 'NO', 21074), (True, 'NO', 'NO', 21075), (True, 'NO', 'NO', 21076), (True, 'NO', 'NO', 21077), (True, 'NO', 'NO', 21078), (True, 'NO', 'NO', 21079), (True, 'NO', 'NO', 21080), (True, 'NO', 'NO', 21081), (True, 'NO', 'NO', 21082), (True, 'NO', 'NO', 21083), (True, 'NO', 'NO', 21084), (True, 'NO', 'NO', 21085), (True, 'NO', 'NO', 21086), (True, 'NO', 'NO', 21087), (True, 'NO', 'NO', 21088), (True, 'NO', 'NO', 21089), (True, 'NO', 'NO', 21090), (True, 'NO', 'NO', 21091), (True, 'NO', 'NO', 21092), (True, 'NO', 'NO', 21093), (True, 'NO', 'NO', 21094), (True, 'NO', 'NO', 21095), (True, 'NO', 'NO', 21096), (True, 'NO', 'NO', 21097), (True, 'NO', 'NO', 21098), (True, 'NO', 'NO', 21099), (True, 'NO', 'NO', 21100), (True, 'NO', 'NO', 21101), (True, 'NO', 'NO', 21102), (True, 'NO', 'NO', 21103), (True, 'YES', 'YES', 21104), (True, 'NO', 'NO', 21105), (True, 'NO', 'NO', 21106), (True, 'NO', 'NO', 21107), (True, 'YES', 'YES', 21108), (True, 'NO', 'NO', 21109), (True, 'NO', 'NO', 21110), (True, 'NO', 'NO', 21111), (True, 'NO', 'NO', 21112), (True, 'NO', 'NO', 21113), (True, 'YES', 'YES', 21114), (True, 'YES', 'YES', 21115), (True, 'YES', 'YES', 21116), (True, 'YES', 'YES', 21117), (True, 'NO', 'NO', 21118), (True, 'YES', 'YES', 21119), (True, 'YES', 'YES', 21120), (True, 'NO', 'NO', 21121), (True, 'YES', 'YES', 21122), (True, 'YES', 'YES', 21123), (True, 'NO', 'NO', 21124), (True, 'YES', 'YES', 21125), (True, 'NO', 'NO', 21126), (True, 'YES', 'YES', 21127), (True, 'YES', 'YES', 21128), (True, 'YES', 'YES', 21129), (True, 'NO', 'NO', 21130), (True, 'YES', 'YES', 21131), (True, 'NO', 'NO', 21132), (True, 'YES', 'YES', 21133), (True, 'YES', 'YES', 21134), (True, 'YES', 'YES', 21135), (True, 'YES', 'YES', 21136), (True, 'YES', 'YES', 21137), (True, 'NO', 'NO', 21138), (True, 'NO', 'NO', 21139), (True, 'YES', 'YES', 21140), (True, 'YES', 'YES', 21141), (True, 'NO', 'NO', 21142), (True, 'YES', 'YES', 21143), (True, 'NO', 'NO', 21144), (True, 'NO', 'NO', 21145), (True, 'NO', 'NO', 21146), (True, 'NO', 'NO', 21147), (True, 'NO', 'NO', 21148)]",True,Accecpted,0.8189423385971952,0.9705215419501134,False,0.0,False,"def func(*args):
	
	import re
	s = args[0]
	if ('@' not in s):
	    print('NO')
	    exit()
	(u, h) = s.split('@', 1)
	r = None
	if ('/' in h):
	    if ('/' in h[(h.index('/') + 1):]):
	        print('NO')
	        exit()
	    (h, r) = h.split('/')
	if (not re.match('^\\w{1,16}$', u)):
	    print('NO')
	elif ((r is not None) and (not re.match('^\\w{1,16}$', r))):
	    print('NO')
	elif ((1 > len(h)) or (len(h) > 32)):
	    print('NO')
	else:
	    h = h.split('.')
	    if any(((not re.match('^\\w{1,16}$', x)) for x in h)):
	        print('NO')
	    else:
	        print('YES')
"
1851056,9376371,"import re
s = input()
if '@' not in s:
	print('NO')
	exit()
u, h = s.split('@', 1)
r = ''
if '/' in h:
	if '/' in h[h.index('/') + 1: ]:
		print('NO')
		exit()
	h, r = h.split('/')
if not re.match('^\w{1,16}$', u):
	print('NO')
elif not re.match('^\w{,16}$', r):
	print('NO')
elif 1 > len(h) or len(h) > 32:
	print('NO')
else:
	h = h.split('.')
	if any(not re.match('^\w{,16}$', x) for x in h):
		print('NO')
	else:
		print('YES')",2466,144,77,1/7/15 5:24,24,1662,2,8,"[(True, 'NO', 'NO', 21064), (True, 'NO', 'NO', 21065), (True, 'NO', 'NO', 21066), (True, 'NO', 'NO', 21067), (True, 'NO', 'NO', 21068), (True, 'YES', 'YES', 21069), (True, 'NO', 'NO', 21070), (True, 'NO', 'NO', 21071), (True, 'NO', 'NO', 21072), (True, 'NO', 'NO', 21073), (True, 'NO', 'NO', 21074), (True, 'NO', 'NO', 21075), (True, 'NO', 'NO', 21076), (True, 'NO', 'NO', 21077), (False, 'YES', 'NO', 21078), (True, 'NO', 'NO', 21079), (True, 'NO', 'NO', 21080), (True, 'NO', 'NO', 21081), (True, 'NO', 'NO', 21082), (True, 'NO', 'NO', 21083), (True, 'NO', 'NO', 21084), (True, 'NO', 'NO', 21085), (True, 'NO', 'NO', 21086), (True, 'NO', 'NO', 21087), (True, 'NO', 'NO', 21088), (False, 'YES', 'NO', 21089), (True, 'NO', 'NO', 21090), (True, 'NO', 'NO', 21091), (True, 'NO', 'NO', 21092), (True, 'NO', 'NO', 21093), (True, 'NO', 'NO', 21094), (True, 'NO', 'NO', 21095), (True, 'NO', 'NO', 21096), (True, 'NO', 'NO', 21097), (True, 'NO', 'NO', 21098), (True, 'NO', 'NO', 21099), (True, 'NO', 'NO', 21100), (True, 'NO', 'NO', 21101), (True, 'NO', 'NO', 21102), (True, 'NO', 'NO', 21103), (True, 'YES', 'YES', 21104), (True, 'NO', 'NO', 21105), (True, 'NO', 'NO', 21106), (False, 'YES', 'NO', 21107), (True, 'YES', 'YES', 21108), (True, 'NO', 'NO', 21109), (True, 'NO', 'NO', 21110), (True, 'NO', 'NO', 21111), (True, 'NO', 'NO', 21112), (True, 'NO', 'NO', 21113), (True, 'YES', 'YES', 21114), (True, 'YES', 'YES', 21115), (True, 'YES', 'YES', 21116), (True, 'YES', 'YES', 21117), (False, 'YES', 'NO', 21118), (True, 'YES', 'YES', 21119), (True, 'YES', 'YES', 21120), (False, 'YES', 'NO', 21121), (True, 'YES', 'YES', 21122), (True, 'YES', 'YES', 21123), (False, 'YES', 'NO', 21124), (True, 'YES', 'YES', 21125), (False, 'YES', 'NO', 21126), (True, 'YES', 'YES', 21127), (True, 'YES', 'YES', 21128), (True, 'YES', 'YES', 21129), (False, 'YES', 'NO', 21130), (True, 'YES', 'YES', 21131), (False, 'YES', 'NO', 21132), (True, 'YES', 'YES', 21133), (True, 'YES', 'YES', 21134), (True, 'YES', 'YES', 21135), (True, 'YES', 'YES', 21136), (True, 'YES', 'YES', 21137), (False, 'YES', 'NO', 21138), (False, 'YES', 'NO', 21139), (True, 'YES', 'YES', 21140), (True, 'YES', 'YES', 21141), (False, 'YES', 'NO', 21142), (True, 'YES', 'YES', 21143), (False, 'YES', 'NO', 21144), (False, 'YES', 'NO', 21145), (True, 'NO', 'NO', 21146), (False, 'YES', 'NO', 21147), (True, 'NO', 'NO', 21148)]",False,Wrong Answer,0.8189423385971952,0.9705215419501134,False,0.1764705882352941,False,"def func(*args):
	
	import re
	s = args[0]
	if ('@' not in s):
	    print('NO')
	    exit()
	(u, h) = s.split('@', 1)
	r = ''
	if ('/' in h):
	    if ('/' in h[(h.index('/') + 1):]):
	        print('NO')
	        exit()
	    (h, r) = h.split('/')
	if (not re.match('^\\w{1,16}$', u)):
	    print('NO')
	elif (not re.match('^\\w{,16}$', r)):
	    print('NO')
	elif ((1 > len(h)) or (len(h) > 32)):
	    print('NO')
	else:
	    h = h.split('.')
	    if any(((not re.match('^\\w{,16}$', x)) for x in h)):
	        print('NO')
	    else:
	        print('YES')
"
1150374,15562778,"def main():
	x = int(input())
	print(jumps(x))

def jumps(n):
	n = abs(n)
	i = 0
	while True:
		product = i * (i + 1) // 2
		if product >= n and product % 2 == n % 2:
			return i
		i += 1

#print(jumps(6))
main()",17843,16,156,1/24/16 23:23,15,1060,1,8,"[(True, '3', '3', 131166), (True, '3', '3', 131167), (True, '0', '0', 131168), (True, '44723', '44723', 131169), (True, '44720', '44720', 131170), (True, '44721', '44721', 131171), (True, '44721', '44721', 131172), (True, '31273', '31273', 131173), (True, '41617', '41617', 131174), (True, '23591', '23591', 131175), (True, '13213', '13213', 131176), (True, '14403', '14403', 131177), (True, '24277', '24277', 131178), (True, '31166', '31166', 131179), (True, '36787', '36787', 131180), (True, '41657', '41657', 131181), (True, '43393', '43393', 131182), (True, '42377', '42377', 131183), (True, '37603', '37603', 131184), (True, '39755', '39755', 131185), (True, '5730', '5730', 131186), (True, '40573', '40573', 131187), (True, '32179', '32179', 131188), (True, '24038', '24038', 131189), (True, '42531', '42531', 131190), (True, '22147', '22147', 131191), (True, '33511', '33511', 131192), (True, '39482', '39482', 131193), (True, '7383', '7383', 131194), (True, '41116', '41116', 131195)]",True,Accecpted,0.8929536156338775,0.9703872437357632,False,0.0,False,"def func(*args):
	
	
	def main():
	    x = int(args[0])
	    print(jumps(x))
	
	def jumps(n):
	    n = abs(n)
	    i = 0
	    while True:
	        product = ((i * (i + 1)) // 2)
	        if ((product >= n) and ((product % 2) == (n % 2))):
	            return i
	        i += 1
	main()
"
1150373,15562768,"def main():
	x = int(input())
	print(jumps(x))

def jumps(n):
	i = 0
	while True:
		product = i * (i + 1) // 2
		if product >= n and product % 2 == n % 2:
			return i
		i += 1

#print(jumps(6))
main()",17843,0,92,1/24/16 23:22,14,1060,2,8,"[(True, '3', '3', 131166), (True, '3', '3', 131167), (True, '0', '0', 131168), (False, '0', '44723', 131169), (True, '44720', '44720', 131170), (True, '44721', '44721', 131171), (True, '44721', '44721', 131172), (False, '1', '31273', 131173), (False, '1', '41617', 131174), (False, '0', '23591', 131175), (False, '1', '13213', 131176), (True, '14403', '14403', 131177), (True, '24277', '24277', 131178), (True, '31166', '31166', 131179), (True, '36787', '36787', 131180), (True, '41657', '41657', 131181), (False, '1', '43393', 131182), (False, '1', '42377', 131183), (False, '0', '37603', 131184), (False, '0', '39755', 131185), (True, '5730', '5730', 131186), (True, '40573', '40573', 131187), (False, '0', '32179', 131188), (True, '24038', '24038', 131189), (False, '0', '42531', 131190), (False, '0', '22147', 131191), (True, '33511', '33511', 131192), (False, '1', '39482', 131193), (True, '7383', '7383', 131194), (True, '41116', '41116', 131195)]",False,Wrong Answer,0.8929536156338775,0.9703872437357632,False,0.4333333333333333,False,"def func(*args):
	
	
	def main():
	    x = int(args[0])
	    print(jumps(x))
	
	def jumps(n):
	    i = 0
	    while True:
	        product = ((i * (i + 1)) // 2)
	        if ((product >= n) and ((product % 2) == (n % 2))):
	            return i
	        i += 1
	main()
"
2414507,18904224,"n,k = map(int,input().split())

if (k == 1 and n != 1) or k > n:
    print(-1)

else:
    s1 = []
    s2 = []
    for i in range(k-1,1,-1):
        c = chr(97 + i)
        s1.append(c)
        s2.append(c)
    for i in range(n-k+2):
        if i % 2 == 0 :
            s1.append('a')
            s2.append('b')
        else:
            s1.append('b')
            s2.append('a')

    s1 = s1[::-1]
    s2 = s2[::-1]

    s1 = ''.join(s1)
    s2 = ''.join(s2)

    print(min(s1,s2))",7544,13720,1058,7/5/16 19:19,27,2093,2,8,"[(True, 'ababacd', 'ababacd', 195413), (True, '-1', '-1', 195414), (True, 'abababacde', 'abababacde', 195415), (True, 'abababababababababababababababababababababababa', 'abababababababababababababababababababababababa', 195416), (True, 'ababacdefg', 'ababacdefg', 195417), (True, 'abababababababacdefg', 'abababababababacdefg', 195418), (True, 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz', 195419), (True, '-1', '-1', 195420), (True, 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstuvwxyz', 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstuvwxyz', 195421), (True, '-1', '-1', 195423), (True, '-1', '-1', 195428), (True, '-1', '-1', 195436), (True, '-1', '-1', 195437), (False, 'ab', 'a', 195438), (True, 'ab', 'ab', 195439), (True, '-1', '-1', 195440), (True, '-1', '-1', 195441), (True, 'ababababababababababababab', 'ababababababababababababab', 195442), (True, 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstu', 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstu', 195443), (True, 'abc', 'abc', 195444)]",False,Wrong Answer,0.8865119672528199,0.970334928229665,False,0.05,False,"def func(*args):
	
	(n, k) = map(int, args[0].split())
	if (((k == 1) and (n != 1)) or (k > n)):
	    print((- 1))
	else:
	    s1 = []
	    s2 = []
	    for i in range((k - 1), 1, (- 1)):
	        c = chr((97 + i))
	        s1.append(c)
	        s2.append(c)
	    for i in range(((n - k) + 2)):
	        if ((i % 2) == 0):
	            s1.append('a')
	            s2.append('b')
	        else:
	            s1.append('b')
	            s2.append('a')
	    s1 = s1[::(- 1)]
	    s2 = s2[::(- 1)]
	    s1 = ''.join(s1)
	    s2 = ''.join(s2)
	    print(min(s1, s2))
"
2414508,18904235,"n,k = map(int,input().split())

if (k == 1 and n != 1) or k > n:
    print(-1)

elif n == 1 :
    print('a')
else:
    s1 = []
    s2 = []
    for i in range(k-1,1,-1):
        c = chr(97 + i)
        s1.append(c)
        s2.append(c)
    for i in range(n-k+2):
        if i % 2 == 0 :
            s1.append('a')
            s2.append('b')
        else:
            s1.append('b')
            s2.append('a')

    s1 = s1[::-1]
    s2 = s2[::-1]

    s1 = ''.join(s1)
    s2 = ''.join(s2)

    print(min(s1,s2))",7544,13152,1028,7/5/16 19:20,29,2093,1,8,"[(True, 'ababacd', 'ababacd', 195413), (True, '-1', '-1', 195414), (True, 'abababacde', 'abababacde', 195415), (True, 'abababababababababababababababababababababababa', 'abababababababababababababababababababababababa', 195416), (True, 'ababacdefg', 'ababacdefg', 195417), (True, 'abababababababacdefg', 'abababababababacdefg', 195418), (True, 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz', 195419), (True, '-1', '-1', 195420), (True, 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstuvwxyz', 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstuvwxyz', 195421), (True, '-1', '-1', 195423), (True, '-1', '-1', 195428), (True, '-1', '-1', 195436), (True, '-1', '-1', 195437), (True, 'a', 'a', 195438), (True, 'ab', 'ab', 195439), (True, '-1', '-1', 195440), (True, '-1', '-1', 195441), (True, 'ababababababababababababab', 'ababababababababababababab', 195442), (True, 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstu', 'ababababababababababababababababababababababababababababababababababababababababababababababababababababcdefghijklmnopqrstu', 195443), (True, 'abc', 'abc', 195444)]",True,Accecpted,0.8865119672528199,0.970334928229665,False,0.0,False,"def func(*args):
	
	(n, k) = map(int, args[0].split())
	if (((k == 1) and (n != 1)) or (k > n)):
	    print((- 1))
	elif (n == 1):
	    print('a')
	else:
	    s1 = []
	    s2 = []
	    for i in range((k - 1), 1, (- 1)):
	        c = chr((97 + i))
	        s1.append(c)
	        s2.append(c)
	    for i in range(((n - k) + 2)):
	        if ((i % 2) == 0):
	            s1.append('a')
	            s2.append('b')
	        else:
	            s1.append('b')
	            s2.append('a')
	    s1 = s1[::(- 1)]
	    s2 = s2[::(- 1)]
	    s1 = ''.join(s1)
	    s2 = ''.join(s2)
	    print(min(s1, s2))
"
2734681,26084006,"'''input
11 5 6 11
'''
from itertools import combinations as combo
l = list(combo(list(map(int, input().split())), 3))
t, s = 0, 0
for x in l:
	if x[0] + x[1] > x[2] and x[0] + x[2] > x[1] and x[1] + x[2] > x[0]:
		t = 1
		break
	elif x[0] + x[1] >= x[2] and x[0] + x[2] >= x[1] and x[1] + x[2] >= x[0]:
		s = 1
if t == 1:
	print(""TRIANGLE"")
elif s == 1:
	print(""SEGMENT"")
else:
	print(""IMPOSSIBLE"")",531,5440,124,4/2/17 21:30,18,2346,1,8,"[(True, 'TRIANGLE', 'TRIANGLE', 209679), (True, 'SEGMENT', 'SEGMENT', 209680), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209681), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209682), (True, 'TRIANGLE', 'TRIANGLE', 209683), (True, 'TRIANGLE', 'TRIANGLE', 209684), (True, 'TRIANGLE', 'TRIANGLE', 209685), (True, 'TRIANGLE', 'TRIANGLE', 209686), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209687), (True, 'TRIANGLE', 'TRIANGLE', 209688), (True, 'SEGMENT', 'SEGMENT', 209689), (True, 'TRIANGLE', 'TRIANGLE', 209690), (True, 'SEGMENT', 'SEGMENT', 209691), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209692), (True, 'TRIANGLE', 'TRIANGLE', 209693), (True, 'TRIANGLE', 'TRIANGLE', 209694), (True, 'SEGMENT', 'SEGMENT', 209695), (True, 'SEGMENT', 'SEGMENT', 209696), (True, 'TRIANGLE', 'TRIANGLE', 209697), (True, 'SEGMENT', 'SEGMENT', 209698), (True, 'SEGMENT', 'SEGMENT', 209699), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209700), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209701), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209702), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209703), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209704), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209705), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209706), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209707), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209708), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209709), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209710), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209711), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209712), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209713), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209714), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209715), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209716), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209717), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209718), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209719), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209720), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209721), (True, 'SEGMENT', 'SEGMENT', 209722), (True, 'SEGMENT', 'SEGMENT', 209723), (True, 'SEGMENT', 'SEGMENT', 209724), (True, 'SEGMENT', 'SEGMENT', 209725), (True, 'SEGMENT', 'SEGMENT', 209726), (True, 'SEGMENT', 'SEGMENT', 209727), (True, 'SEGMENT', 'SEGMENT', 209728), (True, 'SEGMENT', 'SEGMENT', 209729), (True, 'SEGMENT', 'SEGMENT', 209730), (True, 'SEGMENT', 'SEGMENT', 209731), (True, 'SEGMENT', 'SEGMENT', 209732), (True, 'SEGMENT', 'SEGMENT', 209733), (True, 'SEGMENT', 'SEGMENT', 209734), (True, 'SEGMENT', 'SEGMENT', 209735), (True, 'SEGMENT', 'SEGMENT', 209736), (True, 'SEGMENT', 'SEGMENT', 209737), (True, 'SEGMENT', 'SEGMENT', 209738), (True, 'SEGMENT', 'SEGMENT', 209739), (True, 'SEGMENT', 'SEGMENT', 209740), (True, 'SEGMENT', 'SEGMENT', 209741), (True, 'TRIANGLE', 'TRIANGLE', 209742), (True, 'TRIANGLE', 'TRIANGLE', 209743), (True, 'TRIANGLE', 'TRIANGLE', 209744), (True, 'TRIANGLE', 'TRIANGLE', 209745), (True, 'TRIANGLE', 'TRIANGLE', 209746), (True, 'TRIANGLE', 'TRIANGLE', 209747), (True, 'TRIANGLE', 'TRIANGLE', 209748), (True, 'TRIANGLE', 'TRIANGLE', 209749), (True, 'TRIANGLE', 'TRIANGLE', 209750), (True, 'TRIANGLE', 'TRIANGLE', 209751), (True, 'TRIANGLE', 'TRIANGLE', 209752), (True, 'TRIANGLE', 'TRIANGLE', 209753), (True, 'TRIANGLE', 'TRIANGLE', 209754), (True, 'TRIANGLE', 'TRIANGLE', 209755), (True, 'TRIANGLE', 'TRIANGLE', 209756), (True, 'TRIANGLE', 'TRIANGLE', 209757), (True, 'TRIANGLE', 'TRIANGLE', 209758), (True, 'TRIANGLE', 'TRIANGLE', 209759), (True, 'TRIANGLE', 'TRIANGLE', 209760), (True, 'TRIANGLE', 'TRIANGLE', 209761)]",True,Accecpted,0.9094613723411084,0.9701492537313432,False,0.0,False,"def func(*args):
	
	'input\n11 5 6 11\n'
	from itertools import combinations as combo
	l = list(combo(list(map(int, args[0].split())), 3))
	(t, s) = (0, 0)
	for x in l:
	    if (((x[0] + x[1]) > x[2]) and ((x[0] + x[2]) > x[1]) and ((x[1] + x[2]) > x[0])):
	        t = 1
	        break
	    elif (((x[0] + x[1]) >= x[2]) and ((x[0] + x[2]) >= x[1]) and ((x[1] + x[2]) >= x[0])):
	        s = 1
	if (t == 1):
	    print('TRIANGLE')
	elif (s == 1):
	    print('SEGMENT')
	else:
	    print('IMPOSSIBLE')
"
2734680,26083999,"'''input
4 2 1 3
'''
from itertools import combinations as combo
l = list(combo(list(map(int, input().split())), 3))
t, s = 0, 0
for x in l:
	if x[0] + x[1] > x[2] and x[0] + x[2] > x[1] and x[1] + x[2] > x[0]:
		t = 1
		break
	elif x[0] + x[1] >= x[2] and x[0] + x[2] >= x[1] and x[1] + x[2] >= x[0]:
		s = 1
		break
if t == 1:
	print(""TRIANGLE"")
elif s == 1:
	print(""SEGMENT"")
else:
	print(""IMPOSSIBLE"")",531,5440,124,4/2/17 21:30,19,2346,2,8,"[(True, 'TRIANGLE', 'TRIANGLE', 209679), (True, 'SEGMENT', 'SEGMENT', 209680), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209681), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209682), (True, 'TRIANGLE', 'TRIANGLE', 209683), (False, 'SEGMENT', 'TRIANGLE', 209684), (True, 'TRIANGLE', 'TRIANGLE', 209685), (False, 'SEGMENT', 'TRIANGLE', 209686), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209687), (True, 'TRIANGLE', 'TRIANGLE', 209688), (True, 'SEGMENT', 'SEGMENT', 209689), (True, 'TRIANGLE', 'TRIANGLE', 209690), (True, 'SEGMENT', 'SEGMENT', 209691), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209692), (True, 'TRIANGLE', 'TRIANGLE', 209693), (True, 'TRIANGLE', 'TRIANGLE', 209694), (True, 'SEGMENT', 'SEGMENT', 209695), (True, 'SEGMENT', 'SEGMENT', 209696), (True, 'TRIANGLE', 'TRIANGLE', 209697), (True, 'SEGMENT', 'SEGMENT', 209698), (True, 'SEGMENT', 'SEGMENT', 209699), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209700), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209701), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209702), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209703), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209704), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209705), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209706), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209707), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209708), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209709), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209710), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209711), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209712), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209713), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209714), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209715), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209716), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209717), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209718), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209719), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209720), (True, 'IMPOSSIBLE', 'IMPOSSIBLE', 209721), (True, 'SEGMENT', 'SEGMENT', 209722), (True, 'SEGMENT', 'SEGMENT', 209723), (True, 'SEGMENT', 'SEGMENT', 209724), (True, 'SEGMENT', 'SEGMENT', 209725), (True, 'SEGMENT', 'SEGMENT', 209726), (True, 'SEGMENT', 'SEGMENT', 209727), (True, 'SEGMENT', 'SEGMENT', 209728), (True, 'SEGMENT', 'SEGMENT', 209729), (True, 'SEGMENT', 'SEGMENT', 209730), (True, 'SEGMENT', 'SEGMENT', 209731), (True, 'SEGMENT', 'SEGMENT', 209732), (True, 'SEGMENT', 'SEGMENT', 209733), (True, 'SEGMENT', 'SEGMENT', 209734), (True, 'SEGMENT', 'SEGMENT', 209735), (True, 'SEGMENT', 'SEGMENT', 209736), (True, 'SEGMENT', 'SEGMENT', 209737), (True, 'SEGMENT', 'SEGMENT', 209738), (True, 'SEGMENT', 'SEGMENT', 209739), (True, 'SEGMENT', 'SEGMENT', 209740), (True, 'SEGMENT', 'SEGMENT', 209741), (True, 'TRIANGLE', 'TRIANGLE', 209742), (False, 'SEGMENT', 'TRIANGLE', 209743), (True, 'TRIANGLE', 'TRIANGLE', 209744), (False, 'SEGMENT', 'TRIANGLE', 209745), (True, 'TRIANGLE', 'TRIANGLE', 209746), (True, 'TRIANGLE', 'TRIANGLE', 209747), (True, 'TRIANGLE', 'TRIANGLE', 209748), (True, 'TRIANGLE', 'TRIANGLE', 209749), (True, 'TRIANGLE', 'TRIANGLE', 209750), (True, 'TRIANGLE', 'TRIANGLE', 209751), (True, 'TRIANGLE', 'TRIANGLE', 209752), (True, 'TRIANGLE', 'TRIANGLE', 209753), (True, 'TRIANGLE', 'TRIANGLE', 209754), (True, 'TRIANGLE', 'TRIANGLE', 209755), (True, 'TRIANGLE', 'TRIANGLE', 209756), (False, 'SEGMENT', 'TRIANGLE', 209757), (False, 'SEGMENT', 'TRIANGLE', 209758), (True, 'TRIANGLE', 'TRIANGLE', 209759), (True, 'TRIANGLE', 'TRIANGLE', 209760), (True, 'TRIANGLE', 'TRIANGLE', 209761)]",False,Wrong Answer,0.9094613723411084,0.9701492537313432,False,0.072289156626506,False,"def func(*args):
	
	'input\n4 2 1 3\n'
	from itertools import combinations as combo
	l = list(combo(list(map(int, args[0].split())), 3))
	(t, s) = (0, 0)
	for x in l:
	    if (((x[0] + x[1]) > x[2]) and ((x[0] + x[2]) > x[1]) and ((x[1] + x[2]) > x[0])):
	        t = 1
	        break
	    elif (((x[0] + x[1]) >= x[2]) and ((x[0] + x[2]) >= x[1]) and ((x[1] + x[2]) >= x[0])):
	        s = 1
	        break
	if (t == 1):
	    print('TRIANGLE')
	elif (s == 1):
	    print('SEGMENT')
	else:
	    print('IMPOSSIBLE')
"
2265276,27176005,"def pushes_count(buttons):
    pushes_list = list(range(1, buttons))
    pushes_list.sort(reverse=True)

    counter = 0
    for i in pushes_list:
        pushes_list[counter] += i * counter
        counter += 1
    print(buttons + sum(pushes_list))

pushes_count(int(input()))",5834,252,124,5/17/17 12:20,11,1983,1,8,"[(True, '3', '3', 189204), (True, '7', '7', 189205), (True, '14', '14', 189206), (True, '1', '1', 189207), (True, '175', '175', 189208), (True, '1333335000', '1333335000', 189209), (True, '888644743', '888644743', 189210), (True, '117099969', '117099969', 189211), (True, '1331335999', '1331335999', 189212), (True, '127259419', '127259419', 189213), (True, '164675486', '164675486', 189214), (True, '833', '833', 189215), (True, '20875', '20875', 189216), (True, '125671', '125671', 189217), (True, '129858', '129858', 189218), (True, '2796416', '2796416', 189219), (True, '22370048', '22370048', 189220), (True, '49235271', '49235271', 189221), (True, '49457383', '49457383', 189222), (True, '5160119', '5160119', 189223), (True, '318541121', '318541121', 189224), (True, '562501250', '562501250', 189225), (True, '1033182073', '1033182073', 189226), (True, '166667500', '166667500', 189227)]",True,Accecpted,0.959096559793538,0.9701230228471002,False,0.0,False,"def func(*args):
	
	
	def pushes_count(buttons):
	    pushes_list = list(range(1, buttons))
	    pushes_list.sort(reverse=True)
	    counter = 0
	    for i in pushes_list:
	        pushes_list[counter] += (i * counter)
	        counter += 1
	    print((buttons + sum(pushes_list)))
	pushes_count(int(args[0]))
"
1324230,26490796,"s=input()
h=0
for i in range(0,len(s)):
       if s[i] is 'H' or s[i] is 'Q' or s[i] is '9' :
           print('YES')
           h=1
           break
if h is 0:
    print(""NO"")",67702,5428,124,4/19/17 10:41,9,1198,1,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (True, 'NO', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (True, 'NO', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (True, 'NO', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (True, 'NO', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (True, 'NO', 'NO', 142090), (True, 'NO', 'NO', 142091), (True, 'NO', 'NO', 142092), (True, 'NO', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (True, 'NO', 'NO', 142096), (True, 'NO', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (True, 'NO', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (True, 'NO', 'NO', 142105)]",True,Accecpted,0.8605595021006784,0.9700272479564032,False,0.0,False,"def func(*args):
	
	s = args[0]
	h = 0
	for i in range(0, len(s)):
	    if ((s[i] is 'H') or (s[i] is 'Q') or (s[i] is '9')):
	        print('YES')
	        h = 1
	        break
	if (h is 0):
	    print('NO')
"
1324229,26490749,"s=input()
for i in range(0,len(s)):
       if s[i] is 'H' or s[i] is 'Q' or s[i] is '9' :
           print('YES')
           h=1
           break
if h is not 1:
    print(""NO"")",67702,4508,92,4/19/17 10:39,8,1198,5,8,"[(True, 'YES', 'YES', 142021), (False, '', 'NO', 142022), (False, '', 'NO', 142023), (False, '', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (False, '', 'NO', 142028), (False, '', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (False, '', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (False, '', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (False, '', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (False, '', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (False, '', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (False, '', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (False, '', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (False, '', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (False, '', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (False, '', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (False, '', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (False, '', 'NO', 142085), (False, '', 'NO', 142086), (False, '', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (False, '', 'NO', 142090), (False, '', 'NO', 142091), (False, '', 'NO', 142092), (False, '', 'NO', 142093), (True, 'YES', 'YES', 142094), (False, '', 'NO', 142095), (False, '', 'NO', 142096), (False, '', 'NO', 142097), (False, '', 'NO', 142098), (False, '', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (False, '', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (False, '', 'NO', 142105)]",False,Runtime Error,0.8605595021006784,0.9700272479564032,False,0.3529411764705882,False,"def func(*args):
	
	s = args[0]
	for i in range(0, len(s)):
	    if ((s[i] is 'H') or (s[i] is 'Q') or (s[i] is '9')):
	        print('YES')
	        h = 1
	        break
	if (h is not 1):
	    print('NO')
"
3139190,27969453,"n,m=input().split()
n=int(n)
m=int(m)
if(m>=n):
    m=n
    print(n)
else:
    a=2*(n-m)
    u=1
    l=n-1-m
    while(u!=l):
        mid=(u+l)//2
        if(mid*(mid+1)>=a):
            if((mid-1)*mid<a):
                break
            else:
                l=mid-1
        else:
            if((mid+1)*(mid+2)>=a):
                mid+=1
                break
            else:
                u=mid+1
    print(mid+m)",15060,5408,77,6/22/17 19:40,47,2687,5,8,"[(True, '4', '4', 226915), (True, '5', '5', 226916), (True, '12', '12', 226917), (True, '1024', '1024', 226918), (True, '53010', '53010', 226919), (True, '658892843', '658892843', 226920), (True, '511467058661475480', '511467058661475480', 226921), (True, '1', '1', 226922), (True, '1000000000000000000', '1000000000000000000', 226923), (True, '999999999999997221', '999999999999997221', 226924), (True, '1', '1', 226925), (True, '1414213563', '1414213563', 226926), (True, '1414213571', '1414213571', 226927), (True, '1414213571', '1414213571', 226928), (True, '1414213571', '1414213571', 226929), (True, '1414213572', '1414213572', 226930), (True, '1414213572', '1414213572', 226931), (True, '1234675418', '1234675418', 226932), (True, '1234675418', '1234675418', 226933), (True, '1234675418', '1234675418', 226934), (True, '1234675419', '1234675419', 226935), (True, '1234675419', '1234675419', 226936), (True, '942571991', '942571991', 226937), (True, '942571991', '942571991', 226938), (True, '942571992', '942571992', 226939), (True, '1359321110406', '1359321110406', 226940), (True, '2810608952329', '2810608952329', 226941), (True, '8084245567345', '8084245567345', 226942), (True, '256256364670', '256256364670', 226943), (True, '256256364670', '256256364670', 226944), (True, '256256364670', '256256364670', 226945), (True, '256256364671', '256256364671', 226946), (True, '326385531361089823', '326385531361089823', 226947), (True, '327211775164731428', '327211775164731428', 226948), (True, '1319832715', '1319832715', 226949), (True, '1364243511', '1364243511', 226950), (True, '1289661856', '1289661856', 226951), (True, '1317454248', '1317454248', 226952), (True, '1370517314', '1370517314', 226953), (True, '1396701153', '1396701153', 226954), (True, '1380631201', '1380631201', 226955), (True, '1406630820', '1406630820', 226956), (True, '1330979102', '1330979102', 226957), (True, '1358043072', '1358043072', 226958), (True, '1266953266', '1266953266', 226959), (True, '1314276256', '1314276256', 226960), (True, '1362191462', '1362191462', 226961), (True, '1391685648', '1391685648', 226962), (True, '1389332262', '1389332262', 226963), (True, '1394001194', '1394001194', 226964), (True, '3258373398', '3258373398', 226965), (True, '2314967219', '2314967219', 226966), (True, '17555812078', '17555812078', 226967), (True, '20759977363', '20759977363', 226968), (True, '3373249237', '3373249237', 226969), (True, '46578175853', '46578175853', 226970), (True, '1554456398264', '1554456398264', 226971), (True, '1793367075026', '1793367075026', 226972), (True, '9113285250762', '9113285250762', 226973), (True, '15352195899906', '15352195899906', 226974), (True, '126044893781768', '126044893781768', 226975), (True, '152287950093217', '152287950093217', 226976), (True, '783633554323452', '783633554323452', 226977), (True, '1609872463741155', '1609872463741155', 226978), (True, '15921195067317449', '15921195067317449', 226979), (True, '16747433976901012', '16747433976901012', 226980), (True, '176443296899409285', '176443296899409285', 226981), (True, '177269540108507095', '177269540108507095', 226982), (True, '2', '2', 226983), (True, '2', '2', 226984), (False, '', '3', 226985), (True, '3', '3', 226986), (True, '3', '3', 226987), (True, '3', '3', 226988), (False, '', '4', 226989), (True, '42', '42', 226990), (True, '404', '404', 226991), (True, '1367064836', '1367064836', 226992), (True, '658866858', '658866858', 226993), (True, '10', '10', 226994), (True, '326385530977846185', '326385530977846185', 226995), (True, '327211774155929609', '327211774155929609', 226996), (True, '2570', '2570', 226997), (True, '512486308421983105', '512486308421983105', 226998), (True, '262144', '262144', 226999), (True, '314159265358979323', '314159265358979323', 227000), (True, '10', '10', 227001), (True, '21', '21', 227002), (True, '18', '18', 227003), (True, '22', '22', 227004), (True, '8', '8', 227005), (True, '1000004242', '1000004242', 227006), (True, '1000004242', '1000004242', 227007), (True, '1000004242', '1000004242', 227008), (True, '1000004242', '1000004242', 227009), (True, '1000004243', '1000004243', 227010), (True, '1000004243', '1000004243', 227011), (True, '1000004243', '1000004243', 227012), (False, '', '163162808800191208', 227013), (True, '328584130811799021', '328584130811799021', 227014), (True, '89633000579612779', '89633000579612779', 227015), (False, '', '924211674273037668', 227016), (True, '758790352261429853', '758790352261429853', 227017), (True, '39154349371830600', '39154349371830600', 227018), (True, '313727604417502159', '313727604417502159', 227019), (True, '1000000000000000000', '1000000000000000000', 227020), (False, '', '1000000000000000000', 227021), (True, '999999999999999999', '999999999999999999', 227022), (True, '999999999999999999', '999999999999999999', 227023), (True, '999999999999999998', '999999999999999998', 227024), (True, '1', '1', 227025), (True, '1', '1', 227026), (True, '1', '1', 227027), (True, '6', '6', 227028), (True, '1414213564', '1414213564', 227029), (True, '1', '1', 227030), (True, '5', '5', 227031), (True, '6', '6', 227032), (True, '100000001341640786', '100000001341640786', 227033), (True, '100', '100', 227034), (True, '1', '1', 227035), (True, '447213596', '447213596', 227036), (True, '1000001413506279', '1000001413506279', 227037), (True, '1', '1', 227038), (True, '1414213566', '1414213566', 227039), (True, '1000000000000', '1000000000000', 227040), (True, '1', '1', 227041), (True, '3', '3', 227042), (True, '2', '2', 227043), (True, '1', '1', 227044), (True, '5', '5', 227045), (True, '10', '10', 227046), (True, '10', '10', 227047), (True, '5', '5', 227048), (True, '2', '2', 227049), (True, '10836', '10836', 227050), (True, '16808', '16808', 227051), (True, '1341640788', '1341640788', 227052), (True, '1', '1', 227053), (True, '2', '2', 227054), (True, '10', '10', 227055), (True, '10', '10', 227056), (True, '4', '4', 227057), (True, '1', '1', 227058), (True, '1414213567', '1414213567', 227059), (True, '2', '2', 227060), (True, '4', '4', 227061), (True, '1414213563', '1414213563', 227062), (True, '3', '3', 227063), (True, '707405570970015402', '707405570970015402', 227064), (True, '1', '1', 227065), (True, '6', '6', 227066), (True, '16808', '16808', 227067), (True, '1000000007', '1000000007', 227068), (True, '1', '1', 227069), (True, '1000000000000000', '1000000000000000', 227070), (True, '1414213662', '1414213662', 227071), (True, '1414213571', '1414213571', 227072), (True, '1341640957', '1341640957', 227073), (True, '1', '1', 227074), (True, '10000', '10000', 227075), (True, '1', '1', 227076), (True, '429718493274519777', '429718493274519777', 227077), (True, '2', '2', 227078), (True, '8', '8', 227079), (True, '2', '2', 227080), (True, '1414213563', '1414213563', 227081), (True, '5', '5', 227082), (True, '100000001341640785', '100000001341640785', 227083), (True, '100000000000000000', '100000000000000000', 227084), (True, '5', '5', 227085), (True, '2414213562', '2414213562', 227086), (True, '1', '1', 227087), (True, '16', '16', 227088), (True, '10', '10', 227089), (True, '3', '3', 227090), (True, '10', '10', 227091), (True, '3', '3', 227092), (True, '1414213572', '1414213572', 227093), (True, '10000000000000', '10000000000000', 227094), (True, '5', '5', 227095), (True, '5000', '5000', 227096), (True, '7', '7', 227097), (True, '501414213209', '501414213209', 227098), (True, '8', '8', 227099), (True, '1', '1', 227100), (True, '1414213577', '1414213577', 227101), (True, '1', '1', 227102), (True, '2', '2', 227103), (True, '5', '5', 227104), (True, '1', '1', 227105), (True, '500000000999999999', '500000000999999999', 227106), (True, '1', '1', 227107), (True, '108339532063750408', '108339532063750408', 227108), (True, '5', '5', 227109), (True, '2', '2', 227110), (True, '500000001000000000', '500000001000000000', 227111), (True, '20', '20', 227112), (True, '2', '2', 227113), (True, '100', '100', 227114), (True, '2', '2', 227115), (True, '100000000000000000', '100000000000000000', 227116), (True, '1537670351', '1537670351', 227117), (True, '1', '1', 227118), (True, '11414213554', '11414213554', 227119), (True, '5', '5', 227120), (True, '6', '6', 227121), (True, '100', '100', 227122), (True, '4', '4', 227123), (True, '1000000000', '1000000000', 227124), (True, '10', '10', 227125), (True, '5', '5', 227126), (True, '5', '5', 227127), (True, '200', '200', 227128), (True, '3', '3', 227129), (True, '490000001009950494', '490000001009950494', 227130), (True, '2', '2', 227131), (True, '5', '5', 227132), (True, '5', '5', 227133), (True, '10040', '10040', 227134), (True, '60000001371130920', '60000001371130920', 227135), (True, '10', '10', 227136), (True, '1', '1', 227137)]",False,Runtime Error,0.7804684285594912,0.970010341261634,False,0.0224215246636771,False,"def func(*args):
	
	(n, m) = args[0].split()
	n = int(n)
	m = int(m)
	if (m >= n):
	    m = n
	    print(n)
	else:
	    a = (2 * (n - m))
	    u = 1
	    l = ((n - 1) - m)
	    while (u != l):
	        mid = ((u + l) // 2)
	        if ((mid * (mid + 1)) >= a):
	            if (((mid - 1) * mid) < a):
	                break
	            else:
	                l = (mid - 1)
	        elif (((mid + 1) * (mid + 2)) >= a):
	            mid += 1
	            break
	        else:
	            u = (mid + 1)
	    print((mid + m))
"
3139191,27969525,"n,m=input().split()
n=int(n)
m=int(m)
l=n-1-m
if(m>=n or l*(l+1)<2*(n-m)):
    m=n
    print(n)
else:
    a=2*(n-m)
    u=1
    l=n-1-m
    while(u!=l):
        mid=(u+l)//2
        if(mid*(mid+1)>=a):
            if((mid-1)*mid<a):
                break
            else:
                l=mid-1
        else:
            if((mid+1)*(mid+2)>=a):
                mid+=1
                break
            else:
                u=mid+1
    print(mid+m)",15060,5408,108,6/22/17 19:45,49,2687,1,8,"[(True, '4', '4', 226915), (True, '5', '5', 226916), (True, '12', '12', 226917), (True, '1024', '1024', 226918), (True, '53010', '53010', 226919), (True, '658892843', '658892843', 226920), (True, '511467058661475480', '511467058661475480', 226921), (True, '1', '1', 226922), (True, '1000000000000000000', '1000000000000000000', 226923), (True, '999999999999997221', '999999999999997221', 226924), (True, '1', '1', 226925), (True, '1414213563', '1414213563', 226926), (True, '1414213571', '1414213571', 226927), (True, '1414213571', '1414213571', 226928), (True, '1414213571', '1414213571', 226929), (True, '1414213572', '1414213572', 226930), (True, '1414213572', '1414213572', 226931), (True, '1234675418', '1234675418', 226932), (True, '1234675418', '1234675418', 226933), (True, '1234675418', '1234675418', 226934), (True, '1234675419', '1234675419', 226935), (True, '1234675419', '1234675419', 226936), (True, '942571991', '942571991', 226937), (True, '942571991', '942571991', 226938), (True, '942571992', '942571992', 226939), (True, '1359321110406', '1359321110406', 226940), (True, '2810608952329', '2810608952329', 226941), (True, '8084245567345', '8084245567345', 226942), (True, '256256364670', '256256364670', 226943), (True, '256256364670', '256256364670', 226944), (True, '256256364670', '256256364670', 226945), (True, '256256364671', '256256364671', 226946), (True, '326385531361089823', '326385531361089823', 226947), (True, '327211775164731428', '327211775164731428', 226948), (True, '1319832715', '1319832715', 226949), (True, '1364243511', '1364243511', 226950), (True, '1289661856', '1289661856', 226951), (True, '1317454248', '1317454248', 226952), (True, '1370517314', '1370517314', 226953), (True, '1396701153', '1396701153', 226954), (True, '1380631201', '1380631201', 226955), (True, '1406630820', '1406630820', 226956), (True, '1330979102', '1330979102', 226957), (True, '1358043072', '1358043072', 226958), (True, '1266953266', '1266953266', 226959), (True, '1314276256', '1314276256', 226960), (True, '1362191462', '1362191462', 226961), (True, '1391685648', '1391685648', 226962), (True, '1389332262', '1389332262', 226963), (True, '1394001194', '1394001194', 226964), (True, '3258373398', '3258373398', 226965), (True, '2314967219', '2314967219', 226966), (True, '17555812078', '17555812078', 226967), (True, '20759977363', '20759977363', 226968), (True, '3373249237', '3373249237', 226969), (True, '46578175853', '46578175853', 226970), (True, '1554456398264', '1554456398264', 226971), (True, '1793367075026', '1793367075026', 226972), (True, '9113285250762', '9113285250762', 226973), (True, '15352195899906', '15352195899906', 226974), (True, '126044893781768', '126044893781768', 226975), (True, '152287950093217', '152287950093217', 226976), (True, '783633554323452', '783633554323452', 226977), (True, '1609872463741155', '1609872463741155', 226978), (True, '15921195067317449', '15921195067317449', 226979), (True, '16747433976901012', '16747433976901012', 226980), (True, '176443296899409285', '176443296899409285', 226981), (True, '177269540108507095', '177269540108507095', 226982), (True, '2', '2', 226983), (True, '2', '2', 226984), (True, '3', '3', 226985), (True, '3', '3', 226986), (True, '3', '3', 226987), (True, '3', '3', 226988), (True, '4', '4', 226989), (True, '42', '42', 226990), (True, '404', '404', 226991), (True, '1367064836', '1367064836', 226992), (True, '658866858', '658866858', 226993), (True, '10', '10', 226994), (True, '326385530977846185', '326385530977846185', 226995), (True, '327211774155929609', '327211774155929609', 226996), (True, '2570', '2570', 226997), (True, '512486308421983105', '512486308421983105', 226998), (True, '262144', '262144', 226999), (True, '314159265358979323', '314159265358979323', 227000), (True, '10', '10', 227001), (True, '21', '21', 227002), (True, '18', '18', 227003), (True, '22', '22', 227004), (True, '8', '8', 227005), (True, '1000004242', '1000004242', 227006), (True, '1000004242', '1000004242', 227007), (True, '1000004242', '1000004242', 227008), (True, '1000004242', '1000004242', 227009), (True, '1000004243', '1000004243', 227010), (True, '1000004243', '1000004243', 227011), (True, '1000004243', '1000004243', 227012), (True, '163162808800191208', '163162808800191208', 227013), (True, '328584130811799021', '328584130811799021', 227014), (True, '89633000579612779', '89633000579612779', 227015), (True, '924211674273037668', '924211674273037668', 227016), (True, '758790352261429853', '758790352261429853', 227017), (True, '39154349371830600', '39154349371830600', 227018), (True, '313727604417502159', '313727604417502159', 227019), (True, '1000000000000000000', '1000000000000000000', 227020), (True, '1000000000000000000', '1000000000000000000', 227021), (True, '999999999999999999', '999999999999999999', 227022), (True, '999999999999999999', '999999999999999999', 227023), (True, '999999999999999998', '999999999999999998', 227024), (True, '1', '1', 227025), (True, '1', '1', 227026), (True, '1', '1', 227027), (True, '6', '6', 227028), (True, '1414213564', '1414213564', 227029), (True, '1', '1', 227030), (True, '5', '5', 227031), (True, '6', '6', 227032), (True, '100000001341640786', '100000001341640786', 227033), (True, '100', '100', 227034), (True, '1', '1', 227035), (True, '447213596', '447213596', 227036), (True, '1000001413506279', '1000001413506279', 227037), (True, '1', '1', 227038), (True, '1414213566', '1414213566', 227039), (True, '1000000000000', '1000000000000', 227040), (True, '1', '1', 227041), (True, '3', '3', 227042), (True, '2', '2', 227043), (True, '1', '1', 227044), (True, '5', '5', 227045), (True, '10', '10', 227046), (True, '10', '10', 227047), (True, '5', '5', 227048), (True, '2', '2', 227049), (True, '10836', '10836', 227050), (True, '16808', '16808', 227051), (True, '1341640788', '1341640788', 227052), (True, '1', '1', 227053), (True, '2', '2', 227054), (True, '10', '10', 227055), (True, '10', '10', 227056), (True, '4', '4', 227057), (True, '1', '1', 227058), (True, '1414213567', '1414213567', 227059), (True, '2', '2', 227060), (True, '4', '4', 227061), (True, '1414213563', '1414213563', 227062), (True, '3', '3', 227063), (True, '707405570970015402', '707405570970015402', 227064), (True, '1', '1', 227065), (True, '6', '6', 227066), (True, '16808', '16808', 227067), (True, '1000000007', '1000000007', 227068), (True, '1', '1', 227069), (True, '1000000000000000', '1000000000000000', 227070), (True, '1414213662', '1414213662', 227071), (True, '1414213571', '1414213571', 227072), (True, '1341640957', '1341640957', 227073), (True, '1', '1', 227074), (True, '10000', '10000', 227075), (True, '1', '1', 227076), (True, '429718493274519777', '429718493274519777', 227077), (True, '2', '2', 227078), (True, '8', '8', 227079), (True, '2', '2', 227080), (True, '1414213563', '1414213563', 227081), (True, '5', '5', 227082), (True, '100000001341640785', '100000001341640785', 227083), (True, '100000000000000000', '100000000000000000', 227084), (True, '5', '5', 227085), (True, '2414213562', '2414213562', 227086), (True, '1', '1', 227087), (True, '16', '16', 227088), (True, '10', '10', 227089), (True, '3', '3', 227090), (True, '10', '10', 227091), (True, '3', '3', 227092), (True, '1414213572', '1414213572', 227093), (True, '10000000000000', '10000000000000', 227094), (True, '5', '5', 227095), (True, '5000', '5000', 227096), (True, '7', '7', 227097), (True, '501414213209', '501414213209', 227098), (True, '8', '8', 227099), (True, '1', '1', 227100), (True, '1414213577', '1414213577', 227101), (True, '1', '1', 227102), (True, '2', '2', 227103), (True, '5', '5', 227104), (True, '1', '1', 227105), (True, '500000000999999999', '500000000999999999', 227106), (True, '1', '1', 227107), (True, '108339532063750408', '108339532063750408', 227108), (True, '5', '5', 227109), (True, '2', '2', 227110), (True, '500000001000000000', '500000001000000000', 227111), (True, '20', '20', 227112), (True, '2', '2', 227113), (True, '100', '100', 227114), (True, '2', '2', 227115), (True, '100000000000000000', '100000000000000000', 227116), (True, '1537670351', '1537670351', 227117), (True, '1', '1', 227118), (True, '11414213554', '11414213554', 227119), (True, '5', '5', 227120), (True, '6', '6', 227121), (True, '100', '100', 227122), (True, '4', '4', 227123), (True, '1000000000', '1000000000', 227124), (True, '10', '10', 227125), (True, '5', '5', 227126), (True, '5', '5', 227127), (True, '200', '200', 227128), (True, '3', '3', 227129), (True, '490000001009950494', '490000001009950494', 227130), (True, '2', '2', 227131), (True, '5', '5', 227132), (True, '5', '5', 227133), (True, '10040', '10040', 227134), (True, '60000001371130920', '60000001371130920', 227135), (True, '10', '10', 227136), (True, '1', '1', 227137)]",True,Accecpted,0.7804684285594912,0.970010341261634,False,0.0,False,"def func(*args):
	
	(n, m) = args[0].split()
	n = int(n)
	m = int(m)
	l = ((n - 1) - m)
	if ((m >= n) or ((l * (l + 1)) < (2 * (n - m)))):
	    m = n
	    print(n)
	else:
	    a = (2 * (n - m))
	    u = 1
	    l = ((n - 1) - m)
	    while (u != l):
	        mid = ((u + l) // 2)
	        if ((mid * (mid + 1)) >= a):
	            if (((mid - 1) * mid) < a):
	                break
	            else:
	                l = (mid - 1)
	        elif (((mid + 1) * (mid + 2)) >= a):
	            mid += 1
	            break
	        else:
	            u = (mid + 1)
	    print((mid + m))
"
1328107,29130660,"a = list(input())
if (""H"" in a or ""Q"" in a or ""9"" in a ):
    print('YES')
else:
    print(""NO"")",16122,4520,124,8/2/17 15:58,5,1198,1,8,"[(True, 'YES', 'YES', 142021), (True, 'NO', 'NO', 142022), (True, 'NO', 'NO', 142023), (True, 'NO', 'NO', 142024), (True, 'YES', 'YES', 142025), (True, 'YES', 'YES', 142026), (True, 'YES', 'YES', 142027), (True, 'NO', 'NO', 142028), (True, 'NO', 'NO', 142029), (True, 'YES', 'YES', 142030), (True, 'YES', 'YES', 142031), (True, 'NO', 'NO', 142032), (True, 'YES', 'YES', 142033), (True, 'YES', 'YES', 142034), (True, 'YES', 'YES', 142035), (True, 'NO', 'NO', 142036), (True, 'YES', 'YES', 142037), (True, 'YES', 'YES', 142038), (True, 'YES', 'YES', 142039), (True, 'YES', 'YES', 142040), (True, 'YES', 'YES', 142041), (True, 'YES', 'YES', 142042), (True, 'NO', 'NO', 142043), (True, 'YES', 'YES', 142044), (True, 'YES', 'YES', 142045), (True, 'NO', 'NO', 142046), (True, 'YES', 'YES', 142047), (True, 'YES', 'YES', 142048), (True, 'NO', 'NO', 142049), (True, 'YES', 'YES', 142050), (True, 'YES', 'YES', 142051), (True, 'NO', 'NO', 142052), (True, 'YES', 'YES', 142053), (True, 'YES', 'YES', 142054), (True, 'YES', 'YES', 142055), (True, 'NO', 'NO', 142056), (True, 'YES', 'YES', 142057), (True, 'YES', 'YES', 142058), (True, 'YES', 'YES', 142059), (True, 'YES', 'YES', 142060), (True, 'YES', 'YES', 142061), (True, 'NO', 'NO', 142062), (True, 'YES', 'YES', 142063), (True, 'YES', 'YES', 142064), (True, 'YES', 'YES', 142065), (True, 'YES', 'YES', 142066), (True, 'YES', 'YES', 142067), (True, 'YES', 'YES', 142068), (True, 'NO', 'NO', 142069), (True, 'YES', 'YES', 142070), (True, 'YES', 'YES', 142071), (True, 'YES', 'YES', 142072), (True, 'NO', 'NO', 142073), (True, 'YES', 'YES', 142074), (True, 'YES', 'YES', 142075), (True, 'NO', 'NO', 142076), (True, 'YES', 'YES', 142077), (True, 'YES', 'YES', 142078), (True, 'YES', 'YES', 142079), (True, 'YES', 'YES', 142080), (True, 'YES', 'YES', 142081), (True, 'YES', 'YES', 142082), (True, 'YES', 'YES', 142083), (True, 'YES', 'YES', 142084), (True, 'NO', 'NO', 142085), (True, 'NO', 'NO', 142086), (True, 'NO', 'NO', 142087), (True, 'YES', 'YES', 142088), (True, 'YES', 'YES', 142089), (True, 'NO', 'NO', 142090), (True, 'NO', 'NO', 142091), (True, 'NO', 'NO', 142092), (True, 'NO', 'NO', 142093), (True, 'YES', 'YES', 142094), (True, 'NO', 'NO', 142095), (True, 'NO', 'NO', 142096), (True, 'NO', 'NO', 142097), (True, 'NO', 'NO', 142098), (True, 'NO', 'NO', 142099), (True, 'YES', 'YES', 142100), (True, 'YES', 'YES', 142101), (True, 'NO', 'NO', 142102), (True, 'YES', 'YES', 142103), (True, 'YES', 'YES', 142104), (True, 'NO', 'NO', 142105)]",True,Accecpted,0.840435017870011,0.97,False,0.0,False,"def func(*args):
	
	a = list(args[0])
	if (('H' in a) or ('Q' in a) or ('9' in a)):
	    print('YES')
	else:
	    print('NO')
"
1246663,27615865,"ll=[]
for x in range(3,1001):
    l = list(str(x))
    if len(l) == l.count('4')+l.count('7'):
        ll.append(x)
tmp = int(input())
t=0
for i in ll:
    if tmp%i==0:
        print(""YES"")
        t=1
        break
if t==0:
    print(""NO"")",23085,16,124,6/6/17 17:13,14,1132,1,8,"[(True, 'YES', 'YES', 137749), (True, 'YES', 'YES', 137750), (True, 'NO', 'NO', 137751), (True, 'YES', 'YES', 137752), (True, 'YES', 'YES', 137753), (True, 'NO', 'NO', 137754), (True, 'YES', 'YES', 137755), (True, 'YES', 'YES', 137756), (True, 'YES', 'YES', 137757), (True, 'NO', 'NO', 137758), (True, 'NO', 'NO', 137759), (True, 'YES', 'YES', 137760), (True, 'YES', 'YES', 137761), (True, 'YES', 'YES', 137762), (True, 'YES', 'YES', 137763), (True, 'YES', 'YES', 137764), (True, 'NO', 'NO', 137765), (True, 'NO', 'NO', 137766), (True, 'NO', 'NO', 137767), (True, 'NO', 'NO', 137768), (True, 'YES', 'YES', 137769), (True, 'YES', 'YES', 137770), (True, 'YES', 'YES', 137771), (True, 'YES', 'YES', 137772), (True, 'YES', 'YES', 137773), (True, 'YES', 'YES', 137774), (True, 'NO', 'NO', 137775), (True, 'YES', 'YES', 137776), (True, 'YES', 'YES', 137777), (True, 'NO', 'NO', 137778), (True, 'NO', 'NO', 137779), (True, 'YES', 'YES', 137780), (True, 'YES', 'YES', 137781), (True, 'YES', 'YES', 137782), (True, 'YES', 'YES', 137783), (True, 'YES', 'YES', 137784)]",True,Accecpted,0.9074485692010054,0.9699570815450644,False,0.0,False,"def func(*args):
	
	ll = []
	for x in range(3, 1001):
	    l = list(str(x))
	    if (len(l) == (l.count('4') + l.count('7'))):
	        ll.append(x)
	tmp = int(args[0])
	t = 0
	for i in ll:
	    if ((tmp % i) == 0):
	        print('YES')
	        t = 1
	        break
	if (t == 0):
	    print('NO')
"
1246662,27615853,"ll=[]
for x in range(3,1001):
    l = list(str(x))
    if len(l) == l.count('4')+l.count('7'):
        ll.append(x)
tmp = int(input())
t=0
for i in ll:
    if tmp%i==0:
        print(""YES"")
        t=1
if t==0:
    print(""NO"")",23085,0,124,6/6/17 17:12,13,1132,2,8,"[(True, 'YES', 'YES', 137749), (True, 'YES', 'YES', 137750), (True, 'NO', 'NO', 137751), (True, 'YES', 'YES', 137752), (True, 'YES', 'YES', 137753), (True, 'NO', 'NO', 137754), (False, 'YES\nYES', 'YES', 137755), (True, 'YES', 'YES', 137756), (True, 'YES', 'YES', 137757), (True, 'NO', 'NO', 137758), (True, 'NO', 'NO', 137759), (True, 'YES', 'YES', 137760), (True, 'YES', 'YES', 137761), (False, 'YES\nYES', 'YES', 137762), (True, 'YES', 'YES', 137763), (True, 'YES', 'YES', 137764), (True, 'NO', 'NO', 137765), (True, 'NO', 'NO', 137766), (True, 'NO', 'NO', 137767), (True, 'NO', 'NO', 137768), (True, 'YES', 'YES', 137769), (True, 'YES', 'YES', 137770), (True, 'YES', 'YES', 137771), (False, 'YES\nYES\nYES', 'YES', 137772), (False, 'YES\nYES', 'YES', 137773), (True, 'YES', 'YES', 137774), (True, 'NO', 'NO', 137775), (True, 'YES', 'YES', 137776), (False, 'YES\nYES', 'YES', 137777), (True, 'NO', 'NO', 137778), (True, 'NO', 'NO', 137779), (True, 'YES', 'YES', 137780), (True, 'YES', 'YES', 137781), (True, 'YES', 'YES', 137782), (True, 'YES', 'YES', 137783), (True, 'YES', 'YES', 137784)]",False,Wrong Answer,0.9074485692010054,0.9699570815450644,False,0.1388888888888889,False,"def func(*args):
	
	ll = []
	for x in range(3, 1001):
	    l = list(str(x))
	    if (len(l) == (l.count('4') + l.count('7'))):
	        ll.append(x)
	tmp = int(args[0])
	t = 0
	for i in ll:
	    if ((tmp % i) == 0):
	        print('YES')
	        t = 1
	if (t == 0):
	    print('NO')
"
2721404,28587438,"import re

s = input()

success = re.search(r'h.+e.+l.+l.+o', s)

if success is None:
    print('NO')
else:
    print('YES')",25311,4940,62,7/16/17 8:15,10,2335,2,8,"[(True, 'YES', 'YES', 208922), (True, 'NO', 'NO', 208923), (False, 'NO', 'YES', 208924), (False, 'NO', 'YES', 208925), (False, 'NO', 'YES', 208926), (True, 'NO', 'NO', 208927), (True, 'NO', 'NO', 208928), (True, 'YES', 'YES', 208929), (True, 'YES', 'YES', 208930), (True, 'YES', 'YES', 208931), (True, 'YES', 'YES', 208932), (True, 'NO', 'NO', 208933), (True, 'YES', 'YES', 208934), (False, 'NO', 'YES', 208935), (True, 'NO', 'NO', 208936), (True, 'YES', 'YES', 208937), (True, 'YES', 'YES', 208938), (True, 'NO', 'NO', 208939), (True, 'NO', 'NO', 208940), (True, 'YES', 'YES', 208941), (True, 'YES', 'YES', 208942), (True, 'NO', 'NO', 208943), (True, 'YES', 'YES', 208944), (True, 'YES', 'YES', 208945), (True, 'YES', 'YES', 208946), (True, 'YES', 'YES', 208947), (True, 'YES', 'YES', 208948), (True, 'YES', 'YES', 208949), (True, 'YES', 'YES', 208950), (True, 'YES', 'YES', 208951), (True, 'NO', 'NO', 208952), (True, 'NO', 'NO', 208953), (True, 'NO', 'NO', 208954), (True, 'YES', 'YES', 208955), (True, 'NO', 'NO', 208956), (False, 'NO', 'YES', 208957), (True, 'NO', 'NO', 208958), (True, 'NO', 'NO', 208959), (True, 'NO', 'NO', 208960), (False, 'NO', 'YES', 208961)]",False,Wrong Answer,0.8153551038173115,0.9699248120300752,False,0.15,False,"def func(*args):
	
	import re
	s = args[0]
	success = re.search('h.+e.+l.+l.+o', s)
	if (success is None):
	    print('NO')
	else:
	    print('YES')
"
2721405,28587482,"import re

s = input()

success = re.search(r'h.*e.*l.*l.*o', s)

if success is None:
    print('NO')
else:
    print('YES')",25311,5860,77,7/16/17 8:18,10,2335,1,8,"[(True, 'YES', 'YES', 208922), (True, 'NO', 'NO', 208923), (True, 'YES', 'YES', 208924), (True, 'YES', 'YES', 208925), (True, 'YES', 'YES', 208926), (True, 'NO', 'NO', 208927), (True, 'NO', 'NO', 208928), (True, 'YES', 'YES', 208929), (True, 'YES', 'YES', 208930), (True, 'YES', 'YES', 208931), (True, 'YES', 'YES', 208932), (True, 'NO', 'NO', 208933), (True, 'YES', 'YES', 208934), (True, 'YES', 'YES', 208935), (True, 'NO', 'NO', 208936), (True, 'YES', 'YES', 208937), (True, 'YES', 'YES', 208938), (True, 'NO', 'NO', 208939), (True, 'NO', 'NO', 208940), (True, 'YES', 'YES', 208941), (True, 'YES', 'YES', 208942), (True, 'NO', 'NO', 208943), (True, 'YES', 'YES', 208944), (True, 'YES', 'YES', 208945), (True, 'YES', 'YES', 208946), (True, 'YES', 'YES', 208947), (True, 'YES', 'YES', 208948), (True, 'YES', 'YES', 208949), (True, 'YES', 'YES', 208950), (True, 'YES', 'YES', 208951), (True, 'NO', 'NO', 208952), (True, 'NO', 'NO', 208953), (True, 'NO', 'NO', 208954), (True, 'YES', 'YES', 208955), (True, 'NO', 'NO', 208956), (True, 'YES', 'YES', 208957), (True, 'NO', 'NO', 208958), (True, 'NO', 'NO', 208959), (True, 'NO', 'NO', 208960), (True, 'YES', 'YES', 208961)]",True,Accecpted,0.8153551038173115,0.9699248120300752,False,0.0,False,"def func(*args):
	
	import re
	s = args[0]
	success = re.search('h.*e.*l.*l.*o', s)
	if (success is None):
	    print('NO')
	else:
	    print('YES')
"
1922535,23575879,"a=int(input())
l=[]
i=1
while i<=a: 
    l.append(str(i))
    i+=1
i=a-1
while i>0: 
    l[i],l[i-1]=l[i-1],l[i]
    i-=1
print("" "".join(l))",22247,4528,154,1/6/17 6:36,11,1721,1,8,"[(True, '1', '1', 171769), (True, '2 1', '2 1', 171770), (True, '3 1 2', '3 1 2', 171771), (True, '4 1 2 3', '4 1 2 3', 171772), (True, '5 1 2 3 4', '5 1 2 3 4', 171773), (True, '6 1 2 3 4 5', '6 1 2 3 4 5', 171774), (True, '7 1 2 3 4 5 6', '7 1 2 3 4 5 6', 171775), (True, '101 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100', '101 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100', 171781), (True, '3 1 2', '3 1 2', 171782), (True, '67 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66', '67 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66', 171783), (True, '99 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98', '99 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98', 171789), (True, '3 1 2', '3 1 2', 171793), (True, '21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20', '21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20', 171798), (True, '22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21', '22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21', 171799), (True, '23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22', '23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22', 171800), (True, '24 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23', '24 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23', 171801), (True, '25 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24', '25 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24', 171802)]",True,Accecpted,0.5031747626530138,0.9698996655518396,False,0.0,False,"def func(*args):
	
	a = int(args[0])
	l = []
	i = 1
	while (i <= a):
	    l.append(str(i))
	    i += 1
	i = (a - 1)
	while (i > 0):
	    (l[i], l[(i - 1)]) = (l[(i - 1)], l[i])
	    i -= 1
	print(' '.join(l))
"
1158090,27361761,"n=input()
b=0
o=0
c=0
l=[int(d) for d in str(n)]
p=len(l)
for i in range(0,p):
    if l[i]==4 or l[i]==7:
        b=b+1
b=str(b)
l1=[int(f) for f in str(b)]
p1=len(l1)
for i in range(0,p1):
    if l[i]==4 or l[i]==7:
        c=c+1
if c==p1:
    print(""YES"")
else:
    print(""NO"")",1406,0,62,5/26/17 21:18,19,1062,2,8,"[(False, 'YES', 'NO', 131260), (True, 'YES', 'YES', 131261), (True, 'NO', 'NO', 131262), (False, 'YES', 'NO', 131263), (False, 'YES', 'NO', 131264), (False, 'YES', 'NO', 131265), (True, 'YES', 'YES', 131266), (False, 'NO', 'YES', 131267), (True, 'YES', 'YES', 131268), (True, 'NO', 'NO', 131269), (True, 'YES', 'YES', 131270), (True, 'NO', 'NO', 131271), (False, 'NO', 'YES', 131272), (True, 'NO', 'NO', 131273), (False, 'YES', 'NO', 131274), (True, 'NO', 'NO', 131275), (False, 'YES', 'NO', 131276), (False, 'YES', 'NO', 131277), (False, 'YES', 'NO', 131278), (True, 'NO', 'NO', 131279), (True, 'NO', 'NO', 131280), (True, 'NO', 'NO', 131281), (False, 'NO', 'YES', 131282), (True, 'YES', 'YES', 131283), (False, 'NO', 'YES', 131284), (False, 'YES', 'NO', 131285), (True, 'YES', 'YES', 131286), (True, 'YES', 'YES', 131287), (False, 'NO', 'YES', 131288), (True, 'NO', 'NO', 131289), (False, 'YES', 'NO', 131290), (True, 'YES', 'YES', 131291), (True, 'YES', 'YES', 131292), (False, 'YES', 'NO', 131293)]",False,Wrong Answer,0.7725259537730556,0.9697986577181208,False,0.4705882352941176,False,"def func(*args):
	
	n = args[0]
	b = 0
	o = 0
	c = 0
	l = [int(d) for d in str(n)]
	p = len(l)
	for i in range(0, p):
	    if ((l[i] == 4) or (l[i] == 7)):
	        b = (b + 1)
	b = str(b)
	l1 = [int(f) for f in str(b)]
	p1 = len(l1)
	for i in range(0, p1):
	    if ((l[i] == 4) or (l[i] == 7)):
	        c = (c + 1)
	if (c == p1):
	    print('YES')
	else:
	    print('NO')
"
1158091,27361823,"n=input()
b=0
o=0
c=0
l=[int(d) for d in str(n)]
p=len(l)
for i in range(0,p):
    if l[i]==4 or l[i]==7:
        b=b+1
b=str(b)
l1=[int(d) for d in str(b)]
p1=len(l1)
for i in range(0,p1):
    if l1[i]==4 or l1[i]==7:
        c=c+1
if c==p1:
    print(""YES"")
else:
    print(""NO"")",1406,0,124,5/26/17 21:22,19,1062,1,8,"[(True, 'NO', 'NO', 131260), (True, 'YES', 'YES', 131261), (True, 'NO', 'NO', 131262), (True, 'NO', 'NO', 131263), (True, 'NO', 'NO', 131264), (True, 'NO', 'NO', 131265), (True, 'YES', 'YES', 131266), (True, 'YES', 'YES', 131267), (True, 'YES', 'YES', 131268), (True, 'NO', 'NO', 131269), (True, 'YES', 'YES', 131270), (True, 'NO', 'NO', 131271), (True, 'YES', 'YES', 131272), (True, 'NO', 'NO', 131273), (True, 'NO', 'NO', 131274), (True, 'NO', 'NO', 131275), (True, 'NO', 'NO', 131276), (True, 'NO', 'NO', 131277), (True, 'NO', 'NO', 131278), (True, 'NO', 'NO', 131279), (True, 'NO', 'NO', 131280), (True, 'NO', 'NO', 131281), (True, 'YES', 'YES', 131282), (True, 'YES', 'YES', 131283), (True, 'YES', 'YES', 131284), (True, 'NO', 'NO', 131285), (True, 'YES', 'YES', 131286), (True, 'YES', 'YES', 131287), (True, 'YES', 'YES', 131288), (True, 'NO', 'NO', 131289), (True, 'NO', 'NO', 131290), (True, 'YES', 'YES', 131291), (True, 'YES', 'YES', 131292), (True, 'NO', 'NO', 131293)]",True,Accecpted,0.7725259537730556,0.9697986577181208,False,0.0,False,"def func(*args):
	
	n = args[0]
	b = 0
	o = 0
	c = 0
	l = [int(d) for d in str(n)]
	p = len(l)
	for i in range(0, p):
	    if ((l[i] == 4) or (l[i] == 7)):
	        b = (b + 1)
	b = str(b)
	l1 = [int(d) for d in str(b)]
	p1 = len(l1)
	for i in range(0, p1):
	    if ((l1[i] == 4) or (l1[i] == 7)):
	        c = (c + 1)
	if (c == p1):
	    print('YES')
	else:
	    print('NO')
"
2880527,21060442,"import sys


def left_tile(tile):
    return tile[0] - 1, tile[1]


def right_tile(tile):
    return tile[0] + 1, tile[1]


def upper_tile(tile):
    return tile[0], tile[1] + 1


def lower_tile(tile):
    return tile[0], tile[1] - 1


def nearby_tiles(tile, move):
    if move == 'L':
        return {upper_tile(tile), lower_tile, right_tile(tile)}
    elif move == 'R':
        return {upper_tile(tile), lower_tile, left_tile(tile)}
    elif move == 'U':
        return {left_tile(tile), lower_tile, right_tile(tile)}
    else:
        return {left_tile(tile), upper_tile, right_tile(tile)}


def is_shortest_path(robot_path, change_position):
    reached_tiles = set()
    position = (0, 0)
    reached_tiles.update(position)
    for move in robot_path:
        reached_tiles.update(nearby_tiles(position, move))
        position = change_position[move](position)
        if position in reached_tiles:
            return False
    return True


def main(sinp=sys.stdin, sout=sys.stdout):
    robot_path = sinp.readline().strip()
    change_position = {
        'L': left_tile,
        'R': right_tile,
        'U': upper_tile,
        'D': lower_tile,
    }
    result = 'OK' if is_shortest_path(robot_path, change_position) else 'BUG'
    sout.write(result)

if __name__ == '__main__':
    main()",92943,344,154,10/1/16 11:01,55,2466,2,8,"[(True, 'OK', 'OK', 215591), (True, 'BUG', 'BUG', 215592), (True, 'OK', 'OK', 215593), (True, 'OK', 'OK', 215594), (True, 'OK', 'OK', 215595), (True, 'OK', 'OK', 215596), (True, 'OK', 'OK', 215597), (True, 'OK', 'OK', 215598), (True, 'BUG', 'BUG', 215599), (True, 'BUG', 'BUG', 215600), (True, 'OK', 'OK', 215601), (True, 'OK', 'OK', 215602), (False, 'OK', 'BUG', 215603), (False, 'OK', 'BUG', 215604), (True, 'BUG', 'BUG', 215605), (True, 'BUG', 'BUG', 215606), (True, 'OK', 'OK', 215607), (True, 'BUG', 'BUG', 215608), (False, 'OK', 'BUG', 215609), (True, 'BUG', 'BUG', 215610), (True, 'OK', 'OK', 215611), (True, 'OK', 'OK', 215612), (True, 'BUG', 'BUG', 215613), (True, 'OK', 'OK', 215614), (True, 'OK', 'OK', 215615), (True, 'OK', 'OK', 215616), (True, 'OK', 'OK', 215617), (True, 'OK', 'OK', 215618), (True, 'OK', 'OK', 215619), (True, 'OK', 'OK', 215620), (True, 'BUG', 'BUG', 215621), (True, 'OK', 'OK', 215622), (False, 'OK', 'BUG', 215623), (True, 'OK', 'OK', 215624), (True, 'BUG', 'BUG', 215625), (True, 'OK', 'OK', 215626), (True, 'OK', 'OK', 215627), (True, 'BUG', 'BUG', 215628), (True, 'BUG', 'BUG', 215629), (True, 'BUG', 'BUG', 215630), (True, 'BUG', 'BUG', 215631), (False, 'OK', 'BUG', 215632), (True, 'BUG', 'BUG', 215633), (True, 'BUG', 'BUG', 215634), (True, 'BUG', 'BUG', 215635), (True, 'BUG', 'BUG', 215636), (True, 'BUG', 'BUG', 215637), (True, 'BUG', 'BUG', 215638), (True, 'BUG', 'BUG', 215639), (True, 'BUG', 'BUG', 215640), (False, 'OK', 'BUG', 215641), (True, 'BUG', 'BUG', 215642), (True, 'BUG', 'BUG', 215643), (False, 'OK', 'BUG', 215644), (False, 'OK', 'BUG', 215645), (False, 'OK', 'BUG', 215646), (False, 'OK', 'BUG', 215647), (True, 'BUG', 'BUG', 215648), (False, 'OK', 'BUG', 215649), (True, 'BUG', 'BUG', 215650)]",False,Wrong Answer,0.8742660384759772,0.9697406340057636,False,0.1833333333333333,False,"def func(*args):
	
	import sys
	
	def left_tile(tile):
	    return ((tile[0] - 1), tile[1])
	
	def right_tile(tile):
	    return ((tile[0] + 1), tile[1])
	
	def upper_tile(tile):
	    return (tile[0], (tile[1] + 1))
	
	def lower_tile(tile):
	    return (tile[0], (tile[1] - 1))
	
	def nearby_tiles(tile, move):
	    if (move == 'L'):
	        return {upper_tile(tile), lower_tile, right_tile(tile)}
	    elif (move == 'R'):
	        return {upper_tile(tile), lower_tile, left_tile(tile)}
	    elif (move == 'U'):
	        return {left_tile(tile), lower_tile, right_tile(tile)}
	    else:
	        return {left_tile(tile), upper_tile, right_tile(tile)}
	
	def is_shortest_path(robot_path, change_position):
	    reached_tiles = set()
	    position = (0, 0)
	    reached_tiles.update(position)
	    for move in robot_path:
	        reached_tiles.update(nearby_tiles(position, move))
	        position = change_position[move](position)
	        if (position in reached_tiles):
	            return False
	    return True
	
	def main(sinp=sys.stdin, sout=sys.stdout):
	    robot_path = sinp.readline().strip()
	    change_position = {'L': left_tile, 'R': right_tile, 'U': upper_tile, 'D': lower_tile}
	    result = ('OK' if is_shortest_path(robot_path, change_position) else 'BUG')
	    sout.write(result)
	if (__name__ == '__main__'):
	    main()
"
2880528,21061075,"import sys


def left_tile(tile):
    return tile[0] - 1, tile[1]


def right_tile(tile):
    return tile[0] + 1, tile[1]


def upper_tile(tile):
    return tile[0], tile[1] + 1


def lower_tile(tile):
    return tile[0], tile[1] - 1


def nearby_tiles(tile, move):
    if move == 'L':
        return {upper_tile(tile), lower_tile(tile), right_tile(tile)}
    elif move == 'R':
        return {upper_tile(tile), lower_tile(tile), left_tile(tile)}
    elif move == 'U':
        return {left_tile(tile), lower_tile(tile), right_tile(tile)}
    else:
        return {left_tile(tile), upper_tile(tile), right_tile(tile)}


def is_shortest_path(robot_path, change_position):
    reached_tiles = set()
    position = (0, 0)
    reached_tiles.update([position])
    for move in robot_path:
        reached_tiles.update(nearby_tiles(position, move))
        position = change_position[move](position)
        if position in reached_tiles:
            return False
        reached_tiles.update([position])
    return True


def main(sinp=sys.stdin, sout=sys.stdout):
    robot_path = sinp.readline().strip()
    change_position = {
        'L': left_tile,
        'R': right_tile,
        'U': upper_tile,
        'D': lower_tile,
    }
    result = 'OK' if is_shortest_path(robot_path, change_position) else 'BUG'
    sout.write(result)

if __name__ == '__main__':
    main()",92943,280,154,10/1/16 11:24,56,2466,1,8,"[(True, 'OK', 'OK', 215591), (True, 'BUG', 'BUG', 215592), (True, 'OK', 'OK', 215593), (True, 'OK', 'OK', 215594), (True, 'OK', 'OK', 215595), (True, 'OK', 'OK', 215596), (True, 'OK', 'OK', 215597), (True, 'OK', 'OK', 215598), (True, 'BUG', 'BUG', 215599), (True, 'BUG', 'BUG', 215600), (True, 'OK', 'OK', 215601), (True, 'OK', 'OK', 215602), (True, 'BUG', 'BUG', 215603), (True, 'BUG', 'BUG', 215604), (True, 'BUG', 'BUG', 215605), (True, 'BUG', 'BUG', 215606), (True, 'OK', 'OK', 215607), (True, 'BUG', 'BUG', 215608), (True, 'BUG', 'BUG', 215609), (True, 'BUG', 'BUG', 215610), (True, 'OK', 'OK', 215611), (True, 'OK', 'OK', 215612), (True, 'BUG', 'BUG', 215613), (True, 'OK', 'OK', 215614), (True, 'OK', 'OK', 215615), (True, 'OK', 'OK', 215616), (True, 'OK', 'OK', 215617), (True, 'OK', 'OK', 215618), (True, 'OK', 'OK', 215619), (True, 'OK', 'OK', 215620), (True, 'BUG', 'BUG', 215621), (True, 'OK', 'OK', 215622), (True, 'BUG', 'BUG', 215623), (True, 'OK', 'OK', 215624), (True, 'BUG', 'BUG', 215625), (True, 'OK', 'OK', 215626), (True, 'OK', 'OK', 215627), (True, 'BUG', 'BUG', 215628), (True, 'BUG', 'BUG', 215629), (True, 'BUG', 'BUG', 215630), (True, 'BUG', 'BUG', 215631), (True, 'BUG', 'BUG', 215632), (True, 'BUG', 'BUG', 215633), (True, 'BUG', 'BUG', 215634), (True, 'BUG', 'BUG', 215635), (True, 'BUG', 'BUG', 215636), (True, 'BUG', 'BUG', 215637), (True, 'BUG', 'BUG', 215638), (True, 'BUG', 'BUG', 215639), (True, 'BUG', 'BUG', 215640), (True, 'BUG', 'BUG', 215641), (True, 'BUG', 'BUG', 215642), (True, 'BUG', 'BUG', 215643), (True, 'BUG', 'BUG', 215644), (True, 'BUG', 'BUG', 215645), (True, 'BUG', 'BUG', 215646), (True, 'BUG', 'BUG', 215647), (True, 'BUG', 'BUG', 215648), (True, 'BUG', 'BUG', 215649), (True, 'BUG', 'BUG', 215650)]",True,Accecpted,0.8742660384759772,0.9697406340057636,False,0.0,False,"def func(*args):
	
	import sys
	
	def left_tile(tile):
	    return ((tile[0] - 1), tile[1])
	
	def right_tile(tile):
	    return ((tile[0] + 1), tile[1])
	
	def upper_tile(tile):
	    return (tile[0], (tile[1] + 1))
	
	def lower_tile(tile):
	    return (tile[0], (tile[1] - 1))
	
	def nearby_tiles(tile, move):
	    if (move == 'L'):
	        return {upper_tile(tile), lower_tile(tile), right_tile(tile)}
	    elif (move == 'R'):
	        return {upper_tile(tile), lower_tile(tile), left_tile(tile)}
	    elif (move == 'U'):
	        return {left_tile(tile), lower_tile(tile), right_tile(tile)}
	    else:
	        return {left_tile(tile), upper_tile(tile), right_tile(tile)}
	
	def is_shortest_path(robot_path, change_position):
	    reached_tiles = set()
	    position = (0, 0)
	    reached_tiles.update([position])
	    for move in robot_path:
	        reached_tiles.update(nearby_tiles(position, move))
	        position = change_position[move](position)
	        if (position in reached_tiles):
	            return False
	        reached_tiles.update([position])
	    return True
	
	def main(sinp=sys.stdin, sout=sys.stdout):
	    robot_path = sinp.readline().strip()
	    change_position = {'L': left_tile, 'R': right_tile, 'U': upper_tile, 'D': lower_tile}
	    result = ('OK' if is_shortest_path(robot_path, change_position) else 'BUG')
	    sout.write(result)
	if (__name__ == '__main__'):
	    main()
"
